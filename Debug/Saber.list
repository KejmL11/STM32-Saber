
Saber.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a908  0800018c  0800018c  0000118c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000520  0800aa94  0800aa94  0000ba94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800afb4  0800afb4  0000c068  2**0
                  CONTENTS
  4 .ARM          00000000  0800afb4  0800afb4  0000c068  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800afb4  0800afb4  0000c068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800afb4  0800afb4  0000bfb4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800afb8  0800afb8  0000bfb8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  0800afbc  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001094  20000068  0800b024  0000c068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200010fc  0800b024  0000c0fc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000c068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001904a  00000000  00000000  0000c098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003a39  00000000  00000000  000250e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001920  00000000  00000000  00028b20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000137a  00000000  00000000  0002a440  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024076  00000000  00000000  0002b7ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000201a7  00000000  00000000  0004f830  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d9aff  00000000  00000000  0006f9d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001494d6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007008  00000000  00000000  0014951c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000044  00000000  00000000  00150524  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	@ (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	20000068 	.word	0x20000068
 80001a8:	00000000 	.word	0x00000000
 80001ac:	0800aa7c 	.word	0x0800aa7c

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	@ (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	@ (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	@ (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	2000006c 	.word	0x2000006c
 80001c8:	0800aa7c 	.word	0x0800aa7c

080001cc <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80001cc:	b480      	push	{r7}
 80001ce:	b083      	sub	sp, #12
 80001d0:	af00      	add	r7, sp, #0
 80001d2:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80001d4:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80001d8:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 80001dc:	f003 0301 	and.w	r3, r3, #1
 80001e0:	2b00      	cmp	r3, #0
 80001e2:	d013      	beq.n	800020c <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80001e4:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80001e8:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 80001ec:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80001f0:	2b00      	cmp	r3, #0
 80001f2:	d00b      	beq.n	800020c <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80001f4:	e000      	b.n	80001f8 <ITM_SendChar+0x2c>
    {
      __NOP();
 80001f6:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80001f8:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80001fc:	681b      	ldr	r3, [r3, #0]
 80001fe:	2b00      	cmp	r3, #0
 8000200:	d0f9      	beq.n	80001f6 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000202:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000206:	687a      	ldr	r2, [r7, #4]
 8000208:	b2d2      	uxtb	r2, r2
 800020a:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 800020c:	687b      	ldr	r3, [r7, #4]
}
 800020e:	4618      	mov	r0, r3
 8000210:	370c      	adds	r7, #12
 8000212:	46bd      	mov	sp, r7
 8000214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000218:	4770      	bx	lr

0800021a <_write>:
MAXRESULT SDInit(char* fileName);
void StartAudioPlayback(void);
//static void platform_delay(uint32_t ms);

int _write(int file, char *ptr, int len)
{
 800021a:	b580      	push	{r7, lr}
 800021c:	b086      	sub	sp, #24
 800021e:	af00      	add	r7, sp, #0
 8000220:	60f8      	str	r0, [r7, #12]
 8000222:	60b9      	str	r1, [r7, #8]
 8000224:	607a      	str	r2, [r7, #4]
	int i=0;
 8000226:	2300      	movs	r3, #0
 8000228:	617b      	str	r3, [r7, #20]
	for(i=0; i<len; i++)
 800022a:	2300      	movs	r3, #0
 800022c:	617b      	str	r3, [r7, #20]
 800022e:	e009      	b.n	8000244 <_write+0x2a>
		ITM_SendChar((*ptr++));
 8000230:	68bb      	ldr	r3, [r7, #8]
 8000232:	1c5a      	adds	r2, r3, #1
 8000234:	60ba      	str	r2, [r7, #8]
 8000236:	781b      	ldrb	r3, [r3, #0]
 8000238:	4618      	mov	r0, r3
 800023a:	f7ff ffc7 	bl	80001cc <ITM_SendChar>
	for(i=0; i<len; i++)
 800023e:	697b      	ldr	r3, [r7, #20]
 8000240:	3301      	adds	r3, #1
 8000242:	617b      	str	r3, [r7, #20]
 8000244:	697a      	ldr	r2, [r7, #20]
 8000246:	687b      	ldr	r3, [r7, #4]
 8000248:	429a      	cmp	r2, r3
 800024a:	dbf1      	blt.n	8000230 <_write+0x16>
	return len;
 800024c:	687b      	ldr	r3, [r7, #4]
}
 800024e:	4618      	mov	r0, r3
 8000250:	3718      	adds	r7, #24
 8000252:	46bd      	mov	sp, r7
 8000254:	bd80      	pop	{r7, pc}
	...

08000258 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000258:	b580      	push	{r7, lr}
 800025a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800025c:	f000 feeb 	bl	8001036 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000260:	f000 f83a 	bl	80002d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000264:	f000 f9f0 	bl	8000648 <MX_GPIO_Init>
  MX_DMA_Init();
 8000268:	f000 f9c8 	bl	80005fc <MX_DMA_Init>
  MX_I2C2_Init();
 800026c:	f000 f884 	bl	8000378 <MX_I2C2_Init>
  MX_SAI1_Init();
 8000270:	f000 f8c2 	bl	80003f8 <MX_SAI1_Init>
  MX_SDMMC1_SD_Init();
 8000274:	f000 f8f6 	bl	8000464 <MX_SDMMC1_SD_Init>
  MX_TIM1_Init();
 8000278:	f000 f914 	bl	80004a4 <MX_TIM1_Init>
  MX_FATFS_Init();
 800027c:	f006 fdd4 	bl	8006e28 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
  StartAudioPlayback();
 8000280:	f000 fb18 	bl	80008b4 <StartAudioPlayback>
	      }

#endif

	      //printf("Looping\n\r");
	      if (fillBuffer)
 8000284:	4b0f      	ldr	r3, [pc, #60]	@ (80002c4 <main+0x6c>)
 8000286:	781b      	ldrb	r3, [r3, #0]
 8000288:	2b00      	cmp	r3, #0
 800028a:	d0fb      	beq.n	8000284 <main+0x2c>
	      {
	    	currentBuffer = 1 - currentBuffer;  // Toggle between 0 and 1
 800028c:	4b0e      	ldr	r3, [pc, #56]	@ (80002c8 <main+0x70>)
 800028e:	781b      	ldrb	r3, [r3, #0]
 8000290:	f1c3 0301 	rsb	r3, r3, #1
 8000294:	b2da      	uxtb	r2, r3
 8000296:	4b0c      	ldr	r3, [pc, #48]	@ (80002c8 <main+0x70>)
 8000298:	701a      	strb	r2, [r3, #0]
			if (currentBuffer == 0)
 800029a:	4b0b      	ldr	r3, [pc, #44]	@ (80002c8 <main+0x70>)
 800029c:	781b      	ldrb	r3, [r3, #0]
 800029e:	2b00      	cmp	r3, #0
 80002a0:	d106      	bne.n	80002b0 <main+0x58>
				{
					FillBuffer(&audioFile, bufferA, BUFFER_SIZE);
 80002a2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80002a6:	4909      	ldr	r1, [pc, #36]	@ (80002cc <main+0x74>)
 80002a8:	4809      	ldr	r0, [pc, #36]	@ (80002d0 <main+0x78>)
 80002aa:	f000 fa4b 	bl	8000744 <FillBuffer>
 80002ae:	e005      	b.n	80002bc <main+0x64>
				}
				else
				{
					FillBuffer(&audioFile, bufferB, BUFFER_SIZE);
 80002b0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80002b4:	4907      	ldr	r1, [pc, #28]	@ (80002d4 <main+0x7c>)
 80002b6:	4806      	ldr	r0, [pc, #24]	@ (80002d0 <main+0x78>)
 80002b8:	f000 fa44 	bl	8000744 <FillBuffer>
				}
			fillBuffer = 0;
 80002bc:	4b01      	ldr	r3, [pc, #4]	@ (80002c4 <main+0x6c>)
 80002be:	2200      	movs	r2, #0
 80002c0:	701a      	strb	r2, [r3, #0]
	      if (fillBuffer)
 80002c2:	e7df      	b.n	8000284 <main+0x2c>
 80002c4:	20000f4d 	.word	0x20000f4d
 80002c8:	20000f4c 	.word	0x20000f4c
 80002cc:	2000074c 	.word	0x2000074c
 80002d0:	200004f0 	.word	0x200004f0
 80002d4:	20000b4c 	.word	0x20000b4c

080002d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002d8:	b580      	push	{r7, lr}
 80002da:	b096      	sub	sp, #88	@ 0x58
 80002dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002de:	f107 0314 	add.w	r3, r7, #20
 80002e2:	2244      	movs	r2, #68	@ 0x44
 80002e4:	2100      	movs	r1, #0
 80002e6:	4618      	mov	r0, r3
 80002e8:	f00a f914 	bl	800a514 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002ec:	463b      	mov	r3, r7
 80002ee:	2200      	movs	r2, #0
 80002f0:	601a      	str	r2, [r3, #0]
 80002f2:	605a      	str	r2, [r3, #4]
 80002f4:	609a      	str	r2, [r3, #8]
 80002f6:	60da      	str	r2, [r3, #12]
 80002f8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80002fa:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80002fe:	f001 fda5 	bl	8001e4c <HAL_PWREx_ControlVoltageScaling>
 8000302:	4603      	mov	r3, r0
 8000304:	2b00      	cmp	r3, #0
 8000306:	d001      	beq.n	800030c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000308:	f000 fb26 	bl	8000958 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800030c:	2301      	movs	r3, #1
 800030e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000310:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000314:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000316:	2302      	movs	r3, #2
 8000318:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800031a:	2303      	movs	r3, #3
 800031c:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800031e:	2301      	movs	r3, #1
 8000320:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 20;
 8000322:	2314      	movs	r3, #20
 8000324:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000326:	2307      	movs	r3, #7
 8000328:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV8;
 800032a:	2308      	movs	r3, #8
 800032c:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800032e:	2302      	movs	r3, #2
 8000330:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000332:	f107 0314 	add.w	r3, r7, #20
 8000336:	4618      	mov	r0, r3
 8000338:	f001 fdde 	bl	8001ef8 <HAL_RCC_OscConfig>
 800033c:	4603      	mov	r3, r0
 800033e:	2b00      	cmp	r3, #0
 8000340:	d001      	beq.n	8000346 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000342:	f000 fb09 	bl	8000958 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000346:	230f      	movs	r3, #15
 8000348:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800034a:	2303      	movs	r3, #3
 800034c:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800034e:	2300      	movs	r3, #0
 8000350:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000352:	2300      	movs	r3, #0
 8000354:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000356:	2300      	movs	r3, #0
 8000358:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800035a:	463b      	mov	r3, r7
 800035c:	2104      	movs	r1, #4
 800035e:	4618      	mov	r0, r3
 8000360:	f002 f9de 	bl	8002720 <HAL_RCC_ClockConfig>
 8000364:	4603      	mov	r3, r0
 8000366:	2b00      	cmp	r3, #0
 8000368:	d001      	beq.n	800036e <SystemClock_Config+0x96>
  {
    Error_Handler();
 800036a:	f000 faf5 	bl	8000958 <Error_Handler>
  }
}
 800036e:	bf00      	nop
 8000370:	3758      	adds	r7, #88	@ 0x58
 8000372:	46bd      	mov	sp, r7
 8000374:	bd80      	pop	{r7, pc}
	...

08000378 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000378:	b580      	push	{r7, lr}
 800037a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800037c:	4b1b      	ldr	r3, [pc, #108]	@ (80003ec <MX_I2C2_Init+0x74>)
 800037e:	4a1c      	ldr	r2, [pc, #112]	@ (80003f0 <MX_I2C2_Init+0x78>)
 8000380:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10909CEC;
 8000382:	4b1a      	ldr	r3, [pc, #104]	@ (80003ec <MX_I2C2_Init+0x74>)
 8000384:	4a1b      	ldr	r2, [pc, #108]	@ (80003f4 <MX_I2C2_Init+0x7c>)
 8000386:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000388:	4b18      	ldr	r3, [pc, #96]	@ (80003ec <MX_I2C2_Init+0x74>)
 800038a:	2200      	movs	r2, #0
 800038c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800038e:	4b17      	ldr	r3, [pc, #92]	@ (80003ec <MX_I2C2_Init+0x74>)
 8000390:	2201      	movs	r2, #1
 8000392:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000394:	4b15      	ldr	r3, [pc, #84]	@ (80003ec <MX_I2C2_Init+0x74>)
 8000396:	2200      	movs	r2, #0
 8000398:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800039a:	4b14      	ldr	r3, [pc, #80]	@ (80003ec <MX_I2C2_Init+0x74>)
 800039c:	2200      	movs	r2, #0
 800039e:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80003a0:	4b12      	ldr	r3, [pc, #72]	@ (80003ec <MX_I2C2_Init+0x74>)
 80003a2:	2200      	movs	r2, #0
 80003a4:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80003a6:	4b11      	ldr	r3, [pc, #68]	@ (80003ec <MX_I2C2_Init+0x74>)
 80003a8:	2200      	movs	r2, #0
 80003aa:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80003ac:	4b0f      	ldr	r3, [pc, #60]	@ (80003ec <MX_I2C2_Init+0x74>)
 80003ae:	2200      	movs	r2, #0
 80003b0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80003b2:	480e      	ldr	r0, [pc, #56]	@ (80003ec <MX_I2C2_Init+0x74>)
 80003b4:	f001 fc0a 	bl	8001bcc <HAL_I2C_Init>
 80003b8:	4603      	mov	r3, r0
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	d001      	beq.n	80003c2 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80003be:	f000 facb 	bl	8000958 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80003c2:	2100      	movs	r1, #0
 80003c4:	4809      	ldr	r0, [pc, #36]	@ (80003ec <MX_I2C2_Init+0x74>)
 80003c6:	f001 fc9c 	bl	8001d02 <HAL_I2CEx_ConfigAnalogFilter>
 80003ca:	4603      	mov	r3, r0
 80003cc:	2b00      	cmp	r3, #0
 80003ce:	d001      	beq.n	80003d4 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80003d0:	f000 fac2 	bl	8000958 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80003d4:	2100      	movs	r1, #0
 80003d6:	4805      	ldr	r0, [pc, #20]	@ (80003ec <MX_I2C2_Init+0x74>)
 80003d8:	f001 fcde 	bl	8001d98 <HAL_I2CEx_ConfigDigitalFilter>
 80003dc:	4603      	mov	r3, r0
 80003de:	2b00      	cmp	r3, #0
 80003e0:	d001      	beq.n	80003e6 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80003e2:	f000 fab9 	bl	8000958 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80003e6:	bf00      	nop
 80003e8:	bd80      	pop	{r7, pc}
 80003ea:	bf00      	nop
 80003ec:	20000084 	.word	0x20000084
 80003f0:	40005800 	.word	0x40005800
 80003f4:	10909cec 	.word	0x10909cec

080003f8 <MX_SAI1_Init>:
  * @brief SAI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI1_Init(void)
{
 80003f8:	b580      	push	{r7, lr}
 80003fa:	af00      	add	r7, sp, #0
  /* USER CODE END SAI1_Init 0 */

  /* USER CODE BEGIN SAI1_Init 1 */

  /* USER CODE END SAI1_Init 1 */
  hsai_BlockA1.Instance = SAI1_Block_A;
 80003fc:	4b17      	ldr	r3, [pc, #92]	@ (800045c <MX_SAI1_Init+0x64>)
 80003fe:	4a18      	ldr	r2, [pc, #96]	@ (8000460 <MX_SAI1_Init+0x68>)
 8000400:	601a      	str	r2, [r3, #0]
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_TX;
 8000402:	4b16      	ldr	r3, [pc, #88]	@ (800045c <MX_SAI1_Init+0x64>)
 8000404:	2200      	movs	r2, #0
 8000406:	605a      	str	r2, [r3, #4]
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
 8000408:	4b14      	ldr	r3, [pc, #80]	@ (800045c <MX_SAI1_Init+0x64>)
 800040a:	2200      	movs	r2, #0
 800040c:	609a      	str	r2, [r3, #8]
  hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_ENABLE;
 800040e:	4b13      	ldr	r3, [pc, #76]	@ (800045c <MX_SAI1_Init+0x64>)
 8000410:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000414:	611a      	str	r2, [r3, #16]
  hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8000416:	4b11      	ldr	r3, [pc, #68]	@ (800045c <MX_SAI1_Init+0x64>)
 8000418:	2200      	movs	r2, #0
 800041a:	615a      	str	r2, [r3, #20]
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 800041c:	4b0f      	ldr	r3, [pc, #60]	@ (800045c <MX_SAI1_Init+0x64>)
 800041e:	2200      	movs	r2, #0
 8000420:	619a      	str	r2, [r3, #24]
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_48K;
 8000422:	4b0e      	ldr	r3, [pc, #56]	@ (800045c <MX_SAI1_Init+0x64>)
 8000424:	f64b 3280 	movw	r2, #48000	@ 0xbb80
 8000428:	61da      	str	r2, [r3, #28]
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 800042a:	4b0c      	ldr	r3, [pc, #48]	@ (800045c <MX_SAI1_Init+0x64>)
 800042c:	2200      	movs	r2, #0
 800042e:	60da      	str	r2, [r3, #12]
  hsai_BlockA1.Init.MonoStereoMode = SAI_STEREOMODE;
 8000430:	4b0a      	ldr	r3, [pc, #40]	@ (800045c <MX_SAI1_Init+0x64>)
 8000432:	2200      	movs	r2, #0
 8000434:	625a      	str	r2, [r3, #36]	@ 0x24
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
 8000436:	4b09      	ldr	r3, [pc, #36]	@ (800045c <MX_SAI1_Init+0x64>)
 8000438:	2200      	movs	r2, #0
 800043a:	629a      	str	r2, [r3, #40]	@ 0x28
  hsai_BlockA1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 800043c:	4b07      	ldr	r3, [pc, #28]	@ (800045c <MX_SAI1_Init+0x64>)
 800043e:	2200      	movs	r2, #0
 8000440:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SAI_InitProtocol(&hsai_BlockA1, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_16BIT, 2) != HAL_OK)
 8000442:	2302      	movs	r3, #2
 8000444:	2200      	movs	r2, #0
 8000446:	2100      	movs	r1, #0
 8000448:	4804      	ldr	r0, [pc, #16]	@ (800045c <MX_SAI1_Init+0x64>)
 800044a:	f003 fbe9 	bl	8003c20 <HAL_SAI_InitProtocol>
 800044e:	4603      	mov	r3, r0
 8000450:	2b00      	cmp	r3, #0
 8000452:	d001      	beq.n	8000458 <MX_SAI1_Init+0x60>
  {
    Error_Handler();
 8000454:	f000 fa80 	bl	8000958 <Error_Handler>
  }
  /* USER CODE BEGIN SAI1_Init 2 */

  /* USER CODE END SAI1_Init 2 */

}
 8000458:	bf00      	nop
 800045a:	bd80      	pop	{r7, pc}
 800045c:	200000d8 	.word	0x200000d8
 8000460:	40015404 	.word	0x40015404

08000464 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8000464:	b480      	push	{r7}
 8000466:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8000468:	4b0c      	ldr	r3, [pc, #48]	@ (800049c <MX_SDMMC1_SD_Init+0x38>)
 800046a:	4a0d      	ldr	r2, [pc, #52]	@ (80004a0 <MX_SDMMC1_SD_Init+0x3c>)
 800046c:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 800046e:	4b0b      	ldr	r3, [pc, #44]	@ (800049c <MX_SDMMC1_SD_Init+0x38>)
 8000470:	2200      	movs	r2, #0
 8000472:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 8000474:	4b09      	ldr	r3, [pc, #36]	@ (800049c <MX_SDMMC1_SD_Init+0x38>)
 8000476:	2200      	movs	r2, #0
 8000478:	609a      	str	r2, [r3, #8]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800047a:	4b08      	ldr	r3, [pc, #32]	@ (800049c <MX_SDMMC1_SD_Init+0x38>)
 800047c:	2200      	movs	r2, #0
 800047e:	60da      	str	r2, [r3, #12]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 8000480:	4b06      	ldr	r3, [pc, #24]	@ (800049c <MX_SDMMC1_SD_Init+0x38>)
 8000482:	2200      	movs	r2, #0
 8000484:	611a      	str	r2, [r3, #16]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8000486:	4b05      	ldr	r3, [pc, #20]	@ (800049c <MX_SDMMC1_SD_Init+0x38>)
 8000488:	2200      	movs	r2, #0
 800048a:	615a      	str	r2, [r3, #20]
  hsd1.Init.ClockDiv = 5;
 800048c:	4b03      	ldr	r3, [pc, #12]	@ (800049c <MX_SDMMC1_SD_Init+0x38>)
 800048e:	2205      	movs	r2, #5
 8000490:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8000492:	bf00      	nop
 8000494:	46bd      	mov	sp, r7
 8000496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800049a:	4770      	bx	lr
 800049c:	200001a4 	.word	0x200001a4
 80004a0:	40012800 	.word	0x40012800

080004a4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80004a4:	b580      	push	{r7, lr}
 80004a6:	b09a      	sub	sp, #104	@ 0x68
 80004a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80004aa:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80004ae:	2200      	movs	r2, #0
 80004b0:	601a      	str	r2, [r3, #0]
 80004b2:	605a      	str	r2, [r3, #4]
 80004b4:	609a      	str	r2, [r3, #8]
 80004b6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80004b8:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80004bc:	2200      	movs	r2, #0
 80004be:	601a      	str	r2, [r3, #0]
 80004c0:	605a      	str	r2, [r3, #4]
 80004c2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80004c4:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80004c8:	2200      	movs	r2, #0
 80004ca:	601a      	str	r2, [r3, #0]
 80004cc:	605a      	str	r2, [r3, #4]
 80004ce:	609a      	str	r2, [r3, #8]
 80004d0:	60da      	str	r2, [r3, #12]
 80004d2:	611a      	str	r2, [r3, #16]
 80004d4:	615a      	str	r2, [r3, #20]
 80004d6:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80004d8:	1d3b      	adds	r3, r7, #4
 80004da:	222c      	movs	r2, #44	@ 0x2c
 80004dc:	2100      	movs	r1, #0
 80004de:	4618      	mov	r0, r3
 80004e0:	f00a f818 	bl	800a514 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80004e4:	4b43      	ldr	r3, [pc, #268]	@ (80005f4 <MX_TIM1_Init+0x150>)
 80004e6:	4a44      	ldr	r2, [pc, #272]	@ (80005f8 <MX_TIM1_Init+0x154>)
 80004e8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80004ea:	4b42      	ldr	r3, [pc, #264]	@ (80005f4 <MX_TIM1_Init+0x150>)
 80004ec:	2200      	movs	r2, #0
 80004ee:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80004f0:	4b40      	ldr	r3, [pc, #256]	@ (80005f4 <MX_TIM1_Init+0x150>)
 80004f2:	2200      	movs	r2, #0
 80004f4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 99;
 80004f6:	4b3f      	ldr	r3, [pc, #252]	@ (80005f4 <MX_TIM1_Init+0x150>)
 80004f8:	2263      	movs	r2, #99	@ 0x63
 80004fa:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80004fc:	4b3d      	ldr	r3, [pc, #244]	@ (80005f4 <MX_TIM1_Init+0x150>)
 80004fe:	2200      	movs	r2, #0
 8000500:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000502:	4b3c      	ldr	r3, [pc, #240]	@ (80005f4 <MX_TIM1_Init+0x150>)
 8000504:	2200      	movs	r2, #0
 8000506:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000508:	4b3a      	ldr	r3, [pc, #232]	@ (80005f4 <MX_TIM1_Init+0x150>)
 800050a:	2200      	movs	r2, #0
 800050c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800050e:	4839      	ldr	r0, [pc, #228]	@ (80005f4 <MX_TIM1_Init+0x150>)
 8000510:	f005 f900 	bl	8005714 <HAL_TIM_Base_Init>
 8000514:	4603      	mov	r3, r0
 8000516:	2b00      	cmp	r3, #0
 8000518:	d001      	beq.n	800051e <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 800051a:	f000 fa1d 	bl	8000958 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800051e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000522:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000524:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8000528:	4619      	mov	r1, r3
 800052a:	4832      	ldr	r0, [pc, #200]	@ (80005f4 <MX_TIM1_Init+0x150>)
 800052c:	f005 fa24 	bl	8005978 <HAL_TIM_ConfigClockSource>
 8000530:	4603      	mov	r3, r0
 8000532:	2b00      	cmp	r3, #0
 8000534:	d001      	beq.n	800053a <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000536:	f000 fa0f 	bl	8000958 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 800053a:	482e      	ldr	r0, [pc, #184]	@ (80005f4 <MX_TIM1_Init+0x150>)
 800053c:	f005 f941 	bl	80057c2 <HAL_TIM_OC_Init>
 8000540:	4603      	mov	r3, r0
 8000542:	2b00      	cmp	r3, #0
 8000544:	d001      	beq.n	800054a <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8000546:	f000 fa07 	bl	8000958 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800054a:	2300      	movs	r3, #0
 800054c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800054e:	2300      	movs	r3, #0
 8000550:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000552:	2300      	movs	r3, #0
 8000554:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000556:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800055a:	4619      	mov	r1, r3
 800055c:	4825      	ldr	r0, [pc, #148]	@ (80005f4 <MX_TIM1_Init+0x150>)
 800055e:	f005 fe51 	bl	8006204 <HAL_TIMEx_MasterConfigSynchronization>
 8000562:	4603      	mov	r3, r0
 8000564:	2b00      	cmp	r3, #0
 8000566:	d001      	beq.n	800056c <MX_TIM1_Init+0xc8>
  {
    Error_Handler();
 8000568:	f000 f9f6 	bl	8000958 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 800056c:	2300      	movs	r3, #0
 800056e:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 8000570:	2300      	movs	r3, #0
 8000572:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000574:	2300      	movs	r3, #0
 8000576:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000578:	2300      	movs	r3, #0
 800057a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800057c:	2300      	movs	r3, #0
 800057e:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000580:	2300      	movs	r3, #0
 8000582:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000584:	2300      	movs	r3, #0
 8000586:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000588:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800058c:	2204      	movs	r2, #4
 800058e:	4619      	mov	r1, r3
 8000590:	4818      	ldr	r0, [pc, #96]	@ (80005f4 <MX_TIM1_Init+0x150>)
 8000592:	f005 f977 	bl	8005884 <HAL_TIM_OC_ConfigChannel>
 8000596:	4603      	mov	r3, r0
 8000598:	2b00      	cmp	r3, #0
 800059a:	d001      	beq.n	80005a0 <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 800059c:	f000 f9dc 	bl	8000958 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80005a0:	2300      	movs	r3, #0
 80005a2:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80005a4:	2300      	movs	r3, #0
 80005a6:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80005a8:	2300      	movs	r3, #0
 80005aa:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80005ac:	2300      	movs	r3, #0
 80005ae:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80005b0:	2300      	movs	r3, #0
 80005b2:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80005b4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80005b8:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80005ba:	2300      	movs	r3, #0
 80005bc:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80005be:	2300      	movs	r3, #0
 80005c0:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80005c2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80005c6:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80005c8:	2300      	movs	r3, #0
 80005ca:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80005cc:	2300      	movs	r3, #0
 80005ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80005d0:	1d3b      	adds	r3, r7, #4
 80005d2:	4619      	mov	r1, r3
 80005d4:	4807      	ldr	r0, [pc, #28]	@ (80005f4 <MX_TIM1_Init+0x150>)
 80005d6:	f005 fe7b 	bl	80062d0 <HAL_TIMEx_ConfigBreakDeadTime>
 80005da:	4603      	mov	r3, r0
 80005dc:	2b00      	cmp	r3, #0
 80005de:	d001      	beq.n	80005e4 <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 80005e0:	f000 f9ba 	bl	8000958 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80005e4:	4803      	ldr	r0, [pc, #12]	@ (80005f4 <MX_TIM1_Init+0x150>)
 80005e6:	f000 fb33 	bl	8000c50 <HAL_TIM_MspPostInit>

}
 80005ea:	bf00      	nop
 80005ec:	3768      	adds	r7, #104	@ 0x68
 80005ee:	46bd      	mov	sp, r7
 80005f0:	bd80      	pop	{r7, pc}
 80005f2:	bf00      	nop
 80005f4:	20000270 	.word	0x20000270
 80005f8:	40012c00 	.word	0x40012c00

080005fc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b082      	sub	sp, #8
 8000600:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000602:	4b10      	ldr	r3, [pc, #64]	@ (8000644 <MX_DMA_Init+0x48>)
 8000604:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000606:	4a0f      	ldr	r2, [pc, #60]	@ (8000644 <MX_DMA_Init+0x48>)
 8000608:	f043 0302 	orr.w	r3, r3, #2
 800060c:	6493      	str	r3, [r2, #72]	@ 0x48
 800060e:	4b0d      	ldr	r3, [pc, #52]	@ (8000644 <MX_DMA_Init+0x48>)
 8000610:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000612:	f003 0302 	and.w	r3, r3, #2
 8000616:	607b      	str	r3, [r7, #4]
 8000618:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel1_IRQn, 0, 0);
 800061a:	2200      	movs	r2, #0
 800061c:	2100      	movs	r1, #0
 800061e:	2038      	movs	r0, #56	@ 0x38
 8000620:	f000 fe7d 	bl	800131e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel1_IRQn);
 8000624:	2038      	movs	r0, #56	@ 0x38
 8000626:	f000 fe96 	bl	8001356 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel4_IRQn, 0, 0);
 800062a:	2200      	movs	r2, #0
 800062c:	2100      	movs	r1, #0
 800062e:	203b      	movs	r0, #59	@ 0x3b
 8000630:	f000 fe75 	bl	800131e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel4_IRQn);
 8000634:	203b      	movs	r0, #59	@ 0x3b
 8000636:	f000 fe8e 	bl	8001356 <HAL_NVIC_EnableIRQ>

}
 800063a:	bf00      	nop
 800063c:	3708      	adds	r7, #8
 800063e:	46bd      	mov	sp, r7
 8000640:	bd80      	pop	{r7, pc}
 8000642:	bf00      	nop
 8000644:	40021000 	.word	0x40021000

08000648 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	b08a      	sub	sp, #40	@ 0x28
 800064c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800064e:	f107 0314 	add.w	r3, r7, #20
 8000652:	2200      	movs	r2, #0
 8000654:	601a      	str	r2, [r3, #0]
 8000656:	605a      	str	r2, [r3, #4]
 8000658:	609a      	str	r2, [r3, #8]
 800065a:	60da      	str	r2, [r3, #12]
 800065c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800065e:	4b37      	ldr	r3, [pc, #220]	@ (800073c <MX_GPIO_Init+0xf4>)
 8000660:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000662:	4a36      	ldr	r2, [pc, #216]	@ (800073c <MX_GPIO_Init+0xf4>)
 8000664:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000668:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800066a:	4b34      	ldr	r3, [pc, #208]	@ (800073c <MX_GPIO_Init+0xf4>)
 800066c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800066e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000672:	613b      	str	r3, [r7, #16]
 8000674:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000676:	4b31      	ldr	r3, [pc, #196]	@ (800073c <MX_GPIO_Init+0xf4>)
 8000678:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800067a:	4a30      	ldr	r2, [pc, #192]	@ (800073c <MX_GPIO_Init+0xf4>)
 800067c:	f043 0304 	orr.w	r3, r3, #4
 8000680:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000682:	4b2e      	ldr	r3, [pc, #184]	@ (800073c <MX_GPIO_Init+0xf4>)
 8000684:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000686:	f003 0304 	and.w	r3, r3, #4
 800068a:	60fb      	str	r3, [r7, #12]
 800068c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800068e:	4b2b      	ldr	r3, [pc, #172]	@ (800073c <MX_GPIO_Init+0xf4>)
 8000690:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000692:	4a2a      	ldr	r2, [pc, #168]	@ (800073c <MX_GPIO_Init+0xf4>)
 8000694:	f043 0301 	orr.w	r3, r3, #1
 8000698:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800069a:	4b28      	ldr	r3, [pc, #160]	@ (800073c <MX_GPIO_Init+0xf4>)
 800069c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800069e:	f003 0301 	and.w	r3, r3, #1
 80006a2:	60bb      	str	r3, [r7, #8]
 80006a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006a6:	4b25      	ldr	r3, [pc, #148]	@ (800073c <MX_GPIO_Init+0xf4>)
 80006a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006aa:	4a24      	ldr	r2, [pc, #144]	@ (800073c <MX_GPIO_Init+0xf4>)
 80006ac:	f043 0302 	orr.w	r3, r3, #2
 80006b0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80006b2:	4b22      	ldr	r3, [pc, #136]	@ (800073c <MX_GPIO_Init+0xf4>)
 80006b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006b6:	f003 0302 	and.w	r3, r3, #2
 80006ba:	607b      	str	r3, [r7, #4]
 80006bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80006be:	4b1f      	ldr	r3, [pc, #124]	@ (800073c <MX_GPIO_Init+0xf4>)
 80006c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006c2:	4a1e      	ldr	r2, [pc, #120]	@ (800073c <MX_GPIO_Init+0xf4>)
 80006c4:	f043 0308 	orr.w	r3, r3, #8
 80006c8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80006ca:	4b1c      	ldr	r3, [pc, #112]	@ (800073c <MX_GPIO_Init+0xf4>)
 80006cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006ce:	f003 0308 	and.w	r3, r3, #8
 80006d2:	603b      	str	r3, [r7, #0]
 80006d4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(AMP_ENABLE_GPIO_Port, AMP_ENABLE_Pin, GPIO_PIN_SET);
 80006d6:	2201      	movs	r2, #1
 80006d8:	2108      	movs	r1, #8
 80006da:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80006de:	f001 fa5d 	bl	8001b9c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BUTTON_Pin */
  GPIO_InitStruct.Pin = BUTTON_Pin;
 80006e2:	2304      	movs	r3, #4
 80006e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006e6:	2300      	movs	r3, #0
 80006e8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ea:	2300      	movs	r3, #0
 80006ec:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 80006ee:	f107 0314 	add.w	r3, r7, #20
 80006f2:	4619      	mov	r1, r3
 80006f4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80006f8:	f001 f8be 	bl	8001878 <HAL_GPIO_Init>

  /*Configure GPIO pin : AMP_ENABLE_Pin */
  GPIO_InitStruct.Pin = AMP_ENABLE_Pin;
 80006fc:	2308      	movs	r3, #8
 80006fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000700:	2301      	movs	r3, #1
 8000702:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000704:	2301      	movs	r3, #1
 8000706:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000708:	2300      	movs	r3, #0
 800070a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(AMP_ENABLE_GPIO_Port, &GPIO_InitStruct);
 800070c:	f107 0314 	add.w	r3, r7, #20
 8000710:	4619      	mov	r1, r3
 8000712:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000716:	f001 f8af 	bl	8001878 <HAL_GPIO_Init>

  /*Configure GPIO pin : SD_DETECT_Pin */
  GPIO_InitStruct.Pin = SD_DETECT_Pin;
 800071a:	2380      	movs	r3, #128	@ 0x80
 800071c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800071e:	2300      	movs	r3, #0
 8000720:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000722:	2300      	movs	r3, #0
 8000724:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SD_DETECT_GPIO_Port, &GPIO_InitStruct);
 8000726:	f107 0314 	add.w	r3, r7, #20
 800072a:	4619      	mov	r1, r3
 800072c:	4804      	ldr	r0, [pc, #16]	@ (8000740 <MX_GPIO_Init+0xf8>)
 800072e:	f001 f8a3 	bl	8001878 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000732:	bf00      	nop
 8000734:	3728      	adds	r7, #40	@ 0x28
 8000736:	46bd      	mov	sp, r7
 8000738:	bd80      	pop	{r7, pc}
 800073a:	bf00      	nop
 800073c:	40021000 	.word	0x40021000
 8000740:	48000400 	.word	0x48000400

08000744 <FillBuffer>:

/* USER CODE BEGIN 4 */

void FillBuffer(FIL *audioFileP, uint16_t *buffer, uint32_t size)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	b086      	sub	sp, #24
 8000748:	af00      	add	r7, sp, #0
 800074a:	60f8      	str	r0, [r7, #12]
 800074c:	60b9      	str	r1, [r7, #8]
 800074e:	607a      	str	r2, [r7, #4]
    UINT bytesRead = 0;
 8000750:	2300      	movs	r3, #0
 8000752:	613b      	str	r3, [r7, #16]
    while(hdma_sdmmc1.State != HAL_DMA_STATE_READY){}
 8000754:	bf00      	nop
 8000756:	4b13      	ldr	r3, [pc, #76]	@ (80007a4 <FillBuffer+0x60>)
 8000758:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800075c:	b2db      	uxtb	r3, r3
 800075e:	2b01      	cmp	r3, #1
 8000760:	d1f9      	bne.n	8000756 <FillBuffer+0x12>
    FRESULT res = f_read(audioFileP, buffer, size * sizeof(uint16_t), &bytesRead);
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	005a      	lsls	r2, r3, #1
 8000766:	f107 0310 	add.w	r3, r7, #16
 800076a:	68b9      	ldr	r1, [r7, #8]
 800076c:	68f8      	ldr	r0, [r7, #12]
 800076e:	f009 f9c0 	bl	8009af2 <f_read>
 8000772:	4603      	mov	r3, r0
 8000774:	75fb      	strb	r3, [r7, #23]
    if (res != FR_OK || bytesRead < size * sizeof(uint16_t))
 8000776:	7dfb      	ldrb	r3, [r7, #23]
 8000778:	2b00      	cmp	r3, #0
 800077a:	d104      	bne.n	8000786 <FillBuffer+0x42>
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	005a      	lsls	r2, r3, #1
 8000780:	693b      	ldr	r3, [r7, #16]
 8000782:	429a      	cmp	r2, r3
 8000784:	d90a      	bls.n	800079c <FillBuffer+0x58>
    {
        // Handle end of file or read error
        HAL_SAI_DMAStop(&hsai_BlockA1);
 8000786:	4808      	ldr	r0, [pc, #32]	@ (80007a8 <FillBuffer+0x64>)
 8000788:	f003 fb9e 	bl	8003ec8 <HAL_SAI_DMAStop>
        f_close(audioFileP);
 800078c:	68f8      	ldr	r0, [r7, #12]
 800078e:	f009 fb6d 	bl	8009e6c <f_close>
        if (res != FR_OK)Error_Handler();
 8000792:	7dfb      	ldrb	r3, [r7, #23]
 8000794:	2b00      	cmp	r3, #0
 8000796:	d001      	beq.n	800079c <FillBuffer+0x58>
 8000798:	f000 f8de 	bl	8000958 <Error_Handler>
    }
}
 800079c:	bf00      	nop
 800079e:	3718      	adds	r7, #24
 80007a0:	46bd      	mov	sp, r7
 80007a2:	bd80      	pop	{r7, pc}
 80007a4:	20000228 	.word	0x20000228
 80007a8:	200000d8 	.word	0x200000d8

080007ac <ReadWavHeader>:

FRESULT ReadWavHeader(FIL *audioFile, WAV_HeaderTypeDef *wavHeader) {
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b084      	sub	sp, #16
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	6078      	str	r0, [r7, #4]
 80007b4:	6039      	str	r1, [r7, #0]
    UINT bytesRead;
    FRESULT res;

    // Read the WAV header
    res = f_read(audioFile, wavHeader, sizeof(WAV_HeaderTypeDef), &bytesRead);
 80007b6:	f107 0308 	add.w	r3, r7, #8
 80007ba:	222c      	movs	r2, #44	@ 0x2c
 80007bc:	6839      	ldr	r1, [r7, #0]
 80007be:	6878      	ldr	r0, [r7, #4]
 80007c0:	f009 f997 	bl	8009af2 <f_read>
 80007c4:	4603      	mov	r3, r0
 80007c6:	73fb      	strb	r3, [r7, #15]
    if (res != FR_OK || bytesRead != sizeof(WAV_HeaderTypeDef)) {
 80007c8:	7bfb      	ldrb	r3, [r7, #15]
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d102      	bne.n	80007d4 <ReadWavHeader+0x28>
 80007ce:	68bb      	ldr	r3, [r7, #8]
 80007d0:	2b2c      	cmp	r3, #44	@ 0x2c
 80007d2:	d001      	beq.n	80007d8 <ReadWavHeader+0x2c>
        return FR_DISK_ERR;
 80007d4:	2301      	movs	r3, #1
 80007d6:	e015      	b.n	8000804 <ReadWavHeader+0x58>
    }

    // Check if the file is a valid WAV file
    if (memcmp(wavHeader->ChunkID, "RIFF", 4) != 0 ||
 80007d8:	683b      	ldr	r3, [r7, #0]
 80007da:	2204      	movs	r2, #4
 80007dc:	490b      	ldr	r1, [pc, #44]	@ (800080c <ReadWavHeader+0x60>)
 80007de:	4618      	mov	r0, r3
 80007e0:	f009 fe88 	bl	800a4f4 <memcmp>
 80007e4:	4603      	mov	r3, r0
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d109      	bne.n	80007fe <ReadWavHeader+0x52>
        memcmp(wavHeader->Format, "WAVE", 4) != 0) {
 80007ea:	683b      	ldr	r3, [r7, #0]
 80007ec:	3308      	adds	r3, #8
 80007ee:	2204      	movs	r2, #4
 80007f0:	4907      	ldr	r1, [pc, #28]	@ (8000810 <ReadWavHeader+0x64>)
 80007f2:	4618      	mov	r0, r3
 80007f4:	f009 fe7e 	bl	800a4f4 <memcmp>
 80007f8:	4603      	mov	r3, r0
    if (memcmp(wavHeader->ChunkID, "RIFF", 4) != 0 ||
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d001      	beq.n	8000802 <ReadWavHeader+0x56>
        return FR_INVALID_OBJECT;
 80007fe:	2309      	movs	r3, #9
 8000800:	e000      	b.n	8000804 <ReadWavHeader+0x58>
    }

    return FR_OK;
 8000802:	2300      	movs	r3, #0
}
 8000804:	4618      	mov	r0, r3
 8000806:	3710      	adds	r7, #16
 8000808:	46bd      	mov	sp, r7
 800080a:	bd80      	pop	{r7, pc}
 800080c:	0800aa94 	.word	0x0800aa94
 8000810:	0800aa9c 	.word	0x0800aa9c

08000814 <MountFile>:

int8_t MountFile(int force)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b082      	sub	sp, #8
 8000818:	af00      	add	r7, sp, #0
 800081a:	6078      	str	r0, [r7, #4]
	if(f_mount(&fs, "", force) != FR_OK) return 0;
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	b2db      	uxtb	r3, r3
 8000820:	461a      	mov	r2, r3
 8000822:	4908      	ldr	r1, [pc, #32]	@ (8000844 <MountFile+0x30>)
 8000824:	4808      	ldr	r0, [pc, #32]	@ (8000848 <MountFile+0x34>)
 8000826:	f008 fe6b 	bl	8009500 <f_mount>
 800082a:	4603      	mov	r3, r0
 800082c:	2b00      	cmp	r3, #0
 800082e:	d001      	beq.n	8000834 <MountFile+0x20>
 8000830:	2300      	movs	r3, #0
 8000832:	e003      	b.n	800083c <MountFile+0x28>
	printf("File Mounted\n");
 8000834:	4805      	ldr	r0, [pc, #20]	@ (800084c <MountFile+0x38>)
 8000836:	f009 fd7d 	bl	800a334 <puts>
	return 1;
 800083a:	2301      	movs	r3, #1
}
 800083c:	4618      	mov	r0, r3
 800083e:	3708      	adds	r7, #8
 8000840:	46bd      	mov	sp, r7
 8000842:	bd80      	pop	{r7, pc}
 8000844:	0800aaa4 	.word	0x0800aaa4
 8000848:	200002bc 	.word	0x200002bc
 800084c:	0800aaa8 	.word	0x0800aaa8

08000850 <SDInit>:

MAXRESULT SDInit(char* fileName)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	b084      	sub	sp, #16
 8000854:	af00      	add	r7, sp, #0
 8000856:	6078      	str	r0, [r7, #4]
	FRESULT res;
	if (MountFile(1)!= 1) return MAX_MOUNTERR;
 8000858:	2001      	movs	r0, #1
 800085a:	f7ff ffdb 	bl	8000814 <MountFile>
 800085e:	4603      	mov	r3, r0
 8000860:	2b01      	cmp	r3, #1
 8000862:	d001      	beq.n	8000868 <SDInit+0x18>
 8000864:	2302      	movs	r3, #2
 8000866:	e01b      	b.n	80008a0 <SDInit+0x50>
	//Open WAV file

	res = f_open(&audioFile, fileName, FA_READ | FA_OPEN_EXISTING);
 8000868:	2201      	movs	r2, #1
 800086a:	6879      	ldr	r1, [r7, #4]
 800086c:	480e      	ldr	r0, [pc, #56]	@ (80008a8 <SDInit+0x58>)
 800086e:	f008 fe8d 	bl	800958c <f_open>
 8000872:	4603      	mov	r3, r0
 8000874:	73fb      	strb	r3, [r7, #15]
	if(res != FR_OK) return MAX_OPENERR;
 8000876:	7bfb      	ldrb	r3, [r7, #15]
 8000878:	2b00      	cmp	r3, #0
 800087a:	d001      	beq.n	8000880 <SDInit+0x30>
 800087c:	2303      	movs	r3, #3
 800087e:	e00f      	b.n	80008a0 <SDInit+0x50>
	printf("File Open!\n");
 8000880:	480a      	ldr	r0, [pc, #40]	@ (80008ac <SDInit+0x5c>)
 8000882:	f009 fd57 	bl	800a334 <puts>

	if(ReadWavHeader(&audioFile, &wavHeader)!= FR_OK)
 8000886:	490a      	ldr	r1, [pc, #40]	@ (80008b0 <SDInit+0x60>)
 8000888:	4807      	ldr	r0, [pc, #28]	@ (80008a8 <SDInit+0x58>)
 800088a:	f7ff ff8f 	bl	80007ac <ReadWavHeader>
 800088e:	4603      	mov	r3, r0
 8000890:	2b00      	cmp	r3, #0
 8000892:	d004      	beq.n	800089e <SDInit+0x4e>
	{
		f_close(&audioFile);
 8000894:	4804      	ldr	r0, [pc, #16]	@ (80008a8 <SDInit+0x58>)
 8000896:	f009 fae9 	bl	8009e6c <f_close>
		Error_Handler();
 800089a:	f000 f85d 	bl	8000958 <Error_Handler>
	}

	return MAX_SUCCESS;
 800089e:	2301      	movs	r3, #1

}
 80008a0:	4618      	mov	r0, r3
 80008a2:	3710      	adds	r7, #16
 80008a4:	46bd      	mov	sp, r7
 80008a6:	bd80      	pop	{r7, pc}
 80008a8:	200004f0 	.word	0x200004f0
 80008ac:	0800aab8 	.word	0x0800aab8
 80008b0:	20000720 	.word	0x20000720

080008b4 <StartAudioPlayback>:
      *s = *s * vol;
      s++;
    }
}
void StartAudioPlayback(void)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b082      	sub	sp, #8
 80008b8:	af00      	add	r7, sp, #0
	if(SDInit("ON.WAV")!= MAX_SUCCESS) Error_Handler();
 80008ba:	4812      	ldr	r0, [pc, #72]	@ (8000904 <StartAudioPlayback+0x50>)
 80008bc:	f7ff ffc8 	bl	8000850 <SDInit>
 80008c0:	4603      	mov	r3, r0
 80008c2:	2b01      	cmp	r3, #1
 80008c4:	d001      	beq.n	80008ca <StartAudioPlayback+0x16>
 80008c6:	f000 f847 	bl	8000958 <Error_Handler>
	FillBuffer(&audioFile, bufferA, BUFFER_SIZE);
 80008ca:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80008ce:	490e      	ldr	r1, [pc, #56]	@ (8000908 <StartAudioPlayback+0x54>)
 80008d0:	480e      	ldr	r0, [pc, #56]	@ (800090c <StartAudioPlayback+0x58>)
 80008d2:	f7ff ff37 	bl	8000744 <FillBuffer>
	FillBuffer(&audioFile, bufferB, BUFFER_SIZE);
 80008d6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80008da:	490d      	ldr	r1, [pc, #52]	@ (8000910 <StartAudioPlayback+0x5c>)
 80008dc:	480b      	ldr	r0, [pc, #44]	@ (800090c <StartAudioPlayback+0x58>)
 80008de:	f7ff ff31 	bl	8000744 <FillBuffer>
	HAL_StatusTypeDef dmaStatus = HAL_SAI_Transmit_DMA(&hsai_BlockA1, (uint8_t*) bufferA, BUFFER_SIZE);
 80008e2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80008e6:	4908      	ldr	r1, [pc, #32]	@ (8000908 <StartAudioPlayback+0x54>)
 80008e8:	480a      	ldr	r0, [pc, #40]	@ (8000914 <StartAudioPlayback+0x60>)
 80008ea:	f003 fb41 	bl	8003f70 <HAL_SAI_Transmit_DMA>
 80008ee:	4603      	mov	r3, r0
 80008f0:	71fb      	strb	r3, [r7, #7]
	if (dmaStatus != HAL_OK) Error_Handler();
 80008f2:	79fb      	ldrb	r3, [r7, #7]
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d001      	beq.n	80008fc <StartAudioPlayback+0x48>
 80008f8:	f000 f82e 	bl	8000958 <Error_Handler>
}
 80008fc:	bf00      	nop
 80008fe:	3708      	adds	r7, #8
 8000900:	46bd      	mov	sp, r7
 8000902:	bd80      	pop	{r7, pc}
 8000904:	0800aac4 	.word	0x0800aac4
 8000908:	2000074c 	.word	0x2000074c
 800090c:	200004f0 	.word	0x200004f0
 8000910:	20000b4c 	.word	0x20000b4c
 8000914:	200000d8 	.word	0x200000d8

08000918 <HAL_SAI_TxCpltCallback>:

void HAL_SAI_TxCpltCallback(SAI_HandleTypeDef *hsai_BlockA1)
{
 8000918:	b480      	push	{r7}
 800091a:	b083      	sub	sp, #12
 800091c:	af00      	add	r7, sp, #0
 800091e:	6078      	str	r0, [r7, #4]
	//printf("Transfer Complete!\n");
	fillBuffer = 1;
 8000920:	4b04      	ldr	r3, [pc, #16]	@ (8000934 <HAL_SAI_TxCpltCallback+0x1c>)
 8000922:	2201      	movs	r2, #1
 8000924:	701a      	strb	r2, [r3, #0]
}
 8000926:	bf00      	nop
 8000928:	370c      	adds	r7, #12
 800092a:	46bd      	mov	sp, r7
 800092c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000930:	4770      	bx	lr
 8000932:	bf00      	nop
 8000934:	20000f4d 	.word	0x20000f4d

08000938 <HAL_SAI_TxHalfCpltCallback>:

void HAL_SAI_TxHalfCpltCallback(SAI_HandleTypeDef *hsai_BlockA1)
{
 8000938:	b480      	push	{r7}
 800093a:	b083      	sub	sp, #12
 800093c:	af00      	add	r7, sp, #0
 800093e:	6078      	str	r0, [r7, #4]
	//printf("Transfer Half Complete!\n");
	fillBuffer = 1;
 8000940:	4b04      	ldr	r3, [pc, #16]	@ (8000954 <HAL_SAI_TxHalfCpltCallback+0x1c>)
 8000942:	2201      	movs	r2, #1
 8000944:	701a      	strb	r2, [r3, #0]
}
 8000946:	bf00      	nop
 8000948:	370c      	adds	r7, #12
 800094a:	46bd      	mov	sp, r7
 800094c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000950:	4770      	bx	lr
 8000952:	bf00      	nop
 8000954:	20000f4d 	.word	0x20000f4d

08000958 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800095c:	b672      	cpsid	i
}
 800095e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  f_mount(NULL, "/", 1);
 8000960:	2201      	movs	r2, #1
 8000962:	4903      	ldr	r1, [pc, #12]	@ (8000970 <Error_Handler+0x18>)
 8000964:	2000      	movs	r0, #0
 8000966:	f008 fdcb 	bl	8009500 <f_mount>
  while (1)
 800096a:	bf00      	nop
 800096c:	e7fd      	b.n	800096a <Error_Handler+0x12>
 800096e:	bf00      	nop
 8000970:	0800aacc 	.word	0x0800aacc

08000974 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000974:	b480      	push	{r7}
 8000976:	b083      	sub	sp, #12
 8000978:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800097a:	4b0f      	ldr	r3, [pc, #60]	@ (80009b8 <HAL_MspInit+0x44>)
 800097c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800097e:	4a0e      	ldr	r2, [pc, #56]	@ (80009b8 <HAL_MspInit+0x44>)
 8000980:	f043 0301 	orr.w	r3, r3, #1
 8000984:	6613      	str	r3, [r2, #96]	@ 0x60
 8000986:	4b0c      	ldr	r3, [pc, #48]	@ (80009b8 <HAL_MspInit+0x44>)
 8000988:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800098a:	f003 0301 	and.w	r3, r3, #1
 800098e:	607b      	str	r3, [r7, #4]
 8000990:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000992:	4b09      	ldr	r3, [pc, #36]	@ (80009b8 <HAL_MspInit+0x44>)
 8000994:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000996:	4a08      	ldr	r2, [pc, #32]	@ (80009b8 <HAL_MspInit+0x44>)
 8000998:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800099c:	6593      	str	r3, [r2, #88]	@ 0x58
 800099e:	4b06      	ldr	r3, [pc, #24]	@ (80009b8 <HAL_MspInit+0x44>)
 80009a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80009a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80009a6:	603b      	str	r3, [r7, #0]
 80009a8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009aa:	bf00      	nop
 80009ac:	370c      	adds	r7, #12
 80009ae:	46bd      	mov	sp, r7
 80009b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b4:	4770      	bx	lr
 80009b6:	bf00      	nop
 80009b8:	40021000 	.word	0x40021000

080009bc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	b0a0      	sub	sp, #128	@ 0x80
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009c4:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80009c8:	2200      	movs	r2, #0
 80009ca:	601a      	str	r2, [r3, #0]
 80009cc:	605a      	str	r2, [r3, #4]
 80009ce:	609a      	str	r2, [r3, #8]
 80009d0:	60da      	str	r2, [r3, #12]
 80009d2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80009d4:	f107 0310 	add.w	r3, r7, #16
 80009d8:	225c      	movs	r2, #92	@ 0x5c
 80009da:	2100      	movs	r1, #0
 80009dc:	4618      	mov	r0, r3
 80009de:	f009 fd99 	bl	800a514 <memset>
  if(hi2c->Instance==I2C2)
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	681b      	ldr	r3, [r3, #0]
 80009e6:	4a1f      	ldr	r2, [pc, #124]	@ (8000a64 <HAL_I2C_MspInit+0xa8>)
 80009e8:	4293      	cmp	r3, r2
 80009ea:	d136      	bne.n	8000a5a <HAL_I2C_MspInit+0x9e>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 80009ec:	2380      	movs	r3, #128	@ 0x80
 80009ee:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 80009f0:	2300      	movs	r3, #0
 80009f2:	647b      	str	r3, [r7, #68]	@ 0x44
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80009f4:	f107 0310 	add.w	r3, r7, #16
 80009f8:	4618      	mov	r0, r3
 80009fa:	f002 f8b5 	bl	8002b68 <HAL_RCCEx_PeriphCLKConfig>
 80009fe:	4603      	mov	r3, r0
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d001      	beq.n	8000a08 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000a04:	f7ff ffa8 	bl	8000958 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a08:	4b17      	ldr	r3, [pc, #92]	@ (8000a68 <HAL_I2C_MspInit+0xac>)
 8000a0a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a0c:	4a16      	ldr	r2, [pc, #88]	@ (8000a68 <HAL_I2C_MspInit+0xac>)
 8000a0e:	f043 0302 	orr.w	r3, r3, #2
 8000a12:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a14:	4b14      	ldr	r3, [pc, #80]	@ (8000a68 <HAL_I2C_MspInit+0xac>)
 8000a16:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a18:	f003 0302 	and.w	r3, r3, #2
 8000a1c:	60fb      	str	r3, [r7, #12]
 8000a1e:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB11     ------> I2C2_SDA
    PB13     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8000a20:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8000a24:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a26:	2312      	movs	r3, #18
 8000a28:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a2e:	2303      	movs	r3, #3
 8000a30:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000a32:	2304      	movs	r3, #4
 8000a34:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a36:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8000a3a:	4619      	mov	r1, r3
 8000a3c:	480b      	ldr	r0, [pc, #44]	@ (8000a6c <HAL_I2C_MspInit+0xb0>)
 8000a3e:	f000 ff1b 	bl	8001878 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000a42:	4b09      	ldr	r3, [pc, #36]	@ (8000a68 <HAL_I2C_MspInit+0xac>)
 8000a44:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000a46:	4a08      	ldr	r2, [pc, #32]	@ (8000a68 <HAL_I2C_MspInit+0xac>)
 8000a48:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000a4c:	6593      	str	r3, [r2, #88]	@ 0x58
 8000a4e:	4b06      	ldr	r3, [pc, #24]	@ (8000a68 <HAL_I2C_MspInit+0xac>)
 8000a50:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000a52:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000a56:	60bb      	str	r3, [r7, #8]
 8000a58:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8000a5a:	bf00      	nop
 8000a5c:	3780      	adds	r7, #128	@ 0x80
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	bd80      	pop	{r7, pc}
 8000a62:	bf00      	nop
 8000a64:	40005800 	.word	0x40005800
 8000a68:	40021000 	.word	0x40021000
 8000a6c:	48000400 	.word	0x48000400

08000a70 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b0a2      	sub	sp, #136	@ 0x88
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a78:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	601a      	str	r2, [r3, #0]
 8000a80:	605a      	str	r2, [r3, #4]
 8000a82:	609a      	str	r2, [r3, #8]
 8000a84:	60da      	str	r2, [r3, #12]
 8000a86:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a88:	f107 0318 	add.w	r3, r7, #24
 8000a8c:	225c      	movs	r2, #92	@ 0x5c
 8000a8e:	2100      	movs	r1, #0
 8000a90:	4618      	mov	r0, r3
 8000a92:	f009 fd3f 	bl	800a514 <memset>
  if(hsd->Instance==SDMMC1)
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	681b      	ldr	r3, [r3, #0]
 8000a9a:	4a57      	ldr	r2, [pc, #348]	@ (8000bf8 <HAL_SD_MspInit+0x188>)
 8000a9c:	4293      	cmp	r3, r2
 8000a9e:	f040 80a6 	bne.w	8000bee <HAL_SD_MspInit+0x17e>

  /* USER CODE END SDMMC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SDMMC1;
 8000aa2:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8000aa6:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_PLL;
 8000aa8:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000aac:	663b      	str	r3, [r7, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000aae:	f107 0318 	add.w	r3, r7, #24
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	f002 f858 	bl	8002b68 <HAL_RCCEx_PeriphCLKConfig>
 8000ab8:	4603      	mov	r3, r0
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d001      	beq.n	8000ac2 <HAL_SD_MspInit+0x52>
    {
      Error_Handler();
 8000abe:	f7ff ff4b 	bl	8000958 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8000ac2:	4b4e      	ldr	r3, [pc, #312]	@ (8000bfc <HAL_SD_MspInit+0x18c>)
 8000ac4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000ac6:	4a4d      	ldr	r2, [pc, #308]	@ (8000bfc <HAL_SD_MspInit+0x18c>)
 8000ac8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000acc:	6613      	str	r3, [r2, #96]	@ 0x60
 8000ace:	4b4b      	ldr	r3, [pc, #300]	@ (8000bfc <HAL_SD_MspInit+0x18c>)
 8000ad0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000ad2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000ad6:	617b      	str	r3, [r7, #20]
 8000ad8:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ada:	4b48      	ldr	r3, [pc, #288]	@ (8000bfc <HAL_SD_MspInit+0x18c>)
 8000adc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ade:	4a47      	ldr	r2, [pc, #284]	@ (8000bfc <HAL_SD_MspInit+0x18c>)
 8000ae0:	f043 0304 	orr.w	r3, r3, #4
 8000ae4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ae6:	4b45      	ldr	r3, [pc, #276]	@ (8000bfc <HAL_SD_MspInit+0x18c>)
 8000ae8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000aea:	f003 0304 	and.w	r3, r3, #4
 8000aee:	613b      	str	r3, [r7, #16]
 8000af0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000af2:	4b42      	ldr	r3, [pc, #264]	@ (8000bfc <HAL_SD_MspInit+0x18c>)
 8000af4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000af6:	4a41      	ldr	r2, [pc, #260]	@ (8000bfc <HAL_SD_MspInit+0x18c>)
 8000af8:	f043 0308 	orr.w	r3, r3, #8
 8000afc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000afe:	4b3f      	ldr	r3, [pc, #252]	@ (8000bfc <HAL_SD_MspInit+0x18c>)
 8000b00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b02:	f003 0308 	and.w	r3, r3, #8
 8000b06:	60fb      	str	r3, [r7, #12]
 8000b08:	68fb      	ldr	r3, [r7, #12]
    /**SDMMC1 GPIO Configuration
    PC8     ------> SDMMC1_D0
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000b0a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000b0e:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b10:	2302      	movs	r3, #2
 8000b12:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b14:	2301      	movs	r3, #1
 8000b16:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b18:	2303      	movs	r3, #3
 8000b1a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8000b1e:	230c      	movs	r3, #12
 8000b20:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b24:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8000b28:	4619      	mov	r1, r3
 8000b2a:	4835      	ldr	r0, [pc, #212]	@ (8000c00 <HAL_SD_MspInit+0x190>)
 8000b2c:	f000 fea4 	bl	8001878 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000b30:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000b34:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b36:	2302      	movs	r3, #2
 8000b38:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b3e:	2303      	movs	r3, #3
 8000b40:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8000b44:	230c      	movs	r3, #12
 8000b46:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b4a:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8000b4e:	4619      	mov	r1, r3
 8000b50:	482b      	ldr	r0, [pc, #172]	@ (8000c00 <HAL_SD_MspInit+0x190>)
 8000b52:	f000 fe91 	bl	8001878 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000b56:	2304      	movs	r3, #4
 8000b58:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b5a:	2302      	movs	r3, #2
 8000b5c:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b5e:	2301      	movs	r3, #1
 8000b60:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b62:	2303      	movs	r3, #3
 8000b64:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8000b68:	230c      	movs	r3, #12
 8000b6a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b6e:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8000b72:	4619      	mov	r1, r3
 8000b74:	4823      	ldr	r0, [pc, #140]	@ (8000c04 <HAL_SD_MspInit+0x194>)
 8000b76:	f000 fe7f 	bl	8001878 <HAL_GPIO_Init>

    /* SDMMC1 DMA Init */
    /* SDMMC1 Init */
    hdma_sdmmc1.Instance = DMA2_Channel4;
 8000b7a:	4b23      	ldr	r3, [pc, #140]	@ (8000c08 <HAL_SD_MspInit+0x198>)
 8000b7c:	4a23      	ldr	r2, [pc, #140]	@ (8000c0c <HAL_SD_MspInit+0x19c>)
 8000b7e:	601a      	str	r2, [r3, #0]
    hdma_sdmmc1.Init.Request = DMA_REQUEST_7;
 8000b80:	4b21      	ldr	r3, [pc, #132]	@ (8000c08 <HAL_SD_MspInit+0x198>)
 8000b82:	2207      	movs	r2, #7
 8000b84:	605a      	str	r2, [r3, #4]
    hdma_sdmmc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000b86:	4b20      	ldr	r3, [pc, #128]	@ (8000c08 <HAL_SD_MspInit+0x198>)
 8000b88:	2200      	movs	r2, #0
 8000b8a:	609a      	str	r2, [r3, #8]
    hdma_sdmmc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b8c:	4b1e      	ldr	r3, [pc, #120]	@ (8000c08 <HAL_SD_MspInit+0x198>)
 8000b8e:	2200      	movs	r2, #0
 8000b90:	60da      	str	r2, [r3, #12]
    hdma_sdmmc1.Init.MemInc = DMA_MINC_ENABLE;
 8000b92:	4b1d      	ldr	r3, [pc, #116]	@ (8000c08 <HAL_SD_MspInit+0x198>)
 8000b94:	2280      	movs	r2, #128	@ 0x80
 8000b96:	611a      	str	r2, [r3, #16]
    hdma_sdmmc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000b98:	4b1b      	ldr	r3, [pc, #108]	@ (8000c08 <HAL_SD_MspInit+0x198>)
 8000b9a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000b9e:	615a      	str	r2, [r3, #20]
    hdma_sdmmc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000ba0:	4b19      	ldr	r3, [pc, #100]	@ (8000c08 <HAL_SD_MspInit+0x198>)
 8000ba2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000ba6:	619a      	str	r2, [r3, #24]
    hdma_sdmmc1.Init.Mode = DMA_NORMAL;
 8000ba8:	4b17      	ldr	r3, [pc, #92]	@ (8000c08 <HAL_SD_MspInit+0x198>)
 8000baa:	2200      	movs	r2, #0
 8000bac:	61da      	str	r2, [r3, #28]
    hdma_sdmmc1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8000bae:	4b16      	ldr	r3, [pc, #88]	@ (8000c08 <HAL_SD_MspInit+0x198>)
 8000bb0:	f44f 5240 	mov.w	r2, #12288	@ 0x3000
 8000bb4:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_sdmmc1) != HAL_OK)
 8000bb6:	4814      	ldr	r0, [pc, #80]	@ (8000c08 <HAL_SD_MspInit+0x198>)
 8000bb8:	f000 fbe8 	bl	800138c <HAL_DMA_Init>
 8000bbc:	4603      	mov	r3, r0
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d001      	beq.n	8000bc6 <HAL_SD_MspInit+0x156>
    {
      Error_Handler();
 8000bc2:	f7ff fec9 	bl	8000958 <Error_Handler>

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    /* Be sure to change transfer direction before calling
     HAL_SD_ReadBlocks_DMA or HAL_SD_WriteBlocks_DMA. */
    __HAL_LINKDMA(hsd,hdmarx,hdma_sdmmc1);
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	4a0f      	ldr	r2, [pc, #60]	@ (8000c08 <HAL_SD_MspInit+0x198>)
 8000bca:	641a      	str	r2, [r3, #64]	@ 0x40
 8000bcc:	4a0e      	ldr	r2, [pc, #56]	@ (8000c08 <HAL_SD_MspInit+0x198>)
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	6293      	str	r3, [r2, #40]	@ 0x28
    __HAL_LINKDMA(hsd,hdmatx,hdma_sdmmc1);
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	4a0c      	ldr	r2, [pc, #48]	@ (8000c08 <HAL_SD_MspInit+0x198>)
 8000bd6:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000bd8:	4a0b      	ldr	r2, [pc, #44]	@ (8000c08 <HAL_SD_MspInit+0x198>)
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	6293      	str	r3, [r2, #40]	@ 0x28

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 0, 0);
 8000bde:	2200      	movs	r2, #0
 8000be0:	2100      	movs	r1, #0
 8000be2:	2031      	movs	r0, #49	@ 0x31
 8000be4:	f000 fb9b 	bl	800131e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 8000be8:	2031      	movs	r0, #49	@ 0x31
 8000bea:	f000 fbb4 	bl	8001356 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 8000bee:	bf00      	nop
 8000bf0:	3788      	adds	r7, #136	@ 0x88
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	bd80      	pop	{r7, pc}
 8000bf6:	bf00      	nop
 8000bf8:	40012800 	.word	0x40012800
 8000bfc:	40021000 	.word	0x40021000
 8000c00:	48000800 	.word	0x48000800
 8000c04:	48000c00 	.word	0x48000c00
 8000c08:	20000228 	.word	0x20000228
 8000c0c:	40020444 	.word	0x40020444

08000c10 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000c10:	b480      	push	{r7}
 8000c12:	b085      	sub	sp, #20
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	4a0a      	ldr	r2, [pc, #40]	@ (8000c48 <HAL_TIM_Base_MspInit+0x38>)
 8000c1e:	4293      	cmp	r3, r2
 8000c20:	d10b      	bne.n	8000c3a <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000c22:	4b0a      	ldr	r3, [pc, #40]	@ (8000c4c <HAL_TIM_Base_MspInit+0x3c>)
 8000c24:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000c26:	4a09      	ldr	r2, [pc, #36]	@ (8000c4c <HAL_TIM_Base_MspInit+0x3c>)
 8000c28:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000c2c:	6613      	str	r3, [r2, #96]	@ 0x60
 8000c2e:	4b07      	ldr	r3, [pc, #28]	@ (8000c4c <HAL_TIM_Base_MspInit+0x3c>)
 8000c30:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000c32:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000c36:	60fb      	str	r3, [r7, #12]
 8000c38:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000c3a:	bf00      	nop
 8000c3c:	3714      	adds	r7, #20
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop
 8000c48:	40012c00 	.word	0x40012c00
 8000c4c:	40021000 	.word	0x40021000

08000c50 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b088      	sub	sp, #32
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c58:	f107 030c 	add.w	r3, r7, #12
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	601a      	str	r2, [r3, #0]
 8000c60:	605a      	str	r2, [r3, #4]
 8000c62:	609a      	str	r2, [r3, #8]
 8000c64:	60da      	str	r2, [r3, #12]
 8000c66:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	4a11      	ldr	r2, [pc, #68]	@ (8000cb4 <HAL_TIM_MspPostInit+0x64>)
 8000c6e:	4293      	cmp	r3, r2
 8000c70:	d11b      	bne.n	8000caa <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c72:	4b11      	ldr	r3, [pc, #68]	@ (8000cb8 <HAL_TIM_MspPostInit+0x68>)
 8000c74:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c76:	4a10      	ldr	r2, [pc, #64]	@ (8000cb8 <HAL_TIM_MspPostInit+0x68>)
 8000c78:	f043 0302 	orr.w	r3, r3, #2
 8000c7c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000c7e:	4b0e      	ldr	r3, [pc, #56]	@ (8000cb8 <HAL_TIM_MspPostInit+0x68>)
 8000c80:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c82:	f003 0302 	and.w	r3, r3, #2
 8000c86:	60bb      	str	r3, [r7, #8]
 8000c88:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PB0     ------> TIM1_CH2N
    */
    GPIO_InitStruct.Pin = NEO_Pin;
 8000c8a:	2301      	movs	r3, #1
 8000c8c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c8e:	2302      	movs	r3, #2
 8000c90:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c92:	2300      	movs	r3, #0
 8000c94:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c96:	2300      	movs	r3, #0
 8000c98:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000c9a:	2301      	movs	r3, #1
 8000c9c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(NEO_GPIO_Port, &GPIO_InitStruct);
 8000c9e:	f107 030c 	add.w	r3, r7, #12
 8000ca2:	4619      	mov	r1, r3
 8000ca4:	4805      	ldr	r0, [pc, #20]	@ (8000cbc <HAL_TIM_MspPostInit+0x6c>)
 8000ca6:	f000 fde7 	bl	8001878 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000caa:	bf00      	nop
 8000cac:	3720      	adds	r7, #32
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	bd80      	pop	{r7, pc}
 8000cb2:	bf00      	nop
 8000cb4:	40012c00 	.word	0x40012c00
 8000cb8:	40021000 	.word	0x40021000
 8000cbc:	48000400 	.word	0x48000400

08000cc0 <HAL_SAI_MspInit>:
extern DMA_HandleTypeDef hdma_sai1_a;

static uint32_t SAI1_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b0a0      	sub	sp, #128	@ 0x80
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000cc8:	f107 0310 	add.w	r3, r7, #16
 8000ccc:	225c      	movs	r2, #92	@ 0x5c
 8000cce:	2100      	movs	r1, #0
 8000cd0:	4618      	mov	r0, r3
 8000cd2:	f009 fc1f 	bl	800a514 <memset>
/* SAI1 */
    if(hsai->Instance==SAI1_Block_A)
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	4a47      	ldr	r2, [pc, #284]	@ (8000df8 <HAL_SAI_MspInit+0x138>)
 8000cdc:	4293      	cmp	r3, r2
 8000cde:	f040 8086 	bne.w	8000dee <HAL_SAI_MspInit+0x12e>
    {
    /* Peripheral clock enable */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SAI1;
 8000ce2:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000ce6:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLLSAI1;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	657b      	str	r3, [r7, #84]	@ 0x54
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSE;
 8000cec:	2303      	movs	r3, #3
 8000cee:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000cf0:	2301      	movs	r3, #1
 8000cf2:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 37;
 8000cf4:	2325      	movs	r3, #37	@ 0x25
 8000cf6:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV6;
 8000cf8:	2306      	movs	r3, #6
 8000cfa:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV8;
 8000cfc:	2308      	movs	r3, #8
 8000cfe:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000d00:	2302      	movs	r3, #2
 8000d02:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_SAI1CLK;
 8000d04:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000d08:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d0a:	f107 0310 	add.w	r3, r7, #16
 8000d0e:	4618      	mov	r0, r3
 8000d10:	f001 ff2a 	bl	8002b68 <HAL_RCCEx_PeriphCLKConfig>
 8000d14:	4603      	mov	r3, r0
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d001      	beq.n	8000d1e <HAL_SAI_MspInit+0x5e>
    {
      Error_Handler();
 8000d1a:	f7ff fe1d 	bl	8000958 <Error_Handler>
    }

    if (SAI1_client == 0)
 8000d1e:	4b37      	ldr	r3, [pc, #220]	@ (8000dfc <HAL_SAI_MspInit+0x13c>)
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d10b      	bne.n	8000d3e <HAL_SAI_MspInit+0x7e>
    {
       __HAL_RCC_SAI1_CLK_ENABLE();
 8000d26:	4b36      	ldr	r3, [pc, #216]	@ (8000e00 <HAL_SAI_MspInit+0x140>)
 8000d28:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000d2a:	4a35      	ldr	r2, [pc, #212]	@ (8000e00 <HAL_SAI_MspInit+0x140>)
 8000d2c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000d30:	6613      	str	r3, [r2, #96]	@ 0x60
 8000d32:	4b33      	ldr	r3, [pc, #204]	@ (8000e00 <HAL_SAI_MspInit+0x140>)
 8000d34:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000d36:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000d3a:	60fb      	str	r3, [r7, #12]
 8000d3c:	68fb      	ldr	r3, [r7, #12]
    }
    SAI1_client ++;
 8000d3e:	4b2f      	ldr	r3, [pc, #188]	@ (8000dfc <HAL_SAI_MspInit+0x13c>)
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	3301      	adds	r3, #1
 8000d44:	4a2d      	ldr	r2, [pc, #180]	@ (8000dfc <HAL_SAI_MspInit+0x13c>)
 8000d46:	6013      	str	r3, [r2, #0]
    /**SAI1_A_Block_A GPIO Configuration
    PC3     ------> SAI1_SD_A
    PB10     ------> SAI1_SCK_A
    PB12     ------> SAI1_FS_A
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000d48:	2308      	movs	r3, #8
 8000d4a:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d4c:	2302      	movs	r3, #2
 8000d4e:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d50:	2300      	movs	r3, #0
 8000d52:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d54:	2300      	movs	r3, #0
 8000d56:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8000d58:	230d      	movs	r3, #13
 8000d5a:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d5c:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8000d60:	4619      	mov	r1, r3
 8000d62:	4828      	ldr	r0, [pc, #160]	@ (8000e04 <HAL_SAI_MspInit+0x144>)
 8000d64:	f000 fd88 	bl	8001878 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 8000d68:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000d6c:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d6e:	2302      	movs	r3, #2
 8000d70:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d72:	2300      	movs	r3, #0
 8000d74:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d76:	2300      	movs	r3, #0
 8000d78:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8000d7a:	230d      	movs	r3, #13
 8000d7c:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d7e:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8000d82:	4619      	mov	r1, r3
 8000d84:	4820      	ldr	r0, [pc, #128]	@ (8000e08 <HAL_SAI_MspInit+0x148>)
 8000d86:	f000 fd77 	bl	8001878 <HAL_GPIO_Init>

      /* Peripheral DMA init*/

    hdma_sai1_a.Instance = DMA2_Channel1;
 8000d8a:	4b20      	ldr	r3, [pc, #128]	@ (8000e0c <HAL_SAI_MspInit+0x14c>)
 8000d8c:	4a20      	ldr	r2, [pc, #128]	@ (8000e10 <HAL_SAI_MspInit+0x150>)
 8000d8e:	601a      	str	r2, [r3, #0]
    hdma_sai1_a.Init.Request = DMA_REQUEST_1;
 8000d90:	4b1e      	ldr	r3, [pc, #120]	@ (8000e0c <HAL_SAI_MspInit+0x14c>)
 8000d92:	2201      	movs	r2, #1
 8000d94:	605a      	str	r2, [r3, #4]
    hdma_sai1_a.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000d96:	4b1d      	ldr	r3, [pc, #116]	@ (8000e0c <HAL_SAI_MspInit+0x14c>)
 8000d98:	2210      	movs	r2, #16
 8000d9a:	609a      	str	r2, [r3, #8]
    hdma_sai1_a.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d9c:	4b1b      	ldr	r3, [pc, #108]	@ (8000e0c <HAL_SAI_MspInit+0x14c>)
 8000d9e:	2200      	movs	r2, #0
 8000da0:	60da      	str	r2, [r3, #12]
    hdma_sai1_a.Init.MemInc = DMA_MINC_ENABLE;
 8000da2:	4b1a      	ldr	r3, [pc, #104]	@ (8000e0c <HAL_SAI_MspInit+0x14c>)
 8000da4:	2280      	movs	r2, #128	@ 0x80
 8000da6:	611a      	str	r2, [r3, #16]
    hdma_sai1_a.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000da8:	4b18      	ldr	r3, [pc, #96]	@ (8000e0c <HAL_SAI_MspInit+0x14c>)
 8000daa:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000dae:	615a      	str	r2, [r3, #20]
    hdma_sai1_a.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000db0:	4b16      	ldr	r3, [pc, #88]	@ (8000e0c <HAL_SAI_MspInit+0x14c>)
 8000db2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000db6:	619a      	str	r2, [r3, #24]
    hdma_sai1_a.Init.Mode = DMA_CIRCULAR;
 8000db8:	4b14      	ldr	r3, [pc, #80]	@ (8000e0c <HAL_SAI_MspInit+0x14c>)
 8000dba:	2220      	movs	r2, #32
 8000dbc:	61da      	str	r2, [r3, #28]
    hdma_sai1_a.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8000dbe:	4b13      	ldr	r3, [pc, #76]	@ (8000e0c <HAL_SAI_MspInit+0x14c>)
 8000dc0:	f44f 5240 	mov.w	r2, #12288	@ 0x3000
 8000dc4:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_sai1_a) != HAL_OK)
 8000dc6:	4811      	ldr	r0, [pc, #68]	@ (8000e0c <HAL_SAI_MspInit+0x14c>)
 8000dc8:	f000 fae0 	bl	800138c <HAL_DMA_Init>
 8000dcc:	4603      	mov	r3, r0
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d001      	beq.n	8000dd6 <HAL_SAI_MspInit+0x116>
    {
      Error_Handler();
 8000dd2:	f7ff fdc1 	bl	8000958 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(hsai,hdmarx,hdma_sai1_a);
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	4a0c      	ldr	r2, [pc, #48]	@ (8000e0c <HAL_SAI_MspInit+0x14c>)
 8000dda:	671a      	str	r2, [r3, #112]	@ 0x70
 8000ddc:	4a0b      	ldr	r2, [pc, #44]	@ (8000e0c <HAL_SAI_MspInit+0x14c>)
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	6293      	str	r3, [r2, #40]	@ 0x28

    __HAL_LINKDMA(hsai,hdmatx,hdma_sai1_a);
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	4a09      	ldr	r2, [pc, #36]	@ (8000e0c <HAL_SAI_MspInit+0x14c>)
 8000de6:	66da      	str	r2, [r3, #108]	@ 0x6c
 8000de8:	4a08      	ldr	r2, [pc, #32]	@ (8000e0c <HAL_SAI_MspInit+0x14c>)
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	6293      	str	r3, [r2, #40]	@ 0x28

    }
}
 8000dee:	bf00      	nop
 8000df0:	3780      	adds	r7, #128	@ 0x80
 8000df2:	46bd      	mov	sp, r7
 8000df4:	bd80      	pop	{r7, pc}
 8000df6:	bf00      	nop
 8000df8:	40015404 	.word	0x40015404
 8000dfc:	20000f50 	.word	0x20000f50
 8000e00:	40021000 	.word	0x40021000
 8000e04:	48000800 	.word	0x48000800
 8000e08:	48000400 	.word	0x48000400
 8000e0c:	2000015c 	.word	0x2000015c
 8000e10:	40020408 	.word	0x40020408

08000e14 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e14:	b480      	push	{r7}
 8000e16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e18:	bf00      	nop
 8000e1a:	e7fd      	b.n	8000e18 <NMI_Handler+0x4>

08000e1c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e20:	bf00      	nop
 8000e22:	e7fd      	b.n	8000e20 <HardFault_Handler+0x4>

08000e24 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e24:	b480      	push	{r7}
 8000e26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e28:	bf00      	nop
 8000e2a:	e7fd      	b.n	8000e28 <MemManage_Handler+0x4>

08000e2c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e30:	bf00      	nop
 8000e32:	e7fd      	b.n	8000e30 <BusFault_Handler+0x4>

08000e34 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e34:	b480      	push	{r7}
 8000e36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e38:	bf00      	nop
 8000e3a:	e7fd      	b.n	8000e38 <UsageFault_Handler+0x4>

08000e3c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e40:	bf00      	nop
 8000e42:	46bd      	mov	sp, r7
 8000e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e48:	4770      	bx	lr

08000e4a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e4a:	b480      	push	{r7}
 8000e4c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e4e:	bf00      	nop
 8000e50:	46bd      	mov	sp, r7
 8000e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e56:	4770      	bx	lr

08000e58 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e5c:	bf00      	nop
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e64:	4770      	bx	lr

08000e66 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e66:	b580      	push	{r7, lr}
 8000e68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e6a:	f000 f939 	bl	80010e0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e6e:	bf00      	nop
 8000e70:	bd80      	pop	{r7, pc}
	...

08000e74 <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 8000e78:	4802      	ldr	r0, [pc, #8]	@ (8000e84 <SDMMC1_IRQHandler+0x10>)
 8000e7a:	f003 fda9 	bl	80049d0 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 8000e7e:	bf00      	nop
 8000e80:	bd80      	pop	{r7, pc}
 8000e82:	bf00      	nop
 8000e84:	200001a4 	.word	0x200001a4

08000e88 <DMA2_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA2 channel1 global interrupt.
  */
void DMA2_Channel1_IRQHandler(void)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel1_IRQn 0 */

  /* USER CODE END DMA2_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai1_a);
 8000e8c:	4802      	ldr	r0, [pc, #8]	@ (8000e98 <DMA2_Channel1_IRQHandler+0x10>)
 8000e8e:	f000 fc14 	bl	80016ba <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel1_IRQn 1 */

  /* USER CODE END DMA2_Channel1_IRQn 1 */
}
 8000e92:	bf00      	nop
 8000e94:	bd80      	pop	{r7, pc}
 8000e96:	bf00      	nop
 8000e98:	2000015c 	.word	0x2000015c

08000e9c <DMA2_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA2 channel4 global interrupt.
  */
void DMA2_Channel4_IRQHandler(void)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel4_IRQn 0 */

  /* USER CODE END DMA2_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdmmc1);
 8000ea0:	4802      	ldr	r0, [pc, #8]	@ (8000eac <DMA2_Channel4_IRQHandler+0x10>)
 8000ea2:	f000 fc0a 	bl	80016ba <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel4_IRQn 1 */

  /* USER CODE END DMA2_Channel4_IRQn 1 */
}
 8000ea6:	bf00      	nop
 8000ea8:	bd80      	pop	{r7, pc}
 8000eaa:	bf00      	nop
 8000eac:	20000228 	.word	0x20000228

08000eb0 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b086      	sub	sp, #24
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	60f8      	str	r0, [r7, #12]
 8000eb8:	60b9      	str	r1, [r7, #8]
 8000eba:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	617b      	str	r3, [r7, #20]
 8000ec0:	e00a      	b.n	8000ed8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000ec2:	f3af 8000 	nop.w
 8000ec6:	4601      	mov	r1, r0
 8000ec8:	68bb      	ldr	r3, [r7, #8]
 8000eca:	1c5a      	adds	r2, r3, #1
 8000ecc:	60ba      	str	r2, [r7, #8]
 8000ece:	b2ca      	uxtb	r2, r1
 8000ed0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ed2:	697b      	ldr	r3, [r7, #20]
 8000ed4:	3301      	adds	r3, #1
 8000ed6:	617b      	str	r3, [r7, #20]
 8000ed8:	697a      	ldr	r2, [r7, #20]
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	429a      	cmp	r2, r3
 8000ede:	dbf0      	blt.n	8000ec2 <_read+0x12>
  }

  return len;
 8000ee0:	687b      	ldr	r3, [r7, #4]
}
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	3718      	adds	r7, #24
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	bd80      	pop	{r7, pc}

08000eea <_close>:
  }
  return len;
}

int _close(int file)
{
 8000eea:	b480      	push	{r7}
 8000eec:	b083      	sub	sp, #12
 8000eee:	af00      	add	r7, sp, #0
 8000ef0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000ef2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	370c      	adds	r7, #12
 8000efa:	46bd      	mov	sp, r7
 8000efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f00:	4770      	bx	lr

08000f02 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000f02:	b480      	push	{r7}
 8000f04:	b083      	sub	sp, #12
 8000f06:	af00      	add	r7, sp, #0
 8000f08:	6078      	str	r0, [r7, #4]
 8000f0a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000f0c:	683b      	ldr	r3, [r7, #0]
 8000f0e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000f12:	605a      	str	r2, [r3, #4]
  return 0;
 8000f14:	2300      	movs	r3, #0
}
 8000f16:	4618      	mov	r0, r3
 8000f18:	370c      	adds	r7, #12
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f20:	4770      	bx	lr

08000f22 <_isatty>:

int _isatty(int file)
{
 8000f22:	b480      	push	{r7}
 8000f24:	b083      	sub	sp, #12
 8000f26:	af00      	add	r7, sp, #0
 8000f28:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000f2a:	2301      	movs	r3, #1
}
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	370c      	adds	r7, #12
 8000f30:	46bd      	mov	sp, r7
 8000f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f36:	4770      	bx	lr

08000f38 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	b085      	sub	sp, #20
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	60f8      	str	r0, [r7, #12]
 8000f40:	60b9      	str	r1, [r7, #8]
 8000f42:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000f44:	2300      	movs	r3, #0
}
 8000f46:	4618      	mov	r0, r3
 8000f48:	3714      	adds	r7, #20
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f50:	4770      	bx	lr
	...

08000f54 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b086      	sub	sp, #24
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f5c:	4a14      	ldr	r2, [pc, #80]	@ (8000fb0 <_sbrk+0x5c>)
 8000f5e:	4b15      	ldr	r3, [pc, #84]	@ (8000fb4 <_sbrk+0x60>)
 8000f60:	1ad3      	subs	r3, r2, r3
 8000f62:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f64:	697b      	ldr	r3, [r7, #20]
 8000f66:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f68:	4b13      	ldr	r3, [pc, #76]	@ (8000fb8 <_sbrk+0x64>)
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d102      	bne.n	8000f76 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f70:	4b11      	ldr	r3, [pc, #68]	@ (8000fb8 <_sbrk+0x64>)
 8000f72:	4a12      	ldr	r2, [pc, #72]	@ (8000fbc <_sbrk+0x68>)
 8000f74:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f76:	4b10      	ldr	r3, [pc, #64]	@ (8000fb8 <_sbrk+0x64>)
 8000f78:	681a      	ldr	r2, [r3, #0]
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	4413      	add	r3, r2
 8000f7e:	693a      	ldr	r2, [r7, #16]
 8000f80:	429a      	cmp	r2, r3
 8000f82:	d207      	bcs.n	8000f94 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f84:	f009 fb14 	bl	800a5b0 <__errno>
 8000f88:	4603      	mov	r3, r0
 8000f8a:	220c      	movs	r2, #12
 8000f8c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f8e:	f04f 33ff 	mov.w	r3, #4294967295
 8000f92:	e009      	b.n	8000fa8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f94:	4b08      	ldr	r3, [pc, #32]	@ (8000fb8 <_sbrk+0x64>)
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f9a:	4b07      	ldr	r3, [pc, #28]	@ (8000fb8 <_sbrk+0x64>)
 8000f9c:	681a      	ldr	r2, [r3, #0]
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	4413      	add	r3, r2
 8000fa2:	4a05      	ldr	r2, [pc, #20]	@ (8000fb8 <_sbrk+0x64>)
 8000fa4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000fa6:	68fb      	ldr	r3, [r7, #12]
}
 8000fa8:	4618      	mov	r0, r3
 8000faa:	3718      	adds	r7, #24
 8000fac:	46bd      	mov	sp, r7
 8000fae:	bd80      	pop	{r7, pc}
 8000fb0:	20010000 	.word	0x20010000
 8000fb4:	00000400 	.word	0x00000400
 8000fb8:	20000f54 	.word	0x20000f54
 8000fbc:	20001100 	.word	0x20001100

08000fc0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000fc4:	4b06      	ldr	r3, [pc, #24]	@ (8000fe0 <SystemInit+0x20>)
 8000fc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000fca:	4a05      	ldr	r2, [pc, #20]	@ (8000fe0 <SystemInit+0x20>)
 8000fcc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000fd0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000fd4:	bf00      	nop
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fdc:	4770      	bx	lr
 8000fde:	bf00      	nop
 8000fe0:	e000ed00 	.word	0xe000ed00

08000fe4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000fe4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800101c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000fe8:	f7ff ffea 	bl	8000fc0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000fec:	480c      	ldr	r0, [pc, #48]	@ (8001020 <LoopForever+0x6>)
  ldr r1, =_edata
 8000fee:	490d      	ldr	r1, [pc, #52]	@ (8001024 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000ff0:	4a0d      	ldr	r2, [pc, #52]	@ (8001028 <LoopForever+0xe>)
  movs r3, #0
 8000ff2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ff4:	e002      	b.n	8000ffc <LoopCopyDataInit>

08000ff6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ff6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ff8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ffa:	3304      	adds	r3, #4

08000ffc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ffc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ffe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001000:	d3f9      	bcc.n	8000ff6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001002:	4a0a      	ldr	r2, [pc, #40]	@ (800102c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001004:	4c0a      	ldr	r4, [pc, #40]	@ (8001030 <LoopForever+0x16>)
  movs r3, #0
 8001006:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001008:	e001      	b.n	800100e <LoopFillZerobss>

0800100a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800100a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800100c:	3204      	adds	r2, #4

0800100e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800100e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001010:	d3fb      	bcc.n	800100a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001012:	f009 fad3 	bl	800a5bc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001016:	f7ff f91f 	bl	8000258 <main>

0800101a <LoopForever>:

LoopForever:
    b LoopForever
 800101a:	e7fe      	b.n	800101a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800101c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001020:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001024:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8001028:	0800afbc 	.word	0x0800afbc
  ldr r2, =_sbss
 800102c:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8001030:	200010fc 	.word	0x200010fc

08001034 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001034:	e7fe      	b.n	8001034 <ADC1_IRQHandler>

08001036 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001036:	b580      	push	{r7, lr}
 8001038:	b082      	sub	sp, #8
 800103a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800103c:	2300      	movs	r3, #0
 800103e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001040:	2003      	movs	r0, #3
 8001042:	f000 f961 	bl	8001308 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001046:	200f      	movs	r0, #15
 8001048:	f000 f80e 	bl	8001068 <HAL_InitTick>
 800104c:	4603      	mov	r3, r0
 800104e:	2b00      	cmp	r3, #0
 8001050:	d002      	beq.n	8001058 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001052:	2301      	movs	r3, #1
 8001054:	71fb      	strb	r3, [r7, #7]
 8001056:	e001      	b.n	800105c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001058:	f7ff fc8c 	bl	8000974 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800105c:	79fb      	ldrb	r3, [r7, #7]
}
 800105e:	4618      	mov	r0, r3
 8001060:	3708      	adds	r7, #8
 8001062:	46bd      	mov	sp, r7
 8001064:	bd80      	pop	{r7, pc}
	...

08001068 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b084      	sub	sp, #16
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001070:	2300      	movs	r3, #0
 8001072:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001074:	4b17      	ldr	r3, [pc, #92]	@ (80010d4 <HAL_InitTick+0x6c>)
 8001076:	781b      	ldrb	r3, [r3, #0]
 8001078:	2b00      	cmp	r3, #0
 800107a:	d023      	beq.n	80010c4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800107c:	4b16      	ldr	r3, [pc, #88]	@ (80010d8 <HAL_InitTick+0x70>)
 800107e:	681a      	ldr	r2, [r3, #0]
 8001080:	4b14      	ldr	r3, [pc, #80]	@ (80010d4 <HAL_InitTick+0x6c>)
 8001082:	781b      	ldrb	r3, [r3, #0]
 8001084:	4619      	mov	r1, r3
 8001086:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800108a:	fbb3 f3f1 	udiv	r3, r3, r1
 800108e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001092:	4618      	mov	r0, r3
 8001094:	f000 f96d 	bl	8001372 <HAL_SYSTICK_Config>
 8001098:	4603      	mov	r3, r0
 800109a:	2b00      	cmp	r3, #0
 800109c:	d10f      	bne.n	80010be <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	2b0f      	cmp	r3, #15
 80010a2:	d809      	bhi.n	80010b8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010a4:	2200      	movs	r2, #0
 80010a6:	6879      	ldr	r1, [r7, #4]
 80010a8:	f04f 30ff 	mov.w	r0, #4294967295
 80010ac:	f000 f937 	bl	800131e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80010b0:	4a0a      	ldr	r2, [pc, #40]	@ (80010dc <HAL_InitTick+0x74>)
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	6013      	str	r3, [r2, #0]
 80010b6:	e007      	b.n	80010c8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80010b8:	2301      	movs	r3, #1
 80010ba:	73fb      	strb	r3, [r7, #15]
 80010bc:	e004      	b.n	80010c8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80010be:	2301      	movs	r3, #1
 80010c0:	73fb      	strb	r3, [r7, #15]
 80010c2:	e001      	b.n	80010c8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80010c4:	2301      	movs	r3, #1
 80010c6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80010c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80010ca:	4618      	mov	r0, r3
 80010cc:	3710      	adds	r7, #16
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bd80      	pop	{r7, pc}
 80010d2:	bf00      	nop
 80010d4:	20000008 	.word	0x20000008
 80010d8:	20000000 	.word	0x20000000
 80010dc:	20000004 	.word	0x20000004

080010e0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010e0:	b480      	push	{r7}
 80010e2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80010e4:	4b06      	ldr	r3, [pc, #24]	@ (8001100 <HAL_IncTick+0x20>)
 80010e6:	781b      	ldrb	r3, [r3, #0]
 80010e8:	461a      	mov	r2, r3
 80010ea:	4b06      	ldr	r3, [pc, #24]	@ (8001104 <HAL_IncTick+0x24>)
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	4413      	add	r3, r2
 80010f0:	4a04      	ldr	r2, [pc, #16]	@ (8001104 <HAL_IncTick+0x24>)
 80010f2:	6013      	str	r3, [r2, #0]
}
 80010f4:	bf00      	nop
 80010f6:	46bd      	mov	sp, r7
 80010f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fc:	4770      	bx	lr
 80010fe:	bf00      	nop
 8001100:	20000008 	.word	0x20000008
 8001104:	20000f58 	.word	0x20000f58

08001108 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001108:	b480      	push	{r7}
 800110a:	af00      	add	r7, sp, #0
  return uwTick;
 800110c:	4b03      	ldr	r3, [pc, #12]	@ (800111c <HAL_GetTick+0x14>)
 800110e:	681b      	ldr	r3, [r3, #0]
}
 8001110:	4618      	mov	r0, r3
 8001112:	46bd      	mov	sp, r7
 8001114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001118:	4770      	bx	lr
 800111a:	bf00      	nop
 800111c:	20000f58 	.word	0x20000f58

08001120 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b084      	sub	sp, #16
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001128:	f7ff ffee 	bl	8001108 <HAL_GetTick>
 800112c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001132:	68fb      	ldr	r3, [r7, #12]
 8001134:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001138:	d005      	beq.n	8001146 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800113a:	4b0a      	ldr	r3, [pc, #40]	@ (8001164 <HAL_Delay+0x44>)
 800113c:	781b      	ldrb	r3, [r3, #0]
 800113e:	461a      	mov	r2, r3
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	4413      	add	r3, r2
 8001144:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001146:	bf00      	nop
 8001148:	f7ff ffde 	bl	8001108 <HAL_GetTick>
 800114c:	4602      	mov	r2, r0
 800114e:	68bb      	ldr	r3, [r7, #8]
 8001150:	1ad3      	subs	r3, r2, r3
 8001152:	68fa      	ldr	r2, [r7, #12]
 8001154:	429a      	cmp	r2, r3
 8001156:	d8f7      	bhi.n	8001148 <HAL_Delay+0x28>
  {
  }
}
 8001158:	bf00      	nop
 800115a:	bf00      	nop
 800115c:	3710      	adds	r7, #16
 800115e:	46bd      	mov	sp, r7
 8001160:	bd80      	pop	{r7, pc}
 8001162:	bf00      	nop
 8001164:	20000008 	.word	0x20000008

08001168 <__NVIC_SetPriorityGrouping>:
{
 8001168:	b480      	push	{r7}
 800116a:	b085      	sub	sp, #20
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	f003 0307 	and.w	r3, r3, #7
 8001176:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001178:	4b0c      	ldr	r3, [pc, #48]	@ (80011ac <__NVIC_SetPriorityGrouping+0x44>)
 800117a:	68db      	ldr	r3, [r3, #12]
 800117c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800117e:	68ba      	ldr	r2, [r7, #8]
 8001180:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001184:	4013      	ands	r3, r2
 8001186:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800118c:	68bb      	ldr	r3, [r7, #8]
 800118e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001190:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001194:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001198:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800119a:	4a04      	ldr	r2, [pc, #16]	@ (80011ac <__NVIC_SetPriorityGrouping+0x44>)
 800119c:	68bb      	ldr	r3, [r7, #8]
 800119e:	60d3      	str	r3, [r2, #12]
}
 80011a0:	bf00      	nop
 80011a2:	3714      	adds	r7, #20
 80011a4:	46bd      	mov	sp, r7
 80011a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011aa:	4770      	bx	lr
 80011ac:	e000ed00 	.word	0xe000ed00

080011b0 <__NVIC_GetPriorityGrouping>:
{
 80011b0:	b480      	push	{r7}
 80011b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011b4:	4b04      	ldr	r3, [pc, #16]	@ (80011c8 <__NVIC_GetPriorityGrouping+0x18>)
 80011b6:	68db      	ldr	r3, [r3, #12]
 80011b8:	0a1b      	lsrs	r3, r3, #8
 80011ba:	f003 0307 	and.w	r3, r3, #7
}
 80011be:	4618      	mov	r0, r3
 80011c0:	46bd      	mov	sp, r7
 80011c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c6:	4770      	bx	lr
 80011c8:	e000ed00 	.word	0xe000ed00

080011cc <__NVIC_EnableIRQ>:
{
 80011cc:	b480      	push	{r7}
 80011ce:	b083      	sub	sp, #12
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	4603      	mov	r3, r0
 80011d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011da:	2b00      	cmp	r3, #0
 80011dc:	db0b      	blt.n	80011f6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011de:	79fb      	ldrb	r3, [r7, #7]
 80011e0:	f003 021f 	and.w	r2, r3, #31
 80011e4:	4907      	ldr	r1, [pc, #28]	@ (8001204 <__NVIC_EnableIRQ+0x38>)
 80011e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011ea:	095b      	lsrs	r3, r3, #5
 80011ec:	2001      	movs	r0, #1
 80011ee:	fa00 f202 	lsl.w	r2, r0, r2
 80011f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80011f6:	bf00      	nop
 80011f8:	370c      	adds	r7, #12
 80011fa:	46bd      	mov	sp, r7
 80011fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001200:	4770      	bx	lr
 8001202:	bf00      	nop
 8001204:	e000e100 	.word	0xe000e100

08001208 <__NVIC_SetPriority>:
{
 8001208:	b480      	push	{r7}
 800120a:	b083      	sub	sp, #12
 800120c:	af00      	add	r7, sp, #0
 800120e:	4603      	mov	r3, r0
 8001210:	6039      	str	r1, [r7, #0]
 8001212:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001214:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001218:	2b00      	cmp	r3, #0
 800121a:	db0a      	blt.n	8001232 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800121c:	683b      	ldr	r3, [r7, #0]
 800121e:	b2da      	uxtb	r2, r3
 8001220:	490c      	ldr	r1, [pc, #48]	@ (8001254 <__NVIC_SetPriority+0x4c>)
 8001222:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001226:	0112      	lsls	r2, r2, #4
 8001228:	b2d2      	uxtb	r2, r2
 800122a:	440b      	add	r3, r1
 800122c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8001230:	e00a      	b.n	8001248 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001232:	683b      	ldr	r3, [r7, #0]
 8001234:	b2da      	uxtb	r2, r3
 8001236:	4908      	ldr	r1, [pc, #32]	@ (8001258 <__NVIC_SetPriority+0x50>)
 8001238:	79fb      	ldrb	r3, [r7, #7]
 800123a:	f003 030f 	and.w	r3, r3, #15
 800123e:	3b04      	subs	r3, #4
 8001240:	0112      	lsls	r2, r2, #4
 8001242:	b2d2      	uxtb	r2, r2
 8001244:	440b      	add	r3, r1
 8001246:	761a      	strb	r2, [r3, #24]
}
 8001248:	bf00      	nop
 800124a:	370c      	adds	r7, #12
 800124c:	46bd      	mov	sp, r7
 800124e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001252:	4770      	bx	lr
 8001254:	e000e100 	.word	0xe000e100
 8001258:	e000ed00 	.word	0xe000ed00

0800125c <NVIC_EncodePriority>:
{
 800125c:	b480      	push	{r7}
 800125e:	b089      	sub	sp, #36	@ 0x24
 8001260:	af00      	add	r7, sp, #0
 8001262:	60f8      	str	r0, [r7, #12]
 8001264:	60b9      	str	r1, [r7, #8]
 8001266:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	f003 0307 	and.w	r3, r3, #7
 800126e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001270:	69fb      	ldr	r3, [r7, #28]
 8001272:	f1c3 0307 	rsb	r3, r3, #7
 8001276:	2b04      	cmp	r3, #4
 8001278:	bf28      	it	cs
 800127a:	2304      	movcs	r3, #4
 800127c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800127e:	69fb      	ldr	r3, [r7, #28]
 8001280:	3304      	adds	r3, #4
 8001282:	2b06      	cmp	r3, #6
 8001284:	d902      	bls.n	800128c <NVIC_EncodePriority+0x30>
 8001286:	69fb      	ldr	r3, [r7, #28]
 8001288:	3b03      	subs	r3, #3
 800128a:	e000      	b.n	800128e <NVIC_EncodePriority+0x32>
 800128c:	2300      	movs	r3, #0
 800128e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001290:	f04f 32ff 	mov.w	r2, #4294967295
 8001294:	69bb      	ldr	r3, [r7, #24]
 8001296:	fa02 f303 	lsl.w	r3, r2, r3
 800129a:	43da      	mvns	r2, r3
 800129c:	68bb      	ldr	r3, [r7, #8]
 800129e:	401a      	ands	r2, r3
 80012a0:	697b      	ldr	r3, [r7, #20]
 80012a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012a4:	f04f 31ff 	mov.w	r1, #4294967295
 80012a8:	697b      	ldr	r3, [r7, #20]
 80012aa:	fa01 f303 	lsl.w	r3, r1, r3
 80012ae:	43d9      	mvns	r1, r3
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012b4:	4313      	orrs	r3, r2
}
 80012b6:	4618      	mov	r0, r3
 80012b8:	3724      	adds	r7, #36	@ 0x24
 80012ba:	46bd      	mov	sp, r7
 80012bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c0:	4770      	bx	lr
	...

080012c4 <SysTick_Config>:
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b082      	sub	sp, #8
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	3b01      	subs	r3, #1
 80012d0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80012d4:	d301      	bcc.n	80012da <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 80012d6:	2301      	movs	r3, #1
 80012d8:	e00f      	b.n	80012fa <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012da:	4a0a      	ldr	r2, [pc, #40]	@ (8001304 <SysTick_Config+0x40>)
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	3b01      	subs	r3, #1
 80012e0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012e2:	210f      	movs	r1, #15
 80012e4:	f04f 30ff 	mov.w	r0, #4294967295
 80012e8:	f7ff ff8e 	bl	8001208 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012ec:	4b05      	ldr	r3, [pc, #20]	@ (8001304 <SysTick_Config+0x40>)
 80012ee:	2200      	movs	r2, #0
 80012f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012f2:	4b04      	ldr	r3, [pc, #16]	@ (8001304 <SysTick_Config+0x40>)
 80012f4:	2207      	movs	r2, #7
 80012f6:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 80012f8:	2300      	movs	r3, #0
}
 80012fa:	4618      	mov	r0, r3
 80012fc:	3708      	adds	r7, #8
 80012fe:	46bd      	mov	sp, r7
 8001300:	bd80      	pop	{r7, pc}
 8001302:	bf00      	nop
 8001304:	e000e010 	.word	0xe000e010

08001308 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b082      	sub	sp, #8
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001310:	6878      	ldr	r0, [r7, #4]
 8001312:	f7ff ff29 	bl	8001168 <__NVIC_SetPriorityGrouping>
}
 8001316:	bf00      	nop
 8001318:	3708      	adds	r7, #8
 800131a:	46bd      	mov	sp, r7
 800131c:	bd80      	pop	{r7, pc}

0800131e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800131e:	b580      	push	{r7, lr}
 8001320:	b086      	sub	sp, #24
 8001322:	af00      	add	r7, sp, #0
 8001324:	4603      	mov	r3, r0
 8001326:	60b9      	str	r1, [r7, #8]
 8001328:	607a      	str	r2, [r7, #4]
 800132a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800132c:	2300      	movs	r3, #0
 800132e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001330:	f7ff ff3e 	bl	80011b0 <__NVIC_GetPriorityGrouping>
 8001334:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001336:	687a      	ldr	r2, [r7, #4]
 8001338:	68b9      	ldr	r1, [r7, #8]
 800133a:	6978      	ldr	r0, [r7, #20]
 800133c:	f7ff ff8e 	bl	800125c <NVIC_EncodePriority>
 8001340:	4602      	mov	r2, r0
 8001342:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001346:	4611      	mov	r1, r2
 8001348:	4618      	mov	r0, r3
 800134a:	f7ff ff5d 	bl	8001208 <__NVIC_SetPriority>
}
 800134e:	bf00      	nop
 8001350:	3718      	adds	r7, #24
 8001352:	46bd      	mov	sp, r7
 8001354:	bd80      	pop	{r7, pc}

08001356 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001356:	b580      	push	{r7, lr}
 8001358:	b082      	sub	sp, #8
 800135a:	af00      	add	r7, sp, #0
 800135c:	4603      	mov	r3, r0
 800135e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001360:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001364:	4618      	mov	r0, r3
 8001366:	f7ff ff31 	bl	80011cc <__NVIC_EnableIRQ>
}
 800136a:	bf00      	nop
 800136c:	3708      	adds	r7, #8
 800136e:	46bd      	mov	sp, r7
 8001370:	bd80      	pop	{r7, pc}

08001372 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001372:	b580      	push	{r7, lr}
 8001374:	b082      	sub	sp, #8
 8001376:	af00      	add	r7, sp, #0
 8001378:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800137a:	6878      	ldr	r0, [r7, #4]
 800137c:	f7ff ffa2 	bl	80012c4 <SysTick_Config>
 8001380:	4603      	mov	r3, r0
}
 8001382:	4618      	mov	r0, r3
 8001384:	3708      	adds	r7, #8
 8001386:	46bd      	mov	sp, r7
 8001388:	bd80      	pop	{r7, pc}
	...

0800138c <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800138c:	b480      	push	{r7}
 800138e:	b085      	sub	sp, #20
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	2b00      	cmp	r3, #0
 8001398:	d101      	bne.n	800139e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800139a:	2301      	movs	r3, #1
 800139c:	e098      	b.n	80014d0 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	461a      	mov	r2, r3
 80013a4:	4b4d      	ldr	r3, [pc, #308]	@ (80014dc <HAL_DMA_Init+0x150>)
 80013a6:	429a      	cmp	r2, r3
 80013a8:	d80f      	bhi.n	80013ca <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	461a      	mov	r2, r3
 80013b0:	4b4b      	ldr	r3, [pc, #300]	@ (80014e0 <HAL_DMA_Init+0x154>)
 80013b2:	4413      	add	r3, r2
 80013b4:	4a4b      	ldr	r2, [pc, #300]	@ (80014e4 <HAL_DMA_Init+0x158>)
 80013b6:	fba2 2303 	umull	r2, r3, r2, r3
 80013ba:	091b      	lsrs	r3, r3, #4
 80013bc:	009a      	lsls	r2, r3, #2
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	4a48      	ldr	r2, [pc, #288]	@ (80014e8 <HAL_DMA_Init+0x15c>)
 80013c6:	641a      	str	r2, [r3, #64]	@ 0x40
 80013c8:	e00e      	b.n	80013e8 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	461a      	mov	r2, r3
 80013d0:	4b46      	ldr	r3, [pc, #280]	@ (80014ec <HAL_DMA_Init+0x160>)
 80013d2:	4413      	add	r3, r2
 80013d4:	4a43      	ldr	r2, [pc, #268]	@ (80014e4 <HAL_DMA_Init+0x158>)
 80013d6:	fba2 2303 	umull	r2, r3, r2, r3
 80013da:	091b      	lsrs	r3, r3, #4
 80013dc:	009a      	lsls	r2, r3, #2
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	4a42      	ldr	r2, [pc, #264]	@ (80014f0 <HAL_DMA_Init+0x164>)
 80013e6:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	2202      	movs	r2, #2
 80013ec:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 80013fe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001402:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800140c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	691b      	ldr	r3, [r3, #16]
 8001412:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001418:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	699b      	ldr	r3, [r3, #24]
 800141e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001424:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	6a1b      	ldr	r3, [r3, #32]
 800142a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800142c:	68fa      	ldr	r2, [r7, #12]
 800142e:	4313      	orrs	r3, r2
 8001430:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	68fa      	ldr	r2, [r7, #12]
 8001438:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	689b      	ldr	r3, [r3, #8]
 800143e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001442:	d039      	beq.n	80014b8 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001448:	4a27      	ldr	r2, [pc, #156]	@ (80014e8 <HAL_DMA_Init+0x15c>)
 800144a:	4293      	cmp	r3, r2
 800144c:	d11a      	bne.n	8001484 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800144e:	4b29      	ldr	r3, [pc, #164]	@ (80014f4 <HAL_DMA_Init+0x168>)
 8001450:	681a      	ldr	r2, [r3, #0]
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001456:	f003 031c 	and.w	r3, r3, #28
 800145a:	210f      	movs	r1, #15
 800145c:	fa01 f303 	lsl.w	r3, r1, r3
 8001460:	43db      	mvns	r3, r3
 8001462:	4924      	ldr	r1, [pc, #144]	@ (80014f4 <HAL_DMA_Init+0x168>)
 8001464:	4013      	ands	r3, r2
 8001466:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8001468:	4b22      	ldr	r3, [pc, #136]	@ (80014f4 <HAL_DMA_Init+0x168>)
 800146a:	681a      	ldr	r2, [r3, #0]
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	6859      	ldr	r1, [r3, #4]
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001474:	f003 031c 	and.w	r3, r3, #28
 8001478:	fa01 f303 	lsl.w	r3, r1, r3
 800147c:	491d      	ldr	r1, [pc, #116]	@ (80014f4 <HAL_DMA_Init+0x168>)
 800147e:	4313      	orrs	r3, r2
 8001480:	600b      	str	r3, [r1, #0]
 8001482:	e019      	b.n	80014b8 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8001484:	4b1c      	ldr	r3, [pc, #112]	@ (80014f8 <HAL_DMA_Init+0x16c>)
 8001486:	681a      	ldr	r2, [r3, #0]
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800148c:	f003 031c 	and.w	r3, r3, #28
 8001490:	210f      	movs	r1, #15
 8001492:	fa01 f303 	lsl.w	r3, r1, r3
 8001496:	43db      	mvns	r3, r3
 8001498:	4917      	ldr	r1, [pc, #92]	@ (80014f8 <HAL_DMA_Init+0x16c>)
 800149a:	4013      	ands	r3, r2
 800149c:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800149e:	4b16      	ldr	r3, [pc, #88]	@ (80014f8 <HAL_DMA_Init+0x16c>)
 80014a0:	681a      	ldr	r2, [r3, #0]
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	6859      	ldr	r1, [r3, #4]
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014aa:	f003 031c 	and.w	r3, r3, #28
 80014ae:	fa01 f303 	lsl.w	r3, r1, r3
 80014b2:	4911      	ldr	r1, [pc, #68]	@ (80014f8 <HAL_DMA_Init+0x16c>)
 80014b4:	4313      	orrs	r3, r2
 80014b6:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	2200      	movs	r2, #0
 80014bc:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	2201      	movs	r2, #1
 80014c2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	2200      	movs	r2, #0
 80014ca:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80014ce:	2300      	movs	r3, #0
}
 80014d0:	4618      	mov	r0, r3
 80014d2:	3714      	adds	r7, #20
 80014d4:	46bd      	mov	sp, r7
 80014d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014da:	4770      	bx	lr
 80014dc:	40020407 	.word	0x40020407
 80014e0:	bffdfff8 	.word	0xbffdfff8
 80014e4:	cccccccd 	.word	0xcccccccd
 80014e8:	40020000 	.word	0x40020000
 80014ec:	bffdfbf8 	.word	0xbffdfbf8
 80014f0:	40020400 	.word	0x40020400
 80014f4:	400200a8 	.word	0x400200a8
 80014f8:	400204a8 	.word	0x400204a8

080014fc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b086      	sub	sp, #24
 8001500:	af00      	add	r7, sp, #0
 8001502:	60f8      	str	r0, [r7, #12]
 8001504:	60b9      	str	r1, [r7, #8]
 8001506:	607a      	str	r2, [r7, #4]
 8001508:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800150a:	2300      	movs	r3, #0
 800150c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001514:	2b01      	cmp	r3, #1
 8001516:	d101      	bne.n	800151c <HAL_DMA_Start_IT+0x20>
 8001518:	2302      	movs	r3, #2
 800151a:	e04b      	b.n	80015b4 <HAL_DMA_Start_IT+0xb8>
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	2201      	movs	r2, #1
 8001520:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800152a:	b2db      	uxtb	r3, r3
 800152c:	2b01      	cmp	r3, #1
 800152e:	d13a      	bne.n	80015a6 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	2202      	movs	r2, #2
 8001534:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	2200      	movs	r2, #0
 800153c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	681a      	ldr	r2, [r3, #0]
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	f022 0201 	bic.w	r2, r2, #1
 800154c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800154e:	683b      	ldr	r3, [r7, #0]
 8001550:	687a      	ldr	r2, [r7, #4]
 8001552:	68b9      	ldr	r1, [r7, #8]
 8001554:	68f8      	ldr	r0, [r7, #12]
 8001556:	f000 f95f 	bl	8001818 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800155e:	2b00      	cmp	r3, #0
 8001560:	d008      	beq.n	8001574 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	681a      	ldr	r2, [r3, #0]
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	f042 020e 	orr.w	r2, r2, #14
 8001570:	601a      	str	r2, [r3, #0]
 8001572:	e00f      	b.n	8001594 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	681a      	ldr	r2, [r3, #0]
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	f022 0204 	bic.w	r2, r2, #4
 8001582:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	681a      	ldr	r2, [r3, #0]
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	f042 020a 	orr.w	r2, r2, #10
 8001592:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	681a      	ldr	r2, [r3, #0]
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	f042 0201 	orr.w	r2, r2, #1
 80015a2:	601a      	str	r2, [r3, #0]
 80015a4:	e005      	b.n	80015b2 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	2200      	movs	r2, #0
 80015aa:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80015ae:	2302      	movs	r3, #2
 80015b0:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80015b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80015b4:	4618      	mov	r0, r3
 80015b6:	3718      	adds	r7, #24
 80015b8:	46bd      	mov	sp, r7
 80015ba:	bd80      	pop	{r7, pc}

080015bc <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80015bc:	b480      	push	{r7}
 80015be:	b085      	sub	sp, #20
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80015c4:	2300      	movs	r3, #0
 80015c6:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80015ce:	b2db      	uxtb	r3, r3
 80015d0:	2b02      	cmp	r3, #2
 80015d2:	d008      	beq.n	80015e6 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	2204      	movs	r2, #4
 80015d8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	2200      	movs	r2, #0
 80015de:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80015e2:	2301      	movs	r3, #1
 80015e4:	e022      	b.n	800162c <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	681a      	ldr	r2, [r3, #0]
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	f022 020e 	bic.w	r2, r2, #14
 80015f4:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	681a      	ldr	r2, [r3, #0]
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	f022 0201 	bic.w	r2, r2, #1
 8001604:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800160a:	f003 021c 	and.w	r2, r3, #28
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001612:	2101      	movs	r1, #1
 8001614:	fa01 f202 	lsl.w	r2, r1, r2
 8001618:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	2201      	movs	r2, #1
 800161e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	2200      	movs	r2, #0
 8001626:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 800162a:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 800162c:	4618      	mov	r0, r3
 800162e:	3714      	adds	r7, #20
 8001630:	46bd      	mov	sp, r7
 8001632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001636:	4770      	bx	lr

08001638 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b084      	sub	sp, #16
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001640:	2300      	movs	r3, #0
 8001642:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800164a:	b2db      	uxtb	r3, r3
 800164c:	2b02      	cmp	r3, #2
 800164e:	d005      	beq.n	800165c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	2204      	movs	r2, #4
 8001654:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8001656:	2301      	movs	r3, #1
 8001658:	73fb      	strb	r3, [r7, #15]
 800165a:	e029      	b.n	80016b0 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	681a      	ldr	r2, [r3, #0]
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	f022 020e 	bic.w	r2, r2, #14
 800166a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	681a      	ldr	r2, [r3, #0]
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	f022 0201 	bic.w	r2, r2, #1
 800167a:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001680:	f003 021c 	and.w	r2, r3, #28
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001688:	2101      	movs	r1, #1
 800168a:	fa01 f202 	lsl.w	r2, r1, r2
 800168e:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	2201      	movs	r2, #1
 8001694:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	2200      	movs	r2, #0
 800169c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d003      	beq.n	80016b0 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80016ac:	6878      	ldr	r0, [r7, #4]
 80016ae:	4798      	blx	r3
    }
  }
  return status;
 80016b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80016b2:	4618      	mov	r0, r3
 80016b4:	3710      	adds	r7, #16
 80016b6:	46bd      	mov	sp, r7
 80016b8:	bd80      	pop	{r7, pc}

080016ba <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80016ba:	b580      	push	{r7, lr}
 80016bc:	b084      	sub	sp, #16
 80016be:	af00      	add	r7, sp, #0
 80016c0:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016d6:	f003 031c 	and.w	r3, r3, #28
 80016da:	2204      	movs	r2, #4
 80016dc:	409a      	lsls	r2, r3
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	4013      	ands	r3, r2
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d026      	beq.n	8001734 <HAL_DMA_IRQHandler+0x7a>
 80016e6:	68bb      	ldr	r3, [r7, #8]
 80016e8:	f003 0304 	and.w	r3, r3, #4
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d021      	beq.n	8001734 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	f003 0320 	and.w	r3, r3, #32
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d107      	bne.n	800170e <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	681a      	ldr	r2, [r3, #0]
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	f022 0204 	bic.w	r2, r2, #4
 800170c:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001712:	f003 021c 	and.w	r2, r3, #28
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800171a:	2104      	movs	r1, #4
 800171c:	fa01 f202 	lsl.w	r2, r1, r2
 8001720:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001726:	2b00      	cmp	r3, #0
 8001728:	d071      	beq.n	800180e <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800172e:	6878      	ldr	r0, [r7, #4]
 8001730:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8001732:	e06c      	b.n	800180e <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001738:	f003 031c 	and.w	r3, r3, #28
 800173c:	2202      	movs	r2, #2
 800173e:	409a      	lsls	r2, r3
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	4013      	ands	r3, r2
 8001744:	2b00      	cmp	r3, #0
 8001746:	d02e      	beq.n	80017a6 <HAL_DMA_IRQHandler+0xec>
 8001748:	68bb      	ldr	r3, [r7, #8]
 800174a:	f003 0302 	and.w	r3, r3, #2
 800174e:	2b00      	cmp	r3, #0
 8001750:	d029      	beq.n	80017a6 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	f003 0320 	and.w	r3, r3, #32
 800175c:	2b00      	cmp	r3, #0
 800175e:	d10b      	bne.n	8001778 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	681a      	ldr	r2, [r3, #0]
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	f022 020a 	bic.w	r2, r2, #10
 800176e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	2201      	movs	r2, #1
 8001774:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800177c:	f003 021c 	and.w	r2, r3, #28
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001784:	2102      	movs	r1, #2
 8001786:	fa01 f202 	lsl.w	r2, r1, r2
 800178a:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	2200      	movs	r2, #0
 8001790:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001798:	2b00      	cmp	r3, #0
 800179a:	d038      	beq.n	800180e <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80017a0:	6878      	ldr	r0, [r7, #4]
 80017a2:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80017a4:	e033      	b.n	800180e <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017aa:	f003 031c 	and.w	r3, r3, #28
 80017ae:	2208      	movs	r2, #8
 80017b0:	409a      	lsls	r2, r3
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	4013      	ands	r3, r2
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d02a      	beq.n	8001810 <HAL_DMA_IRQHandler+0x156>
 80017ba:	68bb      	ldr	r3, [r7, #8]
 80017bc:	f003 0308 	and.w	r3, r3, #8
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d025      	beq.n	8001810 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	681a      	ldr	r2, [r3, #0]
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	f022 020e 	bic.w	r2, r2, #14
 80017d2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017d8:	f003 021c 	and.w	r2, r3, #28
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017e0:	2101      	movs	r1, #1
 80017e2:	fa01 f202 	lsl.w	r2, r1, r2
 80017e6:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	2201      	movs	r2, #1
 80017ec:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	2201      	movs	r2, #1
 80017f2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	2200      	movs	r2, #0
 80017fa:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001802:	2b00      	cmp	r3, #0
 8001804:	d004      	beq.n	8001810 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800180a:	6878      	ldr	r0, [r7, #4]
 800180c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800180e:	bf00      	nop
 8001810:	bf00      	nop
}
 8001812:	3710      	adds	r7, #16
 8001814:	46bd      	mov	sp, r7
 8001816:	bd80      	pop	{r7, pc}

08001818 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001818:	b480      	push	{r7}
 800181a:	b085      	sub	sp, #20
 800181c:	af00      	add	r7, sp, #0
 800181e:	60f8      	str	r0, [r7, #12]
 8001820:	60b9      	str	r1, [r7, #8]
 8001822:	607a      	str	r2, [r7, #4]
 8001824:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800182a:	f003 021c 	and.w	r2, r3, #28
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001832:	2101      	movs	r1, #1
 8001834:	fa01 f202 	lsl.w	r2, r1, r2
 8001838:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	683a      	ldr	r2, [r7, #0]
 8001840:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	689b      	ldr	r3, [r3, #8]
 8001846:	2b10      	cmp	r3, #16
 8001848:	d108      	bne.n	800185c <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	687a      	ldr	r2, [r7, #4]
 8001850:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	68ba      	ldr	r2, [r7, #8]
 8001858:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800185a:	e007      	b.n	800186c <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	68ba      	ldr	r2, [r7, #8]
 8001862:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	687a      	ldr	r2, [r7, #4]
 800186a:	60da      	str	r2, [r3, #12]
}
 800186c:	bf00      	nop
 800186e:	3714      	adds	r7, #20
 8001870:	46bd      	mov	sp, r7
 8001872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001876:	4770      	bx	lr

08001878 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001878:	b480      	push	{r7}
 800187a:	b087      	sub	sp, #28
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
 8001880:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001882:	2300      	movs	r3, #0
 8001884:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001886:	e154      	b.n	8001b32 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001888:	683b      	ldr	r3, [r7, #0]
 800188a:	681a      	ldr	r2, [r3, #0]
 800188c:	2101      	movs	r1, #1
 800188e:	697b      	ldr	r3, [r7, #20]
 8001890:	fa01 f303 	lsl.w	r3, r1, r3
 8001894:	4013      	ands	r3, r2
 8001896:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	2b00      	cmp	r3, #0
 800189c:	f000 8146 	beq.w	8001b2c <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80018a0:	683b      	ldr	r3, [r7, #0]
 80018a2:	685b      	ldr	r3, [r3, #4]
 80018a4:	f003 0303 	and.w	r3, r3, #3
 80018a8:	2b01      	cmp	r3, #1
 80018aa:	d005      	beq.n	80018b8 <HAL_GPIO_Init+0x40>
 80018ac:	683b      	ldr	r3, [r7, #0]
 80018ae:	685b      	ldr	r3, [r3, #4]
 80018b0:	f003 0303 	and.w	r3, r3, #3
 80018b4:	2b02      	cmp	r3, #2
 80018b6:	d130      	bne.n	800191a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	689b      	ldr	r3, [r3, #8]
 80018bc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80018be:	697b      	ldr	r3, [r7, #20]
 80018c0:	005b      	lsls	r3, r3, #1
 80018c2:	2203      	movs	r2, #3
 80018c4:	fa02 f303 	lsl.w	r3, r2, r3
 80018c8:	43db      	mvns	r3, r3
 80018ca:	693a      	ldr	r2, [r7, #16]
 80018cc:	4013      	ands	r3, r2
 80018ce:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80018d0:	683b      	ldr	r3, [r7, #0]
 80018d2:	68da      	ldr	r2, [r3, #12]
 80018d4:	697b      	ldr	r3, [r7, #20]
 80018d6:	005b      	lsls	r3, r3, #1
 80018d8:	fa02 f303 	lsl.w	r3, r2, r3
 80018dc:	693a      	ldr	r2, [r7, #16]
 80018de:	4313      	orrs	r3, r2
 80018e0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	693a      	ldr	r2, [r7, #16]
 80018e6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	685b      	ldr	r3, [r3, #4]
 80018ec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80018ee:	2201      	movs	r2, #1
 80018f0:	697b      	ldr	r3, [r7, #20]
 80018f2:	fa02 f303 	lsl.w	r3, r2, r3
 80018f6:	43db      	mvns	r3, r3
 80018f8:	693a      	ldr	r2, [r7, #16]
 80018fa:	4013      	ands	r3, r2
 80018fc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80018fe:	683b      	ldr	r3, [r7, #0]
 8001900:	685b      	ldr	r3, [r3, #4]
 8001902:	091b      	lsrs	r3, r3, #4
 8001904:	f003 0201 	and.w	r2, r3, #1
 8001908:	697b      	ldr	r3, [r7, #20]
 800190a:	fa02 f303 	lsl.w	r3, r2, r3
 800190e:	693a      	ldr	r2, [r7, #16]
 8001910:	4313      	orrs	r3, r2
 8001912:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	693a      	ldr	r2, [r7, #16]
 8001918:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800191a:	683b      	ldr	r3, [r7, #0]
 800191c:	685b      	ldr	r3, [r3, #4]
 800191e:	f003 0303 	and.w	r3, r3, #3
 8001922:	2b03      	cmp	r3, #3
 8001924:	d017      	beq.n	8001956 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	68db      	ldr	r3, [r3, #12]
 800192a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800192c:	697b      	ldr	r3, [r7, #20]
 800192e:	005b      	lsls	r3, r3, #1
 8001930:	2203      	movs	r2, #3
 8001932:	fa02 f303 	lsl.w	r3, r2, r3
 8001936:	43db      	mvns	r3, r3
 8001938:	693a      	ldr	r2, [r7, #16]
 800193a:	4013      	ands	r3, r2
 800193c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800193e:	683b      	ldr	r3, [r7, #0]
 8001940:	689a      	ldr	r2, [r3, #8]
 8001942:	697b      	ldr	r3, [r7, #20]
 8001944:	005b      	lsls	r3, r3, #1
 8001946:	fa02 f303 	lsl.w	r3, r2, r3
 800194a:	693a      	ldr	r2, [r7, #16]
 800194c:	4313      	orrs	r3, r2
 800194e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	693a      	ldr	r2, [r7, #16]
 8001954:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001956:	683b      	ldr	r3, [r7, #0]
 8001958:	685b      	ldr	r3, [r3, #4]
 800195a:	f003 0303 	and.w	r3, r3, #3
 800195e:	2b02      	cmp	r3, #2
 8001960:	d123      	bne.n	80019aa <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001962:	697b      	ldr	r3, [r7, #20]
 8001964:	08da      	lsrs	r2, r3, #3
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	3208      	adds	r2, #8
 800196a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800196e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001970:	697b      	ldr	r3, [r7, #20]
 8001972:	f003 0307 	and.w	r3, r3, #7
 8001976:	009b      	lsls	r3, r3, #2
 8001978:	220f      	movs	r2, #15
 800197a:	fa02 f303 	lsl.w	r3, r2, r3
 800197e:	43db      	mvns	r3, r3
 8001980:	693a      	ldr	r2, [r7, #16]
 8001982:	4013      	ands	r3, r2
 8001984:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001986:	683b      	ldr	r3, [r7, #0]
 8001988:	691a      	ldr	r2, [r3, #16]
 800198a:	697b      	ldr	r3, [r7, #20]
 800198c:	f003 0307 	and.w	r3, r3, #7
 8001990:	009b      	lsls	r3, r3, #2
 8001992:	fa02 f303 	lsl.w	r3, r2, r3
 8001996:	693a      	ldr	r2, [r7, #16]
 8001998:	4313      	orrs	r3, r2
 800199a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800199c:	697b      	ldr	r3, [r7, #20]
 800199e:	08da      	lsrs	r2, r3, #3
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	3208      	adds	r2, #8
 80019a4:	6939      	ldr	r1, [r7, #16]
 80019a6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80019b0:	697b      	ldr	r3, [r7, #20]
 80019b2:	005b      	lsls	r3, r3, #1
 80019b4:	2203      	movs	r2, #3
 80019b6:	fa02 f303 	lsl.w	r3, r2, r3
 80019ba:	43db      	mvns	r3, r3
 80019bc:	693a      	ldr	r2, [r7, #16]
 80019be:	4013      	ands	r3, r2
 80019c0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80019c2:	683b      	ldr	r3, [r7, #0]
 80019c4:	685b      	ldr	r3, [r3, #4]
 80019c6:	f003 0203 	and.w	r2, r3, #3
 80019ca:	697b      	ldr	r3, [r7, #20]
 80019cc:	005b      	lsls	r3, r3, #1
 80019ce:	fa02 f303 	lsl.w	r3, r2, r3
 80019d2:	693a      	ldr	r2, [r7, #16]
 80019d4:	4313      	orrs	r3, r2
 80019d6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	693a      	ldr	r2, [r7, #16]
 80019dc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80019de:	683b      	ldr	r3, [r7, #0]
 80019e0:	685b      	ldr	r3, [r3, #4]
 80019e2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	f000 80a0 	beq.w	8001b2c <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019ec:	4b58      	ldr	r3, [pc, #352]	@ (8001b50 <HAL_GPIO_Init+0x2d8>)
 80019ee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80019f0:	4a57      	ldr	r2, [pc, #348]	@ (8001b50 <HAL_GPIO_Init+0x2d8>)
 80019f2:	f043 0301 	orr.w	r3, r3, #1
 80019f6:	6613      	str	r3, [r2, #96]	@ 0x60
 80019f8:	4b55      	ldr	r3, [pc, #340]	@ (8001b50 <HAL_GPIO_Init+0x2d8>)
 80019fa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80019fc:	f003 0301 	and.w	r3, r3, #1
 8001a00:	60bb      	str	r3, [r7, #8]
 8001a02:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001a04:	4a53      	ldr	r2, [pc, #332]	@ (8001b54 <HAL_GPIO_Init+0x2dc>)
 8001a06:	697b      	ldr	r3, [r7, #20]
 8001a08:	089b      	lsrs	r3, r3, #2
 8001a0a:	3302      	adds	r3, #2
 8001a0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a10:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001a12:	697b      	ldr	r3, [r7, #20]
 8001a14:	f003 0303 	and.w	r3, r3, #3
 8001a18:	009b      	lsls	r3, r3, #2
 8001a1a:	220f      	movs	r2, #15
 8001a1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a20:	43db      	mvns	r3, r3
 8001a22:	693a      	ldr	r2, [r7, #16]
 8001a24:	4013      	ands	r3, r2
 8001a26:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001a2e:	d019      	beq.n	8001a64 <HAL_GPIO_Init+0x1ec>
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	4a49      	ldr	r2, [pc, #292]	@ (8001b58 <HAL_GPIO_Init+0x2e0>)
 8001a34:	4293      	cmp	r3, r2
 8001a36:	d013      	beq.n	8001a60 <HAL_GPIO_Init+0x1e8>
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	4a48      	ldr	r2, [pc, #288]	@ (8001b5c <HAL_GPIO_Init+0x2e4>)
 8001a3c:	4293      	cmp	r3, r2
 8001a3e:	d00d      	beq.n	8001a5c <HAL_GPIO_Init+0x1e4>
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	4a47      	ldr	r2, [pc, #284]	@ (8001b60 <HAL_GPIO_Init+0x2e8>)
 8001a44:	4293      	cmp	r3, r2
 8001a46:	d007      	beq.n	8001a58 <HAL_GPIO_Init+0x1e0>
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	4a46      	ldr	r2, [pc, #280]	@ (8001b64 <HAL_GPIO_Init+0x2ec>)
 8001a4c:	4293      	cmp	r3, r2
 8001a4e:	d101      	bne.n	8001a54 <HAL_GPIO_Init+0x1dc>
 8001a50:	2304      	movs	r3, #4
 8001a52:	e008      	b.n	8001a66 <HAL_GPIO_Init+0x1ee>
 8001a54:	2307      	movs	r3, #7
 8001a56:	e006      	b.n	8001a66 <HAL_GPIO_Init+0x1ee>
 8001a58:	2303      	movs	r3, #3
 8001a5a:	e004      	b.n	8001a66 <HAL_GPIO_Init+0x1ee>
 8001a5c:	2302      	movs	r3, #2
 8001a5e:	e002      	b.n	8001a66 <HAL_GPIO_Init+0x1ee>
 8001a60:	2301      	movs	r3, #1
 8001a62:	e000      	b.n	8001a66 <HAL_GPIO_Init+0x1ee>
 8001a64:	2300      	movs	r3, #0
 8001a66:	697a      	ldr	r2, [r7, #20]
 8001a68:	f002 0203 	and.w	r2, r2, #3
 8001a6c:	0092      	lsls	r2, r2, #2
 8001a6e:	4093      	lsls	r3, r2
 8001a70:	693a      	ldr	r2, [r7, #16]
 8001a72:	4313      	orrs	r3, r2
 8001a74:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001a76:	4937      	ldr	r1, [pc, #220]	@ (8001b54 <HAL_GPIO_Init+0x2dc>)
 8001a78:	697b      	ldr	r3, [r7, #20]
 8001a7a:	089b      	lsrs	r3, r3, #2
 8001a7c:	3302      	adds	r3, #2
 8001a7e:	693a      	ldr	r2, [r7, #16]
 8001a80:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001a84:	4b38      	ldr	r3, [pc, #224]	@ (8001b68 <HAL_GPIO_Init+0x2f0>)
 8001a86:	689b      	ldr	r3, [r3, #8]
 8001a88:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	43db      	mvns	r3, r3
 8001a8e:	693a      	ldr	r2, [r7, #16]
 8001a90:	4013      	ands	r3, r2
 8001a92:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001a94:	683b      	ldr	r3, [r7, #0]
 8001a96:	685b      	ldr	r3, [r3, #4]
 8001a98:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d003      	beq.n	8001aa8 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8001aa0:	693a      	ldr	r2, [r7, #16]
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	4313      	orrs	r3, r2
 8001aa6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001aa8:	4a2f      	ldr	r2, [pc, #188]	@ (8001b68 <HAL_GPIO_Init+0x2f0>)
 8001aaa:	693b      	ldr	r3, [r7, #16]
 8001aac:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001aae:	4b2e      	ldr	r3, [pc, #184]	@ (8001b68 <HAL_GPIO_Init+0x2f0>)
 8001ab0:	68db      	ldr	r3, [r3, #12]
 8001ab2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	43db      	mvns	r3, r3
 8001ab8:	693a      	ldr	r2, [r7, #16]
 8001aba:	4013      	ands	r3, r2
 8001abc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001abe:	683b      	ldr	r3, [r7, #0]
 8001ac0:	685b      	ldr	r3, [r3, #4]
 8001ac2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d003      	beq.n	8001ad2 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8001aca:	693a      	ldr	r2, [r7, #16]
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	4313      	orrs	r3, r2
 8001ad0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001ad2:	4a25      	ldr	r2, [pc, #148]	@ (8001b68 <HAL_GPIO_Init+0x2f0>)
 8001ad4:	693b      	ldr	r3, [r7, #16]
 8001ad6:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001ad8:	4b23      	ldr	r3, [pc, #140]	@ (8001b68 <HAL_GPIO_Init+0x2f0>)
 8001ada:	685b      	ldr	r3, [r3, #4]
 8001adc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	43db      	mvns	r3, r3
 8001ae2:	693a      	ldr	r2, [r7, #16]
 8001ae4:	4013      	ands	r3, r2
 8001ae6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001ae8:	683b      	ldr	r3, [r7, #0]
 8001aea:	685b      	ldr	r3, [r3, #4]
 8001aec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d003      	beq.n	8001afc <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8001af4:	693a      	ldr	r2, [r7, #16]
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	4313      	orrs	r3, r2
 8001afa:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001afc:	4a1a      	ldr	r2, [pc, #104]	@ (8001b68 <HAL_GPIO_Init+0x2f0>)
 8001afe:	693b      	ldr	r3, [r7, #16]
 8001b00:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001b02:	4b19      	ldr	r3, [pc, #100]	@ (8001b68 <HAL_GPIO_Init+0x2f0>)
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	43db      	mvns	r3, r3
 8001b0c:	693a      	ldr	r2, [r7, #16]
 8001b0e:	4013      	ands	r3, r2
 8001b10:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001b12:	683b      	ldr	r3, [r7, #0]
 8001b14:	685b      	ldr	r3, [r3, #4]
 8001b16:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d003      	beq.n	8001b26 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001b1e:	693a      	ldr	r2, [r7, #16]
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	4313      	orrs	r3, r2
 8001b24:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001b26:	4a10      	ldr	r2, [pc, #64]	@ (8001b68 <HAL_GPIO_Init+0x2f0>)
 8001b28:	693b      	ldr	r3, [r7, #16]
 8001b2a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001b2c:	697b      	ldr	r3, [r7, #20]
 8001b2e:	3301      	adds	r3, #1
 8001b30:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b32:	683b      	ldr	r3, [r7, #0]
 8001b34:	681a      	ldr	r2, [r3, #0]
 8001b36:	697b      	ldr	r3, [r7, #20]
 8001b38:	fa22 f303 	lsr.w	r3, r2, r3
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	f47f aea3 	bne.w	8001888 <HAL_GPIO_Init+0x10>
  }
}
 8001b42:	bf00      	nop
 8001b44:	bf00      	nop
 8001b46:	371c      	adds	r7, #28
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4e:	4770      	bx	lr
 8001b50:	40021000 	.word	0x40021000
 8001b54:	40010000 	.word	0x40010000
 8001b58:	48000400 	.word	0x48000400
 8001b5c:	48000800 	.word	0x48000800
 8001b60:	48000c00 	.word	0x48000c00
 8001b64:	48001000 	.word	0x48001000
 8001b68:	40010400 	.word	0x40010400

08001b6c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001b6c:	b480      	push	{r7}
 8001b6e:	b085      	sub	sp, #20
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
 8001b74:	460b      	mov	r3, r1
 8001b76:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	691a      	ldr	r2, [r3, #16]
 8001b7c:	887b      	ldrh	r3, [r7, #2]
 8001b7e:	4013      	ands	r3, r2
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d002      	beq.n	8001b8a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001b84:	2301      	movs	r3, #1
 8001b86:	73fb      	strb	r3, [r7, #15]
 8001b88:	e001      	b.n	8001b8e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001b8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b90:	4618      	mov	r0, r3
 8001b92:	3714      	adds	r7, #20
 8001b94:	46bd      	mov	sp, r7
 8001b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9a:	4770      	bx	lr

08001b9c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	b083      	sub	sp, #12
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]
 8001ba4:	460b      	mov	r3, r1
 8001ba6:	807b      	strh	r3, [r7, #2]
 8001ba8:	4613      	mov	r3, r2
 8001baa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001bac:	787b      	ldrb	r3, [r7, #1]
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d003      	beq.n	8001bba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001bb2:	887a      	ldrh	r2, [r7, #2]
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001bb8:	e002      	b.n	8001bc0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001bba:	887a      	ldrh	r2, [r7, #2]
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001bc0:	bf00      	nop
 8001bc2:	370c      	adds	r7, #12
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bca:	4770      	bx	lr

08001bcc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b082      	sub	sp, #8
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d101      	bne.n	8001bde <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001bda:	2301      	movs	r3, #1
 8001bdc:	e08d      	b.n	8001cfa <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001be4:	b2db      	uxtb	r3, r3
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d106      	bne.n	8001bf8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	2200      	movs	r2, #0
 8001bee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001bf2:	6878      	ldr	r0, [r7, #4]
 8001bf4:	f7fe fee2 	bl	80009bc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	2224      	movs	r2, #36	@ 0x24
 8001bfc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	681a      	ldr	r2, [r3, #0]
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f022 0201 	bic.w	r2, r2, #1
 8001c0e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	685a      	ldr	r2, [r3, #4]
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001c1c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	689a      	ldr	r2, [r3, #8]
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001c2c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	68db      	ldr	r3, [r3, #12]
 8001c32:	2b01      	cmp	r3, #1
 8001c34:	d107      	bne.n	8001c46 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	689a      	ldr	r2, [r3, #8]
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001c42:	609a      	str	r2, [r3, #8]
 8001c44:	e006      	b.n	8001c54 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	689a      	ldr	r2, [r3, #8]
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8001c52:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	68db      	ldr	r3, [r3, #12]
 8001c58:	2b02      	cmp	r3, #2
 8001c5a:	d108      	bne.n	8001c6e <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	685a      	ldr	r2, [r3, #4]
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001c6a:	605a      	str	r2, [r3, #4]
 8001c6c:	e007      	b.n	8001c7e <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	685a      	ldr	r2, [r3, #4]
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001c7c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	685b      	ldr	r3, [r3, #4]
 8001c84:	687a      	ldr	r2, [r7, #4]
 8001c86:	6812      	ldr	r2, [r2, #0]
 8001c88:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001c8c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001c90:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	68da      	ldr	r2, [r3, #12]
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001ca0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	691a      	ldr	r2, [r3, #16]
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	695b      	ldr	r3, [r3, #20]
 8001caa:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	699b      	ldr	r3, [r3, #24]
 8001cb2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	430a      	orrs	r2, r1
 8001cba:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	69d9      	ldr	r1, [r3, #28]
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	6a1a      	ldr	r2, [r3, #32]
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	430a      	orrs	r2, r1
 8001cca:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	681a      	ldr	r2, [r3, #0]
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f042 0201 	orr.w	r2, r2, #1
 8001cda:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	2200      	movs	r2, #0
 8001ce0:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	2220      	movs	r2, #32
 8001ce6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	2200      	movs	r2, #0
 8001cee:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8001cf8:	2300      	movs	r3, #0
}
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	3708      	adds	r7, #8
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	bd80      	pop	{r7, pc}

08001d02 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001d02:	b480      	push	{r7}
 8001d04:	b083      	sub	sp, #12
 8001d06:	af00      	add	r7, sp, #0
 8001d08:	6078      	str	r0, [r7, #4]
 8001d0a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001d12:	b2db      	uxtb	r3, r3
 8001d14:	2b20      	cmp	r3, #32
 8001d16:	d138      	bne.n	8001d8a <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001d1e:	2b01      	cmp	r3, #1
 8001d20:	d101      	bne.n	8001d26 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001d22:	2302      	movs	r3, #2
 8001d24:	e032      	b.n	8001d8c <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	2201      	movs	r2, #1
 8001d2a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	2224      	movs	r2, #36	@ 0x24
 8001d32:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	681a      	ldr	r2, [r3, #0]
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f022 0201 	bic.w	r2, r2, #1
 8001d44:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	681a      	ldr	r2, [r3, #0]
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8001d54:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	6819      	ldr	r1, [r3, #0]
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	683a      	ldr	r2, [r7, #0]
 8001d62:	430a      	orrs	r2, r1
 8001d64:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	681a      	ldr	r2, [r3, #0]
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f042 0201 	orr.w	r2, r2, #1
 8001d74:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	2220      	movs	r2, #32
 8001d7a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	2200      	movs	r2, #0
 8001d82:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001d86:	2300      	movs	r3, #0
 8001d88:	e000      	b.n	8001d8c <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001d8a:	2302      	movs	r3, #2
  }
}
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	370c      	adds	r7, #12
 8001d90:	46bd      	mov	sp, r7
 8001d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d96:	4770      	bx	lr

08001d98 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001d98:	b480      	push	{r7}
 8001d9a:	b085      	sub	sp, #20
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
 8001da0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001da8:	b2db      	uxtb	r3, r3
 8001daa:	2b20      	cmp	r3, #32
 8001dac:	d139      	bne.n	8001e22 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001db4:	2b01      	cmp	r3, #1
 8001db6:	d101      	bne.n	8001dbc <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001db8:	2302      	movs	r3, #2
 8001dba:	e033      	b.n	8001e24 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	2201      	movs	r2, #1
 8001dc0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	2224      	movs	r2, #36	@ 0x24
 8001dc8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	681a      	ldr	r2, [r3, #0]
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f022 0201 	bic.w	r2, r2, #1
 8001dda:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8001dea:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001dec:	683b      	ldr	r3, [r7, #0]
 8001dee:	021b      	lsls	r3, r3, #8
 8001df0:	68fa      	ldr	r2, [r7, #12]
 8001df2:	4313      	orrs	r3, r2
 8001df4:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	68fa      	ldr	r2, [r7, #12]
 8001dfc:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	681a      	ldr	r2, [r3, #0]
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f042 0201 	orr.w	r2, r2, #1
 8001e0c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	2220      	movs	r2, #32
 8001e12:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	2200      	movs	r2, #0
 8001e1a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001e1e:	2300      	movs	r3, #0
 8001e20:	e000      	b.n	8001e24 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001e22:	2302      	movs	r3, #2
  }
}
 8001e24:	4618      	mov	r0, r3
 8001e26:	3714      	adds	r7, #20
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2e:	4770      	bx	lr

08001e30 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001e30:	b480      	push	{r7}
 8001e32:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001e34:	4b04      	ldr	r3, [pc, #16]	@ (8001e48 <HAL_PWREx_GetVoltageRange+0x18>)
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e44:	4770      	bx	lr
 8001e46:	bf00      	nop
 8001e48:	40007000 	.word	0x40007000

08001e4c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001e4c:	b480      	push	{r7}
 8001e4e:	b085      	sub	sp, #20
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001e5a:	d130      	bne.n	8001ebe <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001e5c:	4b23      	ldr	r3, [pc, #140]	@ (8001eec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001e64:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001e68:	d038      	beq.n	8001edc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001e6a:	4b20      	ldr	r3, [pc, #128]	@ (8001eec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001e72:	4a1e      	ldr	r2, [pc, #120]	@ (8001eec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001e74:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001e78:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001e7a:	4b1d      	ldr	r3, [pc, #116]	@ (8001ef0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	2232      	movs	r2, #50	@ 0x32
 8001e80:	fb02 f303 	mul.w	r3, r2, r3
 8001e84:	4a1b      	ldr	r2, [pc, #108]	@ (8001ef4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001e86:	fba2 2303 	umull	r2, r3, r2, r3
 8001e8a:	0c9b      	lsrs	r3, r3, #18
 8001e8c:	3301      	adds	r3, #1
 8001e8e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001e90:	e002      	b.n	8001e98 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	3b01      	subs	r3, #1
 8001e96:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001e98:	4b14      	ldr	r3, [pc, #80]	@ (8001eec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001e9a:	695b      	ldr	r3, [r3, #20]
 8001e9c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001ea0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001ea4:	d102      	bne.n	8001eac <HAL_PWREx_ControlVoltageScaling+0x60>
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d1f2      	bne.n	8001e92 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001eac:	4b0f      	ldr	r3, [pc, #60]	@ (8001eec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001eae:	695b      	ldr	r3, [r3, #20]
 8001eb0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001eb4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001eb8:	d110      	bne.n	8001edc <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001eba:	2303      	movs	r3, #3
 8001ebc:	e00f      	b.n	8001ede <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001ebe:	4b0b      	ldr	r3, [pc, #44]	@ (8001eec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001ec6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001eca:	d007      	beq.n	8001edc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001ecc:	4b07      	ldr	r3, [pc, #28]	@ (8001eec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001ed4:	4a05      	ldr	r2, [pc, #20]	@ (8001eec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001ed6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001eda:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001edc:	2300      	movs	r3, #0
}
 8001ede:	4618      	mov	r0, r3
 8001ee0:	3714      	adds	r7, #20
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee8:	4770      	bx	lr
 8001eea:	bf00      	nop
 8001eec:	40007000 	.word	0x40007000
 8001ef0:	20000000 	.word	0x20000000
 8001ef4:	431bde83 	.word	0x431bde83

08001ef8 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b088      	sub	sp, #32
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d102      	bne.n	8001f0c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001f06:	2301      	movs	r3, #1
 8001f08:	f000 bc02 	b.w	8002710 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001f0c:	4b96      	ldr	r3, [pc, #600]	@ (8002168 <HAL_RCC_OscConfig+0x270>)
 8001f0e:	689b      	ldr	r3, [r3, #8]
 8001f10:	f003 030c 	and.w	r3, r3, #12
 8001f14:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001f16:	4b94      	ldr	r3, [pc, #592]	@ (8002168 <HAL_RCC_OscConfig+0x270>)
 8001f18:	68db      	ldr	r3, [r3, #12]
 8001f1a:	f003 0303 	and.w	r3, r3, #3
 8001f1e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f003 0310 	and.w	r3, r3, #16
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	f000 80e4 	beq.w	80020f6 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001f2e:	69bb      	ldr	r3, [r7, #24]
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d007      	beq.n	8001f44 <HAL_RCC_OscConfig+0x4c>
 8001f34:	69bb      	ldr	r3, [r7, #24]
 8001f36:	2b0c      	cmp	r3, #12
 8001f38:	f040 808b 	bne.w	8002052 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001f3c:	697b      	ldr	r3, [r7, #20]
 8001f3e:	2b01      	cmp	r3, #1
 8001f40:	f040 8087 	bne.w	8002052 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001f44:	4b88      	ldr	r3, [pc, #544]	@ (8002168 <HAL_RCC_OscConfig+0x270>)
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f003 0302 	and.w	r3, r3, #2
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d005      	beq.n	8001f5c <HAL_RCC_OscConfig+0x64>
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	699b      	ldr	r3, [r3, #24]
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d101      	bne.n	8001f5c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8001f58:	2301      	movs	r3, #1
 8001f5a:	e3d9      	b.n	8002710 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	6a1a      	ldr	r2, [r3, #32]
 8001f60:	4b81      	ldr	r3, [pc, #516]	@ (8002168 <HAL_RCC_OscConfig+0x270>)
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f003 0308 	and.w	r3, r3, #8
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d004      	beq.n	8001f76 <HAL_RCC_OscConfig+0x7e>
 8001f6c:	4b7e      	ldr	r3, [pc, #504]	@ (8002168 <HAL_RCC_OscConfig+0x270>)
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001f74:	e005      	b.n	8001f82 <HAL_RCC_OscConfig+0x8a>
 8001f76:	4b7c      	ldr	r3, [pc, #496]	@ (8002168 <HAL_RCC_OscConfig+0x270>)
 8001f78:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001f7c:	091b      	lsrs	r3, r3, #4
 8001f7e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001f82:	4293      	cmp	r3, r2
 8001f84:	d223      	bcs.n	8001fce <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	6a1b      	ldr	r3, [r3, #32]
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	f000 fd8c 	bl	8002aa8 <RCC_SetFlashLatencyFromMSIRange>
 8001f90:	4603      	mov	r3, r0
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d001      	beq.n	8001f9a <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8001f96:	2301      	movs	r3, #1
 8001f98:	e3ba      	b.n	8002710 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001f9a:	4b73      	ldr	r3, [pc, #460]	@ (8002168 <HAL_RCC_OscConfig+0x270>)
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	4a72      	ldr	r2, [pc, #456]	@ (8002168 <HAL_RCC_OscConfig+0x270>)
 8001fa0:	f043 0308 	orr.w	r3, r3, #8
 8001fa4:	6013      	str	r3, [r2, #0]
 8001fa6:	4b70      	ldr	r3, [pc, #448]	@ (8002168 <HAL_RCC_OscConfig+0x270>)
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	6a1b      	ldr	r3, [r3, #32]
 8001fb2:	496d      	ldr	r1, [pc, #436]	@ (8002168 <HAL_RCC_OscConfig+0x270>)
 8001fb4:	4313      	orrs	r3, r2
 8001fb6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001fb8:	4b6b      	ldr	r3, [pc, #428]	@ (8002168 <HAL_RCC_OscConfig+0x270>)
 8001fba:	685b      	ldr	r3, [r3, #4]
 8001fbc:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	69db      	ldr	r3, [r3, #28]
 8001fc4:	021b      	lsls	r3, r3, #8
 8001fc6:	4968      	ldr	r1, [pc, #416]	@ (8002168 <HAL_RCC_OscConfig+0x270>)
 8001fc8:	4313      	orrs	r3, r2
 8001fca:	604b      	str	r3, [r1, #4]
 8001fcc:	e025      	b.n	800201a <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001fce:	4b66      	ldr	r3, [pc, #408]	@ (8002168 <HAL_RCC_OscConfig+0x270>)
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	4a65      	ldr	r2, [pc, #404]	@ (8002168 <HAL_RCC_OscConfig+0x270>)
 8001fd4:	f043 0308 	orr.w	r3, r3, #8
 8001fd8:	6013      	str	r3, [r2, #0]
 8001fda:	4b63      	ldr	r3, [pc, #396]	@ (8002168 <HAL_RCC_OscConfig+0x270>)
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	6a1b      	ldr	r3, [r3, #32]
 8001fe6:	4960      	ldr	r1, [pc, #384]	@ (8002168 <HAL_RCC_OscConfig+0x270>)
 8001fe8:	4313      	orrs	r3, r2
 8001fea:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001fec:	4b5e      	ldr	r3, [pc, #376]	@ (8002168 <HAL_RCC_OscConfig+0x270>)
 8001fee:	685b      	ldr	r3, [r3, #4]
 8001ff0:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	69db      	ldr	r3, [r3, #28]
 8001ff8:	021b      	lsls	r3, r3, #8
 8001ffa:	495b      	ldr	r1, [pc, #364]	@ (8002168 <HAL_RCC_OscConfig+0x270>)
 8001ffc:	4313      	orrs	r3, r2
 8001ffe:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002000:	69bb      	ldr	r3, [r7, #24]
 8002002:	2b00      	cmp	r3, #0
 8002004:	d109      	bne.n	800201a <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	6a1b      	ldr	r3, [r3, #32]
 800200a:	4618      	mov	r0, r3
 800200c:	f000 fd4c 	bl	8002aa8 <RCC_SetFlashLatencyFromMSIRange>
 8002010:	4603      	mov	r3, r0
 8002012:	2b00      	cmp	r3, #0
 8002014:	d001      	beq.n	800201a <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8002016:	2301      	movs	r3, #1
 8002018:	e37a      	b.n	8002710 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800201a:	f000 fc81 	bl	8002920 <HAL_RCC_GetSysClockFreq>
 800201e:	4602      	mov	r2, r0
 8002020:	4b51      	ldr	r3, [pc, #324]	@ (8002168 <HAL_RCC_OscConfig+0x270>)
 8002022:	689b      	ldr	r3, [r3, #8]
 8002024:	091b      	lsrs	r3, r3, #4
 8002026:	f003 030f 	and.w	r3, r3, #15
 800202a:	4950      	ldr	r1, [pc, #320]	@ (800216c <HAL_RCC_OscConfig+0x274>)
 800202c:	5ccb      	ldrb	r3, [r1, r3]
 800202e:	f003 031f 	and.w	r3, r3, #31
 8002032:	fa22 f303 	lsr.w	r3, r2, r3
 8002036:	4a4e      	ldr	r2, [pc, #312]	@ (8002170 <HAL_RCC_OscConfig+0x278>)
 8002038:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800203a:	4b4e      	ldr	r3, [pc, #312]	@ (8002174 <HAL_RCC_OscConfig+0x27c>)
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	4618      	mov	r0, r3
 8002040:	f7ff f812 	bl	8001068 <HAL_InitTick>
 8002044:	4603      	mov	r3, r0
 8002046:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002048:	7bfb      	ldrb	r3, [r7, #15]
 800204a:	2b00      	cmp	r3, #0
 800204c:	d052      	beq.n	80020f4 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800204e:	7bfb      	ldrb	r3, [r7, #15]
 8002050:	e35e      	b.n	8002710 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	699b      	ldr	r3, [r3, #24]
 8002056:	2b00      	cmp	r3, #0
 8002058:	d032      	beq.n	80020c0 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800205a:	4b43      	ldr	r3, [pc, #268]	@ (8002168 <HAL_RCC_OscConfig+0x270>)
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	4a42      	ldr	r2, [pc, #264]	@ (8002168 <HAL_RCC_OscConfig+0x270>)
 8002060:	f043 0301 	orr.w	r3, r3, #1
 8002064:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002066:	f7ff f84f 	bl	8001108 <HAL_GetTick>
 800206a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800206c:	e008      	b.n	8002080 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800206e:	f7ff f84b 	bl	8001108 <HAL_GetTick>
 8002072:	4602      	mov	r2, r0
 8002074:	693b      	ldr	r3, [r7, #16]
 8002076:	1ad3      	subs	r3, r2, r3
 8002078:	2b02      	cmp	r3, #2
 800207a:	d901      	bls.n	8002080 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 800207c:	2303      	movs	r3, #3
 800207e:	e347      	b.n	8002710 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002080:	4b39      	ldr	r3, [pc, #228]	@ (8002168 <HAL_RCC_OscConfig+0x270>)
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f003 0302 	and.w	r3, r3, #2
 8002088:	2b00      	cmp	r3, #0
 800208a:	d0f0      	beq.n	800206e <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800208c:	4b36      	ldr	r3, [pc, #216]	@ (8002168 <HAL_RCC_OscConfig+0x270>)
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	4a35      	ldr	r2, [pc, #212]	@ (8002168 <HAL_RCC_OscConfig+0x270>)
 8002092:	f043 0308 	orr.w	r3, r3, #8
 8002096:	6013      	str	r3, [r2, #0]
 8002098:	4b33      	ldr	r3, [pc, #204]	@ (8002168 <HAL_RCC_OscConfig+0x270>)
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	6a1b      	ldr	r3, [r3, #32]
 80020a4:	4930      	ldr	r1, [pc, #192]	@ (8002168 <HAL_RCC_OscConfig+0x270>)
 80020a6:	4313      	orrs	r3, r2
 80020a8:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80020aa:	4b2f      	ldr	r3, [pc, #188]	@ (8002168 <HAL_RCC_OscConfig+0x270>)
 80020ac:	685b      	ldr	r3, [r3, #4]
 80020ae:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	69db      	ldr	r3, [r3, #28]
 80020b6:	021b      	lsls	r3, r3, #8
 80020b8:	492b      	ldr	r1, [pc, #172]	@ (8002168 <HAL_RCC_OscConfig+0x270>)
 80020ba:	4313      	orrs	r3, r2
 80020bc:	604b      	str	r3, [r1, #4]
 80020be:	e01a      	b.n	80020f6 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80020c0:	4b29      	ldr	r3, [pc, #164]	@ (8002168 <HAL_RCC_OscConfig+0x270>)
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	4a28      	ldr	r2, [pc, #160]	@ (8002168 <HAL_RCC_OscConfig+0x270>)
 80020c6:	f023 0301 	bic.w	r3, r3, #1
 80020ca:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80020cc:	f7ff f81c 	bl	8001108 <HAL_GetTick>
 80020d0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80020d2:	e008      	b.n	80020e6 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80020d4:	f7ff f818 	bl	8001108 <HAL_GetTick>
 80020d8:	4602      	mov	r2, r0
 80020da:	693b      	ldr	r3, [r7, #16]
 80020dc:	1ad3      	subs	r3, r2, r3
 80020de:	2b02      	cmp	r3, #2
 80020e0:	d901      	bls.n	80020e6 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80020e2:	2303      	movs	r3, #3
 80020e4:	e314      	b.n	8002710 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80020e6:	4b20      	ldr	r3, [pc, #128]	@ (8002168 <HAL_RCC_OscConfig+0x270>)
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f003 0302 	and.w	r3, r3, #2
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d1f0      	bne.n	80020d4 <HAL_RCC_OscConfig+0x1dc>
 80020f2:	e000      	b.n	80020f6 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80020f4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f003 0301 	and.w	r3, r3, #1
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d073      	beq.n	80021ea <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002102:	69bb      	ldr	r3, [r7, #24]
 8002104:	2b08      	cmp	r3, #8
 8002106:	d005      	beq.n	8002114 <HAL_RCC_OscConfig+0x21c>
 8002108:	69bb      	ldr	r3, [r7, #24]
 800210a:	2b0c      	cmp	r3, #12
 800210c:	d10e      	bne.n	800212c <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800210e:	697b      	ldr	r3, [r7, #20]
 8002110:	2b03      	cmp	r3, #3
 8002112:	d10b      	bne.n	800212c <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002114:	4b14      	ldr	r3, [pc, #80]	@ (8002168 <HAL_RCC_OscConfig+0x270>)
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800211c:	2b00      	cmp	r3, #0
 800211e:	d063      	beq.n	80021e8 <HAL_RCC_OscConfig+0x2f0>
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	685b      	ldr	r3, [r3, #4]
 8002124:	2b00      	cmp	r3, #0
 8002126:	d15f      	bne.n	80021e8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002128:	2301      	movs	r3, #1
 800212a:	e2f1      	b.n	8002710 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	685b      	ldr	r3, [r3, #4]
 8002130:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002134:	d106      	bne.n	8002144 <HAL_RCC_OscConfig+0x24c>
 8002136:	4b0c      	ldr	r3, [pc, #48]	@ (8002168 <HAL_RCC_OscConfig+0x270>)
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	4a0b      	ldr	r2, [pc, #44]	@ (8002168 <HAL_RCC_OscConfig+0x270>)
 800213c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002140:	6013      	str	r3, [r2, #0]
 8002142:	e025      	b.n	8002190 <HAL_RCC_OscConfig+0x298>
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	685b      	ldr	r3, [r3, #4]
 8002148:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800214c:	d114      	bne.n	8002178 <HAL_RCC_OscConfig+0x280>
 800214e:	4b06      	ldr	r3, [pc, #24]	@ (8002168 <HAL_RCC_OscConfig+0x270>)
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	4a05      	ldr	r2, [pc, #20]	@ (8002168 <HAL_RCC_OscConfig+0x270>)
 8002154:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002158:	6013      	str	r3, [r2, #0]
 800215a:	4b03      	ldr	r3, [pc, #12]	@ (8002168 <HAL_RCC_OscConfig+0x270>)
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	4a02      	ldr	r2, [pc, #8]	@ (8002168 <HAL_RCC_OscConfig+0x270>)
 8002160:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002164:	6013      	str	r3, [r2, #0]
 8002166:	e013      	b.n	8002190 <HAL_RCC_OscConfig+0x298>
 8002168:	40021000 	.word	0x40021000
 800216c:	0800ab18 	.word	0x0800ab18
 8002170:	20000000 	.word	0x20000000
 8002174:	20000004 	.word	0x20000004
 8002178:	4ba0      	ldr	r3, [pc, #640]	@ (80023fc <HAL_RCC_OscConfig+0x504>)
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	4a9f      	ldr	r2, [pc, #636]	@ (80023fc <HAL_RCC_OscConfig+0x504>)
 800217e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002182:	6013      	str	r3, [r2, #0]
 8002184:	4b9d      	ldr	r3, [pc, #628]	@ (80023fc <HAL_RCC_OscConfig+0x504>)
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	4a9c      	ldr	r2, [pc, #624]	@ (80023fc <HAL_RCC_OscConfig+0x504>)
 800218a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800218e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	685b      	ldr	r3, [r3, #4]
 8002194:	2b00      	cmp	r3, #0
 8002196:	d013      	beq.n	80021c0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002198:	f7fe ffb6 	bl	8001108 <HAL_GetTick>
 800219c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800219e:	e008      	b.n	80021b2 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80021a0:	f7fe ffb2 	bl	8001108 <HAL_GetTick>
 80021a4:	4602      	mov	r2, r0
 80021a6:	693b      	ldr	r3, [r7, #16]
 80021a8:	1ad3      	subs	r3, r2, r3
 80021aa:	2b64      	cmp	r3, #100	@ 0x64
 80021ac:	d901      	bls.n	80021b2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80021ae:	2303      	movs	r3, #3
 80021b0:	e2ae      	b.n	8002710 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80021b2:	4b92      	ldr	r3, [pc, #584]	@ (80023fc <HAL_RCC_OscConfig+0x504>)
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d0f0      	beq.n	80021a0 <HAL_RCC_OscConfig+0x2a8>
 80021be:	e014      	b.n	80021ea <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021c0:	f7fe ffa2 	bl	8001108 <HAL_GetTick>
 80021c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80021c6:	e008      	b.n	80021da <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80021c8:	f7fe ff9e 	bl	8001108 <HAL_GetTick>
 80021cc:	4602      	mov	r2, r0
 80021ce:	693b      	ldr	r3, [r7, #16]
 80021d0:	1ad3      	subs	r3, r2, r3
 80021d2:	2b64      	cmp	r3, #100	@ 0x64
 80021d4:	d901      	bls.n	80021da <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80021d6:	2303      	movs	r3, #3
 80021d8:	e29a      	b.n	8002710 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80021da:	4b88      	ldr	r3, [pc, #544]	@ (80023fc <HAL_RCC_OscConfig+0x504>)
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d1f0      	bne.n	80021c8 <HAL_RCC_OscConfig+0x2d0>
 80021e6:	e000      	b.n	80021ea <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f003 0302 	and.w	r3, r3, #2
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d060      	beq.n	80022b8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80021f6:	69bb      	ldr	r3, [r7, #24]
 80021f8:	2b04      	cmp	r3, #4
 80021fa:	d005      	beq.n	8002208 <HAL_RCC_OscConfig+0x310>
 80021fc:	69bb      	ldr	r3, [r7, #24]
 80021fe:	2b0c      	cmp	r3, #12
 8002200:	d119      	bne.n	8002236 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002202:	697b      	ldr	r3, [r7, #20]
 8002204:	2b02      	cmp	r3, #2
 8002206:	d116      	bne.n	8002236 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002208:	4b7c      	ldr	r3, [pc, #496]	@ (80023fc <HAL_RCC_OscConfig+0x504>)
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002210:	2b00      	cmp	r3, #0
 8002212:	d005      	beq.n	8002220 <HAL_RCC_OscConfig+0x328>
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	68db      	ldr	r3, [r3, #12]
 8002218:	2b00      	cmp	r3, #0
 800221a:	d101      	bne.n	8002220 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800221c:	2301      	movs	r3, #1
 800221e:	e277      	b.n	8002710 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002220:	4b76      	ldr	r3, [pc, #472]	@ (80023fc <HAL_RCC_OscConfig+0x504>)
 8002222:	685b      	ldr	r3, [r3, #4]
 8002224:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	691b      	ldr	r3, [r3, #16]
 800222c:	061b      	lsls	r3, r3, #24
 800222e:	4973      	ldr	r1, [pc, #460]	@ (80023fc <HAL_RCC_OscConfig+0x504>)
 8002230:	4313      	orrs	r3, r2
 8002232:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002234:	e040      	b.n	80022b8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	68db      	ldr	r3, [r3, #12]
 800223a:	2b00      	cmp	r3, #0
 800223c:	d023      	beq.n	8002286 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800223e:	4b6f      	ldr	r3, [pc, #444]	@ (80023fc <HAL_RCC_OscConfig+0x504>)
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	4a6e      	ldr	r2, [pc, #440]	@ (80023fc <HAL_RCC_OscConfig+0x504>)
 8002244:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002248:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800224a:	f7fe ff5d 	bl	8001108 <HAL_GetTick>
 800224e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002250:	e008      	b.n	8002264 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002252:	f7fe ff59 	bl	8001108 <HAL_GetTick>
 8002256:	4602      	mov	r2, r0
 8002258:	693b      	ldr	r3, [r7, #16]
 800225a:	1ad3      	subs	r3, r2, r3
 800225c:	2b02      	cmp	r3, #2
 800225e:	d901      	bls.n	8002264 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002260:	2303      	movs	r3, #3
 8002262:	e255      	b.n	8002710 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002264:	4b65      	ldr	r3, [pc, #404]	@ (80023fc <HAL_RCC_OscConfig+0x504>)
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800226c:	2b00      	cmp	r3, #0
 800226e:	d0f0      	beq.n	8002252 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002270:	4b62      	ldr	r3, [pc, #392]	@ (80023fc <HAL_RCC_OscConfig+0x504>)
 8002272:	685b      	ldr	r3, [r3, #4]
 8002274:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	691b      	ldr	r3, [r3, #16]
 800227c:	061b      	lsls	r3, r3, #24
 800227e:	495f      	ldr	r1, [pc, #380]	@ (80023fc <HAL_RCC_OscConfig+0x504>)
 8002280:	4313      	orrs	r3, r2
 8002282:	604b      	str	r3, [r1, #4]
 8002284:	e018      	b.n	80022b8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002286:	4b5d      	ldr	r3, [pc, #372]	@ (80023fc <HAL_RCC_OscConfig+0x504>)
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	4a5c      	ldr	r2, [pc, #368]	@ (80023fc <HAL_RCC_OscConfig+0x504>)
 800228c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002290:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002292:	f7fe ff39 	bl	8001108 <HAL_GetTick>
 8002296:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002298:	e008      	b.n	80022ac <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800229a:	f7fe ff35 	bl	8001108 <HAL_GetTick>
 800229e:	4602      	mov	r2, r0
 80022a0:	693b      	ldr	r3, [r7, #16]
 80022a2:	1ad3      	subs	r3, r2, r3
 80022a4:	2b02      	cmp	r3, #2
 80022a6:	d901      	bls.n	80022ac <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80022a8:	2303      	movs	r3, #3
 80022aa:	e231      	b.n	8002710 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80022ac:	4b53      	ldr	r3, [pc, #332]	@ (80023fc <HAL_RCC_OscConfig+0x504>)
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d1f0      	bne.n	800229a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f003 0308 	and.w	r3, r3, #8
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d03c      	beq.n	800233e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	695b      	ldr	r3, [r3, #20]
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d01c      	beq.n	8002306 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80022cc:	4b4b      	ldr	r3, [pc, #300]	@ (80023fc <HAL_RCC_OscConfig+0x504>)
 80022ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80022d2:	4a4a      	ldr	r2, [pc, #296]	@ (80023fc <HAL_RCC_OscConfig+0x504>)
 80022d4:	f043 0301 	orr.w	r3, r3, #1
 80022d8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022dc:	f7fe ff14 	bl	8001108 <HAL_GetTick>
 80022e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80022e2:	e008      	b.n	80022f6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80022e4:	f7fe ff10 	bl	8001108 <HAL_GetTick>
 80022e8:	4602      	mov	r2, r0
 80022ea:	693b      	ldr	r3, [r7, #16]
 80022ec:	1ad3      	subs	r3, r2, r3
 80022ee:	2b02      	cmp	r3, #2
 80022f0:	d901      	bls.n	80022f6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80022f2:	2303      	movs	r3, #3
 80022f4:	e20c      	b.n	8002710 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80022f6:	4b41      	ldr	r3, [pc, #260]	@ (80023fc <HAL_RCC_OscConfig+0x504>)
 80022f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80022fc:	f003 0302 	and.w	r3, r3, #2
 8002300:	2b00      	cmp	r3, #0
 8002302:	d0ef      	beq.n	80022e4 <HAL_RCC_OscConfig+0x3ec>
 8002304:	e01b      	b.n	800233e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002306:	4b3d      	ldr	r3, [pc, #244]	@ (80023fc <HAL_RCC_OscConfig+0x504>)
 8002308:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800230c:	4a3b      	ldr	r2, [pc, #236]	@ (80023fc <HAL_RCC_OscConfig+0x504>)
 800230e:	f023 0301 	bic.w	r3, r3, #1
 8002312:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002316:	f7fe fef7 	bl	8001108 <HAL_GetTick>
 800231a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800231c:	e008      	b.n	8002330 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800231e:	f7fe fef3 	bl	8001108 <HAL_GetTick>
 8002322:	4602      	mov	r2, r0
 8002324:	693b      	ldr	r3, [r7, #16]
 8002326:	1ad3      	subs	r3, r2, r3
 8002328:	2b02      	cmp	r3, #2
 800232a:	d901      	bls.n	8002330 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800232c:	2303      	movs	r3, #3
 800232e:	e1ef      	b.n	8002710 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002330:	4b32      	ldr	r3, [pc, #200]	@ (80023fc <HAL_RCC_OscConfig+0x504>)
 8002332:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002336:	f003 0302 	and.w	r3, r3, #2
 800233a:	2b00      	cmp	r3, #0
 800233c:	d1ef      	bne.n	800231e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f003 0304 	and.w	r3, r3, #4
 8002346:	2b00      	cmp	r3, #0
 8002348:	f000 80a6 	beq.w	8002498 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800234c:	2300      	movs	r3, #0
 800234e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002350:	4b2a      	ldr	r3, [pc, #168]	@ (80023fc <HAL_RCC_OscConfig+0x504>)
 8002352:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002354:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002358:	2b00      	cmp	r3, #0
 800235a:	d10d      	bne.n	8002378 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800235c:	4b27      	ldr	r3, [pc, #156]	@ (80023fc <HAL_RCC_OscConfig+0x504>)
 800235e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002360:	4a26      	ldr	r2, [pc, #152]	@ (80023fc <HAL_RCC_OscConfig+0x504>)
 8002362:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002366:	6593      	str	r3, [r2, #88]	@ 0x58
 8002368:	4b24      	ldr	r3, [pc, #144]	@ (80023fc <HAL_RCC_OscConfig+0x504>)
 800236a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800236c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002370:	60bb      	str	r3, [r7, #8]
 8002372:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002374:	2301      	movs	r3, #1
 8002376:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002378:	4b21      	ldr	r3, [pc, #132]	@ (8002400 <HAL_RCC_OscConfig+0x508>)
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002380:	2b00      	cmp	r3, #0
 8002382:	d118      	bne.n	80023b6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002384:	4b1e      	ldr	r3, [pc, #120]	@ (8002400 <HAL_RCC_OscConfig+0x508>)
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	4a1d      	ldr	r2, [pc, #116]	@ (8002400 <HAL_RCC_OscConfig+0x508>)
 800238a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800238e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002390:	f7fe feba 	bl	8001108 <HAL_GetTick>
 8002394:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002396:	e008      	b.n	80023aa <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002398:	f7fe feb6 	bl	8001108 <HAL_GetTick>
 800239c:	4602      	mov	r2, r0
 800239e:	693b      	ldr	r3, [r7, #16]
 80023a0:	1ad3      	subs	r3, r2, r3
 80023a2:	2b02      	cmp	r3, #2
 80023a4:	d901      	bls.n	80023aa <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80023a6:	2303      	movs	r3, #3
 80023a8:	e1b2      	b.n	8002710 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80023aa:	4b15      	ldr	r3, [pc, #84]	@ (8002400 <HAL_RCC_OscConfig+0x508>)
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d0f0      	beq.n	8002398 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	689b      	ldr	r3, [r3, #8]
 80023ba:	2b01      	cmp	r3, #1
 80023bc:	d108      	bne.n	80023d0 <HAL_RCC_OscConfig+0x4d8>
 80023be:	4b0f      	ldr	r3, [pc, #60]	@ (80023fc <HAL_RCC_OscConfig+0x504>)
 80023c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80023c4:	4a0d      	ldr	r2, [pc, #52]	@ (80023fc <HAL_RCC_OscConfig+0x504>)
 80023c6:	f043 0301 	orr.w	r3, r3, #1
 80023ca:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80023ce:	e029      	b.n	8002424 <HAL_RCC_OscConfig+0x52c>
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	689b      	ldr	r3, [r3, #8]
 80023d4:	2b05      	cmp	r3, #5
 80023d6:	d115      	bne.n	8002404 <HAL_RCC_OscConfig+0x50c>
 80023d8:	4b08      	ldr	r3, [pc, #32]	@ (80023fc <HAL_RCC_OscConfig+0x504>)
 80023da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80023de:	4a07      	ldr	r2, [pc, #28]	@ (80023fc <HAL_RCC_OscConfig+0x504>)
 80023e0:	f043 0304 	orr.w	r3, r3, #4
 80023e4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80023e8:	4b04      	ldr	r3, [pc, #16]	@ (80023fc <HAL_RCC_OscConfig+0x504>)
 80023ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80023ee:	4a03      	ldr	r2, [pc, #12]	@ (80023fc <HAL_RCC_OscConfig+0x504>)
 80023f0:	f043 0301 	orr.w	r3, r3, #1
 80023f4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80023f8:	e014      	b.n	8002424 <HAL_RCC_OscConfig+0x52c>
 80023fa:	bf00      	nop
 80023fc:	40021000 	.word	0x40021000
 8002400:	40007000 	.word	0x40007000
 8002404:	4b9a      	ldr	r3, [pc, #616]	@ (8002670 <HAL_RCC_OscConfig+0x778>)
 8002406:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800240a:	4a99      	ldr	r2, [pc, #612]	@ (8002670 <HAL_RCC_OscConfig+0x778>)
 800240c:	f023 0301 	bic.w	r3, r3, #1
 8002410:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002414:	4b96      	ldr	r3, [pc, #600]	@ (8002670 <HAL_RCC_OscConfig+0x778>)
 8002416:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800241a:	4a95      	ldr	r2, [pc, #596]	@ (8002670 <HAL_RCC_OscConfig+0x778>)
 800241c:	f023 0304 	bic.w	r3, r3, #4
 8002420:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	689b      	ldr	r3, [r3, #8]
 8002428:	2b00      	cmp	r3, #0
 800242a:	d016      	beq.n	800245a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800242c:	f7fe fe6c 	bl	8001108 <HAL_GetTick>
 8002430:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002432:	e00a      	b.n	800244a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002434:	f7fe fe68 	bl	8001108 <HAL_GetTick>
 8002438:	4602      	mov	r2, r0
 800243a:	693b      	ldr	r3, [r7, #16]
 800243c:	1ad3      	subs	r3, r2, r3
 800243e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002442:	4293      	cmp	r3, r2
 8002444:	d901      	bls.n	800244a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002446:	2303      	movs	r3, #3
 8002448:	e162      	b.n	8002710 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800244a:	4b89      	ldr	r3, [pc, #548]	@ (8002670 <HAL_RCC_OscConfig+0x778>)
 800244c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002450:	f003 0302 	and.w	r3, r3, #2
 8002454:	2b00      	cmp	r3, #0
 8002456:	d0ed      	beq.n	8002434 <HAL_RCC_OscConfig+0x53c>
 8002458:	e015      	b.n	8002486 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800245a:	f7fe fe55 	bl	8001108 <HAL_GetTick>
 800245e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002460:	e00a      	b.n	8002478 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002462:	f7fe fe51 	bl	8001108 <HAL_GetTick>
 8002466:	4602      	mov	r2, r0
 8002468:	693b      	ldr	r3, [r7, #16]
 800246a:	1ad3      	subs	r3, r2, r3
 800246c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002470:	4293      	cmp	r3, r2
 8002472:	d901      	bls.n	8002478 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002474:	2303      	movs	r3, #3
 8002476:	e14b      	b.n	8002710 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002478:	4b7d      	ldr	r3, [pc, #500]	@ (8002670 <HAL_RCC_OscConfig+0x778>)
 800247a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800247e:	f003 0302 	and.w	r3, r3, #2
 8002482:	2b00      	cmp	r3, #0
 8002484:	d1ed      	bne.n	8002462 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002486:	7ffb      	ldrb	r3, [r7, #31]
 8002488:	2b01      	cmp	r3, #1
 800248a:	d105      	bne.n	8002498 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800248c:	4b78      	ldr	r3, [pc, #480]	@ (8002670 <HAL_RCC_OscConfig+0x778>)
 800248e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002490:	4a77      	ldr	r2, [pc, #476]	@ (8002670 <HAL_RCC_OscConfig+0x778>)
 8002492:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002496:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f003 0320 	and.w	r3, r3, #32
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d03c      	beq.n	800251e <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d01c      	beq.n	80024e6 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80024ac:	4b70      	ldr	r3, [pc, #448]	@ (8002670 <HAL_RCC_OscConfig+0x778>)
 80024ae:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80024b2:	4a6f      	ldr	r2, [pc, #444]	@ (8002670 <HAL_RCC_OscConfig+0x778>)
 80024b4:	f043 0301 	orr.w	r3, r3, #1
 80024b8:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024bc:	f7fe fe24 	bl	8001108 <HAL_GetTick>
 80024c0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80024c2:	e008      	b.n	80024d6 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80024c4:	f7fe fe20 	bl	8001108 <HAL_GetTick>
 80024c8:	4602      	mov	r2, r0
 80024ca:	693b      	ldr	r3, [r7, #16]
 80024cc:	1ad3      	subs	r3, r2, r3
 80024ce:	2b02      	cmp	r3, #2
 80024d0:	d901      	bls.n	80024d6 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80024d2:	2303      	movs	r3, #3
 80024d4:	e11c      	b.n	8002710 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80024d6:	4b66      	ldr	r3, [pc, #408]	@ (8002670 <HAL_RCC_OscConfig+0x778>)
 80024d8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80024dc:	f003 0302 	and.w	r3, r3, #2
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d0ef      	beq.n	80024c4 <HAL_RCC_OscConfig+0x5cc>
 80024e4:	e01b      	b.n	800251e <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80024e6:	4b62      	ldr	r3, [pc, #392]	@ (8002670 <HAL_RCC_OscConfig+0x778>)
 80024e8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80024ec:	4a60      	ldr	r2, [pc, #384]	@ (8002670 <HAL_RCC_OscConfig+0x778>)
 80024ee:	f023 0301 	bic.w	r3, r3, #1
 80024f2:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024f6:	f7fe fe07 	bl	8001108 <HAL_GetTick>
 80024fa:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80024fc:	e008      	b.n	8002510 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80024fe:	f7fe fe03 	bl	8001108 <HAL_GetTick>
 8002502:	4602      	mov	r2, r0
 8002504:	693b      	ldr	r3, [r7, #16]
 8002506:	1ad3      	subs	r3, r2, r3
 8002508:	2b02      	cmp	r3, #2
 800250a:	d901      	bls.n	8002510 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 800250c:	2303      	movs	r3, #3
 800250e:	e0ff      	b.n	8002710 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002510:	4b57      	ldr	r3, [pc, #348]	@ (8002670 <HAL_RCC_OscConfig+0x778>)
 8002512:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002516:	f003 0302 	and.w	r3, r3, #2
 800251a:	2b00      	cmp	r3, #0
 800251c:	d1ef      	bne.n	80024fe <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002522:	2b00      	cmp	r3, #0
 8002524:	f000 80f3 	beq.w	800270e <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800252c:	2b02      	cmp	r3, #2
 800252e:	f040 80c9 	bne.w	80026c4 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002532:	4b4f      	ldr	r3, [pc, #316]	@ (8002670 <HAL_RCC_OscConfig+0x778>)
 8002534:	68db      	ldr	r3, [r3, #12]
 8002536:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002538:	697b      	ldr	r3, [r7, #20]
 800253a:	f003 0203 	and.w	r2, r3, #3
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002542:	429a      	cmp	r2, r3
 8002544:	d12c      	bne.n	80025a0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002546:	697b      	ldr	r3, [r7, #20]
 8002548:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002550:	3b01      	subs	r3, #1
 8002552:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002554:	429a      	cmp	r2, r3
 8002556:	d123      	bne.n	80025a0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002558:	697b      	ldr	r3, [r7, #20]
 800255a:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002562:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002564:	429a      	cmp	r2, r3
 8002566:	d11b      	bne.n	80025a0 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002568:	697b      	ldr	r3, [r7, #20]
 800256a:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002572:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002574:	429a      	cmp	r2, r3
 8002576:	d113      	bne.n	80025a0 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002578:	697b      	ldr	r3, [r7, #20]
 800257a:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002582:	085b      	lsrs	r3, r3, #1
 8002584:	3b01      	subs	r3, #1
 8002586:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002588:	429a      	cmp	r2, r3
 800258a:	d109      	bne.n	80025a0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800258c:	697b      	ldr	r3, [r7, #20]
 800258e:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002596:	085b      	lsrs	r3, r3, #1
 8002598:	3b01      	subs	r3, #1
 800259a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800259c:	429a      	cmp	r2, r3
 800259e:	d06b      	beq.n	8002678 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80025a0:	69bb      	ldr	r3, [r7, #24]
 80025a2:	2b0c      	cmp	r3, #12
 80025a4:	d062      	beq.n	800266c <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80025a6:	4b32      	ldr	r3, [pc, #200]	@ (8002670 <HAL_RCC_OscConfig+0x778>)
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d001      	beq.n	80025b6 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 80025b2:	2301      	movs	r3, #1
 80025b4:	e0ac      	b.n	8002710 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80025b6:	4b2e      	ldr	r3, [pc, #184]	@ (8002670 <HAL_RCC_OscConfig+0x778>)
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	4a2d      	ldr	r2, [pc, #180]	@ (8002670 <HAL_RCC_OscConfig+0x778>)
 80025bc:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80025c0:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80025c2:	f7fe fda1 	bl	8001108 <HAL_GetTick>
 80025c6:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80025c8:	e008      	b.n	80025dc <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025ca:	f7fe fd9d 	bl	8001108 <HAL_GetTick>
 80025ce:	4602      	mov	r2, r0
 80025d0:	693b      	ldr	r3, [r7, #16]
 80025d2:	1ad3      	subs	r3, r2, r3
 80025d4:	2b02      	cmp	r3, #2
 80025d6:	d901      	bls.n	80025dc <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 80025d8:	2303      	movs	r3, #3
 80025da:	e099      	b.n	8002710 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80025dc:	4b24      	ldr	r3, [pc, #144]	@ (8002670 <HAL_RCC_OscConfig+0x778>)
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d1f0      	bne.n	80025ca <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80025e8:	4b21      	ldr	r3, [pc, #132]	@ (8002670 <HAL_RCC_OscConfig+0x778>)
 80025ea:	68da      	ldr	r2, [r3, #12]
 80025ec:	4b21      	ldr	r3, [pc, #132]	@ (8002674 <HAL_RCC_OscConfig+0x77c>)
 80025ee:	4013      	ands	r3, r2
 80025f0:	687a      	ldr	r2, [r7, #4]
 80025f2:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80025f4:	687a      	ldr	r2, [r7, #4]
 80025f6:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80025f8:	3a01      	subs	r2, #1
 80025fa:	0112      	lsls	r2, r2, #4
 80025fc:	4311      	orrs	r1, r2
 80025fe:	687a      	ldr	r2, [r7, #4]
 8002600:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002602:	0212      	lsls	r2, r2, #8
 8002604:	4311      	orrs	r1, r2
 8002606:	687a      	ldr	r2, [r7, #4]
 8002608:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800260a:	0852      	lsrs	r2, r2, #1
 800260c:	3a01      	subs	r2, #1
 800260e:	0552      	lsls	r2, r2, #21
 8002610:	4311      	orrs	r1, r2
 8002612:	687a      	ldr	r2, [r7, #4]
 8002614:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002616:	0852      	lsrs	r2, r2, #1
 8002618:	3a01      	subs	r2, #1
 800261a:	0652      	lsls	r2, r2, #25
 800261c:	4311      	orrs	r1, r2
 800261e:	687a      	ldr	r2, [r7, #4]
 8002620:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002622:	06d2      	lsls	r2, r2, #27
 8002624:	430a      	orrs	r2, r1
 8002626:	4912      	ldr	r1, [pc, #72]	@ (8002670 <HAL_RCC_OscConfig+0x778>)
 8002628:	4313      	orrs	r3, r2
 800262a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800262c:	4b10      	ldr	r3, [pc, #64]	@ (8002670 <HAL_RCC_OscConfig+0x778>)
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	4a0f      	ldr	r2, [pc, #60]	@ (8002670 <HAL_RCC_OscConfig+0x778>)
 8002632:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002636:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002638:	4b0d      	ldr	r3, [pc, #52]	@ (8002670 <HAL_RCC_OscConfig+0x778>)
 800263a:	68db      	ldr	r3, [r3, #12]
 800263c:	4a0c      	ldr	r2, [pc, #48]	@ (8002670 <HAL_RCC_OscConfig+0x778>)
 800263e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002642:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002644:	f7fe fd60 	bl	8001108 <HAL_GetTick>
 8002648:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800264a:	e008      	b.n	800265e <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800264c:	f7fe fd5c 	bl	8001108 <HAL_GetTick>
 8002650:	4602      	mov	r2, r0
 8002652:	693b      	ldr	r3, [r7, #16]
 8002654:	1ad3      	subs	r3, r2, r3
 8002656:	2b02      	cmp	r3, #2
 8002658:	d901      	bls.n	800265e <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 800265a:	2303      	movs	r3, #3
 800265c:	e058      	b.n	8002710 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800265e:	4b04      	ldr	r3, [pc, #16]	@ (8002670 <HAL_RCC_OscConfig+0x778>)
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002666:	2b00      	cmp	r3, #0
 8002668:	d0f0      	beq.n	800264c <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800266a:	e050      	b.n	800270e <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800266c:	2301      	movs	r3, #1
 800266e:	e04f      	b.n	8002710 <HAL_RCC_OscConfig+0x818>
 8002670:	40021000 	.word	0x40021000
 8002674:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002678:	4b27      	ldr	r3, [pc, #156]	@ (8002718 <HAL_RCC_OscConfig+0x820>)
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002680:	2b00      	cmp	r3, #0
 8002682:	d144      	bne.n	800270e <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002684:	4b24      	ldr	r3, [pc, #144]	@ (8002718 <HAL_RCC_OscConfig+0x820>)
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	4a23      	ldr	r2, [pc, #140]	@ (8002718 <HAL_RCC_OscConfig+0x820>)
 800268a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800268e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002690:	4b21      	ldr	r3, [pc, #132]	@ (8002718 <HAL_RCC_OscConfig+0x820>)
 8002692:	68db      	ldr	r3, [r3, #12]
 8002694:	4a20      	ldr	r2, [pc, #128]	@ (8002718 <HAL_RCC_OscConfig+0x820>)
 8002696:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800269a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800269c:	f7fe fd34 	bl	8001108 <HAL_GetTick>
 80026a0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80026a2:	e008      	b.n	80026b6 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026a4:	f7fe fd30 	bl	8001108 <HAL_GetTick>
 80026a8:	4602      	mov	r2, r0
 80026aa:	693b      	ldr	r3, [r7, #16]
 80026ac:	1ad3      	subs	r3, r2, r3
 80026ae:	2b02      	cmp	r3, #2
 80026b0:	d901      	bls.n	80026b6 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 80026b2:	2303      	movs	r3, #3
 80026b4:	e02c      	b.n	8002710 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80026b6:	4b18      	ldr	r3, [pc, #96]	@ (8002718 <HAL_RCC_OscConfig+0x820>)
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d0f0      	beq.n	80026a4 <HAL_RCC_OscConfig+0x7ac>
 80026c2:	e024      	b.n	800270e <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80026c4:	69bb      	ldr	r3, [r7, #24]
 80026c6:	2b0c      	cmp	r3, #12
 80026c8:	d01f      	beq.n	800270a <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026ca:	4b13      	ldr	r3, [pc, #76]	@ (8002718 <HAL_RCC_OscConfig+0x820>)
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	4a12      	ldr	r2, [pc, #72]	@ (8002718 <HAL_RCC_OscConfig+0x820>)
 80026d0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80026d4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026d6:	f7fe fd17 	bl	8001108 <HAL_GetTick>
 80026da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80026dc:	e008      	b.n	80026f0 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026de:	f7fe fd13 	bl	8001108 <HAL_GetTick>
 80026e2:	4602      	mov	r2, r0
 80026e4:	693b      	ldr	r3, [r7, #16]
 80026e6:	1ad3      	subs	r3, r2, r3
 80026e8:	2b02      	cmp	r3, #2
 80026ea:	d901      	bls.n	80026f0 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 80026ec:	2303      	movs	r3, #3
 80026ee:	e00f      	b.n	8002710 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80026f0:	4b09      	ldr	r3, [pc, #36]	@ (8002718 <HAL_RCC_OscConfig+0x820>)
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d1f0      	bne.n	80026de <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 80026fc:	4b06      	ldr	r3, [pc, #24]	@ (8002718 <HAL_RCC_OscConfig+0x820>)
 80026fe:	68da      	ldr	r2, [r3, #12]
 8002700:	4905      	ldr	r1, [pc, #20]	@ (8002718 <HAL_RCC_OscConfig+0x820>)
 8002702:	4b06      	ldr	r3, [pc, #24]	@ (800271c <HAL_RCC_OscConfig+0x824>)
 8002704:	4013      	ands	r3, r2
 8002706:	60cb      	str	r3, [r1, #12]
 8002708:	e001      	b.n	800270e <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800270a:	2301      	movs	r3, #1
 800270c:	e000      	b.n	8002710 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 800270e:	2300      	movs	r3, #0
}
 8002710:	4618      	mov	r0, r3
 8002712:	3720      	adds	r7, #32
 8002714:	46bd      	mov	sp, r7
 8002716:	bd80      	pop	{r7, pc}
 8002718:	40021000 	.word	0x40021000
 800271c:	feeefffc 	.word	0xfeeefffc

08002720 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002720:	b580      	push	{r7, lr}
 8002722:	b084      	sub	sp, #16
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
 8002728:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	2b00      	cmp	r3, #0
 800272e:	d101      	bne.n	8002734 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002730:	2301      	movs	r3, #1
 8002732:	e0e7      	b.n	8002904 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002734:	4b75      	ldr	r3, [pc, #468]	@ (800290c <HAL_RCC_ClockConfig+0x1ec>)
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f003 0307 	and.w	r3, r3, #7
 800273c:	683a      	ldr	r2, [r7, #0]
 800273e:	429a      	cmp	r2, r3
 8002740:	d910      	bls.n	8002764 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002742:	4b72      	ldr	r3, [pc, #456]	@ (800290c <HAL_RCC_ClockConfig+0x1ec>)
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f023 0207 	bic.w	r2, r3, #7
 800274a:	4970      	ldr	r1, [pc, #448]	@ (800290c <HAL_RCC_ClockConfig+0x1ec>)
 800274c:	683b      	ldr	r3, [r7, #0]
 800274e:	4313      	orrs	r3, r2
 8002750:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002752:	4b6e      	ldr	r3, [pc, #440]	@ (800290c <HAL_RCC_ClockConfig+0x1ec>)
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f003 0307 	and.w	r3, r3, #7
 800275a:	683a      	ldr	r2, [r7, #0]
 800275c:	429a      	cmp	r2, r3
 800275e:	d001      	beq.n	8002764 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002760:	2301      	movs	r3, #1
 8002762:	e0cf      	b.n	8002904 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f003 0302 	and.w	r3, r3, #2
 800276c:	2b00      	cmp	r3, #0
 800276e:	d010      	beq.n	8002792 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	689a      	ldr	r2, [r3, #8]
 8002774:	4b66      	ldr	r3, [pc, #408]	@ (8002910 <HAL_RCC_ClockConfig+0x1f0>)
 8002776:	689b      	ldr	r3, [r3, #8]
 8002778:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800277c:	429a      	cmp	r2, r3
 800277e:	d908      	bls.n	8002792 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002780:	4b63      	ldr	r3, [pc, #396]	@ (8002910 <HAL_RCC_ClockConfig+0x1f0>)
 8002782:	689b      	ldr	r3, [r3, #8]
 8002784:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	689b      	ldr	r3, [r3, #8]
 800278c:	4960      	ldr	r1, [pc, #384]	@ (8002910 <HAL_RCC_ClockConfig+0x1f0>)
 800278e:	4313      	orrs	r3, r2
 8002790:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f003 0301 	and.w	r3, r3, #1
 800279a:	2b00      	cmp	r3, #0
 800279c:	d04c      	beq.n	8002838 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	685b      	ldr	r3, [r3, #4]
 80027a2:	2b03      	cmp	r3, #3
 80027a4:	d107      	bne.n	80027b6 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80027a6:	4b5a      	ldr	r3, [pc, #360]	@ (8002910 <HAL_RCC_ClockConfig+0x1f0>)
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d121      	bne.n	80027f6 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80027b2:	2301      	movs	r3, #1
 80027b4:	e0a6      	b.n	8002904 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	685b      	ldr	r3, [r3, #4]
 80027ba:	2b02      	cmp	r3, #2
 80027bc:	d107      	bne.n	80027ce <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80027be:	4b54      	ldr	r3, [pc, #336]	@ (8002910 <HAL_RCC_ClockConfig+0x1f0>)
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d115      	bne.n	80027f6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80027ca:	2301      	movs	r3, #1
 80027cc:	e09a      	b.n	8002904 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	685b      	ldr	r3, [r3, #4]
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d107      	bne.n	80027e6 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80027d6:	4b4e      	ldr	r3, [pc, #312]	@ (8002910 <HAL_RCC_ClockConfig+0x1f0>)
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f003 0302 	and.w	r3, r3, #2
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d109      	bne.n	80027f6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80027e2:	2301      	movs	r3, #1
 80027e4:	e08e      	b.n	8002904 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80027e6:	4b4a      	ldr	r3, [pc, #296]	@ (8002910 <HAL_RCC_ClockConfig+0x1f0>)
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d101      	bne.n	80027f6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80027f2:	2301      	movs	r3, #1
 80027f4:	e086      	b.n	8002904 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80027f6:	4b46      	ldr	r3, [pc, #280]	@ (8002910 <HAL_RCC_ClockConfig+0x1f0>)
 80027f8:	689b      	ldr	r3, [r3, #8]
 80027fa:	f023 0203 	bic.w	r2, r3, #3
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	685b      	ldr	r3, [r3, #4]
 8002802:	4943      	ldr	r1, [pc, #268]	@ (8002910 <HAL_RCC_ClockConfig+0x1f0>)
 8002804:	4313      	orrs	r3, r2
 8002806:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002808:	f7fe fc7e 	bl	8001108 <HAL_GetTick>
 800280c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800280e:	e00a      	b.n	8002826 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002810:	f7fe fc7a 	bl	8001108 <HAL_GetTick>
 8002814:	4602      	mov	r2, r0
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	1ad3      	subs	r3, r2, r3
 800281a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800281e:	4293      	cmp	r3, r2
 8002820:	d901      	bls.n	8002826 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002822:	2303      	movs	r3, #3
 8002824:	e06e      	b.n	8002904 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002826:	4b3a      	ldr	r3, [pc, #232]	@ (8002910 <HAL_RCC_ClockConfig+0x1f0>)
 8002828:	689b      	ldr	r3, [r3, #8]
 800282a:	f003 020c 	and.w	r2, r3, #12
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	685b      	ldr	r3, [r3, #4]
 8002832:	009b      	lsls	r3, r3, #2
 8002834:	429a      	cmp	r2, r3
 8002836:	d1eb      	bne.n	8002810 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f003 0302 	and.w	r3, r3, #2
 8002840:	2b00      	cmp	r3, #0
 8002842:	d010      	beq.n	8002866 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	689a      	ldr	r2, [r3, #8]
 8002848:	4b31      	ldr	r3, [pc, #196]	@ (8002910 <HAL_RCC_ClockConfig+0x1f0>)
 800284a:	689b      	ldr	r3, [r3, #8]
 800284c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002850:	429a      	cmp	r2, r3
 8002852:	d208      	bcs.n	8002866 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002854:	4b2e      	ldr	r3, [pc, #184]	@ (8002910 <HAL_RCC_ClockConfig+0x1f0>)
 8002856:	689b      	ldr	r3, [r3, #8]
 8002858:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	689b      	ldr	r3, [r3, #8]
 8002860:	492b      	ldr	r1, [pc, #172]	@ (8002910 <HAL_RCC_ClockConfig+0x1f0>)
 8002862:	4313      	orrs	r3, r2
 8002864:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002866:	4b29      	ldr	r3, [pc, #164]	@ (800290c <HAL_RCC_ClockConfig+0x1ec>)
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f003 0307 	and.w	r3, r3, #7
 800286e:	683a      	ldr	r2, [r7, #0]
 8002870:	429a      	cmp	r2, r3
 8002872:	d210      	bcs.n	8002896 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002874:	4b25      	ldr	r3, [pc, #148]	@ (800290c <HAL_RCC_ClockConfig+0x1ec>)
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f023 0207 	bic.w	r2, r3, #7
 800287c:	4923      	ldr	r1, [pc, #140]	@ (800290c <HAL_RCC_ClockConfig+0x1ec>)
 800287e:	683b      	ldr	r3, [r7, #0]
 8002880:	4313      	orrs	r3, r2
 8002882:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002884:	4b21      	ldr	r3, [pc, #132]	@ (800290c <HAL_RCC_ClockConfig+0x1ec>)
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f003 0307 	and.w	r3, r3, #7
 800288c:	683a      	ldr	r2, [r7, #0]
 800288e:	429a      	cmp	r2, r3
 8002890:	d001      	beq.n	8002896 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002892:	2301      	movs	r3, #1
 8002894:	e036      	b.n	8002904 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f003 0304 	and.w	r3, r3, #4
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d008      	beq.n	80028b4 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80028a2:	4b1b      	ldr	r3, [pc, #108]	@ (8002910 <HAL_RCC_ClockConfig+0x1f0>)
 80028a4:	689b      	ldr	r3, [r3, #8]
 80028a6:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	68db      	ldr	r3, [r3, #12]
 80028ae:	4918      	ldr	r1, [pc, #96]	@ (8002910 <HAL_RCC_ClockConfig+0x1f0>)
 80028b0:	4313      	orrs	r3, r2
 80028b2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f003 0308 	and.w	r3, r3, #8
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d009      	beq.n	80028d4 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80028c0:	4b13      	ldr	r3, [pc, #76]	@ (8002910 <HAL_RCC_ClockConfig+0x1f0>)
 80028c2:	689b      	ldr	r3, [r3, #8]
 80028c4:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	691b      	ldr	r3, [r3, #16]
 80028cc:	00db      	lsls	r3, r3, #3
 80028ce:	4910      	ldr	r1, [pc, #64]	@ (8002910 <HAL_RCC_ClockConfig+0x1f0>)
 80028d0:	4313      	orrs	r3, r2
 80028d2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80028d4:	f000 f824 	bl	8002920 <HAL_RCC_GetSysClockFreq>
 80028d8:	4602      	mov	r2, r0
 80028da:	4b0d      	ldr	r3, [pc, #52]	@ (8002910 <HAL_RCC_ClockConfig+0x1f0>)
 80028dc:	689b      	ldr	r3, [r3, #8]
 80028de:	091b      	lsrs	r3, r3, #4
 80028e0:	f003 030f 	and.w	r3, r3, #15
 80028e4:	490b      	ldr	r1, [pc, #44]	@ (8002914 <HAL_RCC_ClockConfig+0x1f4>)
 80028e6:	5ccb      	ldrb	r3, [r1, r3]
 80028e8:	f003 031f 	and.w	r3, r3, #31
 80028ec:	fa22 f303 	lsr.w	r3, r2, r3
 80028f0:	4a09      	ldr	r2, [pc, #36]	@ (8002918 <HAL_RCC_ClockConfig+0x1f8>)
 80028f2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80028f4:	4b09      	ldr	r3, [pc, #36]	@ (800291c <HAL_RCC_ClockConfig+0x1fc>)
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	4618      	mov	r0, r3
 80028fa:	f7fe fbb5 	bl	8001068 <HAL_InitTick>
 80028fe:	4603      	mov	r3, r0
 8002900:	72fb      	strb	r3, [r7, #11]

  return status;
 8002902:	7afb      	ldrb	r3, [r7, #11]
}
 8002904:	4618      	mov	r0, r3
 8002906:	3710      	adds	r7, #16
 8002908:	46bd      	mov	sp, r7
 800290a:	bd80      	pop	{r7, pc}
 800290c:	40022000 	.word	0x40022000
 8002910:	40021000 	.word	0x40021000
 8002914:	0800ab18 	.word	0x0800ab18
 8002918:	20000000 	.word	0x20000000
 800291c:	20000004 	.word	0x20000004

08002920 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002920:	b480      	push	{r7}
 8002922:	b089      	sub	sp, #36	@ 0x24
 8002924:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002926:	2300      	movs	r3, #0
 8002928:	61fb      	str	r3, [r7, #28]
 800292a:	2300      	movs	r3, #0
 800292c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800292e:	4b3e      	ldr	r3, [pc, #248]	@ (8002a28 <HAL_RCC_GetSysClockFreq+0x108>)
 8002930:	689b      	ldr	r3, [r3, #8]
 8002932:	f003 030c 	and.w	r3, r3, #12
 8002936:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002938:	4b3b      	ldr	r3, [pc, #236]	@ (8002a28 <HAL_RCC_GetSysClockFreq+0x108>)
 800293a:	68db      	ldr	r3, [r3, #12]
 800293c:	f003 0303 	and.w	r3, r3, #3
 8002940:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002942:	693b      	ldr	r3, [r7, #16]
 8002944:	2b00      	cmp	r3, #0
 8002946:	d005      	beq.n	8002954 <HAL_RCC_GetSysClockFreq+0x34>
 8002948:	693b      	ldr	r3, [r7, #16]
 800294a:	2b0c      	cmp	r3, #12
 800294c:	d121      	bne.n	8002992 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	2b01      	cmp	r3, #1
 8002952:	d11e      	bne.n	8002992 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002954:	4b34      	ldr	r3, [pc, #208]	@ (8002a28 <HAL_RCC_GetSysClockFreq+0x108>)
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f003 0308 	and.w	r3, r3, #8
 800295c:	2b00      	cmp	r3, #0
 800295e:	d107      	bne.n	8002970 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002960:	4b31      	ldr	r3, [pc, #196]	@ (8002a28 <HAL_RCC_GetSysClockFreq+0x108>)
 8002962:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002966:	0a1b      	lsrs	r3, r3, #8
 8002968:	f003 030f 	and.w	r3, r3, #15
 800296c:	61fb      	str	r3, [r7, #28]
 800296e:	e005      	b.n	800297c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002970:	4b2d      	ldr	r3, [pc, #180]	@ (8002a28 <HAL_RCC_GetSysClockFreq+0x108>)
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	091b      	lsrs	r3, r3, #4
 8002976:	f003 030f 	and.w	r3, r3, #15
 800297a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800297c:	4a2b      	ldr	r2, [pc, #172]	@ (8002a2c <HAL_RCC_GetSysClockFreq+0x10c>)
 800297e:	69fb      	ldr	r3, [r7, #28]
 8002980:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002984:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002986:	693b      	ldr	r3, [r7, #16]
 8002988:	2b00      	cmp	r3, #0
 800298a:	d10d      	bne.n	80029a8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800298c:	69fb      	ldr	r3, [r7, #28]
 800298e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002990:	e00a      	b.n	80029a8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002992:	693b      	ldr	r3, [r7, #16]
 8002994:	2b04      	cmp	r3, #4
 8002996:	d102      	bne.n	800299e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002998:	4b25      	ldr	r3, [pc, #148]	@ (8002a30 <HAL_RCC_GetSysClockFreq+0x110>)
 800299a:	61bb      	str	r3, [r7, #24]
 800299c:	e004      	b.n	80029a8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800299e:	693b      	ldr	r3, [r7, #16]
 80029a0:	2b08      	cmp	r3, #8
 80029a2:	d101      	bne.n	80029a8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80029a4:	4b23      	ldr	r3, [pc, #140]	@ (8002a34 <HAL_RCC_GetSysClockFreq+0x114>)
 80029a6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80029a8:	693b      	ldr	r3, [r7, #16]
 80029aa:	2b0c      	cmp	r3, #12
 80029ac:	d134      	bne.n	8002a18 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80029ae:	4b1e      	ldr	r3, [pc, #120]	@ (8002a28 <HAL_RCC_GetSysClockFreq+0x108>)
 80029b0:	68db      	ldr	r3, [r3, #12]
 80029b2:	f003 0303 	and.w	r3, r3, #3
 80029b6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80029b8:	68bb      	ldr	r3, [r7, #8]
 80029ba:	2b02      	cmp	r3, #2
 80029bc:	d003      	beq.n	80029c6 <HAL_RCC_GetSysClockFreq+0xa6>
 80029be:	68bb      	ldr	r3, [r7, #8]
 80029c0:	2b03      	cmp	r3, #3
 80029c2:	d003      	beq.n	80029cc <HAL_RCC_GetSysClockFreq+0xac>
 80029c4:	e005      	b.n	80029d2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80029c6:	4b1a      	ldr	r3, [pc, #104]	@ (8002a30 <HAL_RCC_GetSysClockFreq+0x110>)
 80029c8:	617b      	str	r3, [r7, #20]
      break;
 80029ca:	e005      	b.n	80029d8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80029cc:	4b19      	ldr	r3, [pc, #100]	@ (8002a34 <HAL_RCC_GetSysClockFreq+0x114>)
 80029ce:	617b      	str	r3, [r7, #20]
      break;
 80029d0:	e002      	b.n	80029d8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80029d2:	69fb      	ldr	r3, [r7, #28]
 80029d4:	617b      	str	r3, [r7, #20]
      break;
 80029d6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80029d8:	4b13      	ldr	r3, [pc, #76]	@ (8002a28 <HAL_RCC_GetSysClockFreq+0x108>)
 80029da:	68db      	ldr	r3, [r3, #12]
 80029dc:	091b      	lsrs	r3, r3, #4
 80029de:	f003 0307 	and.w	r3, r3, #7
 80029e2:	3301      	adds	r3, #1
 80029e4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80029e6:	4b10      	ldr	r3, [pc, #64]	@ (8002a28 <HAL_RCC_GetSysClockFreq+0x108>)
 80029e8:	68db      	ldr	r3, [r3, #12]
 80029ea:	0a1b      	lsrs	r3, r3, #8
 80029ec:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80029f0:	697a      	ldr	r2, [r7, #20]
 80029f2:	fb03 f202 	mul.w	r2, r3, r2
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80029fc:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80029fe:	4b0a      	ldr	r3, [pc, #40]	@ (8002a28 <HAL_RCC_GetSysClockFreq+0x108>)
 8002a00:	68db      	ldr	r3, [r3, #12]
 8002a02:	0e5b      	lsrs	r3, r3, #25
 8002a04:	f003 0303 	and.w	r3, r3, #3
 8002a08:	3301      	adds	r3, #1
 8002a0a:	005b      	lsls	r3, r3, #1
 8002a0c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002a0e:	697a      	ldr	r2, [r7, #20]
 8002a10:	683b      	ldr	r3, [r7, #0]
 8002a12:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a16:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002a18:	69bb      	ldr	r3, [r7, #24]
}
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	3724      	adds	r7, #36	@ 0x24
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a24:	4770      	bx	lr
 8002a26:	bf00      	nop
 8002a28:	40021000 	.word	0x40021000
 8002a2c:	0800ab30 	.word	0x0800ab30
 8002a30:	00f42400 	.word	0x00f42400
 8002a34:	007a1200 	.word	0x007a1200

08002a38 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002a38:	b480      	push	{r7}
 8002a3a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002a3c:	4b03      	ldr	r3, [pc, #12]	@ (8002a4c <HAL_RCC_GetHCLKFreq+0x14>)
 8002a3e:	681b      	ldr	r3, [r3, #0]
}
 8002a40:	4618      	mov	r0, r3
 8002a42:	46bd      	mov	sp, r7
 8002a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a48:	4770      	bx	lr
 8002a4a:	bf00      	nop
 8002a4c:	20000000 	.word	0x20000000

08002a50 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002a54:	f7ff fff0 	bl	8002a38 <HAL_RCC_GetHCLKFreq>
 8002a58:	4602      	mov	r2, r0
 8002a5a:	4b06      	ldr	r3, [pc, #24]	@ (8002a74 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002a5c:	689b      	ldr	r3, [r3, #8]
 8002a5e:	0a1b      	lsrs	r3, r3, #8
 8002a60:	f003 0307 	and.w	r3, r3, #7
 8002a64:	4904      	ldr	r1, [pc, #16]	@ (8002a78 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002a66:	5ccb      	ldrb	r3, [r1, r3]
 8002a68:	f003 031f 	and.w	r3, r3, #31
 8002a6c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a70:	4618      	mov	r0, r3
 8002a72:	bd80      	pop	{r7, pc}
 8002a74:	40021000 	.word	0x40021000
 8002a78:	0800ab28 	.word	0x0800ab28

08002a7c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002a80:	f7ff ffda 	bl	8002a38 <HAL_RCC_GetHCLKFreq>
 8002a84:	4602      	mov	r2, r0
 8002a86:	4b06      	ldr	r3, [pc, #24]	@ (8002aa0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002a88:	689b      	ldr	r3, [r3, #8]
 8002a8a:	0adb      	lsrs	r3, r3, #11
 8002a8c:	f003 0307 	and.w	r3, r3, #7
 8002a90:	4904      	ldr	r1, [pc, #16]	@ (8002aa4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002a92:	5ccb      	ldrb	r3, [r1, r3]
 8002a94:	f003 031f 	and.w	r3, r3, #31
 8002a98:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	bd80      	pop	{r7, pc}
 8002aa0:	40021000 	.word	0x40021000
 8002aa4:	0800ab28 	.word	0x0800ab28

08002aa8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	b086      	sub	sp, #24
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002ab0:	2300      	movs	r3, #0
 8002ab2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002ab4:	4b2a      	ldr	r3, [pc, #168]	@ (8002b60 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002ab6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ab8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d003      	beq.n	8002ac8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002ac0:	f7ff f9b6 	bl	8001e30 <HAL_PWREx_GetVoltageRange>
 8002ac4:	6178      	str	r0, [r7, #20]
 8002ac6:	e014      	b.n	8002af2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002ac8:	4b25      	ldr	r3, [pc, #148]	@ (8002b60 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002aca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002acc:	4a24      	ldr	r2, [pc, #144]	@ (8002b60 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002ace:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002ad2:	6593      	str	r3, [r2, #88]	@ 0x58
 8002ad4:	4b22      	ldr	r3, [pc, #136]	@ (8002b60 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002ad6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ad8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002adc:	60fb      	str	r3, [r7, #12]
 8002ade:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002ae0:	f7ff f9a6 	bl	8001e30 <HAL_PWREx_GetVoltageRange>
 8002ae4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002ae6:	4b1e      	ldr	r3, [pc, #120]	@ (8002b60 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002ae8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002aea:	4a1d      	ldr	r2, [pc, #116]	@ (8002b60 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002aec:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002af0:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002af2:	697b      	ldr	r3, [r7, #20]
 8002af4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002af8:	d10b      	bne.n	8002b12 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	2b80      	cmp	r3, #128	@ 0x80
 8002afe:	d919      	bls.n	8002b34 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	2ba0      	cmp	r3, #160	@ 0xa0
 8002b04:	d902      	bls.n	8002b0c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002b06:	2302      	movs	r3, #2
 8002b08:	613b      	str	r3, [r7, #16]
 8002b0a:	e013      	b.n	8002b34 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002b0c:	2301      	movs	r3, #1
 8002b0e:	613b      	str	r3, [r7, #16]
 8002b10:	e010      	b.n	8002b34 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	2b80      	cmp	r3, #128	@ 0x80
 8002b16:	d902      	bls.n	8002b1e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002b18:	2303      	movs	r3, #3
 8002b1a:	613b      	str	r3, [r7, #16]
 8002b1c:	e00a      	b.n	8002b34 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	2b80      	cmp	r3, #128	@ 0x80
 8002b22:	d102      	bne.n	8002b2a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002b24:	2302      	movs	r3, #2
 8002b26:	613b      	str	r3, [r7, #16]
 8002b28:	e004      	b.n	8002b34 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	2b70      	cmp	r3, #112	@ 0x70
 8002b2e:	d101      	bne.n	8002b34 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002b30:	2301      	movs	r3, #1
 8002b32:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002b34:	4b0b      	ldr	r3, [pc, #44]	@ (8002b64 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f023 0207 	bic.w	r2, r3, #7
 8002b3c:	4909      	ldr	r1, [pc, #36]	@ (8002b64 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002b3e:	693b      	ldr	r3, [r7, #16]
 8002b40:	4313      	orrs	r3, r2
 8002b42:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002b44:	4b07      	ldr	r3, [pc, #28]	@ (8002b64 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f003 0307 	and.w	r3, r3, #7
 8002b4c:	693a      	ldr	r2, [r7, #16]
 8002b4e:	429a      	cmp	r2, r3
 8002b50:	d001      	beq.n	8002b56 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002b52:	2301      	movs	r3, #1
 8002b54:	e000      	b.n	8002b58 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002b56:	2300      	movs	r3, #0
}
 8002b58:	4618      	mov	r0, r3
 8002b5a:	3718      	adds	r7, #24
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	bd80      	pop	{r7, pc}
 8002b60:	40021000 	.word	0x40021000
 8002b64:	40022000 	.word	0x40022000

08002b68 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	b086      	sub	sp, #24
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002b70:	2300      	movs	r3, #0
 8002b72:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002b74:	2300      	movs	r3, #0
 8002b76:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d031      	beq.n	8002be8 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b88:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002b8c:	d01a      	beq.n	8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8002b8e:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002b92:	d814      	bhi.n	8002bbe <HAL_RCCEx_PeriphCLKConfig+0x56>
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d009      	beq.n	8002bac <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002b98:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002b9c:	d10f      	bne.n	8002bbe <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8002b9e:	4b5d      	ldr	r3, [pc, #372]	@ (8002d14 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002ba0:	68db      	ldr	r3, [r3, #12]
 8002ba2:	4a5c      	ldr	r2, [pc, #368]	@ (8002d14 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002ba4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002ba8:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002baa:	e00c      	b.n	8002bc6 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	3304      	adds	r3, #4
 8002bb0:	2100      	movs	r1, #0
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	f000 fe86 	bl	80038c4 <RCCEx_PLLSAI1_Config>
 8002bb8:	4603      	mov	r3, r0
 8002bba:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002bbc:	e003      	b.n	8002bc6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002bbe:	2301      	movs	r3, #1
 8002bc0:	74fb      	strb	r3, [r7, #19]
      break;
 8002bc2:	e000      	b.n	8002bc6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8002bc4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002bc6:	7cfb      	ldrb	r3, [r7, #19]
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d10b      	bne.n	8002be4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002bcc:	4b51      	ldr	r3, [pc, #324]	@ (8002d14 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002bce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002bd2:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002bda:	494e      	ldr	r1, [pc, #312]	@ (8002d14 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002bdc:	4313      	orrs	r3, r2
 8002bde:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8002be2:	e001      	b.n	8002be8 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002be4:	7cfb      	ldrb	r3, [r7, #19]
 8002be6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	f000 809e 	beq.w	8002d32 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002bf6:	2300      	movs	r3, #0
 8002bf8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002bfa:	4b46      	ldr	r3, [pc, #280]	@ (8002d14 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002bfc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002bfe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d101      	bne.n	8002c0a <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8002c06:	2301      	movs	r3, #1
 8002c08:	e000      	b.n	8002c0c <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d00d      	beq.n	8002c2c <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c10:	4b40      	ldr	r3, [pc, #256]	@ (8002d14 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002c12:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c14:	4a3f      	ldr	r2, [pc, #252]	@ (8002d14 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002c16:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002c1a:	6593      	str	r3, [r2, #88]	@ 0x58
 8002c1c:	4b3d      	ldr	r3, [pc, #244]	@ (8002d14 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002c1e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c20:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c24:	60bb      	str	r3, [r7, #8]
 8002c26:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c28:	2301      	movs	r3, #1
 8002c2a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002c2c:	4b3a      	ldr	r3, [pc, #232]	@ (8002d18 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	4a39      	ldr	r2, [pc, #228]	@ (8002d18 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002c32:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002c36:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002c38:	f7fe fa66 	bl	8001108 <HAL_GetTick>
 8002c3c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002c3e:	e009      	b.n	8002c54 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c40:	f7fe fa62 	bl	8001108 <HAL_GetTick>
 8002c44:	4602      	mov	r2, r0
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	1ad3      	subs	r3, r2, r3
 8002c4a:	2b02      	cmp	r3, #2
 8002c4c:	d902      	bls.n	8002c54 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8002c4e:	2303      	movs	r3, #3
 8002c50:	74fb      	strb	r3, [r7, #19]
        break;
 8002c52:	e005      	b.n	8002c60 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002c54:	4b30      	ldr	r3, [pc, #192]	@ (8002d18 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d0ef      	beq.n	8002c40 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8002c60:	7cfb      	ldrb	r3, [r7, #19]
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d15a      	bne.n	8002d1c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002c66:	4b2b      	ldr	r3, [pc, #172]	@ (8002d14 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002c68:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c6c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002c70:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002c72:	697b      	ldr	r3, [r7, #20]
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d01e      	beq.n	8002cb6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c7c:	697a      	ldr	r2, [r7, #20]
 8002c7e:	429a      	cmp	r2, r3
 8002c80:	d019      	beq.n	8002cb6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002c82:	4b24      	ldr	r3, [pc, #144]	@ (8002d14 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002c84:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c88:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002c8c:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002c8e:	4b21      	ldr	r3, [pc, #132]	@ (8002d14 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002c90:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c94:	4a1f      	ldr	r2, [pc, #124]	@ (8002d14 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002c96:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002c9a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002c9e:	4b1d      	ldr	r3, [pc, #116]	@ (8002d14 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002ca0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ca4:	4a1b      	ldr	r2, [pc, #108]	@ (8002d14 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002ca6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002caa:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002cae:	4a19      	ldr	r2, [pc, #100]	@ (8002d14 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002cb0:	697b      	ldr	r3, [r7, #20]
 8002cb2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002cb6:	697b      	ldr	r3, [r7, #20]
 8002cb8:	f003 0301 	and.w	r3, r3, #1
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d016      	beq.n	8002cee <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cc0:	f7fe fa22 	bl	8001108 <HAL_GetTick>
 8002cc4:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002cc6:	e00b      	b.n	8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002cc8:	f7fe fa1e 	bl	8001108 <HAL_GetTick>
 8002ccc:	4602      	mov	r2, r0
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	1ad3      	subs	r3, r2, r3
 8002cd2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002cd6:	4293      	cmp	r3, r2
 8002cd8:	d902      	bls.n	8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8002cda:	2303      	movs	r3, #3
 8002cdc:	74fb      	strb	r3, [r7, #19]
            break;
 8002cde:	e006      	b.n	8002cee <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002ce0:	4b0c      	ldr	r3, [pc, #48]	@ (8002d14 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002ce2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ce6:	f003 0302 	and.w	r3, r3, #2
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d0ec      	beq.n	8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8002cee:	7cfb      	ldrb	r3, [r7, #19]
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d10b      	bne.n	8002d0c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002cf4:	4b07      	ldr	r3, [pc, #28]	@ (8002d14 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002cf6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002cfa:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d02:	4904      	ldr	r1, [pc, #16]	@ (8002d14 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002d04:	4313      	orrs	r3, r2
 8002d06:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8002d0a:	e009      	b.n	8002d20 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002d0c:	7cfb      	ldrb	r3, [r7, #19]
 8002d0e:	74bb      	strb	r3, [r7, #18]
 8002d10:	e006      	b.n	8002d20 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8002d12:	bf00      	nop
 8002d14:	40021000 	.word	0x40021000
 8002d18:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d1c:	7cfb      	ldrb	r3, [r7, #19]
 8002d1e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002d20:	7c7b      	ldrb	r3, [r7, #17]
 8002d22:	2b01      	cmp	r3, #1
 8002d24:	d105      	bne.n	8002d32 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d26:	4b9b      	ldr	r3, [pc, #620]	@ (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8002d28:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d2a:	4a9a      	ldr	r2, [pc, #616]	@ (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8002d2c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002d30:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f003 0301 	and.w	r3, r3, #1
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d00a      	beq.n	8002d54 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002d3e:	4b95      	ldr	r3, [pc, #596]	@ (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8002d40:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d44:	f023 0203 	bic.w	r2, r3, #3
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	6a1b      	ldr	r3, [r3, #32]
 8002d4c:	4991      	ldr	r1, [pc, #580]	@ (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8002d4e:	4313      	orrs	r3, r2
 8002d50:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f003 0302 	and.w	r3, r3, #2
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d00a      	beq.n	8002d76 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002d60:	4b8c      	ldr	r3, [pc, #560]	@ (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8002d62:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d66:	f023 020c 	bic.w	r2, r3, #12
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d6e:	4989      	ldr	r1, [pc, #548]	@ (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8002d70:	4313      	orrs	r3, r2
 8002d72:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f003 0304 	and.w	r3, r3, #4
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d00a      	beq.n	8002d98 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002d82:	4b84      	ldr	r3, [pc, #528]	@ (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8002d84:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d88:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d90:	4980      	ldr	r1, [pc, #512]	@ (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8002d92:	4313      	orrs	r3, r2
 8002d94:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f003 0320 	and.w	r3, r3, #32
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d00a      	beq.n	8002dba <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002da4:	4b7b      	ldr	r3, [pc, #492]	@ (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8002da6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002daa:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002db2:	4978      	ldr	r1, [pc, #480]	@ (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8002db4:	4313      	orrs	r3, r2
 8002db6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d00a      	beq.n	8002ddc <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002dc6:	4b73      	ldr	r3, [pc, #460]	@ (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8002dc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002dcc:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002dd4:	496f      	ldr	r1, [pc, #444]	@ (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8002dd6:	4313      	orrs	r3, r2
 8002dd8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d00a      	beq.n	8002dfe <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002de8:	4b6a      	ldr	r3, [pc, #424]	@ (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8002dea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002dee:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002df6:	4967      	ldr	r1, [pc, #412]	@ (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8002df8:	4313      	orrs	r3, r2
 8002dfa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d00a      	beq.n	8002e20 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002e0a:	4b62      	ldr	r3, [pc, #392]	@ (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8002e0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e10:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e18:	495e      	ldr	r1, [pc, #376]	@ (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8002e1a:	4313      	orrs	r3, r2
 8002e1c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d00a      	beq.n	8002e42 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002e2c:	4b59      	ldr	r3, [pc, #356]	@ (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8002e2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e32:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002e3a:	4956      	ldr	r1, [pc, #344]	@ (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8002e3c:	4313      	orrs	r3, r2
 8002e3e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d00a      	beq.n	8002e64 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002e4e:	4b51      	ldr	r3, [pc, #324]	@ (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8002e50:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e54:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e5c:	494d      	ldr	r1, [pc, #308]	@ (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8002e5e:	4313      	orrs	r3, r2
 8002e60:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d028      	beq.n	8002ec2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002e70:	4b48      	ldr	r3, [pc, #288]	@ (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8002e72:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e76:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002e7e:	4945      	ldr	r1, [pc, #276]	@ (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8002e80:	4313      	orrs	r3, r2
 8002e82:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002e8a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002e8e:	d106      	bne.n	8002e9e <HAL_RCCEx_PeriphCLKConfig+0x336>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002e90:	4b40      	ldr	r3, [pc, #256]	@ (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8002e92:	68db      	ldr	r3, [r3, #12]
 8002e94:	4a3f      	ldr	r2, [pc, #252]	@ (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8002e96:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002e9a:	60d3      	str	r3, [r2, #12]
 8002e9c:	e011      	b.n	8002ec2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002ea2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002ea6:	d10c      	bne.n	8002ec2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	3304      	adds	r3, #4
 8002eac:	2101      	movs	r1, #1
 8002eae:	4618      	mov	r0, r3
 8002eb0:	f000 fd08 	bl	80038c4 <RCCEx_PLLSAI1_Config>
 8002eb4:	4603      	mov	r3, r0
 8002eb6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002eb8:	7cfb      	ldrb	r3, [r7, #19]
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d001      	beq.n	8002ec2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
      {
        /* set overall return value */
        status = ret;
 8002ebe:	7cfb      	ldrb	r3, [r7, #19]
 8002ec0:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d028      	beq.n	8002f20 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002ece:	4b31      	ldr	r3, [pc, #196]	@ (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8002ed0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ed4:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002edc:	492d      	ldr	r1, [pc, #180]	@ (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8002ede:	4313      	orrs	r3, r2
 8002ee0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ee8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002eec:	d106      	bne.n	8002efc <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002eee:	4b29      	ldr	r3, [pc, #164]	@ (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8002ef0:	68db      	ldr	r3, [r3, #12]
 8002ef2:	4a28      	ldr	r2, [pc, #160]	@ (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8002ef4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002ef8:	60d3      	str	r3, [r2, #12]
 8002efa:	e011      	b.n	8002f20 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f00:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002f04:	d10c      	bne.n	8002f20 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	3304      	adds	r3, #4
 8002f0a:	2101      	movs	r1, #1
 8002f0c:	4618      	mov	r0, r3
 8002f0e:	f000 fcd9 	bl	80038c4 <RCCEx_PLLSAI1_Config>
 8002f12:	4603      	mov	r3, r0
 8002f14:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002f16:	7cfb      	ldrb	r3, [r7, #19]
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d001      	beq.n	8002f20 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      {
        /* set overall return value */
        status = ret;
 8002f1c:	7cfb      	ldrb	r3, [r7, #19]
 8002f1e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d01c      	beq.n	8002f66 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002f2c:	4b19      	ldr	r3, [pc, #100]	@ (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8002f2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f32:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002f3a:	4916      	ldr	r1, [pc, #88]	@ (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8002f3c:	4313      	orrs	r3, r2
 8002f3e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002f46:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002f4a:	d10c      	bne.n	8002f66 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	3304      	adds	r3, #4
 8002f50:	2102      	movs	r1, #2
 8002f52:	4618      	mov	r0, r3
 8002f54:	f000 fcb6 	bl	80038c4 <RCCEx_PLLSAI1_Config>
 8002f58:	4603      	mov	r3, r0
 8002f5a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002f5c:	7cfb      	ldrb	r3, [r7, #19]
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d001      	beq.n	8002f66 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
      {
        /* set overall return value */
        status = ret;
 8002f62:	7cfb      	ldrb	r3, [r7, #19]
 8002f64:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d00a      	beq.n	8002f88 <HAL_RCCEx_PeriphCLKConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002f72:	4b08      	ldr	r3, [pc, #32]	@ (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8002f74:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f78:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f80:	4904      	ldr	r1, [pc, #16]	@ (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8002f82:	4313      	orrs	r3, r2
 8002f84:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002f88:	7cbb      	ldrb	r3, [r7, #18]
}
 8002f8a:	4618      	mov	r0, r3
 8002f8c:	3718      	adds	r7, #24
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	bd80      	pop	{r7, pc}
 8002f92:	bf00      	nop
 8002f94:	40021000 	.word	0x40021000

08002f98 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_OSPI  OctoSPI peripheral clock (only for devices with OctoSPI)
  @endif
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	b088      	sub	sp, #32
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;
 8002fa0:	2300      	movs	r3, #0
 8002fa2:	61fb      	str	r3, [r7, #28]
#endif

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if(PeriphClk == RCC_PERIPHCLK_RTC)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002faa:	d13e      	bne.n	800302a <HAL_RCCEx_GetPeriphCLKFreq+0x92>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8002fac:	4bb0      	ldr	r3, [pc, #704]	@ (8003270 <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 8002fae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002fb2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002fb6:	613b      	str	r3, [r7, #16]

    switch(srcclk)
 8002fb8:	693b      	ldr	r3, [r7, #16]
 8002fba:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002fbe:	d028      	beq.n	8003012 <HAL_RCCEx_GetPeriphCLKFreq+0x7a>
 8002fc0:	693b      	ldr	r3, [r7, #16]
 8002fc2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002fc6:	f200 846b 	bhi.w	80038a0 <HAL_RCCEx_GetPeriphCLKFreq+0x908>
 8002fca:	693b      	ldr	r3, [r7, #16]
 8002fcc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002fd0:	d005      	beq.n	8002fde <HAL_RCCEx_GetPeriphCLKFreq+0x46>
 8002fd2:	693b      	ldr	r3, [r7, #16]
 8002fd4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002fd8:	d00e      	beq.n	8002ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
        frequency = HSE_VALUE / 32U;
      }
      break;
    default:
      /* No clock source, frequency default init at 0 */
      break;
 8002fda:	f000 bc61 	b.w	80038a0 <HAL_RCCEx_GetPeriphCLKFreq+0x908>
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8002fde:	4ba4      	ldr	r3, [pc, #656]	@ (8003270 <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 8002fe0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002fe4:	f003 0302 	and.w	r3, r3, #2
 8002fe8:	2b02      	cmp	r3, #2
 8002fea:	f040 845b 	bne.w	80038a4 <HAL_RCCEx_GetPeriphCLKFreq+0x90c>
        frequency = LSE_VALUE;
 8002fee:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002ff2:	61fb      	str	r3, [r7, #28]
      break;
 8002ff4:	f000 bc56 	b.w	80038a4 <HAL_RCCEx_GetPeriphCLKFreq+0x90c>
      if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8002ff8:	4b9d      	ldr	r3, [pc, #628]	@ (8003270 <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 8002ffa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002ffe:	f003 0302 	and.w	r3, r3, #2
 8003002:	2b02      	cmp	r3, #2
 8003004:	f040 8450 	bne.w	80038a8 <HAL_RCCEx_GetPeriphCLKFreq+0x910>
          frequency = LSI_VALUE;
 8003008:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800300c:	61fb      	str	r3, [r7, #28]
      break;
 800300e:	f000 bc4b 	b.w	80038a8 <HAL_RCCEx_GetPeriphCLKFreq+0x910>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8003012:	4b97      	ldr	r3, [pc, #604]	@ (8003270 <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800301a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800301e:	f040 8445 	bne.w	80038ac <HAL_RCCEx_GetPeriphCLKFreq+0x914>
        frequency = HSE_VALUE / 32U;
 8003022:	4b94      	ldr	r3, [pc, #592]	@ (8003274 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 8003024:	61fb      	str	r3, [r7, #28]
      break;
 8003026:	f000 bc41 	b.w	80038ac <HAL_RCCEx_GetPeriphCLKFreq+0x914>
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800302a:	4b91      	ldr	r3, [pc, #580]	@ (8003270 <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 800302c:	68db      	ldr	r3, [r3, #12]
 800302e:	f003 0303 	and.w	r3, r3, #3
 8003032:	617b      	str	r3, [r7, #20]

    /* Compute PLL clock input */
    switch(pll_oscsource)
 8003034:	697b      	ldr	r3, [r7, #20]
 8003036:	2b03      	cmp	r3, #3
 8003038:	d036      	beq.n	80030a8 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 800303a:	697b      	ldr	r3, [r7, #20]
 800303c:	2b03      	cmp	r3, #3
 800303e:	d840      	bhi.n	80030c2 <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
 8003040:	697b      	ldr	r3, [r7, #20]
 8003042:	2b01      	cmp	r3, #1
 8003044:	d003      	beq.n	800304e <HAL_RCCEx_GetPeriphCLKFreq+0xb6>
 8003046:	697b      	ldr	r3, [r7, #20]
 8003048:	2b02      	cmp	r3, #2
 800304a:	d020      	beq.n	800308e <HAL_RCCEx_GetPeriphCLKFreq+0xf6>
 800304c:	e039      	b.n	80030c2 <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
    {
    case RCC_PLLSOURCE_MSI:   /* MSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 800304e:	4b88      	ldr	r3, [pc, #544]	@ (8003270 <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f003 0302 	and.w	r3, r3, #2
 8003056:	2b02      	cmp	r3, #2
 8003058:	d116      	bne.n	8003088 <HAL_RCCEx_GetPeriphCLKFreq+0xf0>
      {
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 800305a:	4b85      	ldr	r3, [pc, #532]	@ (8003270 <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f003 0308 	and.w	r3, r3, #8
 8003062:	2b00      	cmp	r3, #0
 8003064:	d005      	beq.n	8003072 <HAL_RCCEx_GetPeriphCLKFreq+0xda>
 8003066:	4b82      	ldr	r3, [pc, #520]	@ (8003270 <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	091b      	lsrs	r3, r3, #4
 800306c:	f003 030f 	and.w	r3, r3, #15
 8003070:	e005      	b.n	800307e <HAL_RCCEx_GetPeriphCLKFreq+0xe6>
 8003072:	4b7f      	ldr	r3, [pc, #508]	@ (8003270 <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 8003074:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003078:	0a1b      	lsrs	r3, r3, #8
 800307a:	f003 030f 	and.w	r3, r3, #15
 800307e:	4a7e      	ldr	r2, [pc, #504]	@ (8003278 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8003080:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003084:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8003086:	e01f      	b.n	80030c8 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 8003088:	2300      	movs	r3, #0
 800308a:	61bb      	str	r3, [r7, #24]
      break;
 800308c:	e01c      	b.n	80030c8 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSI:   /* HSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800308e:	4b78      	ldr	r3, [pc, #480]	@ (8003270 <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003096:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800309a:	d102      	bne.n	80030a2 <HAL_RCCEx_GetPeriphCLKFreq+0x10a>
      {
        pllvco = HSI_VALUE;
 800309c:	4b77      	ldr	r3, [pc, #476]	@ (800327c <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>)
 800309e:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 80030a0:	e012      	b.n	80030c8 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 80030a2:	2300      	movs	r3, #0
 80030a4:	61bb      	str	r3, [r7, #24]
      break;
 80030a6:	e00f      	b.n	80030c8 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSE:   /* HSE ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80030a8:	4b71      	ldr	r3, [pc, #452]	@ (8003270 <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80030b0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80030b4:	d102      	bne.n	80030bc <HAL_RCCEx_GetPeriphCLKFreq+0x124>
      {
        pllvco = HSE_VALUE;
 80030b6:	4b72      	ldr	r3, [pc, #456]	@ (8003280 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>)
 80030b8:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 80030ba:	e005      	b.n	80030c8 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 80030bc:	2300      	movs	r3, #0
 80030be:	61bb      	str	r3, [r7, #24]
      break;
 80030c0:	e002      	b.n	80030c8 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    default:
      /* No source */
      pllvco = 0U;
 80030c2:	2300      	movs	r3, #0
 80030c4:	61bb      	str	r3, [r7, #24]
      break;
 80030c6:	bf00      	nop
    }

    switch(PeriphClk)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80030ce:	f000 80ad 	beq.w	800322c <HAL_RCCEx_GetPeriphCLKFreq+0x294>
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80030d8:	f200 83ea 	bhi.w	80038b0 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80030e2:	f000 80a3 	beq.w	800322c <HAL_RCCEx_GetPeriphCLKFreq+0x294>
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80030ec:	f200 83e0 	bhi.w	80038b0 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80030f6:	f000 83b6 	beq.w	8003866 <HAL_RCCEx_GetPeriphCLKFreq+0x8ce>
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003100:	f200 83d6 	bhi.w	80038b0 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800310a:	f000 824e 	beq.w	80035aa <HAL_RCCEx_GetPeriphCLKFreq+0x612>
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003114:	f200 83cc 	bhi.w	80038b0 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800311e:	d07e      	beq.n	800321e <HAL_RCCEx_GetPeriphCLKFreq+0x286>
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003126:	f200 83c3 	bhi.w	80038b0 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003130:	f000 834f 	beq.w	80037d2 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800313a:	f200 83b9 	bhi.w	80038b0 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003144:	f000 82f7 	beq.w	8003736 <HAL_RCCEx_GetPeriphCLKFreq+0x79e>
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800314e:	f200 83af 	bhi.w	80038b0 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003158:	f000 82c1 	beq.w	80036de <HAL_RCCEx_GetPeriphCLKFreq+0x746>
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003162:	f200 83a5 	bhi.w	80038b0 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	2b80      	cmp	r3, #128	@ 0x80
 800316a:	f000 828c 	beq.w	8003686 <HAL_RCCEx_GetPeriphCLKFreq+0x6ee>
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	2b80      	cmp	r3, #128	@ 0x80
 8003172:	f200 839d 	bhi.w	80038b0 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	2b20      	cmp	r3, #32
 800317a:	d84b      	bhi.n	8003214 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	2b00      	cmp	r3, #0
 8003180:	f000 8396 	beq.w	80038b0 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	3b01      	subs	r3, #1
 8003188:	2b1f      	cmp	r3, #31
 800318a:	f200 8391 	bhi.w	80038b0 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
 800318e:	a201      	add	r2, pc, #4	@ (adr r2, 8003194 <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>)
 8003190:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003194:	0800339b 	.word	0x0800339b
 8003198:	0800340b 	.word	0x0800340b
 800319c:	080038b1 	.word	0x080038b1
 80031a0:	0800349f 	.word	0x0800349f
 80031a4:	080038b1 	.word	0x080038b1
 80031a8:	080038b1 	.word	0x080038b1
 80031ac:	080038b1 	.word	0x080038b1
 80031b0:	080038b1 	.word	0x080038b1
 80031b4:	080038b1 	.word	0x080038b1
 80031b8:	080038b1 	.word	0x080038b1
 80031bc:	080038b1 	.word	0x080038b1
 80031c0:	080038b1 	.word	0x080038b1
 80031c4:	080038b1 	.word	0x080038b1
 80031c8:	080038b1 	.word	0x080038b1
 80031cc:	080038b1 	.word	0x080038b1
 80031d0:	080038b1 	.word	0x080038b1
 80031d4:	080038b1 	.word	0x080038b1
 80031d8:	080038b1 	.word	0x080038b1
 80031dc:	080038b1 	.word	0x080038b1
 80031e0:	080038b1 	.word	0x080038b1
 80031e4:	080038b1 	.word	0x080038b1
 80031e8:	080038b1 	.word	0x080038b1
 80031ec:	080038b1 	.word	0x080038b1
 80031f0:	080038b1 	.word	0x080038b1
 80031f4:	080038b1 	.word	0x080038b1
 80031f8:	080038b1 	.word	0x080038b1
 80031fc:	080038b1 	.word	0x080038b1
 8003200:	080038b1 	.word	0x080038b1
 8003204:	080038b1 	.word	0x080038b1
 8003208:	080038b1 	.word	0x080038b1
 800320c:	080038b1 	.word	0x080038b1
 8003210:	08003529 	.word	0x08003529
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	2b40      	cmp	r3, #64	@ 0x40
 8003218:	f000 8209 	beq.w	800362e <HAL_RCCEx_GetPeriphCLKFreq+0x696>
      }

#endif /* OCTOSPI1 || OCTOSPI2 */

    default:
      break;
 800321c:	e348      	b.n	80038b0 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 800321e:	69b9      	ldr	r1, [r7, #24]
 8003220:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8003224:	f000 fc40 	bl	8003aa8 <RCCEx_GetSAIxPeriphCLKFreq>
 8003228:	61f8      	str	r0, [r7, #28]
      break;
 800322a:	e342      	b.n	80038b2 <HAL_RCCEx_GetPeriphCLKFreq+0x91a>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 800322c:	4b10      	ldr	r3, [pc, #64]	@ (8003270 <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 800322e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003232:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 8003236:	613b      	str	r3, [r7, #16]
 8003238:	693b      	ldr	r3, [r7, #16]
 800323a:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800323e:	d021      	beq.n	8003284 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>
 8003240:	693b      	ldr	r3, [r7, #16]
 8003242:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8003246:	f200 809e 	bhi.w	8003386 <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
 800324a:	693b      	ldr	r3, [r7, #16]
 800324c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003250:	d035      	beq.n	80032be <HAL_RCCEx_GetPeriphCLKFreq+0x326>
 8003252:	693b      	ldr	r3, [r7, #16]
 8003254:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003258:	f200 8095 	bhi.w	8003386 <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
 800325c:	693b      	ldr	r3, [r7, #16]
 800325e:	2b00      	cmp	r3, #0
 8003260:	f000 8087 	beq.w	8003372 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 8003264:	693b      	ldr	r3, [r7, #16]
 8003266:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800326a:	d055      	beq.n	8003318 <HAL_RCCEx_GetPeriphCLKFreq+0x380>
          break;
 800326c:	e08b      	b.n	8003386 <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
 800326e:	bf00      	nop
 8003270:	40021000 	.word	0x40021000
 8003274:	0003d090 	.word	0x0003d090
 8003278:	0800ab30 	.word	0x0800ab30
 800327c:	00f42400 	.word	0x00f42400
 8003280:	007a1200 	.word	0x007a1200
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8003284:	4ba4      	ldr	r3, [pc, #656]	@ (8003518 <HAL_RCCEx_GetPeriphCLKFreq+0x580>)
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f003 0302 	and.w	r3, r3, #2
 800328c:	2b02      	cmp	r3, #2
 800328e:	d17c      	bne.n	800338a <HAL_RCCEx_GetPeriphCLKFreq+0x3f2>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8003290:	4ba1      	ldr	r3, [pc, #644]	@ (8003518 <HAL_RCCEx_GetPeriphCLKFreq+0x580>)
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f003 0308 	and.w	r3, r3, #8
 8003298:	2b00      	cmp	r3, #0
 800329a:	d005      	beq.n	80032a8 <HAL_RCCEx_GetPeriphCLKFreq+0x310>
 800329c:	4b9e      	ldr	r3, [pc, #632]	@ (8003518 <HAL_RCCEx_GetPeriphCLKFreq+0x580>)
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	091b      	lsrs	r3, r3, #4
 80032a2:	f003 030f 	and.w	r3, r3, #15
 80032a6:	e005      	b.n	80032b4 <HAL_RCCEx_GetPeriphCLKFreq+0x31c>
 80032a8:	4b9b      	ldr	r3, [pc, #620]	@ (8003518 <HAL_RCCEx_GetPeriphCLKFreq+0x580>)
 80032aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80032ae:	0a1b      	lsrs	r3, r3, #8
 80032b0:	f003 030f 	and.w	r3, r3, #15
 80032b4:	4a99      	ldr	r2, [pc, #612]	@ (800351c <HAL_RCCEx_GetPeriphCLKFreq+0x584>)
 80032b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80032ba:	61fb      	str	r3, [r7, #28]
          break;
 80032bc:	e065      	b.n	800338a <HAL_RCCEx_GetPeriphCLKFreq+0x3f2>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 80032be:	4b96      	ldr	r3, [pc, #600]	@ (8003518 <HAL_RCCEx_GetPeriphCLKFreq+0x580>)
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80032c6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80032ca:	d160      	bne.n	800338e <HAL_RCCEx_GetPeriphCLKFreq+0x3f6>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 80032cc:	4b92      	ldr	r3, [pc, #584]	@ (8003518 <HAL_RCCEx_GetPeriphCLKFreq+0x580>)
 80032ce:	68db      	ldr	r3, [r3, #12]
 80032d0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80032d4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80032d8:	d159      	bne.n	800338e <HAL_RCCEx_GetPeriphCLKFreq+0x3f6>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 80032da:	4b8f      	ldr	r3, [pc, #572]	@ (8003518 <HAL_RCCEx_GetPeriphCLKFreq+0x580>)
 80032dc:	68db      	ldr	r3, [r3, #12]
 80032de:	0a1b      	lsrs	r3, r3, #8
 80032e0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80032e4:	60fb      	str	r3, [r7, #12]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80032e6:	69bb      	ldr	r3, [r7, #24]
 80032e8:	68fa      	ldr	r2, [r7, #12]
 80032ea:	fb03 f202 	mul.w	r2, r3, r2
 80032ee:	4b8a      	ldr	r3, [pc, #552]	@ (8003518 <HAL_RCCEx_GetPeriphCLKFreq+0x580>)
 80032f0:	68db      	ldr	r3, [r3, #12]
 80032f2:	091b      	lsrs	r3, r3, #4
 80032f4:	f003 0307 	and.w	r3, r3, #7
 80032f8:	3301      	adds	r3, #1
 80032fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80032fe:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 8003300:	4b85      	ldr	r3, [pc, #532]	@ (8003518 <HAL_RCCEx_GetPeriphCLKFreq+0x580>)
 8003302:	68db      	ldr	r3, [r3, #12]
 8003304:	0d5b      	lsrs	r3, r3, #21
 8003306:	f003 0303 	and.w	r3, r3, #3
 800330a:	3301      	adds	r3, #1
 800330c:	005b      	lsls	r3, r3, #1
 800330e:	69ba      	ldr	r2, [r7, #24]
 8003310:	fbb2 f3f3 	udiv	r3, r2, r3
 8003314:	61fb      	str	r3, [r7, #28]
          break;
 8003316:	e03a      	b.n	800338e <HAL_RCCEx_GetPeriphCLKFreq+0x3f6>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 8003318:	4b7f      	ldr	r3, [pc, #508]	@ (8003518 <HAL_RCCEx_GetPeriphCLKFreq+0x580>)
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003320:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003324:	d135      	bne.n	8003392 <HAL_RCCEx_GetPeriphCLKFreq+0x3fa>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 8003326:	4b7c      	ldr	r3, [pc, #496]	@ (8003518 <HAL_RCCEx_GetPeriphCLKFreq+0x580>)
 8003328:	691b      	ldr	r3, [r3, #16]
 800332a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800332e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003332:	d12e      	bne.n	8003392 <HAL_RCCEx_GetPeriphCLKFreq+0x3fa>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8003334:	4b78      	ldr	r3, [pc, #480]	@ (8003518 <HAL_RCCEx_GetPeriphCLKFreq+0x580>)
 8003336:	691b      	ldr	r3, [r3, #16]
 8003338:	0a1b      	lsrs	r3, r3, #8
 800333a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800333e:	60fb      	str	r3, [r7, #12]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8003340:	69bb      	ldr	r3, [r7, #24]
 8003342:	68fa      	ldr	r2, [r7, #12]
 8003344:	fb03 f202 	mul.w	r2, r3, r2
 8003348:	4b73      	ldr	r3, [pc, #460]	@ (8003518 <HAL_RCCEx_GetPeriphCLKFreq+0x580>)
 800334a:	68db      	ldr	r3, [r3, #12]
 800334c:	091b      	lsrs	r3, r3, #4
 800334e:	f003 0307 	and.w	r3, r3, #7
 8003352:	3301      	adds	r3, #1
 8003354:	fbb2 f3f3 	udiv	r3, r2, r3
 8003358:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 800335a:	4b6f      	ldr	r3, [pc, #444]	@ (8003518 <HAL_RCCEx_GetPeriphCLKFreq+0x580>)
 800335c:	691b      	ldr	r3, [r3, #16]
 800335e:	0d5b      	lsrs	r3, r3, #21
 8003360:	f003 0303 	and.w	r3, r3, #3
 8003364:	3301      	adds	r3, #1
 8003366:	005b      	lsls	r3, r3, #1
 8003368:	69ba      	ldr	r2, [r7, #24]
 800336a:	fbb2 f3f3 	udiv	r3, r2, r3
 800336e:	61fb      	str	r3, [r7, #28]
          break;
 8003370:	e00f      	b.n	8003392 <HAL_RCCEx_GetPeriphCLKFreq+0x3fa>
          if(HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)) /* HSI48 ? */
 8003372:	4b69      	ldr	r3, [pc, #420]	@ (8003518 <HAL_RCCEx_GetPeriphCLKFreq+0x580>)
 8003374:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003378:	f003 0302 	and.w	r3, r3, #2
 800337c:	2b02      	cmp	r3, #2
 800337e:	d10a      	bne.n	8003396 <HAL_RCCEx_GetPeriphCLKFreq+0x3fe>
            frequency = HSI48_VALUE;
 8003380:	4b67      	ldr	r3, [pc, #412]	@ (8003520 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8003382:	61fb      	str	r3, [r7, #28]
          break;
 8003384:	e007      	b.n	8003396 <HAL_RCCEx_GetPeriphCLKFreq+0x3fe>
          break;
 8003386:	bf00      	nop
 8003388:	e293      	b.n	80038b2 <HAL_RCCEx_GetPeriphCLKFreq+0x91a>
          break;
 800338a:	bf00      	nop
 800338c:	e291      	b.n	80038b2 <HAL_RCCEx_GetPeriphCLKFreq+0x91a>
          break;
 800338e:	bf00      	nop
 8003390:	e28f      	b.n	80038b2 <HAL_RCCEx_GetPeriphCLKFreq+0x91a>
          break;
 8003392:	bf00      	nop
 8003394:	e28d      	b.n	80038b2 <HAL_RCCEx_GetPeriphCLKFreq+0x91a>
          break;
 8003396:	bf00      	nop
        break;
 8003398:	e28b      	b.n	80038b2 <HAL_RCCEx_GetPeriphCLKFreq+0x91a>
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 800339a:	4b5f      	ldr	r3, [pc, #380]	@ (8003518 <HAL_RCCEx_GetPeriphCLKFreq+0x580>)
 800339c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80033a0:	f003 0303 	and.w	r3, r3, #3
 80033a4:	613b      	str	r3, [r7, #16]
 80033a6:	693b      	ldr	r3, [r7, #16]
 80033a8:	2b03      	cmp	r3, #3
 80033aa:	d828      	bhi.n	80033fe <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 80033ac:	a201      	add	r2, pc, #4	@ (adr r2, 80033b4 <HAL_RCCEx_GetPeriphCLKFreq+0x41c>)
 80033ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033b2:	bf00      	nop
 80033b4:	080033c5 	.word	0x080033c5
 80033b8:	080033cd 	.word	0x080033cd
 80033bc:	080033d5 	.word	0x080033d5
 80033c0:	080033e9 	.word	0x080033e9
          frequency = HAL_RCC_GetPCLK2Freq();
 80033c4:	f7ff fb5a 	bl	8002a7c <HAL_RCC_GetPCLK2Freq>
 80033c8:	61f8      	str	r0, [r7, #28]
          break;
 80033ca:	e01d      	b.n	8003408 <HAL_RCCEx_GetPeriphCLKFreq+0x470>
          frequency = HAL_RCC_GetSysClockFreq();
 80033cc:	f7ff faa8 	bl	8002920 <HAL_RCC_GetSysClockFreq>
 80033d0:	61f8      	str	r0, [r7, #28]
          break;
 80033d2:	e019      	b.n	8003408 <HAL_RCCEx_GetPeriphCLKFreq+0x470>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80033d4:	4b50      	ldr	r3, [pc, #320]	@ (8003518 <HAL_RCCEx_GetPeriphCLKFreq+0x580>)
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80033dc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80033e0:	d10f      	bne.n	8003402 <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
            frequency = HSI_VALUE;
 80033e2:	4b50      	ldr	r3, [pc, #320]	@ (8003524 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80033e4:	61fb      	str	r3, [r7, #28]
          break;
 80033e6:	e00c      	b.n	8003402 <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80033e8:	4b4b      	ldr	r3, [pc, #300]	@ (8003518 <HAL_RCCEx_GetPeriphCLKFreq+0x580>)
 80033ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80033ee:	f003 0302 	and.w	r3, r3, #2
 80033f2:	2b02      	cmp	r3, #2
 80033f4:	d107      	bne.n	8003406 <HAL_RCCEx_GetPeriphCLKFreq+0x46e>
            frequency = LSE_VALUE;
 80033f6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80033fa:	61fb      	str	r3, [r7, #28]
          break;
 80033fc:	e003      	b.n	8003406 <HAL_RCCEx_GetPeriphCLKFreq+0x46e>
          break;
 80033fe:	bf00      	nop
 8003400:	e257      	b.n	80038b2 <HAL_RCCEx_GetPeriphCLKFreq+0x91a>
          break;
 8003402:	bf00      	nop
 8003404:	e255      	b.n	80038b2 <HAL_RCCEx_GetPeriphCLKFreq+0x91a>
          break;
 8003406:	bf00      	nop
        break;
 8003408:	e253      	b.n	80038b2 <HAL_RCCEx_GetPeriphCLKFreq+0x91a>
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 800340a:	4b43      	ldr	r3, [pc, #268]	@ (8003518 <HAL_RCCEx_GetPeriphCLKFreq+0x580>)
 800340c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003410:	f003 030c 	and.w	r3, r3, #12
 8003414:	613b      	str	r3, [r7, #16]
 8003416:	693b      	ldr	r3, [r7, #16]
 8003418:	2b0c      	cmp	r3, #12
 800341a:	d83a      	bhi.n	8003492 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 800341c:	a201      	add	r2, pc, #4	@ (adr r2, 8003424 <HAL_RCCEx_GetPeriphCLKFreq+0x48c>)
 800341e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003422:	bf00      	nop
 8003424:	08003459 	.word	0x08003459
 8003428:	08003493 	.word	0x08003493
 800342c:	08003493 	.word	0x08003493
 8003430:	08003493 	.word	0x08003493
 8003434:	08003461 	.word	0x08003461
 8003438:	08003493 	.word	0x08003493
 800343c:	08003493 	.word	0x08003493
 8003440:	08003493 	.word	0x08003493
 8003444:	08003469 	.word	0x08003469
 8003448:	08003493 	.word	0x08003493
 800344c:	08003493 	.word	0x08003493
 8003450:	08003493 	.word	0x08003493
 8003454:	0800347d 	.word	0x0800347d
          frequency = HAL_RCC_GetPCLK1Freq();
 8003458:	f7ff fafa 	bl	8002a50 <HAL_RCC_GetPCLK1Freq>
 800345c:	61f8      	str	r0, [r7, #28]
          break;
 800345e:	e01d      	b.n	800349c <HAL_RCCEx_GetPeriphCLKFreq+0x504>
          frequency = HAL_RCC_GetSysClockFreq();
 8003460:	f7ff fa5e 	bl	8002920 <HAL_RCC_GetSysClockFreq>
 8003464:	61f8      	str	r0, [r7, #28]
          break;
 8003466:	e019      	b.n	800349c <HAL_RCCEx_GetPeriphCLKFreq+0x504>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8003468:	4b2b      	ldr	r3, [pc, #172]	@ (8003518 <HAL_RCCEx_GetPeriphCLKFreq+0x580>)
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003470:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003474:	d10f      	bne.n	8003496 <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
            frequency = HSI_VALUE;
 8003476:	4b2b      	ldr	r3, [pc, #172]	@ (8003524 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8003478:	61fb      	str	r3, [r7, #28]
          break;
 800347a:	e00c      	b.n	8003496 <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800347c:	4b26      	ldr	r3, [pc, #152]	@ (8003518 <HAL_RCCEx_GetPeriphCLKFreq+0x580>)
 800347e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003482:	f003 0302 	and.w	r3, r3, #2
 8003486:	2b02      	cmp	r3, #2
 8003488:	d107      	bne.n	800349a <HAL_RCCEx_GetPeriphCLKFreq+0x502>
            frequency = LSE_VALUE;
 800348a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800348e:	61fb      	str	r3, [r7, #28]
          break;
 8003490:	e003      	b.n	800349a <HAL_RCCEx_GetPeriphCLKFreq+0x502>
          break;
 8003492:	bf00      	nop
 8003494:	e20d      	b.n	80038b2 <HAL_RCCEx_GetPeriphCLKFreq+0x91a>
          break;
 8003496:	bf00      	nop
 8003498:	e20b      	b.n	80038b2 <HAL_RCCEx_GetPeriphCLKFreq+0x91a>
          break;
 800349a:	bf00      	nop
        break;
 800349c:	e209      	b.n	80038b2 <HAL_RCCEx_GetPeriphCLKFreq+0x91a>
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 800349e:	4b1e      	ldr	r3, [pc, #120]	@ (8003518 <HAL_RCCEx_GetPeriphCLKFreq+0x580>)
 80034a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80034a4:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80034a8:	613b      	str	r3, [r7, #16]
 80034aa:	693b      	ldr	r3, [r7, #16]
 80034ac:	2b30      	cmp	r3, #48	@ 0x30
 80034ae:	d021      	beq.n	80034f4 <HAL_RCCEx_GetPeriphCLKFreq+0x55c>
 80034b0:	693b      	ldr	r3, [r7, #16]
 80034b2:	2b30      	cmp	r3, #48	@ 0x30
 80034b4:	d829      	bhi.n	800350a <HAL_RCCEx_GetPeriphCLKFreq+0x572>
 80034b6:	693b      	ldr	r3, [r7, #16]
 80034b8:	2b20      	cmp	r3, #32
 80034ba:	d011      	beq.n	80034e0 <HAL_RCCEx_GetPeriphCLKFreq+0x548>
 80034bc:	693b      	ldr	r3, [r7, #16]
 80034be:	2b20      	cmp	r3, #32
 80034c0:	d823      	bhi.n	800350a <HAL_RCCEx_GetPeriphCLKFreq+0x572>
 80034c2:	693b      	ldr	r3, [r7, #16]
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d003      	beq.n	80034d0 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 80034c8:	693b      	ldr	r3, [r7, #16]
 80034ca:	2b10      	cmp	r3, #16
 80034cc:	d004      	beq.n	80034d8 <HAL_RCCEx_GetPeriphCLKFreq+0x540>
          break;
 80034ce:	e01c      	b.n	800350a <HAL_RCCEx_GetPeriphCLKFreq+0x572>
          frequency = HAL_RCC_GetPCLK1Freq();
 80034d0:	f7ff fabe 	bl	8002a50 <HAL_RCC_GetPCLK1Freq>
 80034d4:	61f8      	str	r0, [r7, #28]
          break;
 80034d6:	e01d      	b.n	8003514 <HAL_RCCEx_GetPeriphCLKFreq+0x57c>
          frequency = HAL_RCC_GetSysClockFreq();
 80034d8:	f7ff fa22 	bl	8002920 <HAL_RCC_GetSysClockFreq>
 80034dc:	61f8      	str	r0, [r7, #28]
          break;
 80034de:	e019      	b.n	8003514 <HAL_RCCEx_GetPeriphCLKFreq+0x57c>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80034e0:	4b0d      	ldr	r3, [pc, #52]	@ (8003518 <HAL_RCCEx_GetPeriphCLKFreq+0x580>)
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80034e8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80034ec:	d10f      	bne.n	800350e <HAL_RCCEx_GetPeriphCLKFreq+0x576>
            frequency = HSI_VALUE;
 80034ee:	4b0d      	ldr	r3, [pc, #52]	@ (8003524 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80034f0:	61fb      	str	r3, [r7, #28]
          break;
 80034f2:	e00c      	b.n	800350e <HAL_RCCEx_GetPeriphCLKFreq+0x576>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80034f4:	4b08      	ldr	r3, [pc, #32]	@ (8003518 <HAL_RCCEx_GetPeriphCLKFreq+0x580>)
 80034f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80034fa:	f003 0302 	and.w	r3, r3, #2
 80034fe:	2b02      	cmp	r3, #2
 8003500:	d107      	bne.n	8003512 <HAL_RCCEx_GetPeriphCLKFreq+0x57a>
            frequency = LSE_VALUE;
 8003502:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003506:	61fb      	str	r3, [r7, #28]
          break;
 8003508:	e003      	b.n	8003512 <HAL_RCCEx_GetPeriphCLKFreq+0x57a>
          break;
 800350a:	bf00      	nop
 800350c:	e1d1      	b.n	80038b2 <HAL_RCCEx_GetPeriphCLKFreq+0x91a>
          break;
 800350e:	bf00      	nop
 8003510:	e1cf      	b.n	80038b2 <HAL_RCCEx_GetPeriphCLKFreq+0x91a>
          break;
 8003512:	bf00      	nop
        break;
 8003514:	e1cd      	b.n	80038b2 <HAL_RCCEx_GetPeriphCLKFreq+0x91a>
 8003516:	bf00      	nop
 8003518:	40021000 	.word	0x40021000
 800351c:	0800ab30 	.word	0x0800ab30
 8003520:	02dc6c00 	.word	0x02dc6c00
 8003524:	00f42400 	.word	0x00f42400
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8003528:	4b99      	ldr	r3, [pc, #612]	@ (8003790 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 800352a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800352e:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003532:	613b      	str	r3, [r7, #16]
 8003534:	693b      	ldr	r3, [r7, #16]
 8003536:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800353a:	d025      	beq.n	8003588 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 800353c:	693b      	ldr	r3, [r7, #16]
 800353e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003542:	d82c      	bhi.n	800359e <HAL_RCCEx_GetPeriphCLKFreq+0x606>
 8003544:	693b      	ldr	r3, [r7, #16]
 8003546:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800354a:	d013      	beq.n	8003574 <HAL_RCCEx_GetPeriphCLKFreq+0x5dc>
 800354c:	693b      	ldr	r3, [r7, #16]
 800354e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003552:	d824      	bhi.n	800359e <HAL_RCCEx_GetPeriphCLKFreq+0x606>
 8003554:	693b      	ldr	r3, [r7, #16]
 8003556:	2b00      	cmp	r3, #0
 8003558:	d004      	beq.n	8003564 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 800355a:	693b      	ldr	r3, [r7, #16]
 800355c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003560:	d004      	beq.n	800356c <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>
          break;
 8003562:	e01c      	b.n	800359e <HAL_RCCEx_GetPeriphCLKFreq+0x606>
          frequency = HAL_RCC_GetPCLK1Freq();
 8003564:	f7ff fa74 	bl	8002a50 <HAL_RCC_GetPCLK1Freq>
 8003568:	61f8      	str	r0, [r7, #28]
          break;
 800356a:	e01d      	b.n	80035a8 <HAL_RCCEx_GetPeriphCLKFreq+0x610>
          frequency = HAL_RCC_GetSysClockFreq();
 800356c:	f7ff f9d8 	bl	8002920 <HAL_RCC_GetSysClockFreq>
 8003570:	61f8      	str	r0, [r7, #28]
          break;
 8003572:	e019      	b.n	80035a8 <HAL_RCCEx_GetPeriphCLKFreq+0x610>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8003574:	4b86      	ldr	r3, [pc, #536]	@ (8003790 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800357c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003580:	d10f      	bne.n	80035a2 <HAL_RCCEx_GetPeriphCLKFreq+0x60a>
            frequency = HSI_VALUE;
 8003582:	4b84      	ldr	r3, [pc, #528]	@ (8003794 <HAL_RCCEx_GetPeriphCLKFreq+0x7fc>)
 8003584:	61fb      	str	r3, [r7, #28]
          break;
 8003586:	e00c      	b.n	80035a2 <HAL_RCCEx_GetPeriphCLKFreq+0x60a>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8003588:	4b81      	ldr	r3, [pc, #516]	@ (8003790 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 800358a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800358e:	f003 0302 	and.w	r3, r3, #2
 8003592:	2b02      	cmp	r3, #2
 8003594:	d107      	bne.n	80035a6 <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
            frequency = LSE_VALUE;
 8003596:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800359a:	61fb      	str	r3, [r7, #28]
          break;
 800359c:	e003      	b.n	80035a6 <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
          break;
 800359e:	bf00      	nop
 80035a0:	e187      	b.n	80038b2 <HAL_RCCEx_GetPeriphCLKFreq+0x91a>
          break;
 80035a2:	bf00      	nop
 80035a4:	e185      	b.n	80038b2 <HAL_RCCEx_GetPeriphCLKFreq+0x91a>
          break;
 80035a6:	bf00      	nop
        break;
 80035a8:	e183      	b.n	80038b2 <HAL_RCCEx_GetPeriphCLKFreq+0x91a>
        srcclk = __HAL_RCC_GET_ADC_SOURCE();
 80035aa:	4b79      	ldr	r3, [pc, #484]	@ (8003790 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 80035ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80035b0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80035b4:	613b      	str	r3, [r7, #16]
 80035b6:	693b      	ldr	r3, [r7, #16]
 80035b8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80035bc:	d007      	beq.n	80035ce <HAL_RCCEx_GetPeriphCLKFreq+0x636>
 80035be:	693b      	ldr	r3, [r7, #16]
 80035c0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80035c4:	d12f      	bne.n	8003626 <HAL_RCCEx_GetPeriphCLKFreq+0x68e>
          frequency = HAL_RCC_GetSysClockFreq();
 80035c6:	f7ff f9ab 	bl	8002920 <HAL_RCC_GetSysClockFreq>
 80035ca:	61f8      	str	r0, [r7, #28]
          break;
 80035cc:	e02e      	b.n	800362c <HAL_RCCEx_GetPeriphCLKFreq+0x694>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_ADC1CLK) != 0U))
 80035ce:	4b70      	ldr	r3, [pc, #448]	@ (8003790 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80035d6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80035da:	d126      	bne.n	800362a <HAL_RCCEx_GetPeriphCLKFreq+0x692>
 80035dc:	4b6c      	ldr	r3, [pc, #432]	@ (8003790 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 80035de:	691b      	ldr	r3, [r3, #16]
 80035e0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d020      	beq.n	800362a <HAL_RCCEx_GetPeriphCLKFreq+0x692>
            plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 80035e8:	4b69      	ldr	r3, [pc, #420]	@ (8003790 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 80035ea:	691b      	ldr	r3, [r3, #16]
 80035ec:	0a1b      	lsrs	r3, r3, #8
 80035ee:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80035f2:	60fb      	str	r3, [r7, #12]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80035f4:	69bb      	ldr	r3, [r7, #24]
 80035f6:	68fa      	ldr	r2, [r7, #12]
 80035f8:	fb03 f202 	mul.w	r2, r3, r2
 80035fc:	4b64      	ldr	r3, [pc, #400]	@ (8003790 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 80035fe:	68db      	ldr	r3, [r3, #12]
 8003600:	091b      	lsrs	r3, r3, #4
 8003602:	f003 0307 	and.w	r3, r3, #7
 8003606:	3301      	adds	r3, #1
 8003608:	fbb2 f3f3 	udiv	r3, r2, r3
 800360c:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1R) >> RCC_PLLSAI1CFGR_PLLSAI1R_Pos) + 1U) << 1U));
 800360e:	4b60      	ldr	r3, [pc, #384]	@ (8003790 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 8003610:	691b      	ldr	r3, [r3, #16]
 8003612:	0e5b      	lsrs	r3, r3, #25
 8003614:	f003 0303 	and.w	r3, r3, #3
 8003618:	3301      	adds	r3, #1
 800361a:	005b      	lsls	r3, r3, #1
 800361c:	69ba      	ldr	r2, [r7, #24]
 800361e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003622:	61fb      	str	r3, [r7, #28]
          break;
 8003624:	e001      	b.n	800362a <HAL_RCCEx_GetPeriphCLKFreq+0x692>
          break;
 8003626:	bf00      	nop
 8003628:	e143      	b.n	80038b2 <HAL_RCCEx_GetPeriphCLKFreq+0x91a>
          break;
 800362a:	bf00      	nop
        break;
 800362c:	e141      	b.n	80038b2 <HAL_RCCEx_GetPeriphCLKFreq+0x91a>
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 800362e:	4b58      	ldr	r3, [pc, #352]	@ (8003790 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 8003630:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003634:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8003638:	613b      	str	r3, [r7, #16]
 800363a:	693b      	ldr	r3, [r7, #16]
 800363c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003640:	d013      	beq.n	800366a <HAL_RCCEx_GetPeriphCLKFreq+0x6d2>
 8003642:	693b      	ldr	r3, [r7, #16]
 8003644:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003648:	d819      	bhi.n	800367e <HAL_RCCEx_GetPeriphCLKFreq+0x6e6>
 800364a:	693b      	ldr	r3, [r7, #16]
 800364c:	2b00      	cmp	r3, #0
 800364e:	d004      	beq.n	800365a <HAL_RCCEx_GetPeriphCLKFreq+0x6c2>
 8003650:	693b      	ldr	r3, [r7, #16]
 8003652:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003656:	d004      	beq.n	8003662 <HAL_RCCEx_GetPeriphCLKFreq+0x6ca>
          break;
 8003658:	e011      	b.n	800367e <HAL_RCCEx_GetPeriphCLKFreq+0x6e6>
          frequency = HAL_RCC_GetPCLK1Freq();
 800365a:	f7ff f9f9 	bl	8002a50 <HAL_RCC_GetPCLK1Freq>
 800365e:	61f8      	str	r0, [r7, #28]
          break;
 8003660:	e010      	b.n	8003684 <HAL_RCCEx_GetPeriphCLKFreq+0x6ec>
          frequency = HAL_RCC_GetSysClockFreq();
 8003662:	f7ff f95d 	bl	8002920 <HAL_RCC_GetSysClockFreq>
 8003666:	61f8      	str	r0, [r7, #28]
          break;
 8003668:	e00c      	b.n	8003684 <HAL_RCCEx_GetPeriphCLKFreq+0x6ec>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800366a:	4b49      	ldr	r3, [pc, #292]	@ (8003790 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003672:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003676:	d104      	bne.n	8003682 <HAL_RCCEx_GetPeriphCLKFreq+0x6ea>
            frequency = HSI_VALUE;
 8003678:	4b46      	ldr	r3, [pc, #280]	@ (8003794 <HAL_RCCEx_GetPeriphCLKFreq+0x7fc>)
 800367a:	61fb      	str	r3, [r7, #28]
          break;
 800367c:	e001      	b.n	8003682 <HAL_RCCEx_GetPeriphCLKFreq+0x6ea>
          break;
 800367e:	bf00      	nop
 8003680:	e117      	b.n	80038b2 <HAL_RCCEx_GetPeriphCLKFreq+0x91a>
          break;
 8003682:	bf00      	nop
        break;
 8003684:	e115      	b.n	80038b2 <HAL_RCCEx_GetPeriphCLKFreq+0x91a>
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8003686:	4b42      	ldr	r3, [pc, #264]	@ (8003790 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 8003688:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800368c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8003690:	613b      	str	r3, [r7, #16]
 8003692:	693b      	ldr	r3, [r7, #16]
 8003694:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003698:	d013      	beq.n	80036c2 <HAL_RCCEx_GetPeriphCLKFreq+0x72a>
 800369a:	693b      	ldr	r3, [r7, #16]
 800369c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80036a0:	d819      	bhi.n	80036d6 <HAL_RCCEx_GetPeriphCLKFreq+0x73e>
 80036a2:	693b      	ldr	r3, [r7, #16]
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d004      	beq.n	80036b2 <HAL_RCCEx_GetPeriphCLKFreq+0x71a>
 80036a8:	693b      	ldr	r3, [r7, #16]
 80036aa:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80036ae:	d004      	beq.n	80036ba <HAL_RCCEx_GetPeriphCLKFreq+0x722>
          break;
 80036b0:	e011      	b.n	80036d6 <HAL_RCCEx_GetPeriphCLKFreq+0x73e>
          frequency = HAL_RCC_GetPCLK1Freq();
 80036b2:	f7ff f9cd 	bl	8002a50 <HAL_RCC_GetPCLK1Freq>
 80036b6:	61f8      	str	r0, [r7, #28]
          break;
 80036b8:	e010      	b.n	80036dc <HAL_RCCEx_GetPeriphCLKFreq+0x744>
          frequency = HAL_RCC_GetSysClockFreq();
 80036ba:	f7ff f931 	bl	8002920 <HAL_RCC_GetSysClockFreq>
 80036be:	61f8      	str	r0, [r7, #28]
          break;
 80036c0:	e00c      	b.n	80036dc <HAL_RCCEx_GetPeriphCLKFreq+0x744>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80036c2:	4b33      	ldr	r3, [pc, #204]	@ (8003790 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80036ca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80036ce:	d104      	bne.n	80036da <HAL_RCCEx_GetPeriphCLKFreq+0x742>
            frequency = HSI_VALUE;
 80036d0:	4b30      	ldr	r3, [pc, #192]	@ (8003794 <HAL_RCCEx_GetPeriphCLKFreq+0x7fc>)
 80036d2:	61fb      	str	r3, [r7, #28]
          break;
 80036d4:	e001      	b.n	80036da <HAL_RCCEx_GetPeriphCLKFreq+0x742>
          break;
 80036d6:	bf00      	nop
 80036d8:	e0eb      	b.n	80038b2 <HAL_RCCEx_GetPeriphCLKFreq+0x91a>
          break;
 80036da:	bf00      	nop
        break;
 80036dc:	e0e9      	b.n	80038b2 <HAL_RCCEx_GetPeriphCLKFreq+0x91a>
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 80036de:	4b2c      	ldr	r3, [pc, #176]	@ (8003790 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 80036e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80036e4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80036e8:	613b      	str	r3, [r7, #16]
 80036ea:	693b      	ldr	r3, [r7, #16]
 80036ec:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80036f0:	d013      	beq.n	800371a <HAL_RCCEx_GetPeriphCLKFreq+0x782>
 80036f2:	693b      	ldr	r3, [r7, #16]
 80036f4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80036f8:	d819      	bhi.n	800372e <HAL_RCCEx_GetPeriphCLKFreq+0x796>
 80036fa:	693b      	ldr	r3, [r7, #16]
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d004      	beq.n	800370a <HAL_RCCEx_GetPeriphCLKFreq+0x772>
 8003700:	693b      	ldr	r3, [r7, #16]
 8003702:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003706:	d004      	beq.n	8003712 <HAL_RCCEx_GetPeriphCLKFreq+0x77a>
          break;
 8003708:	e011      	b.n	800372e <HAL_RCCEx_GetPeriphCLKFreq+0x796>
          frequency = HAL_RCC_GetPCLK1Freq();
 800370a:	f7ff f9a1 	bl	8002a50 <HAL_RCC_GetPCLK1Freq>
 800370e:	61f8      	str	r0, [r7, #28]
          break;
 8003710:	e010      	b.n	8003734 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
          frequency = HAL_RCC_GetSysClockFreq();
 8003712:	f7ff f905 	bl	8002920 <HAL_RCC_GetSysClockFreq>
 8003716:	61f8      	str	r0, [r7, #28]
          break;
 8003718:	e00c      	b.n	8003734 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800371a:	4b1d      	ldr	r3, [pc, #116]	@ (8003790 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003722:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003726:	d104      	bne.n	8003732 <HAL_RCCEx_GetPeriphCLKFreq+0x79a>
            frequency = HSI_VALUE;
 8003728:	4b1a      	ldr	r3, [pc, #104]	@ (8003794 <HAL_RCCEx_GetPeriphCLKFreq+0x7fc>)
 800372a:	61fb      	str	r3, [r7, #28]
          break;
 800372c:	e001      	b.n	8003732 <HAL_RCCEx_GetPeriphCLKFreq+0x79a>
          break;
 800372e:	bf00      	nop
 8003730:	e0bf      	b.n	80038b2 <HAL_RCCEx_GetPeriphCLKFreq+0x91a>
          break;
 8003732:	bf00      	nop
        break;
 8003734:	e0bd      	b.n	80038b2 <HAL_RCCEx_GetPeriphCLKFreq+0x91a>
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8003736:	4b16      	ldr	r3, [pc, #88]	@ (8003790 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 8003738:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800373c:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8003740:	613b      	str	r3, [r7, #16]
 8003742:	693b      	ldr	r3, [r7, #16]
 8003744:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8003748:	d030      	beq.n	80037ac <HAL_RCCEx_GetPeriphCLKFreq+0x814>
 800374a:	693b      	ldr	r3, [r7, #16]
 800374c:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8003750:	d837      	bhi.n	80037c2 <HAL_RCCEx_GetPeriphCLKFreq+0x82a>
 8003752:	693b      	ldr	r3, [r7, #16]
 8003754:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003758:	d01e      	beq.n	8003798 <HAL_RCCEx_GetPeriphCLKFreq+0x800>
 800375a:	693b      	ldr	r3, [r7, #16]
 800375c:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003760:	d82f      	bhi.n	80037c2 <HAL_RCCEx_GetPeriphCLKFreq+0x82a>
 8003762:	693b      	ldr	r3, [r7, #16]
 8003764:	2b00      	cmp	r3, #0
 8003766:	d004      	beq.n	8003772 <HAL_RCCEx_GetPeriphCLKFreq+0x7da>
 8003768:	693b      	ldr	r3, [r7, #16]
 800376a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800376e:	d004      	beq.n	800377a <HAL_RCCEx_GetPeriphCLKFreq+0x7e2>
          break;
 8003770:	e027      	b.n	80037c2 <HAL_RCCEx_GetPeriphCLKFreq+0x82a>
          frequency = HAL_RCC_GetPCLK1Freq();
 8003772:	f7ff f96d 	bl	8002a50 <HAL_RCC_GetPCLK1Freq>
 8003776:	61f8      	str	r0, [r7, #28]
          break;
 8003778:	e02a      	b.n	80037d0 <HAL_RCCEx_GetPeriphCLKFreq+0x838>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 800377a:	4b05      	ldr	r3, [pc, #20]	@ (8003790 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 800377c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003780:	f003 0302 	and.w	r3, r3, #2
 8003784:	2b02      	cmp	r3, #2
 8003786:	d11e      	bne.n	80037c6 <HAL_RCCEx_GetPeriphCLKFreq+0x82e>
              frequency = LSI_VALUE;
 8003788:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800378c:	61fb      	str	r3, [r7, #28]
          break;
 800378e:	e01a      	b.n	80037c6 <HAL_RCCEx_GetPeriphCLKFreq+0x82e>
 8003790:	40021000 	.word	0x40021000
 8003794:	00f42400 	.word	0x00f42400
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8003798:	4b48      	ldr	r3, [pc, #288]	@ (80038bc <HAL_RCCEx_GetPeriphCLKFreq+0x924>)
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80037a0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80037a4:	d111      	bne.n	80037ca <HAL_RCCEx_GetPeriphCLKFreq+0x832>
            frequency = HSI_VALUE;
 80037a6:	4b46      	ldr	r3, [pc, #280]	@ (80038c0 <HAL_RCCEx_GetPeriphCLKFreq+0x928>)
 80037a8:	61fb      	str	r3, [r7, #28]
          break;
 80037aa:	e00e      	b.n	80037ca <HAL_RCCEx_GetPeriphCLKFreq+0x832>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80037ac:	4b43      	ldr	r3, [pc, #268]	@ (80038bc <HAL_RCCEx_GetPeriphCLKFreq+0x924>)
 80037ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80037b2:	f003 0302 	and.w	r3, r3, #2
 80037b6:	2b02      	cmp	r3, #2
 80037b8:	d109      	bne.n	80037ce <HAL_RCCEx_GetPeriphCLKFreq+0x836>
            frequency = LSE_VALUE;
 80037ba:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80037be:	61fb      	str	r3, [r7, #28]
          break;
 80037c0:	e005      	b.n	80037ce <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          break;
 80037c2:	bf00      	nop
 80037c4:	e075      	b.n	80038b2 <HAL_RCCEx_GetPeriphCLKFreq+0x91a>
          break;
 80037c6:	bf00      	nop
 80037c8:	e073      	b.n	80038b2 <HAL_RCCEx_GetPeriphCLKFreq+0x91a>
          break;
 80037ca:	bf00      	nop
 80037cc:	e071      	b.n	80038b2 <HAL_RCCEx_GetPeriphCLKFreq+0x91a>
          break;
 80037ce:	bf00      	nop
        break;
 80037d0:	e06f      	b.n	80038b2 <HAL_RCCEx_GetPeriphCLKFreq+0x91a>
       srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 80037d2:	4b3a      	ldr	r3, [pc, #232]	@ (80038bc <HAL_RCCEx_GetPeriphCLKFreq+0x924>)
 80037d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80037d8:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 80037dc:	613b      	str	r3, [r7, #16]
 80037de:	693b      	ldr	r3, [r7, #16]
 80037e0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80037e4:	d02c      	beq.n	8003840 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
 80037e6:	693b      	ldr	r3, [r7, #16]
 80037e8:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80037ec:	d833      	bhi.n	8003856 <HAL_RCCEx_GetPeriphCLKFreq+0x8be>
 80037ee:	693b      	ldr	r3, [r7, #16]
 80037f0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80037f4:	d01a      	beq.n	800382c <HAL_RCCEx_GetPeriphCLKFreq+0x894>
 80037f6:	693b      	ldr	r3, [r7, #16]
 80037f8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80037fc:	d82b      	bhi.n	8003856 <HAL_RCCEx_GetPeriphCLKFreq+0x8be>
 80037fe:	693b      	ldr	r3, [r7, #16]
 8003800:	2b00      	cmp	r3, #0
 8003802:	d004      	beq.n	800380e <HAL_RCCEx_GetPeriphCLKFreq+0x876>
 8003804:	693b      	ldr	r3, [r7, #16]
 8003806:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800380a:	d004      	beq.n	8003816 <HAL_RCCEx_GetPeriphCLKFreq+0x87e>
          break;
 800380c:	e023      	b.n	8003856 <HAL_RCCEx_GetPeriphCLKFreq+0x8be>
          frequency = HAL_RCC_GetPCLK1Freq();
 800380e:	f7ff f91f 	bl	8002a50 <HAL_RCC_GetPCLK1Freq>
 8003812:	61f8      	str	r0, [r7, #28]
          break;
 8003814:	e026      	b.n	8003864 <HAL_RCCEx_GetPeriphCLKFreq+0x8cc>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8003816:	4b29      	ldr	r3, [pc, #164]	@ (80038bc <HAL_RCCEx_GetPeriphCLKFreq+0x924>)
 8003818:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800381c:	f003 0302 	and.w	r3, r3, #2
 8003820:	2b02      	cmp	r3, #2
 8003822:	d11a      	bne.n	800385a <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
              frequency = LSI_VALUE;
 8003824:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8003828:	61fb      	str	r3, [r7, #28]
          break;
 800382a:	e016      	b.n	800385a <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800382c:	4b23      	ldr	r3, [pc, #140]	@ (80038bc <HAL_RCCEx_GetPeriphCLKFreq+0x924>)
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003834:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003838:	d111      	bne.n	800385e <HAL_RCCEx_GetPeriphCLKFreq+0x8c6>
            frequency = HSI_VALUE;
 800383a:	4b21      	ldr	r3, [pc, #132]	@ (80038c0 <HAL_RCCEx_GetPeriphCLKFreq+0x928>)
 800383c:	61fb      	str	r3, [r7, #28]
          break;
 800383e:	e00e      	b.n	800385e <HAL_RCCEx_GetPeriphCLKFreq+0x8c6>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8003840:	4b1e      	ldr	r3, [pc, #120]	@ (80038bc <HAL_RCCEx_GetPeriphCLKFreq+0x924>)
 8003842:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003846:	f003 0302 	and.w	r3, r3, #2
 800384a:	2b02      	cmp	r3, #2
 800384c:	d109      	bne.n	8003862 <HAL_RCCEx_GetPeriphCLKFreq+0x8ca>
            frequency = LSE_VALUE;
 800384e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003852:	61fb      	str	r3, [r7, #28]
          break;
 8003854:	e005      	b.n	8003862 <HAL_RCCEx_GetPeriphCLKFreq+0x8ca>
          break;
 8003856:	bf00      	nop
 8003858:	e02b      	b.n	80038b2 <HAL_RCCEx_GetPeriphCLKFreq+0x91a>
          break;
 800385a:	bf00      	nop
 800385c:	e029      	b.n	80038b2 <HAL_RCCEx_GetPeriphCLKFreq+0x91a>
          break;
 800385e:	bf00      	nop
 8003860:	e027      	b.n	80038b2 <HAL_RCCEx_GetPeriphCLKFreq+0x91a>
          break;
 8003862:	bf00      	nop
        break;
 8003864:	e025      	b.n	80038b2 <HAL_RCCEx_GetPeriphCLKFreq+0x91a>
        srcclk = __HAL_RCC_GET_SWPMI1_SOURCE();
 8003866:	4b15      	ldr	r3, [pc, #84]	@ (80038bc <HAL_RCCEx_GetPeriphCLKFreq+0x924>)
 8003868:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800386c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8003870:	613b      	str	r3, [r7, #16]
 8003872:	693b      	ldr	r3, [r7, #16]
 8003874:	2b00      	cmp	r3, #0
 8003876:	d004      	beq.n	8003882 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 8003878:	693b      	ldr	r3, [r7, #16]
 800387a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800387e:	d004      	beq.n	800388a <HAL_RCCEx_GetPeriphCLKFreq+0x8f2>
          break;
 8003880:	e00d      	b.n	800389e <HAL_RCCEx_GetPeriphCLKFreq+0x906>
          frequency = HAL_RCC_GetPCLK1Freq();
 8003882:	f7ff f8e5 	bl	8002a50 <HAL_RCC_GetPCLK1Freq>
 8003886:	61f8      	str	r0, [r7, #28]
          break;
 8003888:	e009      	b.n	800389e <HAL_RCCEx_GetPeriphCLKFreq+0x906>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800388a:	4b0c      	ldr	r3, [pc, #48]	@ (80038bc <HAL_RCCEx_GetPeriphCLKFreq+0x924>)
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003892:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003896:	d101      	bne.n	800389c <HAL_RCCEx_GetPeriphCLKFreq+0x904>
            frequency = HSI_VALUE;
 8003898:	4b09      	ldr	r3, [pc, #36]	@ (80038c0 <HAL_RCCEx_GetPeriphCLKFreq+0x928>)
 800389a:	61fb      	str	r3, [r7, #28]
          break;
 800389c:	bf00      	nop
        break;
 800389e:	e008      	b.n	80038b2 <HAL_RCCEx_GetPeriphCLKFreq+0x91a>
      break;
 80038a0:	bf00      	nop
 80038a2:	e006      	b.n	80038b2 <HAL_RCCEx_GetPeriphCLKFreq+0x91a>
      break;
 80038a4:	bf00      	nop
 80038a6:	e004      	b.n	80038b2 <HAL_RCCEx_GetPeriphCLKFreq+0x91a>
      break;
 80038a8:	bf00      	nop
 80038aa:	e002      	b.n	80038b2 <HAL_RCCEx_GetPeriphCLKFreq+0x91a>
      break;
 80038ac:	bf00      	nop
 80038ae:	e000      	b.n	80038b2 <HAL_RCCEx_GetPeriphCLKFreq+0x91a>
      break;
 80038b0:	bf00      	nop
    }
  }

  return(frequency);
 80038b2:	69fb      	ldr	r3, [r7, #28]
}
 80038b4:	4618      	mov	r0, r3
 80038b6:	3720      	adds	r7, #32
 80038b8:	46bd      	mov	sp, r7
 80038ba:	bd80      	pop	{r7, pc}
 80038bc:	40021000 	.word	0x40021000
 80038c0:	00f42400 	.word	0x00f42400

080038c4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80038c4:	b580      	push	{r7, lr}
 80038c6:	b084      	sub	sp, #16
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	6078      	str	r0, [r7, #4]
 80038cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80038ce:	2300      	movs	r3, #0
 80038d0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80038d2:	4b74      	ldr	r3, [pc, #464]	@ (8003aa4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80038d4:	68db      	ldr	r3, [r3, #12]
 80038d6:	f003 0303 	and.w	r3, r3, #3
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d018      	beq.n	8003910 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80038de:	4b71      	ldr	r3, [pc, #452]	@ (8003aa4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80038e0:	68db      	ldr	r3, [r3, #12]
 80038e2:	f003 0203 	and.w	r2, r3, #3
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	429a      	cmp	r2, r3
 80038ec:	d10d      	bne.n	800390a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
       ||
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d009      	beq.n	800390a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80038f6:	4b6b      	ldr	r3, [pc, #428]	@ (8003aa4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80038f8:	68db      	ldr	r3, [r3, #12]
 80038fa:	091b      	lsrs	r3, r3, #4
 80038fc:	f003 0307 	and.w	r3, r3, #7
 8003900:	1c5a      	adds	r2, r3, #1
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	685b      	ldr	r3, [r3, #4]
       ||
 8003906:	429a      	cmp	r2, r3
 8003908:	d047      	beq.n	800399a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800390a:	2301      	movs	r3, #1
 800390c:	73fb      	strb	r3, [r7, #15]
 800390e:	e044      	b.n	800399a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	2b03      	cmp	r3, #3
 8003916:	d018      	beq.n	800394a <RCCEx_PLLSAI1_Config+0x86>
 8003918:	2b03      	cmp	r3, #3
 800391a:	d825      	bhi.n	8003968 <RCCEx_PLLSAI1_Config+0xa4>
 800391c:	2b01      	cmp	r3, #1
 800391e:	d002      	beq.n	8003926 <RCCEx_PLLSAI1_Config+0x62>
 8003920:	2b02      	cmp	r3, #2
 8003922:	d009      	beq.n	8003938 <RCCEx_PLLSAI1_Config+0x74>
 8003924:	e020      	b.n	8003968 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003926:	4b5f      	ldr	r3, [pc, #380]	@ (8003aa4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f003 0302 	and.w	r3, r3, #2
 800392e:	2b00      	cmp	r3, #0
 8003930:	d11d      	bne.n	800396e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003932:	2301      	movs	r3, #1
 8003934:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003936:	e01a      	b.n	800396e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003938:	4b5a      	ldr	r3, [pc, #360]	@ (8003aa4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003940:	2b00      	cmp	r3, #0
 8003942:	d116      	bne.n	8003972 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003944:	2301      	movs	r3, #1
 8003946:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003948:	e013      	b.n	8003972 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800394a:	4b56      	ldr	r3, [pc, #344]	@ (8003aa4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003952:	2b00      	cmp	r3, #0
 8003954:	d10f      	bne.n	8003976 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003956:	4b53      	ldr	r3, [pc, #332]	@ (8003aa4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800395e:	2b00      	cmp	r3, #0
 8003960:	d109      	bne.n	8003976 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003962:	2301      	movs	r3, #1
 8003964:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003966:	e006      	b.n	8003976 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003968:	2301      	movs	r3, #1
 800396a:	73fb      	strb	r3, [r7, #15]
      break;
 800396c:	e004      	b.n	8003978 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800396e:	bf00      	nop
 8003970:	e002      	b.n	8003978 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003972:	bf00      	nop
 8003974:	e000      	b.n	8003978 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003976:	bf00      	nop
    }

    if(status == HAL_OK)
 8003978:	7bfb      	ldrb	r3, [r7, #15]
 800397a:	2b00      	cmp	r3, #0
 800397c:	d10d      	bne.n	800399a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800397e:	4b49      	ldr	r3, [pc, #292]	@ (8003aa4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003980:	68db      	ldr	r3, [r3, #12]
 8003982:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	6819      	ldr	r1, [r3, #0]
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	685b      	ldr	r3, [r3, #4]
 800398e:	3b01      	subs	r3, #1
 8003990:	011b      	lsls	r3, r3, #4
 8003992:	430b      	orrs	r3, r1
 8003994:	4943      	ldr	r1, [pc, #268]	@ (8003aa4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003996:	4313      	orrs	r3, r2
 8003998:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800399a:	7bfb      	ldrb	r3, [r7, #15]
 800399c:	2b00      	cmp	r3, #0
 800399e:	d17c      	bne.n	8003a9a <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80039a0:	4b40      	ldr	r3, [pc, #256]	@ (8003aa4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	4a3f      	ldr	r2, [pc, #252]	@ (8003aa4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80039a6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80039aa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80039ac:	f7fd fbac 	bl	8001108 <HAL_GetTick>
 80039b0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80039b2:	e009      	b.n	80039c8 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80039b4:	f7fd fba8 	bl	8001108 <HAL_GetTick>
 80039b8:	4602      	mov	r2, r0
 80039ba:	68bb      	ldr	r3, [r7, #8]
 80039bc:	1ad3      	subs	r3, r2, r3
 80039be:	2b02      	cmp	r3, #2
 80039c0:	d902      	bls.n	80039c8 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80039c2:	2303      	movs	r3, #3
 80039c4:	73fb      	strb	r3, [r7, #15]
        break;
 80039c6:	e005      	b.n	80039d4 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80039c8:	4b36      	ldr	r3, [pc, #216]	@ (8003aa4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d1ef      	bne.n	80039b4 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80039d4:	7bfb      	ldrb	r3, [r7, #15]
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d15f      	bne.n	8003a9a <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80039da:	683b      	ldr	r3, [r7, #0]
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d110      	bne.n	8003a02 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80039e0:	4b30      	ldr	r3, [pc, #192]	@ (8003aa4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80039e2:	691b      	ldr	r3, [r3, #16]
 80039e4:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 80039e8:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80039ec:	687a      	ldr	r2, [r7, #4]
 80039ee:	6892      	ldr	r2, [r2, #8]
 80039f0:	0211      	lsls	r1, r2, #8
 80039f2:	687a      	ldr	r2, [r7, #4]
 80039f4:	68d2      	ldr	r2, [r2, #12]
 80039f6:	06d2      	lsls	r2, r2, #27
 80039f8:	430a      	orrs	r2, r1
 80039fa:	492a      	ldr	r1, [pc, #168]	@ (8003aa4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80039fc:	4313      	orrs	r3, r2
 80039fe:	610b      	str	r3, [r1, #16]
 8003a00:	e027      	b.n	8003a52 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003a02:	683b      	ldr	r3, [r7, #0]
 8003a04:	2b01      	cmp	r3, #1
 8003a06:	d112      	bne.n	8003a2e <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003a08:	4b26      	ldr	r3, [pc, #152]	@ (8003aa4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003a0a:	691b      	ldr	r3, [r3, #16]
 8003a0c:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8003a10:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003a14:	687a      	ldr	r2, [r7, #4]
 8003a16:	6892      	ldr	r2, [r2, #8]
 8003a18:	0211      	lsls	r1, r2, #8
 8003a1a:	687a      	ldr	r2, [r7, #4]
 8003a1c:	6912      	ldr	r2, [r2, #16]
 8003a1e:	0852      	lsrs	r2, r2, #1
 8003a20:	3a01      	subs	r2, #1
 8003a22:	0552      	lsls	r2, r2, #21
 8003a24:	430a      	orrs	r2, r1
 8003a26:	491f      	ldr	r1, [pc, #124]	@ (8003aa4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003a28:	4313      	orrs	r3, r2
 8003a2a:	610b      	str	r3, [r1, #16]
 8003a2c:	e011      	b.n	8003a52 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003a2e:	4b1d      	ldr	r3, [pc, #116]	@ (8003aa4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003a30:	691b      	ldr	r3, [r3, #16]
 8003a32:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8003a36:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003a3a:	687a      	ldr	r2, [r7, #4]
 8003a3c:	6892      	ldr	r2, [r2, #8]
 8003a3e:	0211      	lsls	r1, r2, #8
 8003a40:	687a      	ldr	r2, [r7, #4]
 8003a42:	6952      	ldr	r2, [r2, #20]
 8003a44:	0852      	lsrs	r2, r2, #1
 8003a46:	3a01      	subs	r2, #1
 8003a48:	0652      	lsls	r2, r2, #25
 8003a4a:	430a      	orrs	r2, r1
 8003a4c:	4915      	ldr	r1, [pc, #84]	@ (8003aa4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003a4e:	4313      	orrs	r3, r2
 8003a50:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003a52:	4b14      	ldr	r3, [pc, #80]	@ (8003aa4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	4a13      	ldr	r2, [pc, #76]	@ (8003aa4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003a58:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003a5c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a5e:	f7fd fb53 	bl	8001108 <HAL_GetTick>
 8003a62:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003a64:	e009      	b.n	8003a7a <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003a66:	f7fd fb4f 	bl	8001108 <HAL_GetTick>
 8003a6a:	4602      	mov	r2, r0
 8003a6c:	68bb      	ldr	r3, [r7, #8]
 8003a6e:	1ad3      	subs	r3, r2, r3
 8003a70:	2b02      	cmp	r3, #2
 8003a72:	d902      	bls.n	8003a7a <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8003a74:	2303      	movs	r3, #3
 8003a76:	73fb      	strb	r3, [r7, #15]
          break;
 8003a78:	e005      	b.n	8003a86 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003a7a:	4b0a      	ldr	r3, [pc, #40]	@ (8003aa4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d0ef      	beq.n	8003a66 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8003a86:	7bfb      	ldrb	r3, [r7, #15]
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d106      	bne.n	8003a9a <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003a8c:	4b05      	ldr	r3, [pc, #20]	@ (8003aa4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003a8e:	691a      	ldr	r2, [r3, #16]
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	699b      	ldr	r3, [r3, #24]
 8003a94:	4903      	ldr	r1, [pc, #12]	@ (8003aa4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003a96:	4313      	orrs	r3, r2
 8003a98:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003a9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a9c:	4618      	mov	r0, r3
 8003a9e:	3710      	adds	r7, #16
 8003aa0:	46bd      	mov	sp, r7
 8003aa2:	bd80      	pop	{r7, pc}
 8003aa4:	40021000 	.word	0x40021000

08003aa8 <RCCEx_GetSAIxPeriphCLKFreq>:
#endif /* RCC_PLLSAI2_SUPPORT */

#if defined(SAI1)

static uint32_t RCCEx_GetSAIxPeriphCLKFreq(uint32_t PeriphClk, uint32_t InputFrequency)
{
 8003aa8:	b480      	push	{r7}
 8003aaa:	b089      	sub	sp, #36	@ 0x24
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	6078      	str	r0, [r7, #4]
 8003ab0:	6039      	str	r1, [r7, #0]
  uint32_t frequency = 0U;
 8003ab2:	2300      	movs	r3, #0
 8003ab4:	61fb      	str	r3, [r7, #28]
  uint32_t srcclk = 0U;
 8003ab6:	2300      	movs	r3, #0
 8003ab8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, plln;    /* no init needed */
#if defined(RCC_PLLP_SUPPORT)
  uint32_t pllp = 0U;
 8003aba:	2300      	movs	r3, #0
 8003abc:	617b      	str	r3, [r7, #20]
#endif /* RCC_PLLP_SUPPORT */

  /* Handle SAIs */
  if(PeriphClk == RCC_PERIPHCLK_SAI1)
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003ac4:	d10b      	bne.n	8003ade <RCCEx_GetSAIxPeriphCLKFreq+0x36>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 8003ac6:	4b53      	ldr	r3, [pc, #332]	@ (8003c14 <RCCEx_GetSAIxPeriphCLKFreq+0x16c>)
 8003ac8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003acc:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 8003ad0:	61bb      	str	r3, [r7, #24]
    if(srcclk == RCC_SAI1CLKSOURCE_PIN)
 8003ad2:	69bb      	ldr	r3, [r7, #24]
 8003ad4:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003ad8:	d101      	bne.n	8003ade <RCCEx_GetSAIxPeriphCLKFreq+0x36>
    {
      frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8003ada:	4b4f      	ldr	r3, [pc, #316]	@ (8003c18 <RCCEx_GetSAIxPeriphCLKFreq+0x170>)
 8003adc:	61fb      	str	r3, [r7, #28]
      /* Else, PLL clock output to check below */
    }
  }
#endif /* SAI2 */

  if(frequency == 0U)
 8003ade:	69fb      	ldr	r3, [r7, #28]
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	f040 8090 	bne.w	8003c06 <RCCEx_GetSAIxPeriphCLKFreq+0x15e>
  {
    pllvco = InputFrequency;
 8003ae6:	683b      	ldr	r3, [r7, #0]
 8003ae8:	613b      	str	r3, [r7, #16]
      }
    }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

#else
    if(srcclk == RCC_SAI1CLKSOURCE_PLL)
 8003aea:	69bb      	ldr	r3, [r7, #24]
 8003aec:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003af0:	d143      	bne.n	8003b7a <RCCEx_GetSAIxPeriphCLKFreq+0xd2>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI2CLK) != 0U))
 8003af2:	4b48      	ldr	r3, [pc, #288]	@ (8003c14 <RCCEx_GetSAIxPeriphCLKFreq+0x16c>)
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003afa:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003afe:	d132      	bne.n	8003b66 <RCCEx_GetSAIxPeriphCLKFreq+0xbe>
 8003b00:	4b44      	ldr	r3, [pc, #272]	@ (8003c14 <RCCEx_GetSAIxPeriphCLKFreq+0x16c>)
 8003b02:	68db      	ldr	r3, [r3, #12]
 8003b04:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d02c      	beq.n	8003b66 <RCCEx_GetSAIxPeriphCLKFreq+0xbe>
      {
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8003b0c:	4b41      	ldr	r3, [pc, #260]	@ (8003c14 <RCCEx_GetSAIxPeriphCLKFreq+0x16c>)
 8003b0e:	68db      	ldr	r3, [r3, #12]
 8003b10:	091b      	lsrs	r3, r3, #4
 8003b12:	f003 0307 	and.w	r3, r3, #7
 8003b16:	3301      	adds	r3, #1
 8003b18:	693a      	ldr	r2, [r7, #16]
 8003b1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b1e:	613b      	str	r3, [r7, #16]
        /* f(PLLSAI2CLK) = f(VCO input) * PLLN / PLLP */
        plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8003b20:	4b3c      	ldr	r3, [pc, #240]	@ (8003c14 <RCCEx_GetSAIxPeriphCLKFreq+0x16c>)
 8003b22:	68db      	ldr	r3, [r3, #12]
 8003b24:	0a1b      	lsrs	r3, r3, #8
 8003b26:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003b2a:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
 8003b2c:	4b39      	ldr	r3, [pc, #228]	@ (8003c14 <RCCEx_GetSAIxPeriphCLKFreq+0x16c>)
 8003b2e:	68db      	ldr	r3, [r3, #12]
 8003b30:	0edb      	lsrs	r3, r3, #27
 8003b32:	f003 031f 	and.w	r3, r3, #31
 8003b36:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 8003b38:	697b      	ldr	r3, [r7, #20]
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d10a      	bne.n	8003b54 <RCCEx_GetSAIxPeriphCLKFreq+0xac>
        {
          if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 8003b3e:	4b35      	ldr	r3, [pc, #212]	@ (8003c14 <RCCEx_GetSAIxPeriphCLKFreq+0x16c>)
 8003b40:	68db      	ldr	r3, [r3, #12]
 8003b42:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d002      	beq.n	8003b50 <RCCEx_GetSAIxPeriphCLKFreq+0xa8>
          {
            pllp = 17U;
 8003b4a:	2311      	movs	r3, #17
 8003b4c:	617b      	str	r3, [r7, #20]
 8003b4e:	e001      	b.n	8003b54 <RCCEx_GetSAIxPeriphCLKFreq+0xac>
          }
          else
          {
            pllp = 7U;
 8003b50:	2307      	movs	r3, #7
 8003b52:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8003b54:	693b      	ldr	r3, [r7, #16]
 8003b56:	68fa      	ldr	r2, [r7, #12]
 8003b58:	fb03 f202 	mul.w	r2, r3, r2
 8003b5c:	697b      	ldr	r3, [r7, #20]
 8003b5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b62:	61fb      	str	r3, [r7, #28]
 8003b64:	e04f      	b.n	8003c06 <RCCEx_GetSAIxPeriphCLKFreq+0x15e>
      }
      else if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8003b66:	4b2b      	ldr	r3, [pc, #172]	@ (8003c14 <RCCEx_GetSAIxPeriphCLKFreq+0x16c>)
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003b6e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003b72:	d148      	bne.n	8003c06 <RCCEx_GetSAIxPeriphCLKFreq+0x15e>
      {
        /* HSI automatically selected as clock source if PLLs not enabled */
        frequency = HSI_VALUE;
 8003b74:	4b29      	ldr	r3, [pc, #164]	@ (8003c1c <RCCEx_GetSAIxPeriphCLKFreq+0x174>)
 8003b76:	61fb      	str	r3, [r7, #28]
 8003b78:	e045      	b.n	8003c06 <RCCEx_GetSAIxPeriphCLKFreq+0x15e>
      else
      {
        /* No clock source, frequency default init at 0 */
      }
    }
    else if(srcclk == RCC_SAI1CLKSOURCE_PLLSAI1)
 8003b7a:	69bb      	ldr	r3, [r7, #24]
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d142      	bne.n	8003c06 <RCCEx_GetSAIxPeriphCLKFreq+0x15e>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_SAI1CLK) != 0U))
 8003b80:	4b24      	ldr	r3, [pc, #144]	@ (8003c14 <RCCEx_GetSAIxPeriphCLKFreq+0x16c>)
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003b88:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003b8c:	d132      	bne.n	8003bf4 <RCCEx_GetSAIxPeriphCLKFreq+0x14c>
 8003b8e:	4b21      	ldr	r3, [pc, #132]	@ (8003c14 <RCCEx_GetSAIxPeriphCLKFreq+0x16c>)
 8003b90:	691b      	ldr	r3, [r3, #16]
 8003b92:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d02c      	beq.n	8003bf4 <RCCEx_GetSAIxPeriphCLKFreq+0x14c>
        /* PLLSAI1M exists: apply PLLSAI1M divider for PLLSAI1 output computation */
        /* f(PLLSAI1 Source) / PLLSAI1M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8003b9a:	4b1e      	ldr	r3, [pc, #120]	@ (8003c14 <RCCEx_GetSAIxPeriphCLKFreq+0x16c>)
 8003b9c:	68db      	ldr	r3, [r3, #12]
 8003b9e:	091b      	lsrs	r3, r3, #4
 8003ba0:	f003 0307 	and.w	r3, r3, #7
 8003ba4:	3301      	adds	r3, #1
 8003ba6:	693a      	ldr	r2, [r7, #16]
 8003ba8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bac:	613b      	str	r3, [r7, #16]
#endif
        /* f(PLLSAI1CLK) = f(VCOSAI1 input) * PLLSAI1N / PLLSAI1P */
        plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8003bae:	4b19      	ldr	r3, [pc, #100]	@ (8003c14 <RCCEx_GetSAIxPeriphCLKFreq+0x16c>)
 8003bb0:	691b      	ldr	r3, [r3, #16]
 8003bb2:	0a1b      	lsrs	r3, r3, #8
 8003bb4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003bb8:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1PDIV) >> RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos;
 8003bba:	4b16      	ldr	r3, [pc, #88]	@ (8003c14 <RCCEx_GetSAIxPeriphCLKFreq+0x16c>)
 8003bbc:	691b      	ldr	r3, [r3, #16]
 8003bbe:	0edb      	lsrs	r3, r3, #27
 8003bc0:	f003 031f 	and.w	r3, r3, #31
 8003bc4:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 8003bc6:	697b      	ldr	r3, [r7, #20]
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d10a      	bne.n	8003be2 <RCCEx_GetSAIxPeriphCLKFreq+0x13a>
        {
          if(READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1P) != 0U)
 8003bcc:	4b11      	ldr	r3, [pc, #68]	@ (8003c14 <RCCEx_GetSAIxPeriphCLKFreq+0x16c>)
 8003bce:	691b      	ldr	r3, [r3, #16]
 8003bd0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d002      	beq.n	8003bde <RCCEx_GetSAIxPeriphCLKFreq+0x136>
          {
            pllp = 17U;
 8003bd8:	2311      	movs	r3, #17
 8003bda:	617b      	str	r3, [r7, #20]
 8003bdc:	e001      	b.n	8003be2 <RCCEx_GetSAIxPeriphCLKFreq+0x13a>
          }
          else
          {
            pllp = 7U;
 8003bde:	2307      	movs	r3, #7
 8003be0:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8003be2:	693b      	ldr	r3, [r7, #16]
 8003be4:	68fa      	ldr	r2, [r7, #12]
 8003be6:	fb03 f202 	mul.w	r2, r3, r2
 8003bea:	697b      	ldr	r3, [r7, #20]
 8003bec:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bf0:	61fb      	str	r3, [r7, #28]
 8003bf2:	e008      	b.n	8003c06 <RCCEx_GetSAIxPeriphCLKFreq+0x15e>
      }
      else if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8003bf4:	4b07      	ldr	r3, [pc, #28]	@ (8003c14 <RCCEx_GetSAIxPeriphCLKFreq+0x16c>)
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003bfc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003c00:	d101      	bne.n	8003c06 <RCCEx_GetSAIxPeriphCLKFreq+0x15e>
      {
        /* HSI automatically selected as clock source if PLLs not enabled */
        frequency = HSI_VALUE;
 8003c02:	4b06      	ldr	r3, [pc, #24]	@ (8003c1c <RCCEx_GetSAIxPeriphCLKFreq+0x174>)
 8003c04:	61fb      	str	r3, [r7, #28]
      /* No clock source, frequency default init at 0 */
    }
  }


  return frequency;
 8003c06:	69fb      	ldr	r3, [r7, #28]
}
 8003c08:	4618      	mov	r0, r3
 8003c0a:	3724      	adds	r7, #36	@ 0x24
 8003c0c:	46bd      	mov	sp, r7
 8003c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c12:	4770      	bx	lr
 8003c14:	40021000 	.word	0x40021000
 8003c18:	001fff68 	.word	0x001fff68
 8003c1c:	00f42400 	.word	0x00f42400

08003c20 <HAL_SAI_InitProtocol>:
  *                   the configuration information for SAI module.
  * @param  nbslot Number of slot.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_InitProtocol(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 8003c20:	b580      	push	{r7, lr}
 8003c22:	b086      	sub	sp, #24
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	60f8      	str	r0, [r7, #12]
 8003c28:	60b9      	str	r1, [r7, #8]
 8003c2a:	607a      	str	r2, [r7, #4]
 8003c2c:	603b      	str	r3, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SAI_SUPPORTED_PROTOCOL(protocol));
  assert_param(IS_SAI_PROTOCOL_DATASIZE(datasize));

  switch (protocol)
 8003c2e:	68bb      	ldr	r3, [r7, #8]
 8003c30:	2b02      	cmp	r3, #2
 8003c32:	d904      	bls.n	8003c3e <HAL_SAI_InitProtocol+0x1e>
 8003c34:	68bb      	ldr	r3, [r7, #8]
 8003c36:	3b03      	subs	r3, #3
 8003c38:	2b01      	cmp	r3, #1
 8003c3a:	d812      	bhi.n	8003c62 <HAL_SAI_InitProtocol+0x42>
 8003c3c:	e008      	b.n	8003c50 <HAL_SAI_InitProtocol+0x30>
  {
    case SAI_I2S_STANDARD :
    case SAI_I2S_MSBJUSTIFIED :
    case SAI_I2S_LSBJUSTIFIED :
      status = SAI_InitI2S(hsai, protocol, datasize, nbslot);
 8003c3e:	683b      	ldr	r3, [r7, #0]
 8003c40:	687a      	ldr	r2, [r7, #4]
 8003c42:	68b9      	ldr	r1, [r7, #8]
 8003c44:	68f8      	ldr	r0, [r7, #12]
 8003c46:	f000 fa4d 	bl	80040e4 <SAI_InitI2S>
 8003c4a:	4603      	mov	r3, r0
 8003c4c:	75fb      	strb	r3, [r7, #23]
      break;
 8003c4e:	e00b      	b.n	8003c68 <HAL_SAI_InitProtocol+0x48>
    case SAI_PCM_LONG :
    case SAI_PCM_SHORT :
      status = SAI_InitPCM(hsai, protocol, datasize, nbslot);
 8003c50:	683b      	ldr	r3, [r7, #0]
 8003c52:	687a      	ldr	r2, [r7, #4]
 8003c54:	68b9      	ldr	r1, [r7, #8]
 8003c56:	68f8      	ldr	r0, [r7, #12]
 8003c58:	f000 faf6 	bl	8004248 <SAI_InitPCM>
 8003c5c:	4603      	mov	r3, r0
 8003c5e:	75fb      	strb	r3, [r7, #23]
      break;
 8003c60:	e002      	b.n	8003c68 <HAL_SAI_InitProtocol+0x48>
    default :
      status = HAL_ERROR;
 8003c62:	2301      	movs	r3, #1
 8003c64:	75fb      	strb	r3, [r7, #23]
      break;
 8003c66:	bf00      	nop
  }

  if (status == HAL_OK)
 8003c68:	7dfb      	ldrb	r3, [r7, #23]
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d104      	bne.n	8003c78 <HAL_SAI_InitProtocol+0x58>
  {
    status = HAL_SAI_Init(hsai);
 8003c6e:	68f8      	ldr	r0, [r7, #12]
 8003c70:	f000 f808 	bl	8003c84 <HAL_SAI_Init>
 8003c74:	4603      	mov	r3, r0
 8003c76:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8003c78:	7dfb      	ldrb	r3, [r7, #23]
}
 8003c7a:	4618      	mov	r0, r3
 8003c7c:	3718      	adds	r7, #24
 8003c7e:	46bd      	mov	sp, r7
 8003c80:	bd80      	pop	{r7, pc}
	...

08003c84 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 8003c84:	b580      	push	{r7, lr}
 8003c86:	b086      	sub	sp, #24
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	6078      	str	r0, [r7, #4]
#endif /* SAI2 */
  uint32_t ckstr_bits;
  uint32_t syncen_bits;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d101      	bne.n	8003c96 <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
 8003c92:	2301      	movs	r3, #1
 8003c94:	e10c      	b.n	8003eb0 <HAL_SAI_Init+0x22c>
    }
  }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  if (hsai->State == HAL_SAI_STATE_RESET)
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 8003c9c:	b2db      	uxtb	r3, r3
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d106      	bne.n	8003cb0 <HAL_SAI_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	2200      	movs	r2, #0
 8003ca6:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 8003caa:	6878      	ldr	r0, [r7, #4]
 8003cac:	f7fd f808 	bl	8000cc0 <HAL_SAI_MspInit>
#endif
  }

  /* Disable the selected SAI peripheral */
  if (SAI_Disable(hsai) != HAL_OK)
 8003cb0:	6878      	ldr	r0, [r7, #4]
 8003cb2:	f000 fb83 	bl	80043bc <SAI_Disable>
 8003cb6:	4603      	mov	r3, r0
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d001      	beq.n	8003cc0 <HAL_SAI_Init+0x3c>
  {
    return HAL_ERROR;
 8003cbc:	2301      	movs	r3, #1
 8003cbe:	e0f7      	b.n	8003eb0 <HAL_SAI_Init+0x22c>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	2202      	movs	r2, #2
 8003cc4:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d
      tmpregisterGCR = 0;
      break;
  }
#endif /* SAI2 */

  switch (hsai->Init.Synchro)
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	689b      	ldr	r3, [r3, #8]
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d002      	beq.n	8003cd6 <HAL_SAI_Init+0x52>
 8003cd0:	2b01      	cmp	r3, #1
 8003cd2:	d003      	beq.n	8003cdc <HAL_SAI_Init+0x58>
 8003cd4:	e006      	b.n	8003ce4 <HAL_SAI_Init+0x60>
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
 8003cd6:	2300      	movs	r3, #0
 8003cd8:	613b      	str	r3, [r7, #16]
      break;
 8003cda:	e006      	b.n	8003cea <HAL_SAI_Init+0x66>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
 8003cdc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003ce0:	613b      	str	r3, [r7, #16]
      break;
 8003ce2:	e002      	b.n	8003cea <HAL_SAI_Init+0x66>
      syncen_bits = SAI_xCR1_SYNCEN_1;
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
      break;
#endif /* SAI2 */
    default :
      syncen_bits = 0;
 8003ce4:	2300      	movs	r3, #0
 8003ce6:	613b      	str	r3, [r7, #16]
      break;
 8003ce8:	bf00      	nop
  else
  {
    SAI2->GCR = tmpregisterGCR;
  }
#else
  SAI1->GCR = 0;
 8003cea:	4b73      	ldr	r3, [pc, #460]	@ (8003eb8 <HAL_SAI_Init+0x234>)
 8003cec:	2200      	movs	r2, #0
 8003cee:	601a      	str	r2, [r3, #0]
#endif /* SAI2 */

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	69db      	ldr	r3, [r3, #28]
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d031      	beq.n	8003d5c <HAL_SAI_Init+0xd8>
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
    }

#else

    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 8003cf8:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8003cfc:	f7ff f94c 	bl	8002f98 <HAL_RCCEx_GetPeriphCLKFreq>
 8003d00:	60f8      	str	r0, [r7, #12]
    /* Configure Master Clock using the following formula :
       MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
       FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
       MCKDIV[3:0] = SAI_CK_x / FS * 512 */
    /* (freq x 10) to keep Significant digits */
    tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * 2U * 256U);
 8003d02:	68fa      	ldr	r2, [r7, #12]
 8003d04:	4613      	mov	r3, r2
 8003d06:	009b      	lsls	r3, r3, #2
 8003d08:	4413      	add	r3, r2
 8003d0a:	005b      	lsls	r3, r3, #1
 8003d0c:	461a      	mov	r2, r3
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	69db      	ldr	r3, [r3, #28]
 8003d12:	025b      	lsls	r3, r3, #9
 8003d14:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d18:	60bb      	str	r3, [r7, #8]
    hsai->Init.Mckdiv = tmpval / 10U;
 8003d1a:	68bb      	ldr	r3, [r7, #8]
 8003d1c:	4a67      	ldr	r2, [pc, #412]	@ (8003ebc <HAL_SAI_Init+0x238>)
 8003d1e:	fba2 2303 	umull	r2, r3, r2, r3
 8003d22:	08da      	lsrs	r2, r3, #3
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
 8003d28:	68b9      	ldr	r1, [r7, #8]
 8003d2a:	4b64      	ldr	r3, [pc, #400]	@ (8003ebc <HAL_SAI_Init+0x238>)
 8003d2c:	fba3 2301 	umull	r2, r3, r3, r1
 8003d30:	08da      	lsrs	r2, r3, #3
 8003d32:	4613      	mov	r3, r2
 8003d34:	009b      	lsls	r3, r3, #2
 8003d36:	4413      	add	r3, r2
 8003d38:	005b      	lsls	r3, r3, #1
 8003d3a:	1aca      	subs	r2, r1, r3
 8003d3c:	2a08      	cmp	r2, #8
 8003d3e:	d904      	bls.n	8003d4a <HAL_SAI_Init+0xc6>
    {
      hsai->Init.Mckdiv += 1U;
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	6a1b      	ldr	r3, [r3, #32]
 8003d44:	1c5a      	adds	r2, r3, #1
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	621a      	str	r2, [r3, #32]
    }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
    /* STM32L4P5xx || STM32L4Q5xx */

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d4e:	2b04      	cmp	r3, #4
 8003d50:	d104      	bne.n	8003d5c <HAL_SAI_Init+0xd8>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	6a1b      	ldr	r3, [r3, #32]
 8003d56:	085a      	lsrs	r2, r3, #1
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	621a      	str	r2, [r3, #32]
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	685b      	ldr	r3, [r3, #4]
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d003      	beq.n	8003d6c <HAL_SAI_Init+0xe8>
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	685b      	ldr	r3, [r3, #4]
 8003d68:	2b02      	cmp	r3, #2
 8003d6a:	d109      	bne.n	8003d80 <HAL_SAI_Init+0xfc>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d70:	2b01      	cmp	r3, #1
 8003d72:	d101      	bne.n	8003d78 <HAL_SAI_Init+0xf4>
 8003d74:	2300      	movs	r3, #0
 8003d76:	e001      	b.n	8003d7c <HAL_SAI_Init+0xf8>
 8003d78:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003d7c:	617b      	str	r3, [r7, #20]
 8003d7e:	e008      	b.n	8003d92 <HAL_SAI_Init+0x10e>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d84:	2b01      	cmp	r3, #1
 8003d86:	d102      	bne.n	8003d8e <HAL_SAI_Init+0x10a>
 8003d88:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003d8c:	e000      	b.n	8003d90 <HAL_SAI_Init+0x10c>
 8003d8e:	2300      	movs	r3, #0
 8003d90:	617b      	str	r3, [r7, #20]
                          ckstr_bits | syncen_bits |                             \
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
                          hsai->Init.MckOverSampling);
#else
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	6819      	ldr	r1, [r3, #0]
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681a      	ldr	r2, [r3, #0]
 8003d9c:	4b48      	ldr	r3, [pc, #288]	@ (8003ec0 <HAL_SAI_Init+0x23c>)
 8003d9e:	400b      	ands	r3, r1
 8003da0:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	6819      	ldr	r1, [r3, #0]
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	685a      	ldr	r2, [r3, #4]
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003db0:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8003db6:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003dbc:	431a      	orrs	r2, r3
 8003dbe:	697b      	ldr	r3, [r7, #20]
 8003dc0:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                             \
 8003dc2:	693b      	ldr	r3, [r7, #16]
 8003dc4:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                          ckstr_bits | syncen_bits |                             \
 8003dca:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	691b      	ldr	r3, [r3, #16]
 8003dd0:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	695b      	ldr	r3, [r3, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8003dd6:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	6a1b      	ldr	r3, [r3, #32]
 8003ddc:	051b      	lsls	r3, r3, #20
 8003dde:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	430a      	orrs	r2, r1
 8003de6:	601a      	str	r2, [r3, #0]
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	685b      	ldr	r3, [r3, #4]
 8003dee:	687a      	ldr	r2, [r7, #4]
 8003df0:	6812      	ldr	r2, [r2, #0]
 8003df2:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 8003df6:	f023 030f 	bic.w	r3, r3, #15
 8003dfa:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	6859      	ldr	r1, [r3, #4]
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	699a      	ldr	r2, [r3, #24]
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e0a:	431a      	orrs	r2, r3
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e10:	431a      	orrs	r2, r3
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	430a      	orrs	r2, r1
 8003e18:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	6899      	ldr	r1, [r3, #8]
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681a      	ldr	r2, [r3, #0]
 8003e24:	4b27      	ldr	r3, [pc, #156]	@ (8003ec4 <HAL_SAI_Init+0x240>)
 8003e26:	400b      	ands	r3, r1
 8003e28:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	6899      	ldr	r1, [r3, #8]
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e34:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8003e3a:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                           hsai->FrameInit.FSOffset |
 8003e40:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
                           hsai->FrameInit.FSDefinition |
 8003e46:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e4c:	3b01      	subs	r3, #1
 8003e4e:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 8003e50:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	430a      	orrs	r2, r1
 8003e58:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	68d9      	ldr	r1, [r3, #12]
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681a      	ldr	r2, [r3, #0]
 8003e64:	f24f 0320 	movw	r3, #61472	@ 0xf020
 8003e68:	400b      	ands	r3, r1
 8003e6a:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	68d9      	ldr	r1, [r3, #12]
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e7a:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003e80:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8003e82:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e88:	3b01      	subs	r3, #1
 8003e8a:	021b      	lsls	r3, r3, #8
 8003e8c:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	430a      	orrs	r2, r1
 8003e94:	60da      	str	r2, [r3, #12]
  }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	2200      	movs	r2, #0
 8003e9a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	2201      	movs	r2, #1
 8003ea2:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	2200      	movs	r2, #0
 8003eaa:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

  return HAL_OK;
 8003eae:	2300      	movs	r3, #0
}
 8003eb0:	4618      	mov	r0, r3
 8003eb2:	3718      	adds	r7, #24
 8003eb4:	46bd      	mov	sp, r7
 8003eb6:	bd80      	pop	{r7, pc}
 8003eb8:	40015400 	.word	0x40015400
 8003ebc:	cccccccd 	.word	0xcccccccd
 8003ec0:	ff05c010 	.word	0xff05c010
 8003ec4:	fff88000 	.word	0xfff88000

08003ec8 <HAL_SAI_DMAStop>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_DMAStop(SAI_HandleTypeDef *hsai)
{
 8003ec8:	b580      	push	{r7, lr}
 8003eca:	b084      	sub	sp, #16
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003ed0:	2300      	movs	r3, #0
 8003ed2:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hsai);
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 8003eda:	2b01      	cmp	r3, #1
 8003edc:	d101      	bne.n	8003ee2 <HAL_SAI_DMAStop+0x1a>
 8003ede:	2302      	movs	r3, #2
 8003ee0:	e042      	b.n	8003f68 <HAL_SAI_DMAStop+0xa0>
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	2201      	movs	r2, #1
 8003ee6:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

  /* Disable the SAI DMA request */
  hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	681a      	ldr	r2, [r3, #0]
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 8003ef8:	601a      	str	r2, [r3, #0]

  /* Abort the SAI Tx DMA Stream */
  if ((hsai->State == HAL_SAI_STATE_BUSY_TX) && (hsai->hdmatx != NULL))
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 8003f00:	b2db      	uxtb	r3, r3
 8003f02:	2b12      	cmp	r3, #18
 8003f04:	d108      	bne.n	8003f18 <HAL_SAI_DMAStop+0x50>
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d004      	beq.n	8003f18 <HAL_SAI_DMAStop+0x50>
  {
    /* No need to check the returned value of HAL_DMA_Abort. */
    /* Only HAL_DMA_ERROR_NO_XFER can be returned in case of error and it's not an error for SAI. */
    (void) HAL_DMA_Abort(hsai->hdmatx);
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003f12:	4618      	mov	r0, r3
 8003f14:	f7fd fb52 	bl	80015bc <HAL_DMA_Abort>
  }

  /* Abort the SAI Rx DMA Stream */
  if ((hsai->State == HAL_SAI_STATE_BUSY_RX) && (hsai->hdmarx != NULL))
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 8003f1e:	b2db      	uxtb	r3, r3
 8003f20:	2b22      	cmp	r3, #34	@ 0x22
 8003f22:	d108      	bne.n	8003f36 <HAL_SAI_DMAStop+0x6e>
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d004      	beq.n	8003f36 <HAL_SAI_DMAStop+0x6e>
  {
    /* No need to check the returned value of HAL_DMA_Abort. */
    /* Only HAL_DMA_ERROR_NO_XFER can be returned in case of error and it's not an error for SAI. */
    (void) HAL_DMA_Abort(hsai->hdmarx);
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f30:	4618      	mov	r0, r3
 8003f32:	f7fd fb43 	bl	80015bc <HAL_DMA_Abort>
  }

  /* Disable SAI peripheral */
  if (SAI_Disable(hsai) != HAL_OK)
 8003f36:	6878      	ldr	r0, [r7, #4]
 8003f38:	f000 fa40 	bl	80043bc <SAI_Disable>
 8003f3c:	4603      	mov	r3, r0
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d001      	beq.n	8003f46 <HAL_SAI_DMAStop+0x7e>
  {
    status = HAL_ERROR;
 8003f42:	2301      	movs	r3, #1
 8003f44:	73fb      	strb	r3, [r7, #15]
  }

  /* Flush the fifo */
  SET_BIT(hsai->Instance->CR2, SAI_xCR2_FFLUSH);
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	685a      	ldr	r2, [r3, #4]
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f042 0208 	orr.w	r2, r2, #8
 8003f54:	605a      	str	r2, [r3, #4]

  /* Set hsai state to ready */
  hsai->State = HAL_SAI_STATE_READY;
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	2201      	movs	r2, #1
 8003f5a:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

  /* Process Unlocked */
  __HAL_UNLOCK(hsai);
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	2200      	movs	r2, #0
 8003f62:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

  return status;
 8003f66:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f68:	4618      	mov	r0, r3
 8003f6a:	3710      	adds	r7, #16
 8003f6c:	46bd      	mov	sp, r7
 8003f6e:	bd80      	pop	{r7, pc}

08003f70 <HAL_SAI_Transmit_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Transmit_DMA(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size)
{
 8003f70:	b580      	push	{r7, lr}
 8003f72:	b086      	sub	sp, #24
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	60f8      	str	r0, [r7, #12]
 8003f78:	60b9      	str	r1, [r7, #8]
 8003f7a:	4613      	mov	r3, r2
 8003f7c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart = HAL_GetTick();
 8003f7e:	f7fd f8c3 	bl	8001108 <HAL_GetTick>
 8003f82:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 8003f84:	68bb      	ldr	r3, [r7, #8]
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d002      	beq.n	8003f90 <HAL_SAI_Transmit_DMA+0x20>
 8003f8a:	88fb      	ldrh	r3, [r7, #6]
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d101      	bne.n	8003f94 <HAL_SAI_Transmit_DMA+0x24>
  {
    return  HAL_ERROR;
 8003f90:	2301      	movs	r3, #1
 8003f92:	e093      	b.n	80040bc <HAL_SAI_Transmit_DMA+0x14c>
  }

  if (hsai->State == HAL_SAI_STATE_READY)
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 8003f9a:	b2db      	uxtb	r3, r3
 8003f9c:	2b01      	cmp	r3, #1
 8003f9e:	f040 808c 	bne.w	80040ba <HAL_SAI_Transmit_DMA+0x14a>
  {
    /* Process Locked */
    __HAL_LOCK(hsai);
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 8003fa8:	2b01      	cmp	r3, #1
 8003faa:	d101      	bne.n	8003fb0 <HAL_SAI_Transmit_DMA+0x40>
 8003fac:	2302      	movs	r3, #2
 8003fae:	e085      	b.n	80040bc <HAL_SAI_Transmit_DMA+0x14c>
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	2201      	movs	r2, #1
 8003fb4:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

    hsai->pBuffPtr = pData;
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	68ba      	ldr	r2, [r7, #8]
 8003fbc:	665a      	str	r2, [r3, #100]	@ 0x64
    hsai->XferSize = Size;
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	88fa      	ldrh	r2, [r7, #6]
 8003fc2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    hsai->XferCount = Size;
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	88fa      	ldrh	r2, [r7, #6]
 8003fca:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	2200      	movs	r2, #0
 8003fd2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    hsai->State = HAL_SAI_STATE_BUSY_TX;
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	2212      	movs	r2, #18
 8003fda:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

    /* Set the SAI Tx DMA Half transfer complete callback */
    hsai->hdmatx->XferHalfCpltCallback = SAI_DMATxHalfCplt;
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003fe2:	4a38      	ldr	r2, [pc, #224]	@ (80040c4 <HAL_SAI_Transmit_DMA+0x154>)
 8003fe4:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SAI TxDMA transfer complete callback */
    hsai->hdmatx->XferCpltCallback = SAI_DMATxCplt;
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003fea:	4a37      	ldr	r2, [pc, #220]	@ (80040c8 <HAL_SAI_Transmit_DMA+0x158>)
 8003fec:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the DMA error callback */
    hsai->hdmatx->XferErrorCallback = SAI_DMAError;
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003ff2:	4a36      	ldr	r2, [pc, #216]	@ (80040cc <HAL_SAI_Transmit_DMA+0x15c>)
 8003ff4:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA Tx abort callback */
    hsai->hdmatx->XferAbortCallback = NULL;
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003ffa:	2200      	movs	r2, #0
 8003ffc:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the Tx DMA Stream */
    if (HAL_DMA_Start_IT(hsai->hdmatx, (uint32_t)hsai->pBuffPtr, (uint32_t)&hsai->Instance->DR, hsai->XferSize) != HAL_OK)
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004006:	4619      	mov	r1, r3
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	331c      	adds	r3, #28
 800400e:	461a      	mov	r2, r3
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8004016:	f7fd fa71 	bl	80014fc <HAL_DMA_Start_IT>
 800401a:	4603      	mov	r3, r0
 800401c:	2b00      	cmp	r3, #0
 800401e:	d005      	beq.n	800402c <HAL_SAI_Transmit_DMA+0xbc>
    {
      __HAL_UNLOCK(hsai);
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	2200      	movs	r2, #0
 8004024:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
      return  HAL_ERROR;
 8004028:	2301      	movs	r3, #1
 800402a:	e047      	b.n	80040bc <HAL_SAI_Transmit_DMA+0x14c>
    }

    /* Enable the interrupts for error handling */
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800402c:	2100      	movs	r1, #0
 800402e:	68f8      	ldr	r0, [r7, #12]
 8004030:	f000 f98c 	bl	800434c <SAI_InterruptFlag>
 8004034:	4601      	mov	r1, r0
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	691a      	ldr	r2, [r3, #16]
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	430a      	orrs	r2, r1
 8004042:	611a      	str	r2, [r3, #16]

    /* Enable SAI Tx DMA Request */
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	681a      	ldr	r2, [r3, #0]
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8004052:	601a      	str	r2, [r3, #0]

    /* Wait until FIFO is not empty */
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
 8004054:	e015      	b.n	8004082 <HAL_SAI_Transmit_DMA+0x112>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > SAI_LONG_TIMEOUT)
 8004056:	f7fd f857 	bl	8001108 <HAL_GetTick>
 800405a:	4602      	mov	r2, r0
 800405c:	697b      	ldr	r3, [r7, #20]
 800405e:	1ad3      	subs	r3, r2, r3
 8004060:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004064:	d90d      	bls.n	8004082 <HAL_SAI_Transmit_DMA+0x112>
      {
        /* Update error code */
        hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800406c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

        /* Process Unlocked */
        __HAL_UNLOCK(hsai);
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	2200      	movs	r2, #0
 800407a:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800407e:	2303      	movs	r3, #3
 8004080:	e01c      	b.n	80040bc <HAL_SAI_Transmit_DMA+0x14c>
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	695b      	ldr	r3, [r3, #20]
 8004088:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 800408c:	2b00      	cmp	r3, #0
 800408e:	d0e2      	beq.n	8004056 <HAL_SAI_Transmit_DMA+0xe6>
      }
    }

    /* Check if the SAI is already enabled */
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == 0U)
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800409a:	2b00      	cmp	r3, #0
 800409c:	d107      	bne.n	80040ae <HAL_SAI_Transmit_DMA+0x13e>
    {
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	681a      	ldr	r2, [r3, #0]
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 80040ac:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	2200      	movs	r2, #0
 80040b2:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 80040b6:	2300      	movs	r3, #0
 80040b8:	e000      	b.n	80040bc <HAL_SAI_Transmit_DMA+0x14c>
  }
  else
  {
    return HAL_BUSY;
 80040ba:	2302      	movs	r3, #2
  }
}
 80040bc:	4618      	mov	r0, r3
 80040be:	3718      	adds	r7, #24
 80040c0:	46bd      	mov	sp, r7
 80040c2:	bd80      	pop	{r7, pc}
 80040c4:	0800448f 	.word	0x0800448f
 80040c8:	08004431 	.word	0x08004431
 80040cc:	080044ab 	.word	0x080044ab

080040d0 <HAL_SAI_ErrorCallback>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
__weak void HAL_SAI_ErrorCallback(SAI_HandleTypeDef *hsai)
{
 80040d0:	b480      	push	{r7}
 80040d2:	b083      	sub	sp, #12
 80040d4:	af00      	add	r7, sp, #0
 80040d6:	6078      	str	r0, [r7, #4]
  UNUSED(hsai);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_ErrorCallback could be implemented in the user file
   */
}
 80040d8:	bf00      	nop
 80040da:	370c      	adds	r7, #12
 80040dc:	46bd      	mov	sp, r7
 80040de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e2:	4770      	bx	lr

080040e4 <SAI_InitI2S>:
  * @param  nbslot number of slot minimum value is 2 and max is 16.
  *         the value must be a multiple of 2.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitI2S(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 80040e4:	b480      	push	{r7}
 80040e6:	b087      	sub	sp, #28
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	60f8      	str	r0, [r7, #12]
 80040ec:	60b9      	str	r1, [r7, #8]
 80040ee:	607a      	str	r2, [r7, #4]
 80040f0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80040f2:	2300      	movs	r3, #0
 80040f4:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	2200      	movs	r2, #0
 80040fa:	631a      	str	r2, [r3, #48]	@ 0x30
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	2200      	movs	r2, #0
 8004100:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	685b      	ldr	r3, [r3, #4]
 8004106:	2b00      	cmp	r3, #0
 8004108:	d003      	beq.n	8004112 <SAI_InitI2S+0x2e>
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	685b      	ldr	r3, [r3, #4]
 800410e:	2b02      	cmp	r3, #2
 8004110:	d103      	bne.n	800411a <SAI_InitI2S+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	2200      	movs	r2, #0
 8004116:	63da      	str	r2, [r3, #60]	@ 0x3c
 8004118:	e002      	b.n	8004120 <SAI_InitI2S+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	2201      	movs	r2, #1
 800411e:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_CHANNEL_IDENTIFICATION;
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8004126:	649a      	str	r2, [r3, #72]	@ 0x48
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800412e:	661a      	str	r2, [r3, #96]	@ 0x60
  hsai->SlotInit.FirstBitOffset  = 0;
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	2200      	movs	r2, #0
 8004134:	655a      	str	r2, [r3, #84]	@ 0x54
  hsai->SlotInit.SlotNumber      = nbslot;
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	683a      	ldr	r2, [r7, #0]
 800413a:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* in IS2 the number of slot must be even */
  if ((nbslot & 0x1U) != 0U)
 800413c:	683b      	ldr	r3, [r7, #0]
 800413e:	f003 0301 	and.w	r3, r3, #1
 8004142:	2b00      	cmp	r3, #0
 8004144:	d001      	beq.n	800414a <SAI_InitI2S+0x66>
  {
    return HAL_ERROR;
 8004146:	2301      	movs	r3, #1
 8004148:	e077      	b.n	800423a <SAI_InitI2S+0x156>
  }

  if (protocol == SAI_I2S_STANDARD)
 800414a:	68bb      	ldr	r3, [r7, #8]
 800414c:	2b00      	cmp	r3, #0
 800414e:	d107      	bne.n	8004160 <SAI_InitI2S+0x7c>
  {
    hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	2200      	movs	r2, #0
 8004154:	64da      	str	r2, [r3, #76]	@ 0x4c
    hsai->FrameInit.FSOffset   = SAI_FS_BEFOREFIRSTBIT;
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800415c:	651a      	str	r2, [r3, #80]	@ 0x50
 800415e:	e006      	b.n	800416e <SAI_InitI2S+0x8a>
  }
  else
  {
     /* SAI_I2S_MSBJUSTIFIED or SAI_I2S_LSBJUSTIFIED */
    hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_HIGH;
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8004166:	64da      	str	r2, [r3, #76]	@ 0x4c
    hsai->FrameInit.FSOffset   = SAI_FS_FIRSTBIT;
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	2200      	movs	r2, #0
 800416c:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  /* Frame definition */
  switch (datasize)
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	2b03      	cmp	r3, #3
 8004172:	d84f      	bhi.n	8004214 <SAI_InitI2S+0x130>
 8004174:	a201      	add	r2, pc, #4	@ (adr r2, 800417c <SAI_InitI2S+0x98>)
 8004176:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800417a:	bf00      	nop
 800417c:	0800418d 	.word	0x0800418d
 8004180:	080041af 	.word	0x080041af
 8004184:	080041d1 	.word	0x080041d1
 8004188:	080041f3 	.word	0x080041f3
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	2280      	movs	r2, #128	@ 0x80
 8004190:	635a      	str	r2, [r3, #52]	@ 0x34
      hsai->FrameInit.FrameLength = 32U * (nbslot / 2U);
 8004192:	683b      	ldr	r3, [r7, #0]
 8004194:	085b      	lsrs	r3, r3, #1
 8004196:	015a      	lsls	r2, r3, #5
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	641a      	str	r2, [r3, #64]	@ 0x40
      hsai->FrameInit.ActiveFrameLength = 16U * (nbslot / 2U);
 800419c:	683b      	ldr	r3, [r7, #0]
 800419e:	085b      	lsrs	r3, r3, #1
 80041a0:	011a      	lsls	r2, r3, #4
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	645a      	str	r2, [r3, #68]	@ 0x44
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	2240      	movs	r2, #64	@ 0x40
 80041aa:	659a      	str	r2, [r3, #88]	@ 0x58
      break;
 80041ac:	e035      	b.n	800421a <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	2280      	movs	r2, #128	@ 0x80
 80041b2:	635a      	str	r2, [r3, #52]	@ 0x34
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 80041b4:	683b      	ldr	r3, [r7, #0]
 80041b6:	085b      	lsrs	r3, r3, #1
 80041b8:	019a      	lsls	r2, r3, #6
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	641a      	str	r2, [r3, #64]	@ 0x40
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 80041be:	683b      	ldr	r3, [r7, #0]
 80041c0:	085b      	lsrs	r3, r3, #1
 80041c2:	015a      	lsls	r2, r3, #5
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	645a      	str	r2, [r3, #68]	@ 0x44
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	2280      	movs	r2, #128	@ 0x80
 80041cc:	659a      	str	r2, [r3, #88]	@ 0x58
      break;
 80041ce:	e024      	b.n	800421a <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_24BIT:
      hsai->Init.DataSize = SAI_DATASIZE_24;
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	22c0      	movs	r2, #192	@ 0xc0
 80041d4:	635a      	str	r2, [r3, #52]	@ 0x34
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 80041d6:	683b      	ldr	r3, [r7, #0]
 80041d8:	085b      	lsrs	r3, r3, #1
 80041da:	019a      	lsls	r2, r3, #6
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	641a      	str	r2, [r3, #64]	@ 0x40
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 80041e0:	683b      	ldr	r3, [r7, #0]
 80041e2:	085b      	lsrs	r3, r3, #1
 80041e4:	015a      	lsls	r2, r3, #5
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	645a      	str	r2, [r3, #68]	@ 0x44
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	2280      	movs	r2, #128	@ 0x80
 80041ee:	659a      	str	r2, [r3, #88]	@ 0x58
      break;
 80041f0:	e013      	b.n	800421a <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	22e0      	movs	r2, #224	@ 0xe0
 80041f6:	635a      	str	r2, [r3, #52]	@ 0x34
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 80041f8:	683b      	ldr	r3, [r7, #0]
 80041fa:	085b      	lsrs	r3, r3, #1
 80041fc:	019a      	lsls	r2, r3, #6
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	641a      	str	r2, [r3, #64]	@ 0x40
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 8004202:	683b      	ldr	r3, [r7, #0]
 8004204:	085b      	lsrs	r3, r3, #1
 8004206:	015a      	lsls	r2, r3, #5
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	645a      	str	r2, [r3, #68]	@ 0x44
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	2280      	movs	r2, #128	@ 0x80
 8004210:	659a      	str	r2, [r3, #88]	@ 0x58
      break;
 8004212:	e002      	b.n	800421a <SAI_InitI2S+0x136>
    default :
      status = HAL_ERROR;
 8004214:	2301      	movs	r3, #1
 8004216:	75fb      	strb	r3, [r7, #23]
      break;
 8004218:	bf00      	nop
  }
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 800421a:	68bb      	ldr	r3, [r7, #8]
 800421c:	2b02      	cmp	r3, #2
 800421e:	d10b      	bne.n	8004238 <SAI_InitI2S+0x154>
  {
    if (datasize == SAI_PROTOCOL_DATASIZE_16BITEXTENDED)
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	2b01      	cmp	r3, #1
 8004224:	d102      	bne.n	800422c <SAI_InitI2S+0x148>
    {
      hsai->SlotInit.FirstBitOffset = 16;
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	2210      	movs	r2, #16
 800422a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
    if (datasize == SAI_PROTOCOL_DATASIZE_24BIT)
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	2b02      	cmp	r3, #2
 8004230:	d102      	bne.n	8004238 <SAI_InitI2S+0x154>
    {
      hsai->SlotInit.FirstBitOffset = 8;
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	2208      	movs	r2, #8
 8004236:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  return status;
 8004238:	7dfb      	ldrb	r3, [r7, #23]
}
 800423a:	4618      	mov	r0, r3
 800423c:	371c      	adds	r7, #28
 800423e:	46bd      	mov	sp, r7
 8004240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004244:	4770      	bx	lr
 8004246:	bf00      	nop

08004248 <SAI_InitPCM>:
  * @param  datasize one of the supported datasize @ref SAI_Protocol_DataSize
  * @param  nbslot number of slot minimum value is 1 and the max is 16.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitPCM(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 8004248:	b480      	push	{r7}
 800424a:	b087      	sub	sp, #28
 800424c:	af00      	add	r7, sp, #0
 800424e:	60f8      	str	r0, [r7, #12]
 8004250:	60b9      	str	r1, [r7, #8]
 8004252:	607a      	str	r2, [r7, #4]
 8004254:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004256:	2300      	movs	r3, #0
 8004258:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	2200      	movs	r2, #0
 800425e:	631a      	str	r2, [r3, #48]	@ 0x30
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	2200      	movs	r2, #0
 8004264:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	685b      	ldr	r3, [r3, #4]
 800426a:	2b00      	cmp	r3, #0
 800426c:	d003      	beq.n	8004276 <SAI_InitPCM+0x2e>
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	685b      	ldr	r3, [r3, #4]
 8004272:	2b02      	cmp	r3, #2
 8004274:	d103      	bne.n	800427e <SAI_InitPCM+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	2201      	movs	r2, #1
 800427a:	63da      	str	r2, [r3, #60]	@ 0x3c
 800427c:	e002      	b.n	8004284 <SAI_InitPCM+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	2200      	movs	r2, #0
 8004282:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_STARTFRAME;
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	2200      	movs	r2, #0
 8004288:	649a      	str	r2, [r3, #72]	@ 0x48
  hsai->FrameInit.FSPolarity     = SAI_FS_ACTIVE_HIGH;
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8004290:	64da      	str	r2, [r3, #76]	@ 0x4c
  hsai->FrameInit.FSOffset       = SAI_FS_BEFOREFIRSTBIT;
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8004298:	651a      	str	r2, [r3, #80]	@ 0x50
  hsai->SlotInit.FirstBitOffset  = 0;
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	2200      	movs	r2, #0
 800429e:	655a      	str	r2, [r3, #84]	@ 0x54
  hsai->SlotInit.SlotNumber      = nbslot;
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	683a      	ldr	r2, [r7, #0]
 80042a4:	65da      	str	r2, [r3, #92]	@ 0x5c
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80042ac:	661a      	str	r2, [r3, #96]	@ 0x60

  if (protocol == SAI_PCM_SHORT)
 80042ae:	68bb      	ldr	r3, [r7, #8]
 80042b0:	2b04      	cmp	r3, #4
 80042b2:	d103      	bne.n	80042bc <SAI_InitPCM+0x74>
  {
    hsai->FrameInit.ActiveFrameLength = 1;
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	2201      	movs	r2, #1
 80042b8:	645a      	str	r2, [r3, #68]	@ 0x44
 80042ba:	e002      	b.n	80042c2 <SAI_InitPCM+0x7a>
  }
  else
  {
    /* SAI_PCM_LONG */
    hsai->FrameInit.ActiveFrameLength = 13;
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	220d      	movs	r2, #13
 80042c0:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  switch (datasize)
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	2b03      	cmp	r3, #3
 80042c6:	d837      	bhi.n	8004338 <SAI_InitPCM+0xf0>
 80042c8:	a201      	add	r2, pc, #4	@ (adr r2, 80042d0 <SAI_InitPCM+0x88>)
 80042ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042ce:	bf00      	nop
 80042d0:	080042e1 	.word	0x080042e1
 80042d4:	080042f7 	.word	0x080042f7
 80042d8:	0800430d 	.word	0x0800430d
 80042dc:	08004323 	.word	0x08004323
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	2280      	movs	r2, #128	@ 0x80
 80042e4:	635a      	str	r2, [r3, #52]	@ 0x34
      hsai->FrameInit.FrameLength = 16U * nbslot;
 80042e6:	683b      	ldr	r3, [r7, #0]
 80042e8:	011a      	lsls	r2, r3, #4
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	641a      	str	r2, [r3, #64]	@ 0x40
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	2240      	movs	r2, #64	@ 0x40
 80042f2:	659a      	str	r2, [r3, #88]	@ 0x58
      break;
 80042f4:	e023      	b.n	800433e <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	2280      	movs	r2, #128	@ 0x80
 80042fa:	635a      	str	r2, [r3, #52]	@ 0x34
      hsai->FrameInit.FrameLength = 32U * nbslot;
 80042fc:	683b      	ldr	r3, [r7, #0]
 80042fe:	015a      	lsls	r2, r3, #5
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	641a      	str	r2, [r3, #64]	@ 0x40
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	2280      	movs	r2, #128	@ 0x80
 8004308:	659a      	str	r2, [r3, #88]	@ 0x58
      break;
 800430a:	e018      	b.n	800433e <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_24BIT :
      hsai->Init.DataSize = SAI_DATASIZE_24;
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	22c0      	movs	r2, #192	@ 0xc0
 8004310:	635a      	str	r2, [r3, #52]	@ 0x34
      hsai->FrameInit.FrameLength = 32U * nbslot;
 8004312:	683b      	ldr	r3, [r7, #0]
 8004314:	015a      	lsls	r2, r3, #5
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	641a      	str	r2, [r3, #64]	@ 0x40
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	2280      	movs	r2, #128	@ 0x80
 800431e:	659a      	str	r2, [r3, #88]	@ 0x58
      break;
 8004320:	e00d      	b.n	800433e <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	22e0      	movs	r2, #224	@ 0xe0
 8004326:	635a      	str	r2, [r3, #52]	@ 0x34
      hsai->FrameInit.FrameLength = 32U * nbslot;
 8004328:	683b      	ldr	r3, [r7, #0]
 800432a:	015a      	lsls	r2, r3, #5
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	641a      	str	r2, [r3, #64]	@ 0x40
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	2280      	movs	r2, #128	@ 0x80
 8004334:	659a      	str	r2, [r3, #88]	@ 0x58
      break;
 8004336:	e002      	b.n	800433e <SAI_InitPCM+0xf6>
    default :
      status = HAL_ERROR;
 8004338:	2301      	movs	r3, #1
 800433a:	75fb      	strb	r3, [r7, #23]
      break;
 800433c:	bf00      	nop
  }

  return status;
 800433e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004340:	4618      	mov	r0, r3
 8004342:	371c      	adds	r7, #28
 8004344:	46bd      	mov	sp, r7
 8004346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800434a:	4770      	bx	lr

0800434c <SAI_InterruptFlag>:
  *              the configuration information for SAI module.
  * @param  mode SAI_MODE_DMA or SAI_MODE_IT
  * @retval the list of the IT flag to enable
  */
static uint32_t SAI_InterruptFlag(const SAI_HandleTypeDef *hsai, SAI_ModeTypedef mode)
{
 800434c:	b480      	push	{r7}
 800434e:	b085      	sub	sp, #20
 8004350:	af00      	add	r7, sp, #0
 8004352:	6078      	str	r0, [r7, #4]
 8004354:	460b      	mov	r3, r1
 8004356:	70fb      	strb	r3, [r7, #3]
  uint32_t tmpIT = SAI_IT_OVRUDR;
 8004358:	2301      	movs	r3, #1
 800435a:	60fb      	str	r3, [r7, #12]

  if (mode == SAI_MODE_IT)
 800435c:	78fb      	ldrb	r3, [r7, #3]
 800435e:	2b01      	cmp	r3, #1
 8004360:	d103      	bne.n	800436a <SAI_InterruptFlag+0x1e>
  {
    tmpIT |= SAI_IT_FREQ;
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	f043 0308 	orr.w	r3, r3, #8
 8004368:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800436e:	2b08      	cmp	r3, #8
 8004370:	d10b      	bne.n	800438a <SAI_InterruptFlag+0x3e>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	685b      	ldr	r3, [r3, #4]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 8004376:	2b03      	cmp	r3, #3
 8004378:	d003      	beq.n	8004382 <SAI_InterruptFlag+0x36>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	685b      	ldr	r3, [r3, #4]
 800437e:	2b01      	cmp	r3, #1
 8004380:	d103      	bne.n	800438a <SAI_InterruptFlag+0x3e>
  {
    tmpIT |= SAI_IT_CNRDY;
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	f043 0310 	orr.w	r3, r3, #16
 8004388:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	685b      	ldr	r3, [r3, #4]
 800438e:	2b03      	cmp	r3, #3
 8004390:	d003      	beq.n	800439a <SAI_InterruptFlag+0x4e>
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	685b      	ldr	r3, [r3, #4]
 8004396:	2b02      	cmp	r3, #2
 8004398:	d104      	bne.n	80043a4 <SAI_InterruptFlag+0x58>
  {
    tmpIT |= SAI_IT_AFSDET | SAI_IT_LFSDET;
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80043a0:	60fb      	str	r3, [r7, #12]
 80043a2:	e003      	b.n	80043ac <SAI_InterruptFlag+0x60>
  }
  else
  {
    /* hsai has been configured in master mode */
    tmpIT |= SAI_IT_WCKCFG;
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	f043 0304 	orr.w	r3, r3, #4
 80043aa:	60fb      	str	r3, [r7, #12]
  }
  return tmpIT;
 80043ac:	68fb      	ldr	r3, [r7, #12]
}
 80043ae:	4618      	mov	r0, r3
 80043b0:	3714      	adds	r7, #20
 80043b2:	46bd      	mov	sp, r7
 80043b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b8:	4770      	bx	lr
	...

080043bc <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 80043bc:	b480      	push	{r7}
 80043be:	b085      	sub	sp, #20
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 80043c4:	4b18      	ldr	r3, [pc, #96]	@ (8004428 <SAI_Disable+0x6c>)
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	4a18      	ldr	r2, [pc, #96]	@ (800442c <SAI_Disable+0x70>)
 80043ca:	fba2 2303 	umull	r2, r3, r2, r3
 80043ce:	0b1b      	lsrs	r3, r3, #12
 80043d0:	009b      	lsls	r3, r3, #2
 80043d2:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 80043d4:	2300      	movs	r3, #0
 80043d6:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	681a      	ldr	r2, [r3, #0]
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 80043e6:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d10a      	bne.n	8004404 <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80043f4:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      status = HAL_TIMEOUT;
 80043fe:	2303      	movs	r3, #3
 8004400:	72fb      	strb	r3, [r7, #11]
      break;
 8004402:	e009      	b.n	8004418 <SAI_Disable+0x5c>
    }
    count--;
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	3b01      	subs	r3, #1
 8004408:	60fb      	str	r3, [r7, #12]
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004414:	2b00      	cmp	r3, #0
 8004416:	d1e7      	bne.n	80043e8 <SAI_Disable+0x2c>

  return status;
 8004418:	7afb      	ldrb	r3, [r7, #11]
}
 800441a:	4618      	mov	r0, r3
 800441c:	3714      	adds	r7, #20
 800441e:	46bd      	mov	sp, r7
 8004420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004424:	4770      	bx	lr
 8004426:	bf00      	nop
 8004428:	20000000 	.word	0x20000000
 800442c:	95cbec1b 	.word	0x95cbec1b

08004430 <SAI_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 8004430:	b580      	push	{r7, lr}
 8004432:	b084      	sub	sp, #16
 8004434:	af00      	add	r7, sp, #0
 8004436:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800443c:	60fb      	str	r3, [r7, #12]

  if (hdma->Init.Mode != DMA_CIRCULAR)
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	69db      	ldr	r3, [r3, #28]
 8004442:	2b20      	cmp	r3, #32
 8004444:	d01c      	beq.n	8004480 <SAI_DMATxCplt+0x50>
  {
    hsai->XferCount = 0;
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	2200      	movs	r2, #0
 800444a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

    /* Disable SAI Tx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	681a      	ldr	r2, [r3, #0]
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 800445c:	601a      	str	r2, [r3, #0]

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800445e:	2100      	movs	r1, #0
 8004460:	68f8      	ldr	r0, [r7, #12]
 8004462:	f7ff ff73 	bl	800434c <SAI_InterruptFlag>
 8004466:	4603      	mov	r3, r0
 8004468:	43d9      	mvns	r1, r3
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	691a      	ldr	r2, [r3, #16]
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	400a      	ands	r2, r1
 8004476:	611a      	str	r2, [r3, #16]

    hsai->State = HAL_SAI_STATE_READY;
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	2201      	movs	r2, #1
 800447c:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxCpltCallback(hsai);
#else
  HAL_SAI_TxCpltCallback(hsai);
 8004480:	68f8      	ldr	r0, [r7, #12]
 8004482:	f7fc fa49 	bl	8000918 <HAL_SAI_TxCpltCallback>
#endif
}
 8004486:	bf00      	nop
 8004488:	3710      	adds	r7, #16
 800448a:	46bd      	mov	sp, r7
 800448c:	bd80      	pop	{r7, pc}

0800448e <SAI_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800448e:	b580      	push	{r7, lr}
 8004490:	b084      	sub	sp, #16
 8004492:	af00      	add	r7, sp, #0
 8004494:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800449a:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxHalfCpltCallback(hsai);
#else
  HAL_SAI_TxHalfCpltCallback(hsai);
 800449c:	68f8      	ldr	r0, [r7, #12]
 800449e:	f7fc fa4b 	bl	8000938 <HAL_SAI_TxHalfCpltCallback>
#endif
}
 80044a2:	bf00      	nop
 80044a4:	3710      	adds	r7, #16
 80044a6:	46bd      	mov	sp, r7
 80044a8:	bd80      	pop	{r7, pc}

080044aa <SAI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAError(DMA_HandleTypeDef *hdma)
{
 80044aa:	b580      	push	{r7, lr}
 80044ac:	b084      	sub	sp, #16
 80044ae:	af00      	add	r7, sp, #0
 80044b0:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044b6:	60fb      	str	r3, [r7, #12]

  /* Set SAI error code */
  hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80044be:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Disable the SAI DMA request */
  hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	681a      	ldr	r2, [r3, #0]
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 80044d6:	601a      	str	r2, [r3, #0]

  /* Disable SAI peripheral */
  /* No need to check return value because state will be updated and HAL_SAI_ErrorCallback will be called later */
  (void) SAI_Disable(hsai);
 80044d8:	68f8      	ldr	r0, [r7, #12]
 80044da:	f7ff ff6f 	bl	80043bc <SAI_Disable>

  /* Set the SAI state ready to be able to start again the process */
  hsai->State = HAL_SAI_STATE_READY;
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	2201      	movs	r2, #1
 80044e2:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

  /* Initialize XferCount */
  hsai->XferCount = 0U;
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	2200      	movs	r2, #0
 80044ea:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->ErrorCallback(hsai);
#else
  HAL_SAI_ErrorCallback(hsai);
 80044ee:	68f8      	ldr	r0, [r7, #12]
 80044f0:	f7ff fdee 	bl	80040d0 <HAL_SAI_ErrorCallback>
#endif
}
 80044f4:	bf00      	nop
 80044f6:	3710      	adds	r7, #16
 80044f8:	46bd      	mov	sp, r7
 80044fa:	bd80      	pop	{r7, pc}

080044fc <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 80044fc:	b580      	push	{r7, lr}
 80044fe:	b082      	sub	sp, #8
 8004500:	af00      	add	r7, sp, #0
 8004502:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade, unitsize;
  uint32_t tickstart;
#endif

  /* Check the SD handle allocation */
  if(hsd == NULL)
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	2b00      	cmp	r3, #0
 8004508:	d101      	bne.n	800450e <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800450a:	2301      	movs	r3, #1
 800450c:	e022      	b.n	8004554 <HAL_SD_Init+0x58>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8004514:	b2db      	uxtb	r3, r3
 8004516:	2b00      	cmp	r3, #0
 8004518:	d105      	bne.n	8004526 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	2200      	movs	r2, #0
 800451e:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8004520:	6878      	ldr	r0, [r7, #4]
 8004522:	f7fc faa5 	bl	8000a70 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	2203      	movs	r2, #3
 800452a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800452e:	6878      	ldr	r0, [r7, #4]
 8004530:	f000 f814 	bl	800455c <HAL_SD_InitCard>
 8004534:	4603      	mov	r3, r0
 8004536:	2b00      	cmp	r3, #0
 8004538:	d001      	beq.n	800453e <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800453a:	2301      	movs	r3, #1
 800453c:	e00a      	b.n	8004554 <HAL_SD_Init+0x58>
    }
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	2200      	movs	r2, #0
 8004542:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	2200      	movs	r2, #0
 8004548:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	2201      	movs	r2, #1
 800454e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004552:	2300      	movs	r3, #0
}
 8004554:	4618      	mov	r0, r3
 8004556:	3708      	adds	r7, #8
 8004558:	46bd      	mov	sp, r7
 800455a:	bd80      	pop	{r7, pc}

0800455c <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800455c:	b5b0      	push	{r4, r5, r7, lr}
 800455e:	b08e      	sub	sp, #56	@ 0x38
 8004560:	af04      	add	r7, sp, #16
 8004562:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8004564:	2300      	movs	r3, #0
 8004566:	60bb      	str	r3, [r7, #8]
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 8004568:	2300      	movs	r3, #0
 800456a:	60fb      	str	r3, [r7, #12]
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800456c:	2300      	movs	r3, #0
 800456e:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8004570:	2300      	movs	r3, #0
 8004572:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8004574:	2300      	movs	r3, #0
 8004576:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC1);
 8004578:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 800457c:	f7fe fd0c 	bl	8002f98 <HAL_RCCEx_GetPeriphCLKFreq>
 8004580:	6278      	str	r0, [r7, #36]	@ 0x24
  if (sdmmc_clk == 0U)
 8004582:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004584:	2b00      	cmp	r3, #0
 8004586:	d109      	bne.n	800459c <HAL_SD_InitCard+0x40>
  {
      hsd->State = HAL_SD_STATE_READY;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	2201      	movs	r2, #1
 800458c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8004596:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 8004598:	2301      	movs	r3, #1
 800459a:	e07b      	b.n	8004694 <HAL_SD_InitCard+0x138>
  }
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  Init.ClockDiv = ((sdmmc_clk / SD_INIT_FREQ) - 2U);
 800459c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800459e:	09db      	lsrs	r3, r3, #7
 80045a0:	4a3e      	ldr	r2, [pc, #248]	@ (800469c <HAL_SD_InitCard+0x140>)
 80045a2:	fba2 2303 	umull	r2, r3, r2, r3
 80045a6:	091b      	lsrs	r3, r3, #4
 80045a8:	3b02      	subs	r3, #2
 80045aa:	61fb      	str	r3, [r7, #28]
    hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681d      	ldr	r5, [r3, #0]
 80045b0:	466c      	mov	r4, sp
 80045b2:	f107 0314 	add.w	r3, r7, #20
 80045b6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80045ba:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80045be:	f107 0308 	add.w	r3, r7, #8
 80045c2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80045c4:	4628      	mov	r0, r5
 80045c6:	f001 fefb 	bl	80063c0 <SDMMC_Init>

#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	685a      	ldr	r2, [r3, #4]
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80045d8:	605a      	str	r2, [r3, #4]
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	4618      	mov	r0, r3
 80045e0:	f001 ff39 	bl	8006456 <SDMMC_PowerState_ON>

#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	685a      	ldr	r2, [r3, #4]
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80045f2:	605a      	str	r2, [r3, #4]
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  sdmmc_clk = sdmmc_clk/(Init.ClockDiv + 2U);
 80045f4:	69fb      	ldr	r3, [r7, #28]
 80045f6:	3302      	adds	r3, #2
 80045f8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80045fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80045fe:	627b      	str	r3, [r7, #36]	@ 0x24
#else
  sdmmc_clk = sdmmc_clk/(2U*Init.ClockDiv);
#endif
  HAL_Delay(1U+ (74U*1000U/(sdmmc_clk)));
 8004600:	4a27      	ldr	r2, [pc, #156]	@ (80046a0 <HAL_SD_InitCard+0x144>)
 8004602:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004604:	fbb2 f3f3 	udiv	r3, r2, r3
 8004608:	3301      	adds	r3, #1
 800460a:	4618      	mov	r0, r3
 800460c:	f7fc fd88 	bl	8001120 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8004610:	6878      	ldr	r0, [r7, #4]
 8004612:	f000 ff23 	bl	800545c <SD_PowerON>
 8004616:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004618:	6a3b      	ldr	r3, [r7, #32]
 800461a:	2b00      	cmp	r3, #0
 800461c:	d00b      	beq.n	8004636 <HAL_SD_InitCard+0xda>
  {
    hsd->State = HAL_SD_STATE_READY;
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	2201      	movs	r2, #1
 8004622:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800462a:	6a3b      	ldr	r3, [r7, #32]
 800462c:	431a      	orrs	r2, r3
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8004632:	2301      	movs	r3, #1
 8004634:	e02e      	b.n	8004694 <HAL_SD_InitCard+0x138>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8004636:	6878      	ldr	r0, [r7, #4]
 8004638:	f000 fe42 	bl	80052c0 <SD_InitCard>
 800463c:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800463e:	6a3b      	ldr	r3, [r7, #32]
 8004640:	2b00      	cmp	r3, #0
 8004642:	d00b      	beq.n	800465c <HAL_SD_InitCard+0x100>
  {
    hsd->State = HAL_SD_STATE_READY;
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	2201      	movs	r2, #1
 8004648:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004650:	6a3b      	ldr	r3, [r7, #32]
 8004652:	431a      	orrs	r2, r3
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8004658:	2301      	movs	r3, #1
 800465a:	e01b      	b.n	8004694 <HAL_SD_InitCard+0x138>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8004664:	4618      	mov	r0, r3
 8004666:	f001 ff89 	bl	800657c <SDMMC_CmdBlockLength>
 800466a:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800466c:	6a3b      	ldr	r3, [r7, #32]
 800466e:	2b00      	cmp	r3, #0
 8004670:	d00f      	beq.n	8004692 <HAL_SD_InitCard+0x136>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	4a0b      	ldr	r2, [pc, #44]	@ (80046a4 <HAL_SD_InitCard+0x148>)
 8004678:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800467e:	6a3b      	ldr	r3, [r7, #32]
 8004680:	431a      	orrs	r2, r3
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	2201      	movs	r2, #1
 800468a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800468e:	2301      	movs	r3, #1
 8004690:	e000      	b.n	8004694 <HAL_SD_InitCard+0x138>
  }

  return HAL_OK;
 8004692:	2300      	movs	r3, #0
}
 8004694:	4618      	mov	r0, r3
 8004696:	3728      	adds	r7, #40	@ 0x28
 8004698:	46bd      	mov	sp, r7
 800469a:	bdb0      	pop	{r4, r5, r7, pc}
 800469c:	014f8b59 	.word	0x014f8b59
 80046a0:	00012110 	.word	0x00012110
 80046a4:	004005ff 	.word	0x004005ff

080046a8 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd Block Address from where data is to be read
  * @param  NumberOfBlocks Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 80046a8:	b580      	push	{r7, lr}
 80046aa:	b08c      	sub	sp, #48	@ 0x30
 80046ac:	af00      	add	r7, sp, #0
 80046ae:	60f8      	str	r0, [r7, #12]
 80046b0:	60b9      	str	r1, [r7, #8]
 80046b2:	607a      	str	r2, [r7, #4]
 80046b4:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	62bb      	str	r3, [r7, #40]	@ 0x28

  if(NULL == pData)
 80046ba:	68bb      	ldr	r3, [r7, #8]
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d107      	bne.n	80046d0 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046c4:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 80046cc:	2301      	movs	r3, #1
 80046ce:	e0a9      	b.n	8004824 <HAL_SD_ReadBlocks_DMA+0x17c>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80046d6:	b2db      	uxtb	r3, r3
 80046d8:	2b01      	cmp	r3, #1
 80046da:	f040 80a2 	bne.w	8004822 <HAL_SD_ReadBlocks_DMA+0x17a>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	2200      	movs	r2, #0
 80046e2:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80046e4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80046e6:	683b      	ldr	r3, [r7, #0]
 80046e8:	441a      	add	r2, r3
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80046ee:	429a      	cmp	r2, r3
 80046f0:	d907      	bls.n	8004702 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046f6:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 80046fe:	2301      	movs	r3, #1
 8004700:	e090      	b.n	8004824 <HAL_SD_ReadBlocks_DMA+0x17c>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	2203      	movs	r2, #3
 8004706:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	2200      	movs	r2, #0
 8004710:	62da      	str	r2, [r3, #44]	@ 0x2c

#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004716:	4a45      	ldr	r2, [pc, #276]	@ (800482c <HAL_SD_ReadBlocks_DMA+0x184>)
 8004718:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800471e:	4a44      	ldr	r2, [pc, #272]	@ (8004830 <HAL_SD_ReadBlocks_DMA+0x188>)
 8004720:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004726:	2200      	movs	r2, #0
 8004728:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	3380      	adds	r3, #128	@ 0x80
 8004734:	4619      	mov	r1, r3
 8004736:	68ba      	ldr	r2, [r7, #8]
 8004738:	683b      	ldr	r3, [r7, #0]
 800473a:	025b      	lsls	r3, r3, #9
 800473c:	089b      	lsrs	r3, r3, #2
 800473e:	f7fc fedd 	bl	80014fc <HAL_DMA_Start_IT>
 8004742:	4603      	mov	r3, r0
 8004744:	2b00      	cmp	r3, #0
 8004746:	d00f      	beq.n	8004768 <HAL_SD_ReadBlocks_DMA+0xc0>
    {
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	4a39      	ldr	r2, [pc, #228]	@ (8004834 <HAL_SD_ReadBlocks_DMA+0x18c>)
 800474e:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004754:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	2201      	movs	r2, #1
 8004760:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 8004764:	2301      	movs	r3, #1
 8004766:	e05d      	b.n	8004824 <HAL_SD_ReadBlocks_DMA+0x17c>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	f042 0208 	orr.w	r2, r2, #8
 8004776:	62da      	str	r2, [r3, #44]	@ 0x2c
#else
      hsd->pRxBuffPtr = pData;
      hsd->RxXferSize = BLOCKSIZE * NumberOfBlocks;
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800477c:	2b01      	cmp	r3, #1
 800477e:	d002      	beq.n	8004786 <HAL_SD_ReadBlocks_DMA+0xde>
      {
        add *= 512U;
 8004780:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004782:	025b      	lsls	r3, r3, #9
 8004784:	62bb      	str	r3, [r7, #40]	@ 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8004786:	f04f 33ff 	mov.w	r3, #4294967295
 800478a:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800478c:	683b      	ldr	r3, [r7, #0]
 800478e:	025b      	lsls	r3, r3, #9
 8004790:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8004792:	2390      	movs	r3, #144	@ 0x90
 8004794:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8004796:	2302      	movs	r3, #2
 8004798:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800479a:	2300      	movs	r3, #0
 800479c:	623b      	str	r3, [r7, #32]
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      config.DPSM          = SDMMC_DPSM_DISABLE;
#else
      config.DPSM          = SDMMC_DPSM_ENABLE;
 800479e:	2301      	movs	r3, #1
 80047a0:	627b      	str	r3, [r7, #36]	@ 0x24
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	f107 0210 	add.w	r2, r7, #16
 80047aa:	4611      	mov	r1, r2
 80047ac:	4618      	mov	r0, r3
 80047ae:	f001 feb9 	bl	8006524 <SDMMC_ConfigData>
      hsd->Instance->IDMABASE0 = (uint32_t) pData ;
      hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 80047b2:	683b      	ldr	r3, [r7, #0]
 80047b4:	2b01      	cmp	r3, #1
 80047b6:	d90a      	bls.n	80047ce <HAL_SD_ReadBlocks_DMA+0x126>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	2282      	movs	r2, #130	@ 0x82
 80047bc:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80047c4:	4618      	mov	r0, r3
 80047c6:	f001 ff1d 	bl	8006604 <SDMMC_CmdReadMultiBlock>
 80047ca:	62f8      	str	r0, [r7, #44]	@ 0x2c
 80047cc:	e009      	b.n	80047e2 <HAL_SD_ReadBlocks_DMA+0x13a>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	2281      	movs	r2, #129	@ 0x81
 80047d2:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80047da:	4618      	mov	r0, r3
 80047dc:	f001 fef0 	bl	80065c0 <SDMMC_CmdReadSingleBlock>
 80047e0:	62f8      	str	r0, [r7, #44]	@ 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 80047e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d012      	beq.n	800480e <HAL_SD_ReadBlocks_DMA+0x166>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	4a11      	ldr	r2, [pc, #68]	@ (8004834 <HAL_SD_ReadBlocks_DMA+0x18c>)
 80047ee:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= errorstate;
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80047f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80047f6:	431a      	orrs	r2, r3
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State = HAL_SD_STATE_READY;
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	2201      	movs	r2, #1
 8004800:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	2200      	movs	r2, #0
 8004808:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_ERROR;
 800480a:	2301      	movs	r3, #1
 800480c:	e00a      	b.n	8004824 <HAL_SD_ReadBlocks_DMA+0x17c>
      }

      /* Enable transfer interrupts */
      __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	f442 7295 	orr.w	r2, r2, #298	@ 0x12a
 800481c:	63da      	str	r2, [r3, #60]	@ 0x3c

      return HAL_OK;
 800481e:	2300      	movs	r3, #0
 8004820:	e000      	b.n	8004824 <HAL_SD_ReadBlocks_DMA+0x17c>
    }
#endif
  }
  else
  {
    return HAL_BUSY;
 8004822:	2302      	movs	r3, #2
  }
}
 8004824:	4618      	mov	r0, r3
 8004826:	3730      	adds	r7, #48	@ 0x30
 8004828:	46bd      	mov	sp, r7
 800482a:	bd80      	pop	{r7, pc}
 800482c:	080050db 	.word	0x080050db
 8004830:	0800514d 	.word	0x0800514d
 8004834:	004005ff 	.word	0x004005ff

08004838 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd Block Address where data will be written
  * @param  NumberOfBlocks Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8004838:	b580      	push	{r7, lr}
 800483a:	b08c      	sub	sp, #48	@ 0x30
 800483c:	af00      	add	r7, sp, #0
 800483e:	60f8      	str	r0, [r7, #12]
 8004840:	60b9      	str	r1, [r7, #8]
 8004842:	607a      	str	r2, [r7, #4]
 8004844:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	62bb      	str	r3, [r7, #40]	@ 0x28

  if(NULL == pData)
 800484a:	68bb      	ldr	r3, [r7, #8]
 800484c:	2b00      	cmp	r3, #0
 800484e:	d107      	bne.n	8004860 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004854:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800485c:	2301      	movs	r3, #1
 800485e:	e0ac      	b.n	80049ba <HAL_SD_WriteBlocks_DMA+0x182>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8004866:	b2db      	uxtb	r3, r3
 8004868:	2b01      	cmp	r3, #1
 800486a:	f040 80a5 	bne.w	80049b8 <HAL_SD_WriteBlocks_DMA+0x180>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	2200      	movs	r2, #0
 8004872:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8004874:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004876:	683b      	ldr	r3, [r7, #0]
 8004878:	441a      	add	r2, r3
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800487e:	429a      	cmp	r2, r3
 8004880:	d907      	bls.n	8004892 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004886:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 800488e:	2301      	movs	r3, #1
 8004890:	e093      	b.n	80049ba <HAL_SD_WriteBlocks_DMA+0x182>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	2203      	movs	r2, #3
 8004896:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	2200      	movs	r2, #0
 80048a0:	62da      	str	r2, [r3, #44]	@ 0x2c
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    hsd->pTxBuffPtr = pData;
    hsd->TxXferSize = BLOCKSIZE * NumberOfBlocks;
#else
    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80048a6:	4a47      	ldr	r2, [pc, #284]	@ (80049c4 <HAL_SD_WriteBlocks_DMA+0x18c>)
 80048a8:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80048ae:	4a46      	ldr	r2, [pc, #280]	@ (80049c8 <HAL_SD_WriteBlocks_DMA+0x190>)
 80048b0:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80048b6:	2200      	movs	r2, #0
 80048b8:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80048be:	2b01      	cmp	r3, #1
 80048c0:	d002      	beq.n	80048c8 <HAL_SD_WriteBlocks_DMA+0x90>
    {
      add *= 512U;
 80048c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048c4:	025b      	lsls	r3, r3, #9
 80048c6:	62bb      	str	r3, [r7, #40]	@ 0x28
    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 80048c8:	683b      	ldr	r3, [r7, #0]
 80048ca:	2b01      	cmp	r3, #1
 80048cc:	d90a      	bls.n	80048e4 <HAL_SD_WriteBlocks_DMA+0xac>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	22a0      	movs	r2, #160	@ 0xa0
 80048d2:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80048da:	4618      	mov	r0, r3
 80048dc:	f001 fed6 	bl	800668c <SDMMC_CmdWriteMultiBlock>
 80048e0:	62f8      	str	r0, [r7, #44]	@ 0x2c
 80048e2:	e009      	b.n	80048f8 <HAL_SD_WriteBlocks_DMA+0xc0>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	2290      	movs	r2, #144	@ 0x90
 80048e8:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80048f0:	4618      	mov	r0, r3
 80048f2:	f001 fea9 	bl	8006648 <SDMMC_CmdWriteSingleBlock>
 80048f6:	62f8      	str	r0, [r7, #44]	@ 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 80048f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d012      	beq.n	8004924 <HAL_SD_WriteBlocks_DMA+0xec>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	4a32      	ldr	r2, [pc, #200]	@ (80049cc <HAL_SD_WriteBlocks_DMA+0x194>)
 8004904:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800490a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800490c:	431a      	orrs	r2, r3
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	2201      	movs	r2, #1
 8004916:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	2200      	movs	r2, #0
 800491e:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8004920:	2301      	movs	r3, #1
 8004922:	e04a      	b.n	80049ba <HAL_SD_WriteBlocks_DMA+0x182>
    }

#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
    /* Enable SDMMC DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	f042 0208 	orr.w	r2, r2, #8
 8004932:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8004938:	68b9      	ldr	r1, [r7, #8]
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	3380      	adds	r3, #128	@ 0x80
 8004940:	461a      	mov	r2, r3
 8004942:	683b      	ldr	r3, [r7, #0]
 8004944:	025b      	lsls	r3, r3, #9
 8004946:	089b      	lsrs	r3, r3, #2
 8004948:	f7fc fdd8 	bl	80014fc <HAL_DMA_Start_IT>
 800494c:	4603      	mov	r3, r0
 800494e:	2b00      	cmp	r3, #0
 8004950:	d012      	beq.n	8004978 <HAL_SD_WriteBlocks_DMA+0x140>
    {
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	4a1d      	ldr	r2, [pc, #116]	@ (80049cc <HAL_SD_WriteBlocks_DMA+0x194>)
 8004958:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800495e:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	2201      	movs	r2, #1
 800496a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	2200      	movs	r2, #0
 8004972:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8004974:	2301      	movs	r3, #1
 8004976:	e020      	b.n	80049ba <HAL_SD_WriteBlocks_DMA+0x182>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8004978:	f04f 33ff 	mov.w	r3, #4294967295
 800497c:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800497e:	683b      	ldr	r3, [r7, #0]
 8004980:	025b      	lsls	r3, r3, #9
 8004982:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8004984:	2390      	movs	r3, #144	@ 0x90
 8004986:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 8004988:	2300      	movs	r3, #0
 800498a:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800498c:	2300      	movs	r3, #0
 800498e:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 8004990:	2301      	movs	r3, #1
 8004992:	627b      	str	r3, [r7, #36]	@ 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	f107 0210 	add.w	r2, r7, #16
 800499c:	4611      	mov	r1, r2
 800499e:	4618      	mov	r0, r3
 80049a0:	f001 fdc0 	bl	8006524 <SDMMC_ConfigData>

      /* Enable SD Error interrupts */
      __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	f042 021a 	orr.w	r2, r2, #26
 80049b2:	63da      	str	r2, [r3, #60]	@ 0x3c
#else
      /* Enable transfer interrupts */
      __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR | SDMMC_IT_DATAEND));
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

      return HAL_OK;
 80049b4:	2300      	movs	r3, #0
 80049b6:	e000      	b.n	80049ba <HAL_SD_WriteBlocks_DMA+0x182>
    }
#endif
  }
  else
  {
    return HAL_BUSY;
 80049b8:	2302      	movs	r3, #2
  }
}
 80049ba:	4618      	mov	r0, r3
 80049bc:	3730      	adds	r7, #48	@ 0x30
 80049be:	46bd      	mov	sp, r7
 80049c0:	bd80      	pop	{r7, pc}
 80049c2:	bf00      	nop
 80049c4:	080050b1 	.word	0x080050b1
 80049c8:	0800514d 	.word	0x0800514d
 80049cc:	004005ff 	.word	0x004005ff

080049d0 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 80049d0:	b580      	push	{r7, lr}
 80049d2:	b084      	sub	sp, #16
 80049d4:	af00      	add	r7, sp, #0
 80049d6:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80049dc:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80049e4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d008      	beq.n	80049fe <HAL_SD_IRQHandler+0x2e>
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	f003 0308 	and.w	r3, r3, #8
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d003      	beq.n	80049fe <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 80049f6:	6878      	ldr	r0, [r7, #4]
 80049f8:	f000 fde6 	bl	80055c8 <SD_Read_IT>
 80049fc:	e155      	b.n	8004caa <HAL_SD_IRQHandler+0x2da>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004a04:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	f000 808f 	beq.w	8004b2c <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004a16:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT |\
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a1e:	687a      	ldr	r2, [r7, #4]
 8004a20:	6812      	ldr	r2, [r2, #0]
 8004a22:	f423 4341 	bic.w	r3, r3, #49408	@ 0xc100
 8004a26:	f023 033a 	bic.w	r3, r3, #58	@ 0x3a
 8004a2a:	63d3      	str	r3, [r2, #60]	@ 0x3c

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
#else
    hsd->Instance->DCTRL &= ~(SDMMC_DCTRL_DTEN);
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	f022 0201 	bic.w	r2, r2, #1
 8004a3a:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    if((context & SD_CONTEXT_IT) != 0U)
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	f003 0308 	and.w	r3, r3, #8
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d039      	beq.n	8004aba <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	f003 0302 	and.w	r3, r3, #2
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d104      	bne.n	8004a5a <HAL_SD_IRQHandler+0x8a>
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	f003 0320 	and.w	r3, r3, #32
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d011      	beq.n	8004a7e <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	4618      	mov	r0, r3
 8004a60:	f001 fe36 	bl	80066d0 <SDMMC_CmdStopTransfer>
 8004a64:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8004a66:	68bb      	ldr	r3, [r7, #8]
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d008      	beq.n	8004a7e <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004a70:	68bb      	ldr	r3, [r7, #8]
 8004a72:	431a      	orrs	r2, r3
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	639a      	str	r2, [r3, #56]	@ 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 8004a78:	6878      	ldr	r0, [r7, #4]
 8004a7a:	f000 f91f 	bl	8004cbc <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	f240 523a 	movw	r2, #1338	@ 0x53a
 8004a86:	639a      	str	r2, [r3, #56]	@ 0x38

      hsd->State = HAL_SD_STATE_READY;
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	2201      	movs	r2, #1
 8004a8c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	2200      	movs	r2, #0
 8004a94:	631a      	str	r2, [r3, #48]	@ 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	f003 0301 	and.w	r3, r3, #1
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d104      	bne.n	8004aaa <HAL_SD_IRQHandler+0xda>
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	f003 0302 	and.w	r3, r3, #2
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d003      	beq.n	8004ab2 <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 8004aaa:	6878      	ldr	r0, [r7, #4]
 8004aac:	f002 fa54 	bl	8006f58 <HAL_SD_RxCpltCallback>
 8004ab0:	e0fb      	b.n	8004caa <HAL_SD_IRQHandler+0x2da>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 8004ab2:	6878      	ldr	r0, [r7, #4]
 8004ab4:	f002 fa46 	bl	8006f44 <HAL_SD_TxCpltCallback>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else
  {
    /* Nothing to do */
  }
}
 8004ab8:	e0f7      	b.n	8004caa <HAL_SD_IRQHandler+0x2da>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	f000 80f2 	beq.w	8004caa <HAL_SD_IRQHandler+0x2da>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	f003 0320 	and.w	r3, r3, #32
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d011      	beq.n	8004af4 <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	4618      	mov	r0, r3
 8004ad6:	f001 fdfb 	bl	80066d0 <SDMMC_CmdStopTransfer>
 8004ada:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8004adc:	68bb      	ldr	r3, [r7, #8]
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d008      	beq.n	8004af4 <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004ae6:	68bb      	ldr	r3, [r7, #8]
 8004ae8:	431a      	orrs	r2, r3
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	639a      	str	r2, [r3, #56]	@ 0x38
          HAL_SD_ErrorCallback(hsd);
 8004aee:	6878      	ldr	r0, [r7, #4]
 8004af0:	f000 f8e4 	bl	8004cbc <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	f003 0301 	and.w	r3, r3, #1
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	f040 80d5 	bne.w	8004caa <HAL_SD_IRQHandler+0x2da>
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	f003 0302 	and.w	r3, r3, #2
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	f040 80cf 	bne.w	8004caa <HAL_SD_IRQHandler+0x2da>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	f022 0208 	bic.w	r2, r2, #8
 8004b1a:	62da      	str	r2, [r3, #44]	@ 0x2c
        hsd->State = HAL_SD_STATE_READY;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	2201      	movs	r2, #1
 8004b20:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        HAL_SD_TxCpltCallback(hsd);
 8004b24:	6878      	ldr	r0, [r7, #4]
 8004b26:	f002 fa0d 	bl	8006f44 <HAL_SD_TxCpltCallback>
}
 8004b2a:	e0be      	b.n	8004caa <HAL_SD_IRQHandler+0x2da>
  else if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004b32:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d008      	beq.n	8004b4c <HAL_SD_IRQHandler+0x17c>
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	f003 0308 	and.w	r3, r3, #8
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d003      	beq.n	8004b4c <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 8004b44:	6878      	ldr	r0, [r7, #4]
 8004b46:	f000 fd90 	bl	800566a <SD_Write_IT>
 8004b4a:	e0ae      	b.n	8004caa <HAL_SD_IRQHandler+0x2da>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR | SDMMC_FLAG_TXUNDERR) != RESET)
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004b52:	f003 033a 	and.w	r3, r3, #58	@ 0x3a
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	f000 80a7 	beq.w	8004caa <HAL_SD_IRQHandler+0x2da>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004b62:	f003 0302 	and.w	r3, r3, #2
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d005      	beq.n	8004b76 <HAL_SD_IRQHandler+0x1a6>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b6e:	f043 0202 	orr.w	r2, r3, #2
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	639a      	str	r2, [r3, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT) != RESET)
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004b7c:	f003 0308 	and.w	r3, r3, #8
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d005      	beq.n	8004b90 <HAL_SD_IRQHandler+0x1c0>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b88:	f043 0208 	orr.w	r2, r3, #8
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	639a      	str	r2, [r3, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXOVERR) != RESET)
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004b96:	f003 0320 	and.w	r3, r3, #32
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d005      	beq.n	8004baa <HAL_SD_IRQHandler+0x1da>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ba2:	f043 0220 	orr.w	r2, r3, #32
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	639a      	str	r2, [r3, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXUNDERR) != RESET)
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004bb0:	f003 0310 	and.w	r3, r3, #16
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d005      	beq.n	8004bc4 <HAL_SD_IRQHandler+0x1f4>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004bbc:	f043 0210 	orr.w	r2, r3, #16
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	f240 523a 	movw	r2, #1338	@ 0x53a
 8004bcc:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	f422 729d 	bic.w	r2, r2, #314	@ 0x13a
 8004bdc:	63da      	str	r2, [r3, #60]	@ 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	4618      	mov	r0, r3
 8004be4:	f001 fd74 	bl	80066d0 <SDMMC_CmdStopTransfer>
 8004be8:	4602      	mov	r2, r0
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004bee:	431a      	orrs	r2, r3
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	639a      	str	r2, [r3, #56]	@ 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	f003 0308 	and.w	r3, r3, #8
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d00a      	beq.n	8004c14 <HAL_SD_IRQHandler+0x244>
      hsd->State = HAL_SD_STATE_READY;
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	2201      	movs	r2, #1
 8004c02:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	2200      	movs	r2, #0
 8004c0a:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_SD_ErrorCallback(hsd);
 8004c0c:	6878      	ldr	r0, [r7, #4]
 8004c0e:	f000 f855 	bl	8004cbc <HAL_SD_ErrorCallback>
}
 8004c12:	e04a      	b.n	8004caa <HAL_SD_IRQHandler+0x2da>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d045      	beq.n	8004caa <HAL_SD_IRQHandler+0x2da>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	f003 0310 	and.w	r3, r3, #16
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d104      	bne.n	8004c32 <HAL_SD_IRQHandler+0x262>
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	f003 0320 	and.w	r3, r3, #32
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d011      	beq.n	8004c56 <HAL_SD_IRQHandler+0x286>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c36:	4a1f      	ldr	r2, [pc, #124]	@ (8004cb4 <HAL_SD_IRQHandler+0x2e4>)
 8004c38:	639a      	str	r2, [r3, #56]	@ 0x38
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c3e:	4618      	mov	r0, r3
 8004c40:	f7fc fcfa 	bl	8001638 <HAL_DMA_Abort_IT>
 8004c44:	4603      	mov	r3, r0
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d02f      	beq.n	8004caa <HAL_SD_IRQHandler+0x2da>
          SD_DMATxAbort(hsd->hdmatx);
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c4e:	4618      	mov	r0, r3
 8004c50:	f000 fac8 	bl	80051e4 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8004c54:	e029      	b.n	8004caa <HAL_SD_IRQHandler+0x2da>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	f003 0301 	and.w	r3, r3, #1
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d104      	bne.n	8004c6a <HAL_SD_IRQHandler+0x29a>
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	f003 0302 	and.w	r3, r3, #2
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d011      	beq.n	8004c8e <HAL_SD_IRQHandler+0x2be>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c6e:	4a12      	ldr	r2, [pc, #72]	@ (8004cb8 <HAL_SD_IRQHandler+0x2e8>)
 8004c70:	639a      	str	r2, [r3, #56]	@ 0x38
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c76:	4618      	mov	r0, r3
 8004c78:	f7fc fcde 	bl	8001638 <HAL_DMA_Abort_IT>
 8004c7c:	4603      	mov	r3, r0
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d013      	beq.n	8004caa <HAL_SD_IRQHandler+0x2da>
          SD_DMARxAbort(hsd->hdmarx);
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c86:	4618      	mov	r0, r3
 8004c88:	f000 fae3 	bl	8005252 <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8004c8c:	e00d      	b.n	8004caa <HAL_SD_IRQHandler+0x2da>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	2200      	movs	r2, #0
 8004c92:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State = HAL_SD_STATE_READY;
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	2201      	movs	r2, #1
 8004c98:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	2200      	movs	r2, #0
 8004ca0:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_SD_AbortCallback(hsd);
 8004ca2:	6878      	ldr	r0, [r7, #4]
 8004ca4:	f002 f944 	bl	8006f30 <HAL_SD_AbortCallback>
}
 8004ca8:	e7ff      	b.n	8004caa <HAL_SD_IRQHandler+0x2da>
 8004caa:	bf00      	nop
 8004cac:	3710      	adds	r7, #16
 8004cae:	46bd      	mov	sp, r7
 8004cb0:	bd80      	pop	{r7, pc}
 8004cb2:	bf00      	nop
 8004cb4:	080051e5 	.word	0x080051e5
 8004cb8:	08005253 	.word	0x08005253

08004cbc <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8004cbc:	b480      	push	{r7}
 8004cbe:	b083      	sub	sp, #12
 8004cc0:	af00      	add	r7, sp, #0
 8004cc2:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8004cc4:	bf00      	nop
 8004cc6:	370c      	adds	r7, #12
 8004cc8:	46bd      	mov	sp, r7
 8004cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cce:	4770      	bx	lr

08004cd0 <HAL_SD_GetCardCSD>:
  * @param  pCSD Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8004cd0:	b480      	push	{r7}
 8004cd2:	b083      	sub	sp, #12
 8004cd4:	af00      	add	r7, sp, #0
 8004cd6:	6078      	str	r0, [r7, #4]
 8004cd8:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004cde:	0f9b      	lsrs	r3, r3, #30
 8004ce0:	b2da      	uxtb	r2, r3
 8004ce2:	683b      	ldr	r3, [r7, #0]
 8004ce4:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004cea:	0e9b      	lsrs	r3, r3, #26
 8004cec:	b2db      	uxtb	r3, r3
 8004cee:	f003 030f 	and.w	r3, r3, #15
 8004cf2:	b2da      	uxtb	r2, r3
 8004cf4:	683b      	ldr	r3, [r7, #0]
 8004cf6:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004cfc:	0e1b      	lsrs	r3, r3, #24
 8004cfe:	b2db      	uxtb	r3, r3
 8004d00:	f003 0303 	and.w	r3, r3, #3
 8004d04:	b2da      	uxtb	r2, r3
 8004d06:	683b      	ldr	r3, [r7, #0]
 8004d08:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004d0e:	0c1b      	lsrs	r3, r3, #16
 8004d10:	b2da      	uxtb	r2, r3
 8004d12:	683b      	ldr	r3, [r7, #0]
 8004d14:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004d1a:	0a1b      	lsrs	r3, r3, #8
 8004d1c:	b2da      	uxtb	r2, r3
 8004d1e:	683b      	ldr	r3, [r7, #0]
 8004d20:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004d26:	b2da      	uxtb	r2, r3
 8004d28:	683b      	ldr	r3, [r7, #0]
 8004d2a:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004d30:	0d1b      	lsrs	r3, r3, #20
 8004d32:	b29a      	uxth	r2, r3
 8004d34:	683b      	ldr	r3, [r7, #0]
 8004d36:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004d3c:	0c1b      	lsrs	r3, r3, #16
 8004d3e:	b2db      	uxtb	r3, r3
 8004d40:	f003 030f 	and.w	r3, r3, #15
 8004d44:	b2da      	uxtb	r2, r3
 8004d46:	683b      	ldr	r3, [r7, #0]
 8004d48:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004d4e:	0bdb      	lsrs	r3, r3, #15
 8004d50:	b2db      	uxtb	r3, r3
 8004d52:	f003 0301 	and.w	r3, r3, #1
 8004d56:	b2da      	uxtb	r2, r3
 8004d58:	683b      	ldr	r3, [r7, #0]
 8004d5a:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004d60:	0b9b      	lsrs	r3, r3, #14
 8004d62:	b2db      	uxtb	r3, r3
 8004d64:	f003 0301 	and.w	r3, r3, #1
 8004d68:	b2da      	uxtb	r2, r3
 8004d6a:	683b      	ldr	r3, [r7, #0]
 8004d6c:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004d72:	0b5b      	lsrs	r3, r3, #13
 8004d74:	b2db      	uxtb	r3, r3
 8004d76:	f003 0301 	and.w	r3, r3, #1
 8004d7a:	b2da      	uxtb	r2, r3
 8004d7c:	683b      	ldr	r3, [r7, #0]
 8004d7e:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004d84:	0b1b      	lsrs	r3, r3, #12
 8004d86:	b2db      	uxtb	r3, r3
 8004d88:	f003 0301 	and.w	r3, r3, #1
 8004d8c:	b2da      	uxtb	r2, r3
 8004d8e:	683b      	ldr	r3, [r7, #0]
 8004d90:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8004d92:	683b      	ldr	r3, [r7, #0]
 8004d94:	2200      	movs	r2, #0
 8004d96:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d163      	bne.n	8004e68 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004da4:	009a      	lsls	r2, r3, #2
 8004da6:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8004daa:	4013      	ands	r3, r2
 8004dac:	687a      	ldr	r2, [r7, #4]
 8004dae:	6ed2      	ldr	r2, [r2, #108]	@ 0x6c
 8004db0:	0f92      	lsrs	r2, r2, #30
 8004db2:	431a      	orrs	r2, r3
 8004db4:	683b      	ldr	r3, [r7, #0]
 8004db6:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004dbc:	0edb      	lsrs	r3, r3, #27
 8004dbe:	b2db      	uxtb	r3, r3
 8004dc0:	f003 0307 	and.w	r3, r3, #7
 8004dc4:	b2da      	uxtb	r2, r3
 8004dc6:	683b      	ldr	r3, [r7, #0]
 8004dc8:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004dce:	0e1b      	lsrs	r3, r3, #24
 8004dd0:	b2db      	uxtb	r3, r3
 8004dd2:	f003 0307 	and.w	r3, r3, #7
 8004dd6:	b2da      	uxtb	r2, r3
 8004dd8:	683b      	ldr	r3, [r7, #0]
 8004dda:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004de0:	0d5b      	lsrs	r3, r3, #21
 8004de2:	b2db      	uxtb	r3, r3
 8004de4:	f003 0307 	and.w	r3, r3, #7
 8004de8:	b2da      	uxtb	r2, r3
 8004dea:	683b      	ldr	r3, [r7, #0]
 8004dec:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004df2:	0c9b      	lsrs	r3, r3, #18
 8004df4:	b2db      	uxtb	r3, r3
 8004df6:	f003 0307 	and.w	r3, r3, #7
 8004dfa:	b2da      	uxtb	r2, r3
 8004dfc:	683b      	ldr	r3, [r7, #0]
 8004dfe:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004e04:	0bdb      	lsrs	r3, r3, #15
 8004e06:	b2db      	uxtb	r3, r3
 8004e08:	f003 0307 	and.w	r3, r3, #7
 8004e0c:	b2da      	uxtb	r2, r3
 8004e0e:	683b      	ldr	r3, [r7, #0]
 8004e10:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8004e12:	683b      	ldr	r3, [r7, #0]
 8004e14:	691b      	ldr	r3, [r3, #16]
 8004e16:	1c5a      	adds	r2, r3, #1
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8004e1c:	683b      	ldr	r3, [r7, #0]
 8004e1e:	7e1b      	ldrb	r3, [r3, #24]
 8004e20:	b2db      	uxtb	r3, r3
 8004e22:	f003 0307 	and.w	r3, r3, #7
 8004e26:	3302      	adds	r3, #2
 8004e28:	2201      	movs	r2, #1
 8004e2a:	fa02 f303 	lsl.w	r3, r2, r3
 8004e2e:	687a      	ldr	r2, [r7, #4]
 8004e30:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8004e32:	fb03 f202 	mul.w	r2, r3, r2
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8004e3a:	683b      	ldr	r3, [r7, #0]
 8004e3c:	7a1b      	ldrb	r3, [r3, #8]
 8004e3e:	b2db      	uxtb	r3, r3
 8004e40:	f003 030f 	and.w	r3, r3, #15
 8004e44:	2201      	movs	r2, #1
 8004e46:	409a      	lsls	r2, r3
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	659a      	str	r2, [r3, #88]	@ 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004e50:	687a      	ldr	r2, [r7, #4]
 8004e52:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8004e54:	0a52      	lsrs	r2, r2, #9
 8004e56:	fb03 f202 	mul.w	r2, r3, r2
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004e64:	661a      	str	r2, [r3, #96]	@ 0x60
 8004e66:	e031      	b.n	8004ecc <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e6c:	2b01      	cmp	r3, #1
 8004e6e:	d11d      	bne.n	8004eac <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004e74:	041b      	lsls	r3, r3, #16
 8004e76:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004e7e:	0c1b      	lsrs	r3, r3, #16
 8004e80:	431a      	orrs	r2, r3
 8004e82:	683b      	ldr	r3, [r7, #0]
 8004e84:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8004e86:	683b      	ldr	r3, [r7, #0]
 8004e88:	691b      	ldr	r3, [r3, #16]
 8004e8a:	3301      	adds	r3, #1
 8004e8c:	029a      	lsls	r2, r3, #10
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.BlockSize = 512U;
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004ea0:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	661a      	str	r2, [r3, #96]	@ 0x60
 8004eaa:	e00f      	b.n	8004ecc <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	4a58      	ldr	r2, [pc, #352]	@ (8005014 <HAL_SD_GetCardCSD+0x344>)
 8004eb2:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004eb8:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	2201      	movs	r2, #1
 8004ec4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8004ec8:	2301      	movs	r3, #1
 8004eca:	e09d      	b.n	8005008 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004ed0:	0b9b      	lsrs	r3, r3, #14
 8004ed2:	b2db      	uxtb	r3, r3
 8004ed4:	f003 0301 	and.w	r3, r3, #1
 8004ed8:	b2da      	uxtb	r2, r3
 8004eda:	683b      	ldr	r3, [r7, #0]
 8004edc:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004ee2:	09db      	lsrs	r3, r3, #7
 8004ee4:	b2db      	uxtb	r3, r3
 8004ee6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004eea:	b2da      	uxtb	r2, r3
 8004eec:	683b      	ldr	r3, [r7, #0]
 8004eee:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004ef4:	b2db      	uxtb	r3, r3
 8004ef6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004efa:	b2da      	uxtb	r2, r3
 8004efc:	683b      	ldr	r3, [r7, #0]
 8004efe:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f04:	0fdb      	lsrs	r3, r3, #31
 8004f06:	b2da      	uxtb	r2, r3
 8004f08:	683b      	ldr	r3, [r7, #0]
 8004f0a:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f10:	0f5b      	lsrs	r3, r3, #29
 8004f12:	b2db      	uxtb	r3, r3
 8004f14:	f003 0303 	and.w	r3, r3, #3
 8004f18:	b2da      	uxtb	r2, r3
 8004f1a:	683b      	ldr	r3, [r7, #0]
 8004f1c:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f22:	0e9b      	lsrs	r3, r3, #26
 8004f24:	b2db      	uxtb	r3, r3
 8004f26:	f003 0307 	and.w	r3, r3, #7
 8004f2a:	b2da      	uxtb	r2, r3
 8004f2c:	683b      	ldr	r3, [r7, #0]
 8004f2e:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f34:	0d9b      	lsrs	r3, r3, #22
 8004f36:	b2db      	uxtb	r3, r3
 8004f38:	f003 030f 	and.w	r3, r3, #15
 8004f3c:	b2da      	uxtb	r2, r3
 8004f3e:	683b      	ldr	r3, [r7, #0]
 8004f40:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f46:	0d5b      	lsrs	r3, r3, #21
 8004f48:	b2db      	uxtb	r3, r3
 8004f4a:	f003 0301 	and.w	r3, r3, #1
 8004f4e:	b2da      	uxtb	r2, r3
 8004f50:	683b      	ldr	r3, [r7, #0]
 8004f52:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8004f56:	683b      	ldr	r3, [r7, #0]
 8004f58:	2200      	movs	r2, #0
 8004f5a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f62:	0c1b      	lsrs	r3, r3, #16
 8004f64:	b2db      	uxtb	r3, r3
 8004f66:	f003 0301 	and.w	r3, r3, #1
 8004f6a:	b2da      	uxtb	r2, r3
 8004f6c:	683b      	ldr	r3, [r7, #0]
 8004f6e:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f76:	0bdb      	lsrs	r3, r3, #15
 8004f78:	b2db      	uxtb	r3, r3
 8004f7a:	f003 0301 	and.w	r3, r3, #1
 8004f7e:	b2da      	uxtb	r2, r3
 8004f80:	683b      	ldr	r3, [r7, #0]
 8004f82:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f8a:	0b9b      	lsrs	r3, r3, #14
 8004f8c:	b2db      	uxtb	r3, r3
 8004f8e:	f003 0301 	and.w	r3, r3, #1
 8004f92:	b2da      	uxtb	r2, r3
 8004f94:	683b      	ldr	r3, [r7, #0]
 8004f96:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f9e:	0b5b      	lsrs	r3, r3, #13
 8004fa0:	b2db      	uxtb	r3, r3
 8004fa2:	f003 0301 	and.w	r3, r3, #1
 8004fa6:	b2da      	uxtb	r2, r3
 8004fa8:	683b      	ldr	r3, [r7, #0]
 8004faa:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004fb2:	0b1b      	lsrs	r3, r3, #12
 8004fb4:	b2db      	uxtb	r3, r3
 8004fb6:	f003 0301 	and.w	r3, r3, #1
 8004fba:	b2da      	uxtb	r2, r3
 8004fbc:	683b      	ldr	r3, [r7, #0]
 8004fbe:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004fc6:	0a9b      	lsrs	r3, r3, #10
 8004fc8:	b2db      	uxtb	r3, r3
 8004fca:	f003 0303 	and.w	r3, r3, #3
 8004fce:	b2da      	uxtb	r2, r3
 8004fd0:	683b      	ldr	r3, [r7, #0]
 8004fd2:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004fda:	0a1b      	lsrs	r3, r3, #8
 8004fdc:	b2db      	uxtb	r3, r3
 8004fde:	f003 0303 	and.w	r3, r3, #3
 8004fe2:	b2da      	uxtb	r2, r3
 8004fe4:	683b      	ldr	r3, [r7, #0]
 8004fe6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004fee:	085b      	lsrs	r3, r3, #1
 8004ff0:	b2db      	uxtb	r3, r3
 8004ff2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004ff6:	b2da      	uxtb	r2, r3
 8004ff8:	683b      	ldr	r3, [r7, #0]
 8004ffa:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 8004ffe:	683b      	ldr	r3, [r7, #0]
 8005000:	2201      	movs	r2, #1
 8005002:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 8005006:	2300      	movs	r3, #0
}
 8005008:	4618      	mov	r0, r3
 800500a:	370c      	adds	r7, #12
 800500c:	46bd      	mov	sp, r7
 800500e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005012:	4770      	bx	lr
 8005014:	004005ff 	.word	0x004005ff

08005018 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8005018:	b480      	push	{r7}
 800501a:	b083      	sub	sp, #12
 800501c:	af00      	add	r7, sp, #0
 800501e:	6078      	str	r0, [r7, #4]
 8005020:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005026:	683b      	ldr	r3, [r7, #0]
 8005028:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800502e:	683b      	ldr	r3, [r7, #0]
 8005030:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005036:	683b      	ldr	r3, [r7, #0]
 8005038:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800503e:	683b      	ldr	r3, [r7, #0]
 8005040:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005046:	683b      	ldr	r3, [r7, #0]
 8005048:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800504e:	683b      	ldr	r3, [r7, #0]
 8005050:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005056:	683b      	ldr	r3, [r7, #0]
 8005058:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800505e:	683b      	ldr	r3, [r7, #0]
 8005060:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8005062:	2300      	movs	r3, #0
}
 8005064:	4618      	mov	r0, r3
 8005066:	370c      	adds	r7, #12
 8005068:	46bd      	mov	sp, r7
 800506a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800506e:	4770      	bx	lr

08005070 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8005070:	b580      	push	{r7, lr}
 8005072:	b086      	sub	sp, #24
 8005074:	af00      	add	r7, sp, #0
 8005076:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8005078:	2300      	movs	r3, #0
 800507a:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800507c:	f107 030c 	add.w	r3, r7, #12
 8005080:	4619      	mov	r1, r3
 8005082:	6878      	ldr	r0, [r7, #4]
 8005084:	f000 fa78 	bl	8005578 <SD_SendStatus>
 8005088:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800508a:	697b      	ldr	r3, [r7, #20]
 800508c:	2b00      	cmp	r3, #0
 800508e:	d005      	beq.n	800509c <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005094:	697b      	ldr	r3, [r7, #20]
 8005096:	431a      	orrs	r2, r3
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	0a5b      	lsrs	r3, r3, #9
 80050a0:	f003 030f 	and.w	r3, r3, #15
 80050a4:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 80050a6:	693b      	ldr	r3, [r7, #16]
}
 80050a8:	4618      	mov	r0, r3
 80050aa:	3718      	adds	r7, #24
 80050ac:	46bd      	mov	sp, r7
 80050ae:	bd80      	pop	{r7, pc}

080050b0 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80050b0:	b480      	push	{r7}
 80050b2:	b085      	sub	sp, #20
 80050b4:	af00      	add	r7, sp, #0
 80050b6:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050bc:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DATAEND));
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80050cc:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 80050ce:	bf00      	nop
 80050d0:	3714      	adds	r7, #20
 80050d2:	46bd      	mov	sp, r7
 80050d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d8:	4770      	bx	lr

080050da <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80050da:	b580      	push	{r7, lr}
 80050dc:	b084      	sub	sp, #16
 80050de:	af00      	add	r7, sp, #0
 80050e0:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050e6:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80050ec:	2b82      	cmp	r3, #130	@ 0x82
 80050ee:	d111      	bne.n	8005114 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	4618      	mov	r0, r3
 80050f6:	f001 faeb 	bl	80066d0 <SDMMC_CmdStopTransfer>
 80050fa:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 80050fc:	68bb      	ldr	r3, [r7, #8]
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d008      	beq.n	8005114 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005106:	68bb      	ldr	r3, [r7, #8]
 8005108:	431a      	orrs	r2, r3
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	639a      	str	r2, [r3, #56]	@ 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 800510e:	68f8      	ldr	r0, [r7, #12]
 8005110:	f7ff fdd4 	bl	8004cbc <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	f022 0208 	bic.w	r2, r2, #8
 8005122:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	f240 523a 	movw	r2, #1338	@ 0x53a
 800512c:	639a      	str	r2, [r3, #56]	@ 0x38

  hsd->State = HAL_SD_STATE_READY;
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	2201      	movs	r2, #1
 8005132:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	2200      	movs	r2, #0
 800513a:	631a      	str	r2, [r3, #48]	@ 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 800513c:	68f8      	ldr	r0, [r7, #12]
 800513e:	f001 ff0b 	bl	8006f58 <HAL_SD_RxCpltCallback>
#endif
}
 8005142:	bf00      	nop
 8005144:	3710      	adds	r7, #16
 8005146:	46bd      	mov	sp, r7
 8005148:	bd80      	pop	{r7, pc}
	...

0800514c <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 800514c:	b580      	push	{r7, lr}
 800514e:	b086      	sub	sp, #24
 8005150:	af00      	add	r7, sp, #0
 8005152:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005158:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  RxErrorCode = hsd->hdmarx->ErrorCode;
 800515a:	697b      	ldr	r3, [r7, #20]
 800515c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800515e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005160:	613b      	str	r3, [r7, #16]
  TxErrorCode = hsd->hdmatx->ErrorCode;
 8005162:	697b      	ldr	r3, [r7, #20]
 8005164:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005166:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005168:	60fb      	str	r3, [r7, #12]
  if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 800516a:	693b      	ldr	r3, [r7, #16]
 800516c:	2b01      	cmp	r3, #1
 800516e:	d002      	beq.n	8005176 <SD_DMAError+0x2a>
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	2b01      	cmp	r3, #1
 8005174:	d12d      	bne.n	80051d2 <SD_DMAError+0x86>
  {
    /* Clear All flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005176:	697b      	ldr	r3, [r7, #20]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	4a19      	ldr	r2, [pc, #100]	@ (80051e0 <SD_DMAError+0x94>)
 800517c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Disable All interrupts */
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 800517e:	697b      	ldr	r3, [r7, #20]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005184:	697b      	ldr	r3, [r7, #20]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	f422 729d 	bic.w	r2, r2, #314	@ 0x13a
 800518c:	63da      	str	r2, [r3, #60]	@ 0x3c
      SDMMC_IT_TXUNDERR| SDMMC_IT_RXOVERR);

    hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800518e:	697b      	ldr	r3, [r7, #20]
 8005190:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005192:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8005196:	697b      	ldr	r3, [r7, #20]
 8005198:	639a      	str	r2, [r3, #56]	@ 0x38
    CardState = HAL_SD_GetCardState(hsd);
 800519a:	6978      	ldr	r0, [r7, #20]
 800519c:	f7ff ff68 	bl	8005070 <HAL_SD_GetCardState>
 80051a0:	60b8      	str	r0, [r7, #8]
    if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 80051a2:	68bb      	ldr	r3, [r7, #8]
 80051a4:	2b06      	cmp	r3, #6
 80051a6:	d002      	beq.n	80051ae <SD_DMAError+0x62>
 80051a8:	68bb      	ldr	r3, [r7, #8]
 80051aa:	2b05      	cmp	r3, #5
 80051ac:	d10a      	bne.n	80051c4 <SD_DMAError+0x78>
    {
      hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80051ae:	697b      	ldr	r3, [r7, #20]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	4618      	mov	r0, r3
 80051b4:	f001 fa8c 	bl	80066d0 <SDMMC_CmdStopTransfer>
 80051b8:	4602      	mov	r2, r0
 80051ba:	697b      	ldr	r3, [r7, #20]
 80051bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80051be:	431a      	orrs	r2, r3
 80051c0:	697b      	ldr	r3, [r7, #20]
 80051c2:	639a      	str	r2, [r3, #56]	@ 0x38
    }

    hsd->State= HAL_SD_STATE_READY;
 80051c4:	697b      	ldr	r3, [r7, #20]
 80051c6:	2201      	movs	r2, #1
 80051c8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->Context = SD_CONTEXT_NONE;
 80051cc:	697b      	ldr	r3, [r7, #20]
 80051ce:	2200      	movs	r2, #0
 80051d0:	631a      	str	r2, [r3, #48]	@ 0x30
  }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->ErrorCallback(hsd);
#else
  HAL_SD_ErrorCallback(hsd);
 80051d2:	6978      	ldr	r0, [r7, #20]
 80051d4:	f7ff fd72 	bl	8004cbc <HAL_SD_ErrorCallback>
#endif
}
 80051d8:	bf00      	nop
 80051da:	3718      	adds	r7, #24
 80051dc:	46bd      	mov	sp, r7
 80051de:	bd80      	pop	{r7, pc}
 80051e0:	004005ff 	.word	0x004005ff

080051e4 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 80051e4:	b580      	push	{r7, lr}
 80051e6:	b084      	sub	sp, #16
 80051e8:	af00      	add	r7, sp, #0
 80051ea:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051f0:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	f240 523a 	movw	r2, #1338	@ 0x53a
 80051fa:	639a      	str	r2, [r3, #56]	@ 0x38

  CardState = HAL_SD_GetCardState(hsd);
 80051fc:	68f8      	ldr	r0, [r7, #12]
 80051fe:	f7ff ff37 	bl	8005070 <HAL_SD_GetCardState>
 8005202:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	2201      	movs	r2, #1
 8005208:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	2200      	movs	r2, #0
 8005210:	631a      	str	r2, [r3, #48]	@ 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8005212:	68bb      	ldr	r3, [r7, #8]
 8005214:	2b06      	cmp	r3, #6
 8005216:	d002      	beq.n	800521e <SD_DMATxAbort+0x3a>
 8005218:	68bb      	ldr	r3, [r7, #8]
 800521a:	2b05      	cmp	r3, #5
 800521c:	d10a      	bne.n	8005234 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	4618      	mov	r0, r3
 8005224:	f001 fa54 	bl	80066d0 <SDMMC_CmdStopTransfer>
 8005228:	4602      	mov	r2, r0
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800522e:	431a      	orrs	r2, r3
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005238:	2b00      	cmp	r3, #0
 800523a:	d103      	bne.n	8005244 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800523c:	68f8      	ldr	r0, [r7, #12]
 800523e:	f001 fe77 	bl	8006f30 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8005242:	e002      	b.n	800524a <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8005244:	68f8      	ldr	r0, [r7, #12]
 8005246:	f7ff fd39 	bl	8004cbc <HAL_SD_ErrorCallback>
}
 800524a:	bf00      	nop
 800524c:	3710      	adds	r7, #16
 800524e:	46bd      	mov	sp, r7
 8005250:	bd80      	pop	{r7, pc}

08005252 <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 8005252:	b580      	push	{r7, lr}
 8005254:	b084      	sub	sp, #16
 8005256:	af00      	add	r7, sp, #0
 8005258:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800525e:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	f240 523a 	movw	r2, #1338	@ 0x53a
 8005268:	639a      	str	r2, [r3, #56]	@ 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800526a:	68f8      	ldr	r0, [r7, #12]
 800526c:	f7ff ff00 	bl	8005070 <HAL_SD_GetCardState>
 8005270:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	2201      	movs	r2, #1
 8005276:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	2200      	movs	r2, #0
 800527e:	631a      	str	r2, [r3, #48]	@ 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8005280:	68bb      	ldr	r3, [r7, #8]
 8005282:	2b06      	cmp	r3, #6
 8005284:	d002      	beq.n	800528c <SD_DMARxAbort+0x3a>
 8005286:	68bb      	ldr	r3, [r7, #8]
 8005288:	2b05      	cmp	r3, #5
 800528a:	d10a      	bne.n	80052a2 <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	4618      	mov	r0, r3
 8005292:	f001 fa1d 	bl	80066d0 <SDMMC_CmdStopTransfer>
 8005296:	4602      	mov	r2, r0
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800529c:	431a      	orrs	r2, r3
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d103      	bne.n	80052b2 <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 80052aa:	68f8      	ldr	r0, [r7, #12]
 80052ac:	f001 fe40 	bl	8006f30 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 80052b0:	e002      	b.n	80052b8 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 80052b2:	68f8      	ldr	r0, [r7, #12]
 80052b4:	f7ff fd02 	bl	8004cbc <HAL_SD_ErrorCallback>
}
 80052b8:	bf00      	nop
 80052ba:	3710      	adds	r7, #16
 80052bc:	46bd      	mov	sp, r7
 80052be:	bd80      	pop	{r7, pc}

080052c0 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 80052c0:	b5b0      	push	{r4, r5, r7, lr}
 80052c2:	b094      	sub	sp, #80	@ 0x50
 80052c4:	af04      	add	r7, sp, #16
 80052c6:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 80052c8:	2301      	movs	r3, #1
 80052ca:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	4618      	mov	r0, r3
 80052d2:	f001 f8cf 	bl	8006474 <SDMMC_GetPowerState>
 80052d6:	4603      	mov	r3, r0
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d102      	bne.n	80052e2 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80052dc:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 80052e0:	e0b8      	b.n	8005454 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80052e6:	2b03      	cmp	r3, #3
 80052e8:	d02f      	beq.n	800534a <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	4618      	mov	r0, r3
 80052f0:	f001 fab5 	bl	800685e <SDMMC_CmdSendCID>
 80052f4:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80052f6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d001      	beq.n	8005300 <SD_InitCard+0x40>
    {
      return errorstate;
 80052fc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80052fe:	e0a9      	b.n	8005454 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	2100      	movs	r1, #0
 8005306:	4618      	mov	r0, r3
 8005308:	f001 f8f9 	bl	80064fe <SDMMC_GetResponse>
 800530c:	4602      	mov	r2, r0
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	2104      	movs	r1, #4
 8005318:	4618      	mov	r0, r3
 800531a:	f001 f8f0 	bl	80064fe <SDMMC_GetResponse>
 800531e:	4602      	mov	r2, r0
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	679a      	str	r2, [r3, #120]	@ 0x78
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	2108      	movs	r1, #8
 800532a:	4618      	mov	r0, r3
 800532c:	f001 f8e7 	bl	80064fe <SDMMC_GetResponse>
 8005330:	4602      	mov	r2, r0
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	67da      	str	r2, [r3, #124]	@ 0x7c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	210c      	movs	r1, #12
 800533c:	4618      	mov	r0, r3
 800533e:	f001 f8de 	bl	80064fe <SDMMC_GetResponse>
 8005342:	4602      	mov	r2, r0
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800534e:	2b03      	cmp	r3, #3
 8005350:	d00d      	beq.n	800536e <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	f107 020e 	add.w	r2, r7, #14
 800535a:	4611      	mov	r1, r2
 800535c:	4618      	mov	r0, r3
 800535e:	f001 fabb 	bl	80068d8 <SDMMC_CmdSetRelAdd>
 8005362:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8005364:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005366:	2b00      	cmp	r3, #0
 8005368:	d001      	beq.n	800536e <SD_InitCard+0xae>
    {
      return errorstate;
 800536a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800536c:	e072      	b.n	8005454 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005372:	2b03      	cmp	r3, #3
 8005374:	d036      	beq.n	80053e4 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8005376:	89fb      	ldrh	r3, [r7, #14]
 8005378:	461a      	mov	r2, r3
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681a      	ldr	r2, [r3, #0]
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005386:	041b      	lsls	r3, r3, #16
 8005388:	4619      	mov	r1, r3
 800538a:	4610      	mov	r0, r2
 800538c:	f001 fa85 	bl	800689a <SDMMC_CmdSendCSD>
 8005390:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8005392:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005394:	2b00      	cmp	r3, #0
 8005396:	d001      	beq.n	800539c <SD_InitCard+0xdc>
    {
      return errorstate;
 8005398:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800539a:	e05b      	b.n	8005454 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	2100      	movs	r1, #0
 80053a2:	4618      	mov	r0, r3
 80053a4:	f001 f8ab 	bl	80064fe <SDMMC_GetResponse>
 80053a8:	4602      	mov	r2, r0
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	2104      	movs	r1, #4
 80053b4:	4618      	mov	r0, r3
 80053b6:	f001 f8a2 	bl	80064fe <SDMMC_GetResponse>
 80053ba:	4602      	mov	r2, r0
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	669a      	str	r2, [r3, #104]	@ 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	2108      	movs	r1, #8
 80053c6:	4618      	mov	r0, r3
 80053c8:	f001 f899 	bl	80064fe <SDMMC_GetResponse>
 80053cc:	4602      	mov	r2, r0
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	66da      	str	r2, [r3, #108]	@ 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	210c      	movs	r1, #12
 80053d8:	4618      	mov	r0, r3
 80053da:	f001 f890 	bl	80064fe <SDMMC_GetResponse>
 80053de:	4602      	mov	r2, r0
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	671a      	str	r2, [r3, #112]	@ 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	2104      	movs	r1, #4
 80053ea:	4618      	mov	r0, r3
 80053ec:	f001 f887 	bl	80064fe <SDMMC_GetResponse>
 80053f0:	4603      	mov	r3, r0
 80053f2:	0d1a      	lsrs	r2, r3, #20
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 80053f8:	f107 0310 	add.w	r3, r7, #16
 80053fc:	4619      	mov	r1, r3
 80053fe:	6878      	ldr	r0, [r7, #4]
 8005400:	f7ff fc66 	bl	8004cd0 <HAL_SD_GetCardCSD>
 8005404:	4603      	mov	r3, r0
 8005406:	2b00      	cmp	r3, #0
 8005408:	d002      	beq.n	8005410 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800540a:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800540e:	e021      	b.n	8005454 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	6819      	ldr	r1, [r3, #0]
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005418:	041b      	lsls	r3, r3, #16
 800541a:	2200      	movs	r2, #0
 800541c:	461c      	mov	r4, r3
 800541e:	4615      	mov	r5, r2
 8005420:	4622      	mov	r2, r4
 8005422:	462b      	mov	r3, r5
 8005424:	4608      	mov	r0, r1
 8005426:	f001 f975 	bl	8006714 <SDMMC_CmdSelDesel>
 800542a:	63f8      	str	r0, [r7, #60]	@ 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800542c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800542e:	2b00      	cmp	r3, #0
 8005430:	d001      	beq.n	8005436 <SD_InitCard+0x176>
  {
    return errorstate;
 8005432:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005434:	e00e      	b.n	8005454 <SD_InitCard+0x194>
  }

#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681d      	ldr	r5, [r3, #0]
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	466c      	mov	r4, sp
 800543e:	f103 0210 	add.w	r2, r3, #16
 8005442:	ca07      	ldmia	r2, {r0, r1, r2}
 8005444:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8005448:	3304      	adds	r3, #4
 800544a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800544c:	4628      	mov	r0, r5
 800544e:	f000 ffb7 	bl	80063c0 <SDMMC_Init>
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8005452:	2300      	movs	r3, #0
}
 8005454:	4618      	mov	r0, r3
 8005456:	3740      	adds	r7, #64	@ 0x40
 8005458:	46bd      	mov	sp, r7
 800545a:	bdb0      	pop	{r4, r5, r7, pc}

0800545c <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800545c:	b580      	push	{r7, lr}
 800545e:	b086      	sub	sp, #24
 8005460:	af00      	add	r7, sp, #0
 8005462:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005464:	2300      	movs	r3, #0
 8005466:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8005468:	2300      	movs	r3, #0
 800546a:	617b      	str	r3, [r7, #20]
 800546c:	2300      	movs	r3, #0
 800546e:	613b      	str	r3, [r7, #16]
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t tickstart = HAL_GetTick();
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	4618      	mov	r0, r3
 8005476:	f001 f970 	bl	800675a <SDMMC_CmdGoIdleState>
 800547a:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	2b00      	cmp	r3, #0
 8005480:	d001      	beq.n	8005486 <SD_PowerON+0x2a>
  {
    return errorstate;
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	e072      	b.n	800556c <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	4618      	mov	r0, r3
 800548c:	f001 f983 	bl	8006796 <SDMMC_CmdOperCond>
 8005490:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	2b00      	cmp	r3, #0
 8005496:	d00d      	beq.n	80054b4 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	2200      	movs	r2, #0
 800549c:	649a      	str	r2, [r3, #72]	@ 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	4618      	mov	r0, r3
 80054a4:	f001 f959 	bl	800675a <SDMMC_CmdGoIdleState>
 80054a8:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d004      	beq.n	80054ba <SD_PowerON+0x5e>
    {
      return errorstate;
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	e05b      	b.n	800556c <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	2201      	movs	r2, #1
 80054b8:	649a      	str	r2, [r3, #72]	@ 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80054be:	2b01      	cmp	r3, #1
 80054c0:	d137      	bne.n	8005532 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	2100      	movs	r1, #0
 80054c8:	4618      	mov	r0, r3
 80054ca:	f001 f983 	bl	80067d4 <SDMMC_CmdAppCommand>
 80054ce:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d02d      	beq.n	8005532 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80054d6:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80054da:	e047      	b.n	800556c <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	2100      	movs	r1, #0
 80054e2:	4618      	mov	r0, r3
 80054e4:	f001 f976 	bl	80067d4 <SDMMC_CmdAppCommand>
 80054e8:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d001      	beq.n	80054f4 <SD_PowerON+0x98>
    {
      return errorstate;
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	e03b      	b.n	800556c <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	491e      	ldr	r1, [pc, #120]	@ (8005574 <SD_PowerON+0x118>)
 80054fa:	4618      	mov	r0, r3
 80054fc:	f001 f98c 	bl	8006818 <SDMMC_CmdAppOperCommand>
 8005500:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	2b00      	cmp	r3, #0
 8005506:	d002      	beq.n	800550e <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005508:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800550c:	e02e      	b.n	800556c <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	2100      	movs	r1, #0
 8005514:	4618      	mov	r0, r3
 8005516:	f000 fff2 	bl	80064fe <SDMMC_GetResponse>
 800551a:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800551c:	697b      	ldr	r3, [r7, #20]
 800551e:	0fdb      	lsrs	r3, r3, #31
 8005520:	2b01      	cmp	r3, #1
 8005522:	d101      	bne.n	8005528 <SD_PowerON+0xcc>
 8005524:	2301      	movs	r3, #1
 8005526:	e000      	b.n	800552a <SD_PowerON+0xce>
 8005528:	2300      	movs	r3, #0
 800552a:	613b      	str	r3, [r7, #16]

    count++;
 800552c:	68bb      	ldr	r3, [r7, #8]
 800552e:	3301      	adds	r3, #1
 8005530:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8005532:	68bb      	ldr	r3, [r7, #8]
 8005534:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8005538:	4293      	cmp	r3, r2
 800553a:	d802      	bhi.n	8005542 <SD_PowerON+0xe6>
 800553c:	693b      	ldr	r3, [r7, #16]
 800553e:	2b00      	cmp	r3, #0
 8005540:	d0cc      	beq.n	80054dc <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8005542:	68bb      	ldr	r3, [r7, #8]
 8005544:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8005548:	4293      	cmp	r3, r2
 800554a:	d902      	bls.n	8005552 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800554c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005550:	e00c      	b.n	800556c <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8005552:	697b      	ldr	r3, [r7, #20]
 8005554:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8005558:	2b00      	cmp	r3, #0
 800555a:	d003      	beq.n	8005564 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	2201      	movs	r2, #1
 8005560:	645a      	str	r2, [r3, #68]	@ 0x44
 8005562:	e002      	b.n	800556a <SD_PowerON+0x10e>
    }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	2200      	movs	r2, #0
 8005568:	645a      	str	r2, [r3, #68]	@ 0x44
  }


  return HAL_SD_ERROR_NONE;
 800556a:	2300      	movs	r3, #0
}
 800556c:	4618      	mov	r0, r3
 800556e:	3718      	adds	r7, #24
 8005570:	46bd      	mov	sp, r7
 8005572:	bd80      	pop	{r7, pc}
 8005574:	c1100000 	.word	0xc1100000

08005578 <SD_SendStatus>:
  * @param  pCardStatus pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8005578:	b580      	push	{r7, lr}
 800557a:	b084      	sub	sp, #16
 800557c:	af00      	add	r7, sp, #0
 800557e:	6078      	str	r0, [r7, #4]
 8005580:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8005582:	683b      	ldr	r3, [r7, #0]
 8005584:	2b00      	cmp	r3, #0
 8005586:	d102      	bne.n	800558e <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8005588:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800558c:	e018      	b.n	80055c0 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681a      	ldr	r2, [r3, #0]
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005596:	041b      	lsls	r3, r3, #16
 8005598:	4619      	mov	r1, r3
 800559a:	4610      	mov	r0, r2
 800559c:	f001 f9bd 	bl	800691a <SDMMC_CmdSendStatus>
 80055a0:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d001      	beq.n	80055ac <SD_SendStatus+0x34>
  {
    return errorstate;
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	e009      	b.n	80055c0 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	2100      	movs	r1, #0
 80055b2:	4618      	mov	r0, r3
 80055b4:	f000 ffa3 	bl	80064fe <SDMMC_GetResponse>
 80055b8:	4602      	mov	r2, r0
 80055ba:	683b      	ldr	r3, [r7, #0]
 80055bc:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 80055be:	2300      	movs	r3, #0
}
 80055c0:	4618      	mov	r0, r3
 80055c2:	3710      	adds	r7, #16
 80055c4:	46bd      	mov	sp, r7
 80055c6:	bd80      	pop	{r7, pc}

080055c8 <SD_Read_IT>:
  * @param  hsd pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 80055c8:	b580      	push	{r7, lr}
 80055ca:	b086      	sub	sp, #24
 80055cc:	af00      	add	r7, sp, #0
 80055ce:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055d4:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055da:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 80055dc:	693b      	ldr	r3, [r7, #16]
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d03f      	beq.n	8005662 <SD_Read_IT+0x9a>
  {
    /* Read data from SDMMC Rx FIFO */
    for(count = 0U; count < 8U; count++)
 80055e2:	2300      	movs	r3, #0
 80055e4:	617b      	str	r3, [r7, #20]
 80055e6:	e033      	b.n	8005650 <SD_Read_IT+0x88>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	4618      	mov	r0, r3
 80055ee:	f000 ff14 	bl	800641a <SDMMC_ReadFIFO>
 80055f2:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 80055f4:	68bb      	ldr	r3, [r7, #8]
 80055f6:	b2da      	uxtb	r2, r3
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	701a      	strb	r2, [r3, #0]
      tmp++;
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	3301      	adds	r3, #1
 8005600:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8005602:	693b      	ldr	r3, [r7, #16]
 8005604:	3b01      	subs	r3, #1
 8005606:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 8005608:	68bb      	ldr	r3, [r7, #8]
 800560a:	0a1b      	lsrs	r3, r3, #8
 800560c:	b2da      	uxtb	r2, r3
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	701a      	strb	r2, [r3, #0]
      tmp++;
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	3301      	adds	r3, #1
 8005616:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8005618:	693b      	ldr	r3, [r7, #16]
 800561a:	3b01      	subs	r3, #1
 800561c:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800561e:	68bb      	ldr	r3, [r7, #8]
 8005620:	0c1b      	lsrs	r3, r3, #16
 8005622:	b2da      	uxtb	r2, r3
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	701a      	strb	r2, [r3, #0]
      tmp++;
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	3301      	adds	r3, #1
 800562c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800562e:	693b      	ldr	r3, [r7, #16]
 8005630:	3b01      	subs	r3, #1
 8005632:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 8005634:	68bb      	ldr	r3, [r7, #8]
 8005636:	0e1b      	lsrs	r3, r3, #24
 8005638:	b2da      	uxtb	r2, r3
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	701a      	strb	r2, [r3, #0]
      tmp++;
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	3301      	adds	r3, #1
 8005642:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8005644:	693b      	ldr	r3, [r7, #16]
 8005646:	3b01      	subs	r3, #1
 8005648:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 800564a:	697b      	ldr	r3, [r7, #20]
 800564c:	3301      	adds	r3, #1
 800564e:	617b      	str	r3, [r7, #20]
 8005650:	697b      	ldr	r3, [r7, #20]
 8005652:	2b07      	cmp	r3, #7
 8005654:	d9c8      	bls.n	80055e8 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	68fa      	ldr	r2, [r7, #12]
 800565a:	629a      	str	r2, [r3, #40]	@ 0x28
    hsd->RxXferSize = dataremaining;
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	693a      	ldr	r2, [r7, #16]
 8005660:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
}
 8005662:	bf00      	nop
 8005664:	3718      	adds	r7, #24
 8005666:	46bd      	mov	sp, r7
 8005668:	bd80      	pop	{r7, pc}

0800566a <SD_Write_IT>:
  * @param  hsd pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800566a:	b580      	push	{r7, lr}
 800566c:	b086      	sub	sp, #24
 800566e:	af00      	add	r7, sp, #0
 8005670:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	6a1b      	ldr	r3, [r3, #32]
 8005676:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800567c:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800567e:	693b      	ldr	r3, [r7, #16]
 8005680:	2b00      	cmp	r3, #0
 8005682:	d043      	beq.n	800570c <SD_Write_IT+0xa2>
  {
    /* Write data to SDMMC Tx FIFO */
    for(count = 0U; count < 8U; count++)
 8005684:	2300      	movs	r3, #0
 8005686:	617b      	str	r3, [r7, #20]
 8005688:	e037      	b.n	80056fa <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	781b      	ldrb	r3, [r3, #0]
 800568e:	60bb      	str	r3, [r7, #8]
      tmp++;
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	3301      	adds	r3, #1
 8005694:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8005696:	693b      	ldr	r3, [r7, #16]
 8005698:	3b01      	subs	r3, #1
 800569a:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	781b      	ldrb	r3, [r3, #0]
 80056a0:	021a      	lsls	r2, r3, #8
 80056a2:	68bb      	ldr	r3, [r7, #8]
 80056a4:	4313      	orrs	r3, r2
 80056a6:	60bb      	str	r3, [r7, #8]
      tmp++;
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	3301      	adds	r3, #1
 80056ac:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80056ae:	693b      	ldr	r3, [r7, #16]
 80056b0:	3b01      	subs	r3, #1
 80056b2:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	781b      	ldrb	r3, [r3, #0]
 80056b8:	041a      	lsls	r2, r3, #16
 80056ba:	68bb      	ldr	r3, [r7, #8]
 80056bc:	4313      	orrs	r3, r2
 80056be:	60bb      	str	r3, [r7, #8]
      tmp++;
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	3301      	adds	r3, #1
 80056c4:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80056c6:	693b      	ldr	r3, [r7, #16]
 80056c8:	3b01      	subs	r3, #1
 80056ca:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	781b      	ldrb	r3, [r3, #0]
 80056d0:	061a      	lsls	r2, r3, #24
 80056d2:	68bb      	ldr	r3, [r7, #8]
 80056d4:	4313      	orrs	r3, r2
 80056d6:	60bb      	str	r3, [r7, #8]
      tmp++;
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	3301      	adds	r3, #1
 80056dc:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80056de:	693b      	ldr	r3, [r7, #16]
 80056e0:	3b01      	subs	r3, #1
 80056e2:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	f107 0208 	add.w	r2, r7, #8
 80056ec:	4611      	mov	r1, r2
 80056ee:	4618      	mov	r0, r3
 80056f0:	f000 fea0 	bl	8006434 <SDMMC_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 80056f4:	697b      	ldr	r3, [r7, #20]
 80056f6:	3301      	adds	r3, #1
 80056f8:	617b      	str	r3, [r7, #20]
 80056fa:	697b      	ldr	r3, [r7, #20]
 80056fc:	2b07      	cmp	r3, #7
 80056fe:	d9c4      	bls.n	800568a <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	68fa      	ldr	r2, [r7, #12]
 8005704:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	693a      	ldr	r2, [r7, #16]
 800570a:	625a      	str	r2, [r3, #36]	@ 0x24
  }
}
 800570c:	bf00      	nop
 800570e:	3718      	adds	r7, #24
 8005710:	46bd      	mov	sp, r7
 8005712:	bd80      	pop	{r7, pc}

08005714 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005714:	b580      	push	{r7, lr}
 8005716:	b082      	sub	sp, #8
 8005718:	af00      	add	r7, sp, #0
 800571a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	2b00      	cmp	r3, #0
 8005720:	d101      	bne.n	8005726 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005722:	2301      	movs	r3, #1
 8005724:	e049      	b.n	80057ba <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800572c:	b2db      	uxtb	r3, r3
 800572e:	2b00      	cmp	r3, #0
 8005730:	d106      	bne.n	8005740 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	2200      	movs	r2, #0
 8005736:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800573a:	6878      	ldr	r0, [r7, #4]
 800573c:	f7fb fa68 	bl	8000c10 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	2202      	movs	r2, #2
 8005744:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681a      	ldr	r2, [r3, #0]
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	3304      	adds	r3, #4
 8005750:	4619      	mov	r1, r3
 8005752:	4610      	mov	r0, r2
 8005754:	f000 f9da 	bl	8005b0c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	2201      	movs	r2, #1
 800575c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	2201      	movs	r2, #1
 8005764:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	2201      	movs	r2, #1
 800576c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	2201      	movs	r2, #1
 8005774:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	2201      	movs	r2, #1
 800577c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	2201      	movs	r2, #1
 8005784:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	2201      	movs	r2, #1
 800578c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	2201      	movs	r2, #1
 8005794:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	2201      	movs	r2, #1
 800579c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	2201      	movs	r2, #1
 80057a4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	2201      	movs	r2, #1
 80057ac:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	2201      	movs	r2, #1
 80057b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80057b8:	2300      	movs	r3, #0
}
 80057ba:	4618      	mov	r0, r3
 80057bc:	3708      	adds	r7, #8
 80057be:	46bd      	mov	sp, r7
 80057c0:	bd80      	pop	{r7, pc}

080057c2 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 80057c2:	b580      	push	{r7, lr}
 80057c4:	b082      	sub	sp, #8
 80057c6:	af00      	add	r7, sp, #0
 80057c8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d101      	bne.n	80057d4 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 80057d0:	2301      	movs	r3, #1
 80057d2:	e049      	b.n	8005868 <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80057da:	b2db      	uxtb	r3, r3
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d106      	bne.n	80057ee <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	2200      	movs	r2, #0
 80057e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 80057e8:	6878      	ldr	r0, [r7, #4]
 80057ea:	f000 f841 	bl	8005870 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	2202      	movs	r2, #2
 80057f2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681a      	ldr	r2, [r3, #0]
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	3304      	adds	r3, #4
 80057fe:	4619      	mov	r1, r3
 8005800:	4610      	mov	r0, r2
 8005802:	f000 f983 	bl	8005b0c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	2201      	movs	r2, #1
 800580a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	2201      	movs	r2, #1
 8005812:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	2201      	movs	r2, #1
 800581a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	2201      	movs	r2, #1
 8005822:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	2201      	movs	r2, #1
 800582a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	2201      	movs	r2, #1
 8005832:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	2201      	movs	r2, #1
 800583a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	2201      	movs	r2, #1
 8005842:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	2201      	movs	r2, #1
 800584a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	2201      	movs	r2, #1
 8005852:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	2201      	movs	r2, #1
 800585a:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	2201      	movs	r2, #1
 8005862:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005866:	2300      	movs	r3, #0
}
 8005868:	4618      	mov	r0, r3
 800586a:	3708      	adds	r7, #8
 800586c:	46bd      	mov	sp, r7
 800586e:	bd80      	pop	{r7, pc}

08005870 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8005870:	b480      	push	{r7}
 8005872:	b083      	sub	sp, #12
 8005874:	af00      	add	r7, sp, #0
 8005876:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8005878:	bf00      	nop
 800587a:	370c      	adds	r7, #12
 800587c:	46bd      	mov	sp, r7
 800587e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005882:	4770      	bx	lr

08005884 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8005884:	b580      	push	{r7, lr}
 8005886:	b086      	sub	sp, #24
 8005888:	af00      	add	r7, sp, #0
 800588a:	60f8      	str	r0, [r7, #12]
 800588c:	60b9      	str	r1, [r7, #8]
 800588e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005890:	2300      	movs	r3, #0
 8005892:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800589a:	2b01      	cmp	r3, #1
 800589c:	d101      	bne.n	80058a2 <HAL_TIM_OC_ConfigChannel+0x1e>
 800589e:	2302      	movs	r3, #2
 80058a0:	e066      	b.n	8005970 <HAL_TIM_OC_ConfigChannel+0xec>
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	2201      	movs	r2, #1
 80058a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	2b14      	cmp	r3, #20
 80058ae:	d857      	bhi.n	8005960 <HAL_TIM_OC_ConfigChannel+0xdc>
 80058b0:	a201      	add	r2, pc, #4	@ (adr r2, 80058b8 <HAL_TIM_OC_ConfigChannel+0x34>)
 80058b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058b6:	bf00      	nop
 80058b8:	0800590d 	.word	0x0800590d
 80058bc:	08005961 	.word	0x08005961
 80058c0:	08005961 	.word	0x08005961
 80058c4:	08005961 	.word	0x08005961
 80058c8:	0800591b 	.word	0x0800591b
 80058cc:	08005961 	.word	0x08005961
 80058d0:	08005961 	.word	0x08005961
 80058d4:	08005961 	.word	0x08005961
 80058d8:	08005929 	.word	0x08005929
 80058dc:	08005961 	.word	0x08005961
 80058e0:	08005961 	.word	0x08005961
 80058e4:	08005961 	.word	0x08005961
 80058e8:	08005937 	.word	0x08005937
 80058ec:	08005961 	.word	0x08005961
 80058f0:	08005961 	.word	0x08005961
 80058f4:	08005961 	.word	0x08005961
 80058f8:	08005945 	.word	0x08005945
 80058fc:	08005961 	.word	0x08005961
 8005900:	08005961 	.word	0x08005961
 8005904:	08005961 	.word	0x08005961
 8005908:	08005953 	.word	0x08005953
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	68b9      	ldr	r1, [r7, #8]
 8005912:	4618      	mov	r0, r3
 8005914:	f000 f95e 	bl	8005bd4 <TIM_OC1_SetConfig>
      break;
 8005918:	e025      	b.n	8005966 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	68b9      	ldr	r1, [r7, #8]
 8005920:	4618      	mov	r0, r3
 8005922:	f000 f9d3 	bl	8005ccc <TIM_OC2_SetConfig>
      break;
 8005926:	e01e      	b.n	8005966 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	68b9      	ldr	r1, [r7, #8]
 800592e:	4618      	mov	r0, r3
 8005930:	f000 fa46 	bl	8005dc0 <TIM_OC3_SetConfig>
      break;
 8005934:	e017      	b.n	8005966 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	68b9      	ldr	r1, [r7, #8]
 800593c:	4618      	mov	r0, r3
 800593e:	f000 fab7 	bl	8005eb0 <TIM_OC4_SetConfig>
      break;
 8005942:	e010      	b.n	8005966 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	68b9      	ldr	r1, [r7, #8]
 800594a:	4618      	mov	r0, r3
 800594c:	f000 fb0e 	bl	8005f6c <TIM_OC5_SetConfig>
      break;
 8005950:	e009      	b.n	8005966 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	68b9      	ldr	r1, [r7, #8]
 8005958:	4618      	mov	r0, r3
 800595a:	f000 fb5f 	bl	800601c <TIM_OC6_SetConfig>
      break;
 800595e:	e002      	b.n	8005966 <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 8005960:	2301      	movs	r3, #1
 8005962:	75fb      	strb	r3, [r7, #23]
      break;
 8005964:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	2200      	movs	r2, #0
 800596a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800596e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005970:	4618      	mov	r0, r3
 8005972:	3718      	adds	r7, #24
 8005974:	46bd      	mov	sp, r7
 8005976:	bd80      	pop	{r7, pc}

08005978 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005978:	b580      	push	{r7, lr}
 800597a:	b084      	sub	sp, #16
 800597c:	af00      	add	r7, sp, #0
 800597e:	6078      	str	r0, [r7, #4]
 8005980:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005982:	2300      	movs	r3, #0
 8005984:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800598c:	2b01      	cmp	r3, #1
 800598e:	d101      	bne.n	8005994 <HAL_TIM_ConfigClockSource+0x1c>
 8005990:	2302      	movs	r3, #2
 8005992:	e0b6      	b.n	8005b02 <HAL_TIM_ConfigClockSource+0x18a>
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	2201      	movs	r2, #1
 8005998:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	2202      	movs	r2, #2
 80059a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	689b      	ldr	r3, [r3, #8]
 80059aa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80059ac:	68bb      	ldr	r3, [r7, #8]
 80059ae:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80059b2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80059b6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80059b8:	68bb      	ldr	r3, [r7, #8]
 80059ba:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80059be:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	68ba      	ldr	r2, [r7, #8]
 80059c6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80059c8:	683b      	ldr	r3, [r7, #0]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80059d0:	d03e      	beq.n	8005a50 <HAL_TIM_ConfigClockSource+0xd8>
 80059d2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80059d6:	f200 8087 	bhi.w	8005ae8 <HAL_TIM_ConfigClockSource+0x170>
 80059da:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80059de:	f000 8086 	beq.w	8005aee <HAL_TIM_ConfigClockSource+0x176>
 80059e2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80059e6:	d87f      	bhi.n	8005ae8 <HAL_TIM_ConfigClockSource+0x170>
 80059e8:	2b70      	cmp	r3, #112	@ 0x70
 80059ea:	d01a      	beq.n	8005a22 <HAL_TIM_ConfigClockSource+0xaa>
 80059ec:	2b70      	cmp	r3, #112	@ 0x70
 80059ee:	d87b      	bhi.n	8005ae8 <HAL_TIM_ConfigClockSource+0x170>
 80059f0:	2b60      	cmp	r3, #96	@ 0x60
 80059f2:	d050      	beq.n	8005a96 <HAL_TIM_ConfigClockSource+0x11e>
 80059f4:	2b60      	cmp	r3, #96	@ 0x60
 80059f6:	d877      	bhi.n	8005ae8 <HAL_TIM_ConfigClockSource+0x170>
 80059f8:	2b50      	cmp	r3, #80	@ 0x50
 80059fa:	d03c      	beq.n	8005a76 <HAL_TIM_ConfigClockSource+0xfe>
 80059fc:	2b50      	cmp	r3, #80	@ 0x50
 80059fe:	d873      	bhi.n	8005ae8 <HAL_TIM_ConfigClockSource+0x170>
 8005a00:	2b40      	cmp	r3, #64	@ 0x40
 8005a02:	d058      	beq.n	8005ab6 <HAL_TIM_ConfigClockSource+0x13e>
 8005a04:	2b40      	cmp	r3, #64	@ 0x40
 8005a06:	d86f      	bhi.n	8005ae8 <HAL_TIM_ConfigClockSource+0x170>
 8005a08:	2b30      	cmp	r3, #48	@ 0x30
 8005a0a:	d064      	beq.n	8005ad6 <HAL_TIM_ConfigClockSource+0x15e>
 8005a0c:	2b30      	cmp	r3, #48	@ 0x30
 8005a0e:	d86b      	bhi.n	8005ae8 <HAL_TIM_ConfigClockSource+0x170>
 8005a10:	2b20      	cmp	r3, #32
 8005a12:	d060      	beq.n	8005ad6 <HAL_TIM_ConfigClockSource+0x15e>
 8005a14:	2b20      	cmp	r3, #32
 8005a16:	d867      	bhi.n	8005ae8 <HAL_TIM_ConfigClockSource+0x170>
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d05c      	beq.n	8005ad6 <HAL_TIM_ConfigClockSource+0x15e>
 8005a1c:	2b10      	cmp	r3, #16
 8005a1e:	d05a      	beq.n	8005ad6 <HAL_TIM_ConfigClockSource+0x15e>
 8005a20:	e062      	b.n	8005ae8 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005a26:	683b      	ldr	r3, [r7, #0]
 8005a28:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005a2a:	683b      	ldr	r3, [r7, #0]
 8005a2c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005a2e:	683b      	ldr	r3, [r7, #0]
 8005a30:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005a32:	f000 fbc7 	bl	80061c4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	689b      	ldr	r3, [r3, #8]
 8005a3c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005a3e:	68bb      	ldr	r3, [r7, #8]
 8005a40:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005a44:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	68ba      	ldr	r2, [r7, #8]
 8005a4c:	609a      	str	r2, [r3, #8]
      break;
 8005a4e:	e04f      	b.n	8005af0 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005a54:	683b      	ldr	r3, [r7, #0]
 8005a56:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005a58:	683b      	ldr	r3, [r7, #0]
 8005a5a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005a5c:	683b      	ldr	r3, [r7, #0]
 8005a5e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005a60:	f000 fbb0 	bl	80061c4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	689a      	ldr	r2, [r3, #8]
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005a72:	609a      	str	r2, [r3, #8]
      break;
 8005a74:	e03c      	b.n	8005af0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005a7a:	683b      	ldr	r3, [r7, #0]
 8005a7c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005a7e:	683b      	ldr	r3, [r7, #0]
 8005a80:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005a82:	461a      	mov	r2, r3
 8005a84:	f000 fb24 	bl	80060d0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	2150      	movs	r1, #80	@ 0x50
 8005a8e:	4618      	mov	r0, r3
 8005a90:	f000 fb7d 	bl	800618e <TIM_ITRx_SetConfig>
      break;
 8005a94:	e02c      	b.n	8005af0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005a9a:	683b      	ldr	r3, [r7, #0]
 8005a9c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005a9e:	683b      	ldr	r3, [r7, #0]
 8005aa0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005aa2:	461a      	mov	r2, r3
 8005aa4:	f000 fb43 	bl	800612e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	2160      	movs	r1, #96	@ 0x60
 8005aae:	4618      	mov	r0, r3
 8005ab0:	f000 fb6d 	bl	800618e <TIM_ITRx_SetConfig>
      break;
 8005ab4:	e01c      	b.n	8005af0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005aba:	683b      	ldr	r3, [r7, #0]
 8005abc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005abe:	683b      	ldr	r3, [r7, #0]
 8005ac0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005ac2:	461a      	mov	r2, r3
 8005ac4:	f000 fb04 	bl	80060d0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	2140      	movs	r1, #64	@ 0x40
 8005ace:	4618      	mov	r0, r3
 8005ad0:	f000 fb5d 	bl	800618e <TIM_ITRx_SetConfig>
      break;
 8005ad4:	e00c      	b.n	8005af0 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681a      	ldr	r2, [r3, #0]
 8005ada:	683b      	ldr	r3, [r7, #0]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	4619      	mov	r1, r3
 8005ae0:	4610      	mov	r0, r2
 8005ae2:	f000 fb54 	bl	800618e <TIM_ITRx_SetConfig>
      break;
 8005ae6:	e003      	b.n	8005af0 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8005ae8:	2301      	movs	r3, #1
 8005aea:	73fb      	strb	r3, [r7, #15]
      break;
 8005aec:	e000      	b.n	8005af0 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8005aee:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	2201      	movs	r2, #1
 8005af4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	2200      	movs	r2, #0
 8005afc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005b00:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b02:	4618      	mov	r0, r3
 8005b04:	3710      	adds	r7, #16
 8005b06:	46bd      	mov	sp, r7
 8005b08:	bd80      	pop	{r7, pc}
	...

08005b0c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005b0c:	b480      	push	{r7}
 8005b0e:	b085      	sub	sp, #20
 8005b10:	af00      	add	r7, sp, #0
 8005b12:	6078      	str	r0, [r7, #4]
 8005b14:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	4a2a      	ldr	r2, [pc, #168]	@ (8005bc8 <TIM_Base_SetConfig+0xbc>)
 8005b20:	4293      	cmp	r3, r2
 8005b22:	d003      	beq.n	8005b2c <TIM_Base_SetConfig+0x20>
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005b2a:	d108      	bne.n	8005b3e <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005b32:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005b34:	683b      	ldr	r3, [r7, #0]
 8005b36:	685b      	ldr	r3, [r3, #4]
 8005b38:	68fa      	ldr	r2, [r7, #12]
 8005b3a:	4313      	orrs	r3, r2
 8005b3c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	4a21      	ldr	r2, [pc, #132]	@ (8005bc8 <TIM_Base_SetConfig+0xbc>)
 8005b42:	4293      	cmp	r3, r2
 8005b44:	d00b      	beq.n	8005b5e <TIM_Base_SetConfig+0x52>
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005b4c:	d007      	beq.n	8005b5e <TIM_Base_SetConfig+0x52>
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	4a1e      	ldr	r2, [pc, #120]	@ (8005bcc <TIM_Base_SetConfig+0xc0>)
 8005b52:	4293      	cmp	r3, r2
 8005b54:	d003      	beq.n	8005b5e <TIM_Base_SetConfig+0x52>
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	4a1d      	ldr	r2, [pc, #116]	@ (8005bd0 <TIM_Base_SetConfig+0xc4>)
 8005b5a:	4293      	cmp	r3, r2
 8005b5c:	d108      	bne.n	8005b70 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005b64:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005b66:	683b      	ldr	r3, [r7, #0]
 8005b68:	68db      	ldr	r3, [r3, #12]
 8005b6a:	68fa      	ldr	r2, [r7, #12]
 8005b6c:	4313      	orrs	r3, r2
 8005b6e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005b76:	683b      	ldr	r3, [r7, #0]
 8005b78:	695b      	ldr	r3, [r3, #20]
 8005b7a:	4313      	orrs	r3, r2
 8005b7c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	68fa      	ldr	r2, [r7, #12]
 8005b82:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005b84:	683b      	ldr	r3, [r7, #0]
 8005b86:	689a      	ldr	r2, [r3, #8]
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005b8c:	683b      	ldr	r3, [r7, #0]
 8005b8e:	681a      	ldr	r2, [r3, #0]
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	4a0c      	ldr	r2, [pc, #48]	@ (8005bc8 <TIM_Base_SetConfig+0xbc>)
 8005b98:	4293      	cmp	r3, r2
 8005b9a:	d007      	beq.n	8005bac <TIM_Base_SetConfig+0xa0>
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	4a0b      	ldr	r2, [pc, #44]	@ (8005bcc <TIM_Base_SetConfig+0xc0>)
 8005ba0:	4293      	cmp	r3, r2
 8005ba2:	d003      	beq.n	8005bac <TIM_Base_SetConfig+0xa0>
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	4a0a      	ldr	r2, [pc, #40]	@ (8005bd0 <TIM_Base_SetConfig+0xc4>)
 8005ba8:	4293      	cmp	r3, r2
 8005baa:	d103      	bne.n	8005bb4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005bac:	683b      	ldr	r3, [r7, #0]
 8005bae:	691a      	ldr	r2, [r3, #16]
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	2201      	movs	r2, #1
 8005bb8:	615a      	str	r2, [r3, #20]
}
 8005bba:	bf00      	nop
 8005bbc:	3714      	adds	r7, #20
 8005bbe:	46bd      	mov	sp, r7
 8005bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc4:	4770      	bx	lr
 8005bc6:	bf00      	nop
 8005bc8:	40012c00 	.word	0x40012c00
 8005bcc:	40014000 	.word	0x40014000
 8005bd0:	40014400 	.word	0x40014400

08005bd4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005bd4:	b480      	push	{r7}
 8005bd6:	b087      	sub	sp, #28
 8005bd8:	af00      	add	r7, sp, #0
 8005bda:	6078      	str	r0, [r7, #4]
 8005bdc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	6a1b      	ldr	r3, [r3, #32]
 8005be2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	6a1b      	ldr	r3, [r3, #32]
 8005be8:	f023 0201 	bic.w	r2, r3, #1
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	685b      	ldr	r3, [r3, #4]
 8005bf4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	699b      	ldr	r3, [r3, #24]
 8005bfa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005c02:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005c06:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	f023 0303 	bic.w	r3, r3, #3
 8005c0e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005c10:	683b      	ldr	r3, [r7, #0]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	68fa      	ldr	r2, [r7, #12]
 8005c16:	4313      	orrs	r3, r2
 8005c18:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005c1a:	697b      	ldr	r3, [r7, #20]
 8005c1c:	f023 0302 	bic.w	r3, r3, #2
 8005c20:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005c22:	683b      	ldr	r3, [r7, #0]
 8005c24:	689b      	ldr	r3, [r3, #8]
 8005c26:	697a      	ldr	r2, [r7, #20]
 8005c28:	4313      	orrs	r3, r2
 8005c2a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	4a24      	ldr	r2, [pc, #144]	@ (8005cc0 <TIM_OC1_SetConfig+0xec>)
 8005c30:	4293      	cmp	r3, r2
 8005c32:	d007      	beq.n	8005c44 <TIM_OC1_SetConfig+0x70>
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	4a23      	ldr	r2, [pc, #140]	@ (8005cc4 <TIM_OC1_SetConfig+0xf0>)
 8005c38:	4293      	cmp	r3, r2
 8005c3a:	d003      	beq.n	8005c44 <TIM_OC1_SetConfig+0x70>
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	4a22      	ldr	r2, [pc, #136]	@ (8005cc8 <TIM_OC1_SetConfig+0xf4>)
 8005c40:	4293      	cmp	r3, r2
 8005c42:	d10c      	bne.n	8005c5e <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005c44:	697b      	ldr	r3, [r7, #20]
 8005c46:	f023 0308 	bic.w	r3, r3, #8
 8005c4a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005c4c:	683b      	ldr	r3, [r7, #0]
 8005c4e:	68db      	ldr	r3, [r3, #12]
 8005c50:	697a      	ldr	r2, [r7, #20]
 8005c52:	4313      	orrs	r3, r2
 8005c54:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005c56:	697b      	ldr	r3, [r7, #20]
 8005c58:	f023 0304 	bic.w	r3, r3, #4
 8005c5c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	4a17      	ldr	r2, [pc, #92]	@ (8005cc0 <TIM_OC1_SetConfig+0xec>)
 8005c62:	4293      	cmp	r3, r2
 8005c64:	d007      	beq.n	8005c76 <TIM_OC1_SetConfig+0xa2>
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	4a16      	ldr	r2, [pc, #88]	@ (8005cc4 <TIM_OC1_SetConfig+0xf0>)
 8005c6a:	4293      	cmp	r3, r2
 8005c6c:	d003      	beq.n	8005c76 <TIM_OC1_SetConfig+0xa2>
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	4a15      	ldr	r2, [pc, #84]	@ (8005cc8 <TIM_OC1_SetConfig+0xf4>)
 8005c72:	4293      	cmp	r3, r2
 8005c74:	d111      	bne.n	8005c9a <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005c76:	693b      	ldr	r3, [r7, #16]
 8005c78:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005c7c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005c7e:	693b      	ldr	r3, [r7, #16]
 8005c80:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005c84:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005c86:	683b      	ldr	r3, [r7, #0]
 8005c88:	695b      	ldr	r3, [r3, #20]
 8005c8a:	693a      	ldr	r2, [r7, #16]
 8005c8c:	4313      	orrs	r3, r2
 8005c8e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005c90:	683b      	ldr	r3, [r7, #0]
 8005c92:	699b      	ldr	r3, [r3, #24]
 8005c94:	693a      	ldr	r2, [r7, #16]
 8005c96:	4313      	orrs	r3, r2
 8005c98:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	693a      	ldr	r2, [r7, #16]
 8005c9e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	68fa      	ldr	r2, [r7, #12]
 8005ca4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005ca6:	683b      	ldr	r3, [r7, #0]
 8005ca8:	685a      	ldr	r2, [r3, #4]
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	697a      	ldr	r2, [r7, #20]
 8005cb2:	621a      	str	r2, [r3, #32]
}
 8005cb4:	bf00      	nop
 8005cb6:	371c      	adds	r7, #28
 8005cb8:	46bd      	mov	sp, r7
 8005cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cbe:	4770      	bx	lr
 8005cc0:	40012c00 	.word	0x40012c00
 8005cc4:	40014000 	.word	0x40014000
 8005cc8:	40014400 	.word	0x40014400

08005ccc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005ccc:	b480      	push	{r7}
 8005cce:	b087      	sub	sp, #28
 8005cd0:	af00      	add	r7, sp, #0
 8005cd2:	6078      	str	r0, [r7, #4]
 8005cd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	6a1b      	ldr	r3, [r3, #32]
 8005cda:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	6a1b      	ldr	r3, [r3, #32]
 8005ce0:	f023 0210 	bic.w	r2, r3, #16
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	685b      	ldr	r3, [r3, #4]
 8005cec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	699b      	ldr	r3, [r3, #24]
 8005cf2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005cfa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005cfe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005d06:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005d08:	683b      	ldr	r3, [r7, #0]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	021b      	lsls	r3, r3, #8
 8005d0e:	68fa      	ldr	r2, [r7, #12]
 8005d10:	4313      	orrs	r3, r2
 8005d12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005d14:	697b      	ldr	r3, [r7, #20]
 8005d16:	f023 0320 	bic.w	r3, r3, #32
 8005d1a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005d1c:	683b      	ldr	r3, [r7, #0]
 8005d1e:	689b      	ldr	r3, [r3, #8]
 8005d20:	011b      	lsls	r3, r3, #4
 8005d22:	697a      	ldr	r2, [r7, #20]
 8005d24:	4313      	orrs	r3, r2
 8005d26:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	4a22      	ldr	r2, [pc, #136]	@ (8005db4 <TIM_OC2_SetConfig+0xe8>)
 8005d2c:	4293      	cmp	r3, r2
 8005d2e:	d10d      	bne.n	8005d4c <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005d30:	697b      	ldr	r3, [r7, #20]
 8005d32:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005d36:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005d38:	683b      	ldr	r3, [r7, #0]
 8005d3a:	68db      	ldr	r3, [r3, #12]
 8005d3c:	011b      	lsls	r3, r3, #4
 8005d3e:	697a      	ldr	r2, [r7, #20]
 8005d40:	4313      	orrs	r3, r2
 8005d42:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005d44:	697b      	ldr	r3, [r7, #20]
 8005d46:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005d4a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	4a19      	ldr	r2, [pc, #100]	@ (8005db4 <TIM_OC2_SetConfig+0xe8>)
 8005d50:	4293      	cmp	r3, r2
 8005d52:	d007      	beq.n	8005d64 <TIM_OC2_SetConfig+0x98>
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	4a18      	ldr	r2, [pc, #96]	@ (8005db8 <TIM_OC2_SetConfig+0xec>)
 8005d58:	4293      	cmp	r3, r2
 8005d5a:	d003      	beq.n	8005d64 <TIM_OC2_SetConfig+0x98>
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	4a17      	ldr	r2, [pc, #92]	@ (8005dbc <TIM_OC2_SetConfig+0xf0>)
 8005d60:	4293      	cmp	r3, r2
 8005d62:	d113      	bne.n	8005d8c <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005d64:	693b      	ldr	r3, [r7, #16]
 8005d66:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005d6a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005d6c:	693b      	ldr	r3, [r7, #16]
 8005d6e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005d72:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005d74:	683b      	ldr	r3, [r7, #0]
 8005d76:	695b      	ldr	r3, [r3, #20]
 8005d78:	009b      	lsls	r3, r3, #2
 8005d7a:	693a      	ldr	r2, [r7, #16]
 8005d7c:	4313      	orrs	r3, r2
 8005d7e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005d80:	683b      	ldr	r3, [r7, #0]
 8005d82:	699b      	ldr	r3, [r3, #24]
 8005d84:	009b      	lsls	r3, r3, #2
 8005d86:	693a      	ldr	r2, [r7, #16]
 8005d88:	4313      	orrs	r3, r2
 8005d8a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	693a      	ldr	r2, [r7, #16]
 8005d90:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	68fa      	ldr	r2, [r7, #12]
 8005d96:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005d98:	683b      	ldr	r3, [r7, #0]
 8005d9a:	685a      	ldr	r2, [r3, #4]
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	697a      	ldr	r2, [r7, #20]
 8005da4:	621a      	str	r2, [r3, #32]
}
 8005da6:	bf00      	nop
 8005da8:	371c      	adds	r7, #28
 8005daa:	46bd      	mov	sp, r7
 8005dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db0:	4770      	bx	lr
 8005db2:	bf00      	nop
 8005db4:	40012c00 	.word	0x40012c00
 8005db8:	40014000 	.word	0x40014000
 8005dbc:	40014400 	.word	0x40014400

08005dc0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005dc0:	b480      	push	{r7}
 8005dc2:	b087      	sub	sp, #28
 8005dc4:	af00      	add	r7, sp, #0
 8005dc6:	6078      	str	r0, [r7, #4]
 8005dc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	6a1b      	ldr	r3, [r3, #32]
 8005dce:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	6a1b      	ldr	r3, [r3, #32]
 8005dd4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	685b      	ldr	r3, [r3, #4]
 8005de0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	69db      	ldr	r3, [r3, #28]
 8005de6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005dee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005df2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	f023 0303 	bic.w	r3, r3, #3
 8005dfa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005dfc:	683b      	ldr	r3, [r7, #0]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	68fa      	ldr	r2, [r7, #12]
 8005e02:	4313      	orrs	r3, r2
 8005e04:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005e06:	697b      	ldr	r3, [r7, #20]
 8005e08:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005e0c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005e0e:	683b      	ldr	r3, [r7, #0]
 8005e10:	689b      	ldr	r3, [r3, #8]
 8005e12:	021b      	lsls	r3, r3, #8
 8005e14:	697a      	ldr	r2, [r7, #20]
 8005e16:	4313      	orrs	r3, r2
 8005e18:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	4a21      	ldr	r2, [pc, #132]	@ (8005ea4 <TIM_OC3_SetConfig+0xe4>)
 8005e1e:	4293      	cmp	r3, r2
 8005e20:	d10d      	bne.n	8005e3e <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005e22:	697b      	ldr	r3, [r7, #20]
 8005e24:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005e28:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005e2a:	683b      	ldr	r3, [r7, #0]
 8005e2c:	68db      	ldr	r3, [r3, #12]
 8005e2e:	021b      	lsls	r3, r3, #8
 8005e30:	697a      	ldr	r2, [r7, #20]
 8005e32:	4313      	orrs	r3, r2
 8005e34:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005e36:	697b      	ldr	r3, [r7, #20]
 8005e38:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005e3c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	4a18      	ldr	r2, [pc, #96]	@ (8005ea4 <TIM_OC3_SetConfig+0xe4>)
 8005e42:	4293      	cmp	r3, r2
 8005e44:	d007      	beq.n	8005e56 <TIM_OC3_SetConfig+0x96>
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	4a17      	ldr	r2, [pc, #92]	@ (8005ea8 <TIM_OC3_SetConfig+0xe8>)
 8005e4a:	4293      	cmp	r3, r2
 8005e4c:	d003      	beq.n	8005e56 <TIM_OC3_SetConfig+0x96>
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	4a16      	ldr	r2, [pc, #88]	@ (8005eac <TIM_OC3_SetConfig+0xec>)
 8005e52:	4293      	cmp	r3, r2
 8005e54:	d113      	bne.n	8005e7e <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005e56:	693b      	ldr	r3, [r7, #16]
 8005e58:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005e5c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005e5e:	693b      	ldr	r3, [r7, #16]
 8005e60:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005e64:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005e66:	683b      	ldr	r3, [r7, #0]
 8005e68:	695b      	ldr	r3, [r3, #20]
 8005e6a:	011b      	lsls	r3, r3, #4
 8005e6c:	693a      	ldr	r2, [r7, #16]
 8005e6e:	4313      	orrs	r3, r2
 8005e70:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005e72:	683b      	ldr	r3, [r7, #0]
 8005e74:	699b      	ldr	r3, [r3, #24]
 8005e76:	011b      	lsls	r3, r3, #4
 8005e78:	693a      	ldr	r2, [r7, #16]
 8005e7a:	4313      	orrs	r3, r2
 8005e7c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	693a      	ldr	r2, [r7, #16]
 8005e82:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	68fa      	ldr	r2, [r7, #12]
 8005e88:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005e8a:	683b      	ldr	r3, [r7, #0]
 8005e8c:	685a      	ldr	r2, [r3, #4]
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	697a      	ldr	r2, [r7, #20]
 8005e96:	621a      	str	r2, [r3, #32]
}
 8005e98:	bf00      	nop
 8005e9a:	371c      	adds	r7, #28
 8005e9c:	46bd      	mov	sp, r7
 8005e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea2:	4770      	bx	lr
 8005ea4:	40012c00 	.word	0x40012c00
 8005ea8:	40014000 	.word	0x40014000
 8005eac:	40014400 	.word	0x40014400

08005eb0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005eb0:	b480      	push	{r7}
 8005eb2:	b087      	sub	sp, #28
 8005eb4:	af00      	add	r7, sp, #0
 8005eb6:	6078      	str	r0, [r7, #4]
 8005eb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	6a1b      	ldr	r3, [r3, #32]
 8005ebe:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	6a1b      	ldr	r3, [r3, #32]
 8005ec4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	685b      	ldr	r3, [r3, #4]
 8005ed0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	69db      	ldr	r3, [r3, #28]
 8005ed6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005ede:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005ee2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005eea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005eec:	683b      	ldr	r3, [r7, #0]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	021b      	lsls	r3, r3, #8
 8005ef2:	68fa      	ldr	r2, [r7, #12]
 8005ef4:	4313      	orrs	r3, r2
 8005ef6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005ef8:	693b      	ldr	r3, [r7, #16]
 8005efa:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005efe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005f00:	683b      	ldr	r3, [r7, #0]
 8005f02:	689b      	ldr	r3, [r3, #8]
 8005f04:	031b      	lsls	r3, r3, #12
 8005f06:	693a      	ldr	r2, [r7, #16]
 8005f08:	4313      	orrs	r3, r2
 8005f0a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	4a14      	ldr	r2, [pc, #80]	@ (8005f60 <TIM_OC4_SetConfig+0xb0>)
 8005f10:	4293      	cmp	r3, r2
 8005f12:	d007      	beq.n	8005f24 <TIM_OC4_SetConfig+0x74>
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	4a13      	ldr	r2, [pc, #76]	@ (8005f64 <TIM_OC4_SetConfig+0xb4>)
 8005f18:	4293      	cmp	r3, r2
 8005f1a:	d003      	beq.n	8005f24 <TIM_OC4_SetConfig+0x74>
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	4a12      	ldr	r2, [pc, #72]	@ (8005f68 <TIM_OC4_SetConfig+0xb8>)
 8005f20:	4293      	cmp	r3, r2
 8005f22:	d109      	bne.n	8005f38 <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005f24:	697b      	ldr	r3, [r7, #20]
 8005f26:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005f2a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005f2c:	683b      	ldr	r3, [r7, #0]
 8005f2e:	695b      	ldr	r3, [r3, #20]
 8005f30:	019b      	lsls	r3, r3, #6
 8005f32:	697a      	ldr	r2, [r7, #20]
 8005f34:	4313      	orrs	r3, r2
 8005f36:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	697a      	ldr	r2, [r7, #20]
 8005f3c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	68fa      	ldr	r2, [r7, #12]
 8005f42:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005f44:	683b      	ldr	r3, [r7, #0]
 8005f46:	685a      	ldr	r2, [r3, #4]
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	693a      	ldr	r2, [r7, #16]
 8005f50:	621a      	str	r2, [r3, #32]
}
 8005f52:	bf00      	nop
 8005f54:	371c      	adds	r7, #28
 8005f56:	46bd      	mov	sp, r7
 8005f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f5c:	4770      	bx	lr
 8005f5e:	bf00      	nop
 8005f60:	40012c00 	.word	0x40012c00
 8005f64:	40014000 	.word	0x40014000
 8005f68:	40014400 	.word	0x40014400

08005f6c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005f6c:	b480      	push	{r7}
 8005f6e:	b087      	sub	sp, #28
 8005f70:	af00      	add	r7, sp, #0
 8005f72:	6078      	str	r0, [r7, #4]
 8005f74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	6a1b      	ldr	r3, [r3, #32]
 8005f7a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	6a1b      	ldr	r3, [r3, #32]
 8005f80:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	685b      	ldr	r3, [r3, #4]
 8005f8c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005f92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005f9a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005f9e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005fa0:	683b      	ldr	r3, [r7, #0]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	68fa      	ldr	r2, [r7, #12]
 8005fa6:	4313      	orrs	r3, r2
 8005fa8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005faa:	693b      	ldr	r3, [r7, #16]
 8005fac:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8005fb0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005fb2:	683b      	ldr	r3, [r7, #0]
 8005fb4:	689b      	ldr	r3, [r3, #8]
 8005fb6:	041b      	lsls	r3, r3, #16
 8005fb8:	693a      	ldr	r2, [r7, #16]
 8005fba:	4313      	orrs	r3, r2
 8005fbc:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	4a13      	ldr	r2, [pc, #76]	@ (8006010 <TIM_OC5_SetConfig+0xa4>)
 8005fc2:	4293      	cmp	r3, r2
 8005fc4:	d007      	beq.n	8005fd6 <TIM_OC5_SetConfig+0x6a>
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	4a12      	ldr	r2, [pc, #72]	@ (8006014 <TIM_OC5_SetConfig+0xa8>)
 8005fca:	4293      	cmp	r3, r2
 8005fcc:	d003      	beq.n	8005fd6 <TIM_OC5_SetConfig+0x6a>
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	4a11      	ldr	r2, [pc, #68]	@ (8006018 <TIM_OC5_SetConfig+0xac>)
 8005fd2:	4293      	cmp	r3, r2
 8005fd4:	d109      	bne.n	8005fea <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005fd6:	697b      	ldr	r3, [r7, #20]
 8005fd8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005fdc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005fde:	683b      	ldr	r3, [r7, #0]
 8005fe0:	695b      	ldr	r3, [r3, #20]
 8005fe2:	021b      	lsls	r3, r3, #8
 8005fe4:	697a      	ldr	r2, [r7, #20]
 8005fe6:	4313      	orrs	r3, r2
 8005fe8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	697a      	ldr	r2, [r7, #20]
 8005fee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	68fa      	ldr	r2, [r7, #12]
 8005ff4:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005ff6:	683b      	ldr	r3, [r7, #0]
 8005ff8:	685a      	ldr	r2, [r3, #4]
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	693a      	ldr	r2, [r7, #16]
 8006002:	621a      	str	r2, [r3, #32]
}
 8006004:	bf00      	nop
 8006006:	371c      	adds	r7, #28
 8006008:	46bd      	mov	sp, r7
 800600a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800600e:	4770      	bx	lr
 8006010:	40012c00 	.word	0x40012c00
 8006014:	40014000 	.word	0x40014000
 8006018:	40014400 	.word	0x40014400

0800601c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800601c:	b480      	push	{r7}
 800601e:	b087      	sub	sp, #28
 8006020:	af00      	add	r7, sp, #0
 8006022:	6078      	str	r0, [r7, #4]
 8006024:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	6a1b      	ldr	r3, [r3, #32]
 800602a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	6a1b      	ldr	r3, [r3, #32]
 8006030:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	685b      	ldr	r3, [r3, #4]
 800603c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006042:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800604a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800604e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006050:	683b      	ldr	r3, [r7, #0]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	021b      	lsls	r3, r3, #8
 8006056:	68fa      	ldr	r2, [r7, #12]
 8006058:	4313      	orrs	r3, r2
 800605a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800605c:	693b      	ldr	r3, [r7, #16]
 800605e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8006062:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006064:	683b      	ldr	r3, [r7, #0]
 8006066:	689b      	ldr	r3, [r3, #8]
 8006068:	051b      	lsls	r3, r3, #20
 800606a:	693a      	ldr	r2, [r7, #16]
 800606c:	4313      	orrs	r3, r2
 800606e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	4a14      	ldr	r2, [pc, #80]	@ (80060c4 <TIM_OC6_SetConfig+0xa8>)
 8006074:	4293      	cmp	r3, r2
 8006076:	d007      	beq.n	8006088 <TIM_OC6_SetConfig+0x6c>
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	4a13      	ldr	r2, [pc, #76]	@ (80060c8 <TIM_OC6_SetConfig+0xac>)
 800607c:	4293      	cmp	r3, r2
 800607e:	d003      	beq.n	8006088 <TIM_OC6_SetConfig+0x6c>
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	4a12      	ldr	r2, [pc, #72]	@ (80060cc <TIM_OC6_SetConfig+0xb0>)
 8006084:	4293      	cmp	r3, r2
 8006086:	d109      	bne.n	800609c <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006088:	697b      	ldr	r3, [r7, #20]
 800608a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800608e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006090:	683b      	ldr	r3, [r7, #0]
 8006092:	695b      	ldr	r3, [r3, #20]
 8006094:	029b      	lsls	r3, r3, #10
 8006096:	697a      	ldr	r2, [r7, #20]
 8006098:	4313      	orrs	r3, r2
 800609a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	697a      	ldr	r2, [r7, #20]
 80060a0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	68fa      	ldr	r2, [r7, #12]
 80060a6:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80060a8:	683b      	ldr	r3, [r7, #0]
 80060aa:	685a      	ldr	r2, [r3, #4]
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	693a      	ldr	r2, [r7, #16]
 80060b4:	621a      	str	r2, [r3, #32]
}
 80060b6:	bf00      	nop
 80060b8:	371c      	adds	r7, #28
 80060ba:	46bd      	mov	sp, r7
 80060bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c0:	4770      	bx	lr
 80060c2:	bf00      	nop
 80060c4:	40012c00 	.word	0x40012c00
 80060c8:	40014000 	.word	0x40014000
 80060cc:	40014400 	.word	0x40014400

080060d0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80060d0:	b480      	push	{r7}
 80060d2:	b087      	sub	sp, #28
 80060d4:	af00      	add	r7, sp, #0
 80060d6:	60f8      	str	r0, [r7, #12]
 80060d8:	60b9      	str	r1, [r7, #8]
 80060da:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	6a1b      	ldr	r3, [r3, #32]
 80060e0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	6a1b      	ldr	r3, [r3, #32]
 80060e6:	f023 0201 	bic.w	r2, r3, #1
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	699b      	ldr	r3, [r3, #24]
 80060f2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80060f4:	693b      	ldr	r3, [r7, #16]
 80060f6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80060fa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	011b      	lsls	r3, r3, #4
 8006100:	693a      	ldr	r2, [r7, #16]
 8006102:	4313      	orrs	r3, r2
 8006104:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006106:	697b      	ldr	r3, [r7, #20]
 8006108:	f023 030a 	bic.w	r3, r3, #10
 800610c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800610e:	697a      	ldr	r2, [r7, #20]
 8006110:	68bb      	ldr	r3, [r7, #8]
 8006112:	4313      	orrs	r3, r2
 8006114:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	693a      	ldr	r2, [r7, #16]
 800611a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	697a      	ldr	r2, [r7, #20]
 8006120:	621a      	str	r2, [r3, #32]
}
 8006122:	bf00      	nop
 8006124:	371c      	adds	r7, #28
 8006126:	46bd      	mov	sp, r7
 8006128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800612c:	4770      	bx	lr

0800612e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800612e:	b480      	push	{r7}
 8006130:	b087      	sub	sp, #28
 8006132:	af00      	add	r7, sp, #0
 8006134:	60f8      	str	r0, [r7, #12]
 8006136:	60b9      	str	r1, [r7, #8]
 8006138:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	6a1b      	ldr	r3, [r3, #32]
 800613e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	6a1b      	ldr	r3, [r3, #32]
 8006144:	f023 0210 	bic.w	r2, r3, #16
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	699b      	ldr	r3, [r3, #24]
 8006150:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006152:	693b      	ldr	r3, [r7, #16]
 8006154:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006158:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	031b      	lsls	r3, r3, #12
 800615e:	693a      	ldr	r2, [r7, #16]
 8006160:	4313      	orrs	r3, r2
 8006162:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006164:	697b      	ldr	r3, [r7, #20]
 8006166:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800616a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800616c:	68bb      	ldr	r3, [r7, #8]
 800616e:	011b      	lsls	r3, r3, #4
 8006170:	697a      	ldr	r2, [r7, #20]
 8006172:	4313      	orrs	r3, r2
 8006174:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	693a      	ldr	r2, [r7, #16]
 800617a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	697a      	ldr	r2, [r7, #20]
 8006180:	621a      	str	r2, [r3, #32]
}
 8006182:	bf00      	nop
 8006184:	371c      	adds	r7, #28
 8006186:	46bd      	mov	sp, r7
 8006188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800618c:	4770      	bx	lr

0800618e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800618e:	b480      	push	{r7}
 8006190:	b085      	sub	sp, #20
 8006192:	af00      	add	r7, sp, #0
 8006194:	6078      	str	r0, [r7, #4]
 8006196:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	689b      	ldr	r3, [r3, #8]
 800619c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80061a4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80061a6:	683a      	ldr	r2, [r7, #0]
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	4313      	orrs	r3, r2
 80061ac:	f043 0307 	orr.w	r3, r3, #7
 80061b0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	68fa      	ldr	r2, [r7, #12]
 80061b6:	609a      	str	r2, [r3, #8]
}
 80061b8:	bf00      	nop
 80061ba:	3714      	adds	r7, #20
 80061bc:	46bd      	mov	sp, r7
 80061be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c2:	4770      	bx	lr

080061c4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80061c4:	b480      	push	{r7}
 80061c6:	b087      	sub	sp, #28
 80061c8:	af00      	add	r7, sp, #0
 80061ca:	60f8      	str	r0, [r7, #12]
 80061cc:	60b9      	str	r1, [r7, #8]
 80061ce:	607a      	str	r2, [r7, #4]
 80061d0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	689b      	ldr	r3, [r3, #8]
 80061d6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80061d8:	697b      	ldr	r3, [r7, #20]
 80061da:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80061de:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80061e0:	683b      	ldr	r3, [r7, #0]
 80061e2:	021a      	lsls	r2, r3, #8
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	431a      	orrs	r2, r3
 80061e8:	68bb      	ldr	r3, [r7, #8]
 80061ea:	4313      	orrs	r3, r2
 80061ec:	697a      	ldr	r2, [r7, #20]
 80061ee:	4313      	orrs	r3, r2
 80061f0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	697a      	ldr	r2, [r7, #20]
 80061f6:	609a      	str	r2, [r3, #8]
}
 80061f8:	bf00      	nop
 80061fa:	371c      	adds	r7, #28
 80061fc:	46bd      	mov	sp, r7
 80061fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006202:	4770      	bx	lr

08006204 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006204:	b480      	push	{r7}
 8006206:	b085      	sub	sp, #20
 8006208:	af00      	add	r7, sp, #0
 800620a:	6078      	str	r0, [r7, #4]
 800620c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006214:	2b01      	cmp	r3, #1
 8006216:	d101      	bne.n	800621c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006218:	2302      	movs	r3, #2
 800621a:	e04f      	b.n	80062bc <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	2201      	movs	r2, #1
 8006220:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	2202      	movs	r2, #2
 8006228:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	685b      	ldr	r3, [r3, #4]
 8006232:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	689b      	ldr	r3, [r3, #8]
 800623a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	4a21      	ldr	r2, [pc, #132]	@ (80062c8 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8006242:	4293      	cmp	r3, r2
 8006244:	d108      	bne.n	8006258 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800624c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800624e:	683b      	ldr	r3, [r7, #0]
 8006250:	685b      	ldr	r3, [r3, #4]
 8006252:	68fa      	ldr	r2, [r7, #12]
 8006254:	4313      	orrs	r3, r2
 8006256:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800625e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006260:	683b      	ldr	r3, [r7, #0]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	68fa      	ldr	r2, [r7, #12]
 8006266:	4313      	orrs	r3, r2
 8006268:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	68fa      	ldr	r2, [r7, #12]
 8006270:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	4a14      	ldr	r2, [pc, #80]	@ (80062c8 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8006278:	4293      	cmp	r3, r2
 800627a:	d009      	beq.n	8006290 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006284:	d004      	beq.n	8006290 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	4a10      	ldr	r2, [pc, #64]	@ (80062cc <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800628c:	4293      	cmp	r3, r2
 800628e:	d10c      	bne.n	80062aa <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006290:	68bb      	ldr	r3, [r7, #8]
 8006292:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006296:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006298:	683b      	ldr	r3, [r7, #0]
 800629a:	689b      	ldr	r3, [r3, #8]
 800629c:	68ba      	ldr	r2, [r7, #8]
 800629e:	4313      	orrs	r3, r2
 80062a0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	68ba      	ldr	r2, [r7, #8]
 80062a8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	2201      	movs	r2, #1
 80062ae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	2200      	movs	r2, #0
 80062b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80062ba:	2300      	movs	r3, #0
}
 80062bc:	4618      	mov	r0, r3
 80062be:	3714      	adds	r7, #20
 80062c0:	46bd      	mov	sp, r7
 80062c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c6:	4770      	bx	lr
 80062c8:	40012c00 	.word	0x40012c00
 80062cc:	40014000 	.word	0x40014000

080062d0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80062d0:	b480      	push	{r7}
 80062d2:	b085      	sub	sp, #20
 80062d4:	af00      	add	r7, sp, #0
 80062d6:	6078      	str	r0, [r7, #4]
 80062d8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80062da:	2300      	movs	r3, #0
 80062dc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80062e4:	2b01      	cmp	r3, #1
 80062e6:	d101      	bne.n	80062ec <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80062e8:	2302      	movs	r3, #2
 80062ea:	e060      	b.n	80063ae <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	2201      	movs	r2, #1
 80062f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80062fa:	683b      	ldr	r3, [r7, #0]
 80062fc:	68db      	ldr	r3, [r3, #12]
 80062fe:	4313      	orrs	r3, r2
 8006300:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006308:	683b      	ldr	r3, [r7, #0]
 800630a:	689b      	ldr	r3, [r3, #8]
 800630c:	4313      	orrs	r3, r2
 800630e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8006316:	683b      	ldr	r3, [r7, #0]
 8006318:	685b      	ldr	r3, [r3, #4]
 800631a:	4313      	orrs	r3, r2
 800631c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8006324:	683b      	ldr	r3, [r7, #0]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	4313      	orrs	r3, r2
 800632a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006332:	683b      	ldr	r3, [r7, #0]
 8006334:	691b      	ldr	r3, [r3, #16]
 8006336:	4313      	orrs	r3, r2
 8006338:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8006340:	683b      	ldr	r3, [r7, #0]
 8006342:	695b      	ldr	r3, [r3, #20]
 8006344:	4313      	orrs	r3, r2
 8006346:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800634e:	683b      	ldr	r3, [r7, #0]
 8006350:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006352:	4313      	orrs	r3, r2
 8006354:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 800635c:	683b      	ldr	r3, [r7, #0]
 800635e:	699b      	ldr	r3, [r3, #24]
 8006360:	041b      	lsls	r3, r3, #16
 8006362:	4313      	orrs	r3, r2
 8006364:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	4a14      	ldr	r2, [pc, #80]	@ (80063bc <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 800636c:	4293      	cmp	r3, r2
 800636e:	d115      	bne.n	800639c <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8006376:	683b      	ldr	r3, [r7, #0]
 8006378:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800637a:	051b      	lsls	r3, r3, #20
 800637c:	4313      	orrs	r3, r2
 800637e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8006386:	683b      	ldr	r3, [r7, #0]
 8006388:	69db      	ldr	r3, [r3, #28]
 800638a:	4313      	orrs	r3, r2
 800638c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8006394:	683b      	ldr	r3, [r7, #0]
 8006396:	6a1b      	ldr	r3, [r3, #32]
 8006398:	4313      	orrs	r3, r2
 800639a:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	68fa      	ldr	r2, [r7, #12]
 80063a2:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	2200      	movs	r2, #0
 80063a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80063ac:	2300      	movs	r3, #0
}
 80063ae:	4618      	mov	r0, r3
 80063b0:	3714      	adds	r7, #20
 80063b2:	46bd      	mov	sp, r7
 80063b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b8:	4770      	bx	lr
 80063ba:	bf00      	nop
 80063bc:	40012c00 	.word	0x40012c00

080063c0 <SDMMC_Init>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Init SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 80063c0:	b084      	sub	sp, #16
 80063c2:	b480      	push	{r7}
 80063c4:	b085      	sub	sp, #20
 80063c6:	af00      	add	r7, sp, #0
 80063c8:	6078      	str	r0, [r7, #4]
 80063ca:	f107 001c 	add.w	r0, r7, #28
 80063ce:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 80063d2:	2300      	movs	r3, #0
 80063d4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  tmpreg |= Init.ClockBypass;
 80063d6:	6a3b      	ldr	r3, [r7, #32]
 80063d8:	68fa      	ldr	r2, [r7, #12]
 80063da:	4313      	orrs	r3, r2
 80063dc:	60fb      	str	r3, [r7, #12]
#endif
  tmpreg |= (Init.ClockEdge           |\
 80063de:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      |\
 80063e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
  tmpreg |= (Init.ClockEdge           |\
 80063e2:	431a      	orrs	r2, r3
             Init.BusWide             |\
 80063e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.ClockPowerSave      |\
 80063e6:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 80063e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.BusWide             |\
 80063ea:	431a      	orrs	r2, r3
             Init.ClockDiv
 80063ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
             Init.HardwareFlowControl |\
 80063ee:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 80063f0:	68fa      	ldr	r2, [r7, #12]
 80063f2:	4313      	orrs	r3, r2
 80063f4:	60fb      	str	r3, [r7, #12]
             );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	685b      	ldr	r3, [r3, #4]
 80063fa:	f423 43fd 	bic.w	r3, r3, #32384	@ 0x7e80
 80063fe:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8006402:	68fa      	ldr	r2, [r7, #12]
 8006404:	431a      	orrs	r2, r3
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800640a:	2300      	movs	r3, #0
}
 800640c:	4618      	mov	r0, r3
 800640e:	3714      	adds	r7, #20
 8006410:	46bd      	mov	sp, r7
 8006412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006416:	b004      	add	sp, #16
 8006418:	4770      	bx	lr

0800641a <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 800641a:	b480      	push	{r7}
 800641c:	b083      	sub	sp, #12
 800641e:	af00      	add	r7, sp, #0
 8006420:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 8006428:	4618      	mov	r0, r3
 800642a:	370c      	adds	r7, #12
 800642c:	46bd      	mov	sp, r7
 800642e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006432:	4770      	bx	lr

08006434 <SDMMC_WriteFIFO>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  pWriteData pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 8006434:	b480      	push	{r7}
 8006436:	b083      	sub	sp, #12
 8006438:	af00      	add	r7, sp, #0
 800643a:	6078      	str	r0, [r7, #4]
 800643c:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 800643e:	683b      	ldr	r3, [r7, #0]
 8006440:	681a      	ldr	r2, [r3, #0]
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 8006448:	2300      	movs	r3, #0
}
 800644a:	4618      	mov	r0, r3
 800644c:	370c      	adds	r7, #12
 800644e:	46bd      	mov	sp, r7
 8006450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006454:	4770      	bx	lr

08006456 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 8006456:	b580      	push	{r7, lr}
 8006458:	b082      	sub	sp, #8
 800645a:	af00      	add	r7, sp, #0
 800645c:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
#else
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	2203      	movs	r2, #3
 8006462:	601a      	str	r2, [r3, #0]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 8006464:	2002      	movs	r0, #2
 8006466:	f7fa fe5b 	bl	8001120 <HAL_Delay>

  return HAL_OK;
 800646a:	2300      	movs	r3, #0
}
 800646c:	4618      	mov	r0, r3
 800646e:	3708      	adds	r7, #8
 8006470:	46bd      	mov	sp, r7
 8006472:	bd80      	pop	{r7, pc}

08006474 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 8006474:	b480      	push	{r7}
 8006476:	b083      	sub	sp, #12
 8006478:	af00      	add	r7, sp, #0
 800647a:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	f003 0303 	and.w	r3, r3, #3
}
 8006484:	4618      	mov	r0, r3
 8006486:	370c      	adds	r7, #12
 8006488:	46bd      	mov	sp, r7
 800648a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800648e:	4770      	bx	lr

08006490 <SDMMC_SendCommand>:
  * @param  Command pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 8006490:	b480      	push	{r7}
 8006492:	b085      	sub	sp, #20
 8006494:	af00      	add	r7, sp, #0
 8006496:	6078      	str	r0, [r7, #4]
 8006498:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800649a:	2300      	movs	r3, #0
 800649c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800649e:	683b      	ldr	r3, [r7, #0]
 80064a0:	681a      	ldr	r2, [r3, #0]
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80064a6:	683b      	ldr	r3, [r7, #0]
 80064a8:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 80064aa:	683b      	ldr	r3, [r7, #0]
 80064ac:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80064ae:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 80064b0:	683b      	ldr	r3, [r7, #0]
 80064b2:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 80064b4:	431a      	orrs	r2, r3
                       Command->CPSM);
 80064b6:	683b      	ldr	r3, [r7, #0]
 80064b8:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 80064ba:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80064bc:	68fa      	ldr	r2, [r7, #12]
 80064be:	4313      	orrs	r3, r2
 80064c0:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	68db      	ldr	r3, [r3, #12]
 80064c6:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 80064ca:	f023 030f 	bic.w	r3, r3, #15
 80064ce:	68fa      	ldr	r2, [r7, #12]
 80064d0:	431a      	orrs	r2, r3
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80064d6:	2300      	movs	r3, #0
}
 80064d8:	4618      	mov	r0, r3
 80064da:	3714      	adds	r7, #20
 80064dc:	46bd      	mov	sp, r7
 80064de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064e2:	4770      	bx	lr

080064e4 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 80064e4:	b480      	push	{r7}
 80064e6:	b083      	sub	sp, #12
 80064e8:	af00      	add	r7, sp, #0
 80064ea:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	691b      	ldr	r3, [r3, #16]
 80064f0:	b2db      	uxtb	r3, r3
}
 80064f2:	4618      	mov	r0, r3
 80064f4:	370c      	adds	r7, #12
 80064f6:	46bd      	mov	sp, r7
 80064f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064fc:	4770      	bx	lr

080064fe <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 80064fe:	b480      	push	{r7}
 8006500:	b085      	sub	sp, #20
 8006502:	af00      	add	r7, sp, #0
 8006504:	6078      	str	r0, [r7, #4]
 8006506:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	3314      	adds	r3, #20
 800650c:	461a      	mov	r2, r3
 800650e:	683b      	ldr	r3, [r7, #0]
 8006510:	4413      	add	r3, r2
 8006512:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	681b      	ldr	r3, [r3, #0]
}
 8006518:	4618      	mov	r0, r3
 800651a:	3714      	adds	r7, #20
 800651c:	46bd      	mov	sp, r7
 800651e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006522:	4770      	bx	lr

08006524 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 8006524:	b480      	push	{r7}
 8006526:	b085      	sub	sp, #20
 8006528:	af00      	add	r7, sp, #0
 800652a:	6078      	str	r0, [r7, #4]
 800652c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800652e:	2300      	movs	r3, #0
 8006530:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 8006532:	683b      	ldr	r3, [r7, #0]
 8006534:	681a      	ldr	r2, [r3, #0]
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800653a:	683b      	ldr	r3, [r7, #0]
 800653c:	685a      	ldr	r2, [r3, #4]
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8006542:	683b      	ldr	r3, [r7, #0]
 8006544:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8006546:	683b      	ldr	r3, [r7, #0]
 8006548:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800654a:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800654c:	683b      	ldr	r3, [r7, #0]
 800654e:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8006550:	431a      	orrs	r2, r3
                       Data->DPSM);
 8006552:	683b      	ldr	r3, [r7, #0]
 8006554:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8006556:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8006558:	68fa      	ldr	r2, [r7, #12]
 800655a:	4313      	orrs	r3, r2
 800655c:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006562:	f023 02f7 	bic.w	r2, r3, #247	@ 0xf7
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	431a      	orrs	r2, r3
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 800656e:	2300      	movs	r3, #0

}
 8006570:	4618      	mov	r0, r3
 8006572:	3714      	adds	r7, #20
 8006574:	46bd      	mov	sp, r7
 8006576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800657a:	4770      	bx	lr

0800657c <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800657c:	b580      	push	{r7, lr}
 800657e:	b088      	sub	sp, #32
 8006580:	af00      	add	r7, sp, #0
 8006582:	6078      	str	r0, [r7, #4]
 8006584:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8006586:	683b      	ldr	r3, [r7, #0]
 8006588:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800658a:	2310      	movs	r3, #16
 800658c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800658e:	2340      	movs	r3, #64	@ 0x40
 8006590:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8006592:	2300      	movs	r3, #0
 8006594:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8006596:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800659a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800659c:	f107 0308 	add.w	r3, r7, #8
 80065a0:	4619      	mov	r1, r3
 80065a2:	6878      	ldr	r0, [r7, #4]
 80065a4:	f7ff ff74 	bl	8006490 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 80065a8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80065ac:	2110      	movs	r1, #16
 80065ae:	6878      	ldr	r0, [r7, #4]
 80065b0:	f000 f9d6 	bl	8006960 <SDMMC_GetCmdResp1>
 80065b4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80065b6:	69fb      	ldr	r3, [r7, #28]
}
 80065b8:	4618      	mov	r0, r3
 80065ba:	3720      	adds	r7, #32
 80065bc:	46bd      	mov	sp, r7
 80065be:	bd80      	pop	{r7, pc}

080065c0 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 80065c0:	b580      	push	{r7, lr}
 80065c2:	b088      	sub	sp, #32
 80065c4:	af00      	add	r7, sp, #0
 80065c6:	6078      	str	r0, [r7, #4]
 80065c8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80065ca:	683b      	ldr	r3, [r7, #0]
 80065cc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 80065ce:	2311      	movs	r3, #17
 80065d0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80065d2:	2340      	movs	r3, #64	@ 0x40
 80065d4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80065d6:	2300      	movs	r3, #0
 80065d8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80065da:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80065de:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80065e0:	f107 0308 	add.w	r3, r7, #8
 80065e4:	4619      	mov	r1, r3
 80065e6:	6878      	ldr	r0, [r7, #4]
 80065e8:	f7ff ff52 	bl	8006490 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 80065ec:	f241 3288 	movw	r2, #5000	@ 0x1388
 80065f0:	2111      	movs	r1, #17
 80065f2:	6878      	ldr	r0, [r7, #4]
 80065f4:	f000 f9b4 	bl	8006960 <SDMMC_GetCmdResp1>
 80065f8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80065fa:	69fb      	ldr	r3, [r7, #28]
}
 80065fc:	4618      	mov	r0, r3
 80065fe:	3720      	adds	r7, #32
 8006600:	46bd      	mov	sp, r7
 8006602:	bd80      	pop	{r7, pc}

08006604 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8006604:	b580      	push	{r7, lr}
 8006606:	b088      	sub	sp, #32
 8006608:	af00      	add	r7, sp, #0
 800660a:	6078      	str	r0, [r7, #4]
 800660c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800660e:	683b      	ldr	r3, [r7, #0]
 8006610:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8006612:	2312      	movs	r3, #18
 8006614:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8006616:	2340      	movs	r3, #64	@ 0x40
 8006618:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800661a:	2300      	movs	r3, #0
 800661c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800661e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006622:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8006624:	f107 0308 	add.w	r3, r7, #8
 8006628:	4619      	mov	r1, r3
 800662a:	6878      	ldr	r0, [r7, #4]
 800662c:	f7ff ff30 	bl	8006490 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8006630:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006634:	2112      	movs	r1, #18
 8006636:	6878      	ldr	r0, [r7, #4]
 8006638:	f000 f992 	bl	8006960 <SDMMC_GetCmdResp1>
 800663c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800663e:	69fb      	ldr	r3, [r7, #28]
}
 8006640:	4618      	mov	r0, r3
 8006642:	3720      	adds	r7, #32
 8006644:	46bd      	mov	sp, r7
 8006646:	bd80      	pop	{r7, pc}

08006648 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8006648:	b580      	push	{r7, lr}
 800664a:	b088      	sub	sp, #32
 800664c:	af00      	add	r7, sp, #0
 800664e:	6078      	str	r0, [r7, #4]
 8006650:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8006652:	683b      	ldr	r3, [r7, #0]
 8006654:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8006656:	2318      	movs	r3, #24
 8006658:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800665a:	2340      	movs	r3, #64	@ 0x40
 800665c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800665e:	2300      	movs	r3, #0
 8006660:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8006662:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006666:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8006668:	f107 0308 	add.w	r3, r7, #8
 800666c:	4619      	mov	r1, r3
 800666e:	6878      	ldr	r0, [r7, #4]
 8006670:	f7ff ff0e 	bl	8006490 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8006674:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006678:	2118      	movs	r1, #24
 800667a:	6878      	ldr	r0, [r7, #4]
 800667c:	f000 f970 	bl	8006960 <SDMMC_GetCmdResp1>
 8006680:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006682:	69fb      	ldr	r3, [r7, #28]
}
 8006684:	4618      	mov	r0, r3
 8006686:	3720      	adds	r7, #32
 8006688:	46bd      	mov	sp, r7
 800668a:	bd80      	pop	{r7, pc}

0800668c <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800668c:	b580      	push	{r7, lr}
 800668e:	b088      	sub	sp, #32
 8006690:	af00      	add	r7, sp, #0
 8006692:	6078      	str	r0, [r7, #4]
 8006694:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8006696:	683b      	ldr	r3, [r7, #0]
 8006698:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800669a:	2319      	movs	r3, #25
 800669c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800669e:	2340      	movs	r3, #64	@ 0x40
 80066a0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80066a2:	2300      	movs	r3, #0
 80066a4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80066a6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80066aa:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80066ac:	f107 0308 	add.w	r3, r7, #8
 80066b0:	4619      	mov	r1, r3
 80066b2:	6878      	ldr	r0, [r7, #4]
 80066b4:	f7ff feec 	bl	8006490 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 80066b8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80066bc:	2119      	movs	r1, #25
 80066be:	6878      	ldr	r0, [r7, #4]
 80066c0:	f000 f94e 	bl	8006960 <SDMMC_GetCmdResp1>
 80066c4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80066c6:	69fb      	ldr	r3, [r7, #28]
}
 80066c8:	4618      	mov	r0, r3
 80066ca:	3720      	adds	r7, #32
 80066cc:	46bd      	mov	sp, r7
 80066ce:	bd80      	pop	{r7, pc}

080066d0 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 80066d0:	b580      	push	{r7, lr}
 80066d2:	b088      	sub	sp, #32
 80066d4:	af00      	add	r7, sp, #0
 80066d6:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 80066d8:	2300      	movs	r3, #0
 80066da:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 80066dc:	230c      	movs	r3, #12
 80066de:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80066e0:	2340      	movs	r3, #64	@ 0x40
 80066e2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80066e4:	2300      	movs	r3, #0
 80066e6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80066e8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80066ec:	61bb      	str	r3, [r7, #24]
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80066ee:	f107 0308 	add.w	r3, r7, #8
 80066f2:	4619      	mov	r1, r3
 80066f4:	6878      	ldr	r0, [r7, #4]
 80066f6:	f7ff fecb 	bl	8006490 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 80066fa:	4a05      	ldr	r2, [pc, #20]	@ (8006710 <SDMMC_CmdStopTransfer+0x40>)
 80066fc:	210c      	movs	r1, #12
 80066fe:	6878      	ldr	r0, [r7, #4]
 8006700:	f000 f92e 	bl	8006960 <SDMMC_GetCmdResp1>
 8006704:	61f8      	str	r0, [r7, #28]

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  return errorstate;
 8006706:	69fb      	ldr	r3, [r7, #28]
}
 8006708:	4618      	mov	r0, r3
 800670a:	3720      	adds	r7, #32
 800670c:	46bd      	mov	sp, r7
 800670e:	bd80      	pop	{r7, pc}
 8006710:	05f5e100 	.word	0x05f5e100

08006714 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  addr Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 8006714:	b580      	push	{r7, lr}
 8006716:	b08a      	sub	sp, #40	@ 0x28
 8006718:	af00      	add	r7, sp, #0
 800671a:	60f8      	str	r0, [r7, #12]
 800671c:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8006720:	683b      	ldr	r3, [r7, #0]
 8006722:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8006724:	2307      	movs	r3, #7
 8006726:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8006728:	2340      	movs	r3, #64	@ 0x40
 800672a:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800672c:	2300      	movs	r3, #0
 800672e:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8006730:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006734:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8006736:	f107 0310 	add.w	r3, r7, #16
 800673a:	4619      	mov	r1, r3
 800673c:	68f8      	ldr	r0, [r7, #12]
 800673e:	f7ff fea7 	bl	8006490 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 8006742:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006746:	2107      	movs	r1, #7
 8006748:	68f8      	ldr	r0, [r7, #12]
 800674a:	f000 f909 	bl	8006960 <SDMMC_GetCmdResp1>
 800674e:	6278      	str	r0, [r7, #36]	@ 0x24

  return errorstate;
 8006750:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8006752:	4618      	mov	r0, r3
 8006754:	3728      	adds	r7, #40	@ 0x28
 8006756:	46bd      	mov	sp, r7
 8006758:	bd80      	pop	{r7, pc}

0800675a <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800675a:	b580      	push	{r7, lr}
 800675c:	b088      	sub	sp, #32
 800675e:	af00      	add	r7, sp, #0
 8006760:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 8006762:	2300      	movs	r3, #0
 8006764:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8006766:	2300      	movs	r3, #0
 8006768:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800676a:	2300      	movs	r3, #0
 800676c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800676e:	2300      	movs	r3, #0
 8006770:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8006772:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006776:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8006778:	f107 0308 	add.w	r3, r7, #8
 800677c:	4619      	mov	r1, r3
 800677e:	6878      	ldr	r0, [r7, #4]
 8006780:	f7ff fe86 	bl	8006490 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 8006784:	6878      	ldr	r0, [r7, #4]
 8006786:	f000 fb23 	bl	8006dd0 <SDMMC_GetCmdError>
 800678a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800678c:	69fb      	ldr	r3, [r7, #28]
}
 800678e:	4618      	mov	r0, r3
 8006790:	3720      	adds	r7, #32
 8006792:	46bd      	mov	sp, r7
 8006794:	bd80      	pop	{r7, pc}

08006796 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 8006796:	b580      	push	{r7, lr}
 8006798:	b088      	sub	sp, #32
 800679a:	af00      	add	r7, sp, #0
 800679c:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800679e:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 80067a2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 80067a4:	2308      	movs	r3, #8
 80067a6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80067a8:	2340      	movs	r3, #64	@ 0x40
 80067aa:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80067ac:	2300      	movs	r3, #0
 80067ae:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80067b0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80067b4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80067b6:	f107 0308 	add.w	r3, r7, #8
 80067ba:	4619      	mov	r1, r3
 80067bc:	6878      	ldr	r0, [r7, #4]
 80067be:	f7ff fe67 	bl	8006490 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 80067c2:	6878      	ldr	r0, [r7, #4]
 80067c4:	f000 fab6 	bl	8006d34 <SDMMC_GetCmdResp7>
 80067c8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80067ca:	69fb      	ldr	r3, [r7, #28]
}
 80067cc:	4618      	mov	r0, r3
 80067ce:	3720      	adds	r7, #32
 80067d0:	46bd      	mov	sp, r7
 80067d2:	bd80      	pop	{r7, pc}

080067d4 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80067d4:	b580      	push	{r7, lr}
 80067d6:	b088      	sub	sp, #32
 80067d8:	af00      	add	r7, sp, #0
 80067da:	6078      	str	r0, [r7, #4]
 80067dc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 80067de:	683b      	ldr	r3, [r7, #0]
 80067e0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 80067e2:	2337      	movs	r3, #55	@ 0x37
 80067e4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80067e6:	2340      	movs	r3, #64	@ 0x40
 80067e8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80067ea:	2300      	movs	r3, #0
 80067ec:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80067ee:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80067f2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80067f4:	f107 0308 	add.w	r3, r7, #8
 80067f8:	4619      	mov	r1, r3
 80067fa:	6878      	ldr	r0, [r7, #4]
 80067fc:	f7ff fe48 	bl	8006490 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 8006800:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006804:	2137      	movs	r1, #55	@ 0x37
 8006806:	6878      	ldr	r0, [r7, #4]
 8006808:	f000 f8aa 	bl	8006960 <SDMMC_GetCmdResp1>
 800680c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800680e:	69fb      	ldr	r3, [r7, #28]
}
 8006810:	4618      	mov	r0, r3
 8006812:	3720      	adds	r7, #32
 8006814:	46bd      	mov	sp, r7
 8006816:	bd80      	pop	{r7, pc}

08006818 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8006818:	b580      	push	{r7, lr}
 800681a:	b088      	sub	sp, #32
 800681c:	af00      	add	r7, sp, #0
 800681e:	6078      	str	r0, [r7, #4]
 8006820:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  sdmmc_cmdinit.Argument         = Argument;
#else
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8006822:	683b      	ldr	r3, [r7, #0]
 8006824:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006828:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800682c:	60bb      	str	r3, [r7, #8]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800682e:	2329      	movs	r3, #41	@ 0x29
 8006830:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8006832:	2340      	movs	r3, #64	@ 0x40
 8006834:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8006836:	2300      	movs	r3, #0
 8006838:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800683a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800683e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8006840:	f107 0308 	add.w	r3, r7, #8
 8006844:	4619      	mov	r1, r3
 8006846:	6878      	ldr	r0, [r7, #4]
 8006848:	f7ff fe22 	bl	8006490 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800684c:	6878      	ldr	r0, [r7, #4]
 800684e:	f000 f9bd 	bl	8006bcc <SDMMC_GetCmdResp3>
 8006852:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006854:	69fb      	ldr	r3, [r7, #28]
}
 8006856:	4618      	mov	r0, r3
 8006858:	3720      	adds	r7, #32
 800685a:	46bd      	mov	sp, r7
 800685c:	bd80      	pop	{r7, pc}

0800685e <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800685e:	b580      	push	{r7, lr}
 8006860:	b088      	sub	sp, #32
 8006862:	af00      	add	r7, sp, #0
 8006864:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8006866:	2300      	movs	r3, #0
 8006868:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800686a:	2302      	movs	r3, #2
 800686c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800686e:	23c0      	movs	r3, #192	@ 0xc0
 8006870:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8006872:	2300      	movs	r3, #0
 8006874:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8006876:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800687a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800687c:	f107 0308 	add.w	r3, r7, #8
 8006880:	4619      	mov	r1, r3
 8006882:	6878      	ldr	r0, [r7, #4]
 8006884:	f7ff fe04 	bl	8006490 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8006888:	6878      	ldr	r0, [r7, #4]
 800688a:	f000 f957 	bl	8006b3c <SDMMC_GetCmdResp2>
 800688e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006890:	69fb      	ldr	r3, [r7, #28]
}
 8006892:	4618      	mov	r0, r3
 8006894:	3720      	adds	r7, #32
 8006896:	46bd      	mov	sp, r7
 8006898:	bd80      	pop	{r7, pc}

0800689a <SDMMC_CmdSendCSD>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800689a:	b580      	push	{r7, lr}
 800689c:	b088      	sub	sp, #32
 800689e:	af00      	add	r7, sp, #0
 80068a0:	6078      	str	r0, [r7, #4]
 80068a2:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 80068a4:	683b      	ldr	r3, [r7, #0]
 80068a6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 80068a8:	2309      	movs	r3, #9
 80068aa:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 80068ac:	23c0      	movs	r3, #192	@ 0xc0
 80068ae:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80068b0:	2300      	movs	r3, #0
 80068b2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80068b4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80068b8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80068ba:	f107 0308 	add.w	r3, r7, #8
 80068be:	4619      	mov	r1, r3
 80068c0:	6878      	ldr	r0, [r7, #4]
 80068c2:	f7ff fde5 	bl	8006490 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 80068c6:	6878      	ldr	r0, [r7, #4]
 80068c8:	f000 f938 	bl	8006b3c <SDMMC_GetCmdResp2>
 80068cc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80068ce:	69fb      	ldr	r3, [r7, #28]
}
 80068d0:	4618      	mov	r0, r3
 80068d2:	3720      	adds	r7, #32
 80068d4:	46bd      	mov	sp, r7
 80068d6:	bd80      	pop	{r7, pc}

080068d8 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  pRCA Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 80068d8:	b580      	push	{r7, lr}
 80068da:	b088      	sub	sp, #32
 80068dc:	af00      	add	r7, sp, #0
 80068de:	6078      	str	r0, [r7, #4]
 80068e0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 80068e2:	2300      	movs	r3, #0
 80068e4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 80068e6:	2303      	movs	r3, #3
 80068e8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80068ea:	2340      	movs	r3, #64	@ 0x40
 80068ec:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80068ee:	2300      	movs	r3, #0
 80068f0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80068f2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80068f6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80068f8:	f107 0308 	add.w	r3, r7, #8
 80068fc:	4619      	mov	r1, r3
 80068fe:	6878      	ldr	r0, [r7, #4]
 8006900:	f7ff fdc6 	bl	8006490 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8006904:	683a      	ldr	r2, [r7, #0]
 8006906:	2103      	movs	r1, #3
 8006908:	6878      	ldr	r0, [r7, #4]
 800690a:	f000 f99d 	bl	8006c48 <SDMMC_GetCmdResp6>
 800690e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006910:	69fb      	ldr	r3, [r7, #28]
}
 8006912:	4618      	mov	r0, r3
 8006914:	3720      	adds	r7, #32
 8006916:	46bd      	mov	sp, r7
 8006918:	bd80      	pop	{r7, pc}

0800691a <SDMMC_CmdSendStatus>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800691a:	b580      	push	{r7, lr}
 800691c:	b088      	sub	sp, #32
 800691e:	af00      	add	r7, sp, #0
 8006920:	6078      	str	r0, [r7, #4]
 8006922:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 8006924:	683b      	ldr	r3, [r7, #0]
 8006926:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8006928:	230d      	movs	r3, #13
 800692a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800692c:	2340      	movs	r3, #64	@ 0x40
 800692e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8006930:	2300      	movs	r3, #0
 8006932:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8006934:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006938:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800693a:	f107 0308 	add.w	r3, r7, #8
 800693e:	4619      	mov	r1, r3
 8006940:	6878      	ldr	r0, [r7, #4]
 8006942:	f7ff fda5 	bl	8006490 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 8006946:	f241 3288 	movw	r2, #5000	@ 0x1388
 800694a:	210d      	movs	r1, #13
 800694c:	6878      	ldr	r0, [r7, #4]
 800694e:	f000 f807 	bl	8006960 <SDMMC_GetCmdResp1>
 8006952:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006954:	69fb      	ldr	r3, [r7, #28]
}
 8006956:	4618      	mov	r0, r3
 8006958:	3720      	adds	r7, #32
 800695a:	46bd      	mov	sp, r7
 800695c:	bd80      	pop	{r7, pc}
	...

08006960 <SDMMC_GetCmdResp1>:
  * @param  hsd SD handle
  * @param  SD_CMD The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 8006960:	b580      	push	{r7, lr}
 8006962:	b088      	sub	sp, #32
 8006964:	af00      	add	r7, sp, #0
 8006966:	60f8      	str	r0, [r7, #12]
 8006968:	460b      	mov	r3, r1
 800696a:	607a      	str	r2, [r7, #4]
 800696c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800696e:	4b70      	ldr	r3, [pc, #448]	@ (8006b30 <SDMMC_GetCmdResp1+0x1d0>)
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	4a70      	ldr	r2, [pc, #448]	@ (8006b34 <SDMMC_GetCmdResp1+0x1d4>)
 8006974:	fba2 2303 	umull	r2, r3, r2, r3
 8006978:	0a5a      	lsrs	r2, r3, #9
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	fb02 f303 	mul.w	r3, r2, r3
 8006980:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 8006982:	69fb      	ldr	r3, [r7, #28]
 8006984:	1e5a      	subs	r2, r3, #1
 8006986:	61fa      	str	r2, [r7, #28]
 8006988:	2b00      	cmp	r3, #0
 800698a:	d102      	bne.n	8006992 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800698c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8006990:	e0c9      	b.n	8006b26 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006996:	61bb      	str	r3, [r7, #24]
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
#else
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8006998:	69bb      	ldr	r3, [r7, #24]
 800699a:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d0ef      	beq.n	8006982 <SDMMC_GetCmdResp1+0x22>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 80069a2:	69bb      	ldr	r3, [r7, #24]
 80069a4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d1ea      	bne.n	8006982 <SDMMC_GetCmdResp1+0x22>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80069b0:	f003 0304 	and.w	r3, r3, #4
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d004      	beq.n	80069c2 <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	2204      	movs	r2, #4
 80069bc:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80069be:	2304      	movs	r3, #4
 80069c0:	e0b1      	b.n	8006b26 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80069c6:	f003 0301 	and.w	r3, r3, #1
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d004      	beq.n	80069d8 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	2201      	movs	r2, #1
 80069d2:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 80069d4:	2301      	movs	r3, #1
 80069d6:	e0a6      	b.n	8006b26 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	22c5      	movs	r2, #197	@ 0xc5
 80069dc:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 80069de:	68f8      	ldr	r0, [r7, #12]
 80069e0:	f7ff fd80 	bl	80064e4 <SDMMC_GetCommandResponse>
 80069e4:	4603      	mov	r3, r0
 80069e6:	461a      	mov	r2, r3
 80069e8:	7afb      	ldrb	r3, [r7, #11]
 80069ea:	4293      	cmp	r3, r2
 80069ec:	d001      	beq.n	80069f2 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80069ee:	2301      	movs	r3, #1
 80069f0:	e099      	b.n	8006b26 <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 80069f2:	2100      	movs	r1, #0
 80069f4:	68f8      	ldr	r0, [r7, #12]
 80069f6:	f7ff fd82 	bl	80064fe <SDMMC_GetResponse>
 80069fa:	6178      	str	r0, [r7, #20]

  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 80069fc:	697a      	ldr	r2, [r7, #20]
 80069fe:	4b4e      	ldr	r3, [pc, #312]	@ (8006b38 <SDMMC_GetCmdResp1+0x1d8>)
 8006a00:	4013      	ands	r3, r2
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d101      	bne.n	8006a0a <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8006a06:	2300      	movs	r3, #0
 8006a08:	e08d      	b.n	8006b26 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8006a0a:	697b      	ldr	r3, [r7, #20]
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	da02      	bge.n	8006a16 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8006a10:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006a14:	e087      	b.n	8006b26 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8006a16:	697b      	ldr	r3, [r7, #20]
 8006a18:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d001      	beq.n	8006a24 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8006a20:	2340      	movs	r3, #64	@ 0x40
 8006a22:	e080      	b.n	8006b26 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8006a24:	697b      	ldr	r3, [r7, #20]
 8006a26:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d001      	beq.n	8006a32 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8006a2e:	2380      	movs	r3, #128	@ 0x80
 8006a30:	e079      	b.n	8006b26 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8006a32:	697b      	ldr	r3, [r7, #20]
 8006a34:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d002      	beq.n	8006a42 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8006a3c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8006a40:	e071      	b.n	8006b26 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8006a42:	697b      	ldr	r3, [r7, #20]
 8006a44:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d002      	beq.n	8006a52 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8006a4c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006a50:	e069      	b.n	8006b26 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8006a52:	697b      	ldr	r3, [r7, #20]
 8006a54:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d002      	beq.n	8006a62 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8006a5c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006a60:	e061      	b.n	8006b26 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8006a62:	697b      	ldr	r3, [r7, #20]
 8006a64:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d002      	beq.n	8006a72 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8006a6c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8006a70:	e059      	b.n	8006b26 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8006a72:	697b      	ldr	r3, [r7, #20]
 8006a74:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d002      	beq.n	8006a82 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8006a7c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8006a80:	e051      	b.n	8006b26 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8006a82:	697b      	ldr	r3, [r7, #20]
 8006a84:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d002      	beq.n	8006a92 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8006a8c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8006a90:	e049      	b.n	8006b26 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8006a92:	697b      	ldr	r3, [r7, #20]
 8006a94:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d002      	beq.n	8006aa2 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8006a9c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8006aa0:	e041      	b.n	8006b26 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8006aa2:	697b      	ldr	r3, [r7, #20]
 8006aa4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d002      	beq.n	8006ab2 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8006aac:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006ab0:	e039      	b.n	8006b26 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8006ab2:	697b      	ldr	r3, [r7, #20]
 8006ab4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d002      	beq.n	8006ac2 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8006abc:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8006ac0:	e031      	b.n	8006b26 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8006ac2:	697b      	ldr	r3, [r7, #20]
 8006ac4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d002      	beq.n	8006ad2 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8006acc:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8006ad0:	e029      	b.n	8006b26 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8006ad2:	697b      	ldr	r3, [r7, #20]
 8006ad4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d002      	beq.n	8006ae2 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8006adc:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8006ae0:	e021      	b.n	8006b26 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8006ae2:	697b      	ldr	r3, [r7, #20]
 8006ae4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d002      	beq.n	8006af2 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8006aec:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8006af0:	e019      	b.n	8006b26 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8006af2:	697b      	ldr	r3, [r7, #20]
 8006af4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d002      	beq.n	8006b02 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8006afc:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8006b00:	e011      	b.n	8006b26 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8006b02:	697b      	ldr	r3, [r7, #20]
 8006b04:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d002      	beq.n	8006b12 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8006b0c:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8006b10:	e009      	b.n	8006b26 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8006b12:	697b      	ldr	r3, [r7, #20]
 8006b14:	f003 0308 	and.w	r3, r3, #8
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d002      	beq.n	8006b22 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8006b1c:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 8006b20:	e001      	b.n	8006b26 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8006b22:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 8006b26:	4618      	mov	r0, r3
 8006b28:	3720      	adds	r7, #32
 8006b2a:	46bd      	mov	sp, r7
 8006b2c:	bd80      	pop	{r7, pc}
 8006b2e:	bf00      	nop
 8006b30:	20000000 	.word	0x20000000
 8006b34:	10624dd3 	.word	0x10624dd3
 8006b38:	fdffe008 	.word	0xfdffe008

08006b3c <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 8006b3c:	b480      	push	{r7}
 8006b3e:	b085      	sub	sp, #20
 8006b40:	af00      	add	r7, sp, #0
 8006b42:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8006b44:	4b1f      	ldr	r3, [pc, #124]	@ (8006bc4 <SDMMC_GetCmdResp2+0x88>)
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	4a1f      	ldr	r2, [pc, #124]	@ (8006bc8 <SDMMC_GetCmdResp2+0x8c>)
 8006b4a:	fba2 2303 	umull	r2, r3, r2, r3
 8006b4e:	0a5b      	lsrs	r3, r3, #9
 8006b50:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006b54:	fb02 f303 	mul.w	r3, r2, r3
 8006b58:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	1e5a      	subs	r2, r3, #1
 8006b5e:	60fa      	str	r2, [r7, #12]
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d102      	bne.n	8006b6a <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006b64:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8006b68:	e026      	b.n	8006bb8 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006b6e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8006b70:	68bb      	ldr	r3, [r7, #8]
 8006b72:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d0ef      	beq.n	8006b5a <SDMMC_GetCmdResp2+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8006b7a:	68bb      	ldr	r3, [r7, #8]
 8006b7c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d1ea      	bne.n	8006b5a <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006b88:	f003 0304 	and.w	r3, r3, #4
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d004      	beq.n	8006b9a <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	2204      	movs	r2, #4
 8006b94:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8006b96:	2304      	movs	r3, #4
 8006b98:	e00e      	b.n	8006bb8 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006b9e:	f003 0301 	and.w	r3, r3, #1
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d004      	beq.n	8006bb0 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	2201      	movs	r2, #1
 8006baa:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006bac:	2301      	movs	r3, #1
 8006bae:	e003      	b.n	8006bb8 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	22c5      	movs	r2, #197	@ 0xc5
 8006bb4:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 8006bb6:	2300      	movs	r3, #0
}
 8006bb8:	4618      	mov	r0, r3
 8006bba:	3714      	adds	r7, #20
 8006bbc:	46bd      	mov	sp, r7
 8006bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bc2:	4770      	bx	lr
 8006bc4:	20000000 	.word	0x20000000
 8006bc8:	10624dd3 	.word	0x10624dd3

08006bcc <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 8006bcc:	b480      	push	{r7}
 8006bce:	b085      	sub	sp, #20
 8006bd0:	af00      	add	r7, sp, #0
 8006bd2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8006bd4:	4b1a      	ldr	r3, [pc, #104]	@ (8006c40 <SDMMC_GetCmdResp3+0x74>)
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	4a1a      	ldr	r2, [pc, #104]	@ (8006c44 <SDMMC_GetCmdResp3+0x78>)
 8006bda:	fba2 2303 	umull	r2, r3, r2, r3
 8006bde:	0a5b      	lsrs	r3, r3, #9
 8006be0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006be4:	fb02 f303 	mul.w	r3, r2, r3
 8006be8:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	1e5a      	subs	r2, r3, #1
 8006bee:	60fa      	str	r2, [r7, #12]
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d102      	bne.n	8006bfa <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006bf4:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8006bf8:	e01b      	b.n	8006c32 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006bfe:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8006c00:	68bb      	ldr	r3, [r7, #8]
 8006c02:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d0ef      	beq.n	8006bea <SDMMC_GetCmdResp3+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8006c0a:	68bb      	ldr	r3, [r7, #8]
 8006c0c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d1ea      	bne.n	8006bea <SDMMC_GetCmdResp3+0x1e>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006c18:	f003 0304 	and.w	r3, r3, #4
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d004      	beq.n	8006c2a <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	2204      	movs	r2, #4
 8006c24:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8006c26:	2304      	movs	r3, #4
 8006c28:	e003      	b.n	8006c32 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	22c5      	movs	r2, #197	@ 0xc5
 8006c2e:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 8006c30:	2300      	movs	r3, #0
}
 8006c32:	4618      	mov	r0, r3
 8006c34:	3714      	adds	r7, #20
 8006c36:	46bd      	mov	sp, r7
 8006c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c3c:	4770      	bx	lr
 8006c3e:	bf00      	nop
 8006c40:	20000000 	.word	0x20000000
 8006c44:	10624dd3 	.word	0x10624dd3

08006c48 <SDMMC_GetCmdResp6>:
  * @param  pRCA Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8006c48:	b580      	push	{r7, lr}
 8006c4a:	b088      	sub	sp, #32
 8006c4c:	af00      	add	r7, sp, #0
 8006c4e:	60f8      	str	r0, [r7, #12]
 8006c50:	460b      	mov	r3, r1
 8006c52:	607a      	str	r2, [r7, #4]
 8006c54:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8006c56:	4b35      	ldr	r3, [pc, #212]	@ (8006d2c <SDMMC_GetCmdResp6+0xe4>)
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	4a35      	ldr	r2, [pc, #212]	@ (8006d30 <SDMMC_GetCmdResp6+0xe8>)
 8006c5c:	fba2 2303 	umull	r2, r3, r2, r3
 8006c60:	0a5b      	lsrs	r3, r3, #9
 8006c62:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006c66:	fb02 f303 	mul.w	r3, r2, r3
 8006c6a:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 8006c6c:	69fb      	ldr	r3, [r7, #28]
 8006c6e:	1e5a      	subs	r2, r3, #1
 8006c70:	61fa      	str	r2, [r7, #28]
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d102      	bne.n	8006c7c <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006c76:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8006c7a:	e052      	b.n	8006d22 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006c80:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8006c82:	69bb      	ldr	r3, [r7, #24]
 8006c84:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d0ef      	beq.n	8006c6c <SDMMC_GetCmdResp6+0x24>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8006c8c:	69bb      	ldr	r3, [r7, #24]
 8006c8e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d1ea      	bne.n	8006c6c <SDMMC_GetCmdResp6+0x24>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006c9a:	f003 0304 	and.w	r3, r3, #4
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d004      	beq.n	8006cac <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	2204      	movs	r2, #4
 8006ca6:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8006ca8:	2304      	movs	r3, #4
 8006caa:	e03a      	b.n	8006d22 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006cb0:	f003 0301 	and.w	r3, r3, #1
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d004      	beq.n	8006cc2 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	2201      	movs	r2, #1
 8006cbc:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006cbe:	2301      	movs	r3, #1
 8006cc0:	e02f      	b.n	8006d22 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8006cc2:	68f8      	ldr	r0, [r7, #12]
 8006cc4:	f7ff fc0e 	bl	80064e4 <SDMMC_GetCommandResponse>
 8006cc8:	4603      	mov	r3, r0
 8006cca:	461a      	mov	r2, r3
 8006ccc:	7afb      	ldrb	r3, [r7, #11]
 8006cce:	4293      	cmp	r3, r2
 8006cd0:	d001      	beq.n	8006cd6 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006cd2:	2301      	movs	r3, #1
 8006cd4:	e025      	b.n	8006d22 <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	22c5      	movs	r2, #197	@ 0xc5
 8006cda:	639a      	str	r2, [r3, #56]	@ 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8006cdc:	2100      	movs	r1, #0
 8006cde:	68f8      	ldr	r0, [r7, #12]
 8006ce0:	f7ff fc0d 	bl	80064fe <SDMMC_GetResponse>
 8006ce4:	6178      	str	r0, [r7, #20]

  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8006ce6:	697b      	ldr	r3, [r7, #20]
 8006ce8:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d106      	bne.n	8006cfe <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8006cf0:	697b      	ldr	r3, [r7, #20]
 8006cf2:	0c1b      	lsrs	r3, r3, #16
 8006cf4:	b29a      	uxth	r2, r3
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 8006cfa:	2300      	movs	r3, #0
 8006cfc:	e011      	b.n	8006d22 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8006cfe:	697b      	ldr	r3, [r7, #20]
 8006d00:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d002      	beq.n	8006d0e <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8006d08:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8006d0c:	e009      	b.n	8006d22 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8006d0e:	697b      	ldr	r3, [r7, #20]
 8006d10:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d002      	beq.n	8006d1e <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8006d18:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8006d1c:	e001      	b.n	8006d22 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8006d1e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 8006d22:	4618      	mov	r0, r3
 8006d24:	3720      	adds	r7, #32
 8006d26:	46bd      	mov	sp, r7
 8006d28:	bd80      	pop	{r7, pc}
 8006d2a:	bf00      	nop
 8006d2c:	20000000 	.word	0x20000000
 8006d30:	10624dd3 	.word	0x10624dd3

08006d34 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 8006d34:	b480      	push	{r7}
 8006d36:	b085      	sub	sp, #20
 8006d38:	af00      	add	r7, sp, #0
 8006d3a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8006d3c:	4b22      	ldr	r3, [pc, #136]	@ (8006dc8 <SDMMC_GetCmdResp7+0x94>)
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	4a22      	ldr	r2, [pc, #136]	@ (8006dcc <SDMMC_GetCmdResp7+0x98>)
 8006d42:	fba2 2303 	umull	r2, r3, r2, r3
 8006d46:	0a5b      	lsrs	r3, r3, #9
 8006d48:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006d4c:	fb02 f303 	mul.w	r3, r2, r3
 8006d50:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	1e5a      	subs	r2, r3, #1
 8006d56:	60fa      	str	r2, [r7, #12]
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d102      	bne.n	8006d62 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006d5c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8006d60:	e02c      	b.n	8006dbc <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006d66:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8006d68:	68bb      	ldr	r3, [r7, #8]
 8006d6a:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d0ef      	beq.n	8006d52 <SDMMC_GetCmdResp7+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8006d72:	68bb      	ldr	r3, [r7, #8]
 8006d74:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d1ea      	bne.n	8006d52 <SDMMC_GetCmdResp7+0x1e>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006d80:	f003 0304 	and.w	r3, r3, #4
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d004      	beq.n	8006d92 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	2204      	movs	r2, #4
 8006d8c:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8006d8e:	2304      	movs	r3, #4
 8006d90:	e014      	b.n	8006dbc <SDMMC_GetCmdResp7+0x88>
  }

  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006d96:	f003 0301 	and.w	r3, r3, #1
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d004      	beq.n	8006da8 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	2201      	movs	r2, #1
 8006da2:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006da4:	2301      	movs	r3, #1
 8006da6:	e009      	b.n	8006dbc <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006dac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d002      	beq.n	8006dba <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	2240      	movs	r2, #64	@ 0x40
 8006db8:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 8006dba:	2300      	movs	r3, #0

}
 8006dbc:	4618      	mov	r0, r3
 8006dbe:	3714      	adds	r7, #20
 8006dc0:	46bd      	mov	sp, r7
 8006dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc6:	4770      	bx	lr
 8006dc8:	20000000 	.word	0x20000000
 8006dcc:	10624dd3 	.word	0x10624dd3

08006dd0 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 8006dd0:	b480      	push	{r7}
 8006dd2:	b085      	sub	sp, #20
 8006dd4:	af00      	add	r7, sp, #0
 8006dd6:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8006dd8:	4b11      	ldr	r3, [pc, #68]	@ (8006e20 <SDMMC_GetCmdError+0x50>)
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	4a11      	ldr	r2, [pc, #68]	@ (8006e24 <SDMMC_GetCmdError+0x54>)
 8006dde:	fba2 2303 	umull	r2, r3, r2, r3
 8006de2:	0a5b      	lsrs	r3, r3, #9
 8006de4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006de8:	fb02 f303 	mul.w	r3, r2, r3
 8006dec:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	1e5a      	subs	r2, r3, #1
 8006df2:	60fa      	str	r2, [r7, #12]
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d102      	bne.n	8006dfe <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006df8:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8006dfc:	e009      	b.n	8006e12 <SDMMC_GetCmdError+0x42>
    }

  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006e02:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d0f1      	beq.n	8006dee <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	22c5      	movs	r2, #197	@ 0xc5
 8006e0e:	639a      	str	r2, [r3, #56]	@ 0x38

  return SDMMC_ERROR_NONE;
 8006e10:	2300      	movs	r3, #0
}
 8006e12:	4618      	mov	r0, r3
 8006e14:	3714      	adds	r7, #20
 8006e16:	46bd      	mov	sp, r7
 8006e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e1c:	4770      	bx	lr
 8006e1e:	bf00      	nop
 8006e20:	20000000 	.word	0x20000000
 8006e24:	10624dd3 	.word	0x10624dd3

08006e28 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8006e28:	b580      	push	{r7, lr}
 8006e2a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8006e2c:	4904      	ldr	r1, [pc, #16]	@ (8006e40 <MX_FATFS_Init+0x18>)
 8006e2e:	4805      	ldr	r0, [pc, #20]	@ (8006e44 <MX_FATFS_Init+0x1c>)
 8006e30:	f003 f892 	bl	8009f58 <FATFS_LinkDriver>
 8006e34:	4603      	mov	r3, r0
 8006e36:	461a      	mov	r2, r3
 8006e38:	4b03      	ldr	r3, [pc, #12]	@ (8006e48 <MX_FATFS_Init+0x20>)
 8006e3a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8006e3c:	bf00      	nop
 8006e3e:	bd80      	pop	{r7, pc}
 8006e40:	20000f60 	.word	0x20000f60
 8006e44:	0800ab60 	.word	0x0800ab60
 8006e48:	20000f5c 	.word	0x20000f5c

08006e4c <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8006e4c:	b480      	push	{r7}
 8006e4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8006e50:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8006e52:	4618      	mov	r0, r3
 8006e54:	46bd      	mov	sp, r7
 8006e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e5a:	4770      	bx	lr

08006e5c <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8006e5c:	b580      	push	{r7, lr}
 8006e5e:	b082      	sub	sp, #8
 8006e60:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8006e62:	2300      	movs	r3, #0
 8006e64:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8006e66:	f000 f888 	bl	8006f7a <BSP_SD_IsDetected>
 8006e6a:	4603      	mov	r3, r0
 8006e6c:	2b01      	cmp	r3, #1
 8006e6e:	d001      	beq.n	8006e74 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 8006e70:	2302      	movs	r3, #2
 8006e72:	e005      	b.n	8006e80 <BSP_SD_Init+0x24>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 8006e74:	4804      	ldr	r0, [pc, #16]	@ (8006e88 <BSP_SD_Init+0x2c>)
 8006e76:	f7fd fb41 	bl	80044fc <HAL_SD_Init>
 8006e7a:	4603      	mov	r3, r0
 8006e7c:	71fb      	strb	r3, [r7, #7]

  return sd_state;
 8006e7e:	79fb      	ldrb	r3, [r7, #7]
}
 8006e80:	4618      	mov	r0, r3
 8006e82:	3708      	adds	r7, #8
 8006e84:	46bd      	mov	sp, r7
 8006e86:	bd80      	pop	{r7, pc}
 8006e88:	200001a4 	.word	0x200001a4

08006e8c <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 8006e8c:	b580      	push	{r7, lr}
 8006e8e:	b086      	sub	sp, #24
 8006e90:	af00      	add	r7, sp, #0
 8006e92:	60f8      	str	r0, [r7, #12]
 8006e94:	60b9      	str	r1, [r7, #8]
 8006e96:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8006e98:	2300      	movs	r3, #0
 8006e9a:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	68ba      	ldr	r2, [r7, #8]
 8006ea0:	68f9      	ldr	r1, [r7, #12]
 8006ea2:	4806      	ldr	r0, [pc, #24]	@ (8006ebc <BSP_SD_ReadBlocks_DMA+0x30>)
 8006ea4:	f7fd fc00 	bl	80046a8 <HAL_SD_ReadBlocks_DMA>
 8006ea8:	4603      	mov	r3, r0
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d001      	beq.n	8006eb2 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8006eae:	2301      	movs	r3, #1
 8006eb0:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8006eb2:	7dfb      	ldrb	r3, [r7, #23]
}
 8006eb4:	4618      	mov	r0, r3
 8006eb6:	3718      	adds	r7, #24
 8006eb8:	46bd      	mov	sp, r7
 8006eba:	bd80      	pop	{r7, pc}
 8006ebc:	200001a4 	.word	0x200001a4

08006ec0 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 8006ec0:	b580      	push	{r7, lr}
 8006ec2:	b086      	sub	sp, #24
 8006ec4:	af00      	add	r7, sp, #0
 8006ec6:	60f8      	str	r0, [r7, #12]
 8006ec8:	60b9      	str	r1, [r7, #8]
 8006eca:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8006ecc:	2300      	movs	r3, #0
 8006ece:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	68ba      	ldr	r2, [r7, #8]
 8006ed4:	68f9      	ldr	r1, [r7, #12]
 8006ed6:	4806      	ldr	r0, [pc, #24]	@ (8006ef0 <BSP_SD_WriteBlocks_DMA+0x30>)
 8006ed8:	f7fd fcae 	bl	8004838 <HAL_SD_WriteBlocks_DMA>
 8006edc:	4603      	mov	r3, r0
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d001      	beq.n	8006ee6 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8006ee2:	2301      	movs	r3, #1
 8006ee4:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8006ee6:	7dfb      	ldrb	r3, [r7, #23]
}
 8006ee8:	4618      	mov	r0, r3
 8006eea:	3718      	adds	r7, #24
 8006eec:	46bd      	mov	sp, r7
 8006eee:	bd80      	pop	{r7, pc}
 8006ef0:	200001a4 	.word	0x200001a4

08006ef4 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8006ef4:	b580      	push	{r7, lr}
 8006ef6:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8006ef8:	4805      	ldr	r0, [pc, #20]	@ (8006f10 <BSP_SD_GetCardState+0x1c>)
 8006efa:	f7fe f8b9 	bl	8005070 <HAL_SD_GetCardState>
 8006efe:	4603      	mov	r3, r0
 8006f00:	2b04      	cmp	r3, #4
 8006f02:	bf14      	ite	ne
 8006f04:	2301      	movne	r3, #1
 8006f06:	2300      	moveq	r3, #0
 8006f08:	b2db      	uxtb	r3, r3
}
 8006f0a:	4618      	mov	r0, r3
 8006f0c:	bd80      	pop	{r7, pc}
 8006f0e:	bf00      	nop
 8006f10:	200001a4 	.word	0x200001a4

08006f14 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(BSP_SD_CardInfo *CardInfo)
{
 8006f14:	b580      	push	{r7, lr}
 8006f16:	b082      	sub	sp, #8
 8006f18:	af00      	add	r7, sp, #0
 8006f1a:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 8006f1c:	6879      	ldr	r1, [r7, #4]
 8006f1e:	4803      	ldr	r0, [pc, #12]	@ (8006f2c <BSP_SD_GetCardInfo+0x18>)
 8006f20:	f7fe f87a 	bl	8005018 <HAL_SD_GetCardInfo>
}
 8006f24:	bf00      	nop
 8006f26:	3708      	adds	r7, #8
 8006f28:	46bd      	mov	sp, r7
 8006f2a:	bd80      	pop	{r7, pc}
 8006f2c:	200001a4 	.word	0x200001a4

08006f30 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 8006f30:	b580      	push	{r7, lr}
 8006f32:	b082      	sub	sp, #8
 8006f34:	af00      	add	r7, sp, #0
 8006f36:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 8006f38:	f000 f818 	bl	8006f6c <BSP_SD_AbortCallback>
}
 8006f3c:	bf00      	nop
 8006f3e:	3708      	adds	r7, #8
 8006f40:	46bd      	mov	sp, r7
 8006f42:	bd80      	pop	{r7, pc}

08006f44 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 8006f44:	b580      	push	{r7, lr}
 8006f46:	b082      	sub	sp, #8
 8006f48:	af00      	add	r7, sp, #0
 8006f4a:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 8006f4c:	f000 f9a8 	bl	80072a0 <BSP_SD_WriteCpltCallback>
}
 8006f50:	bf00      	nop
 8006f52:	3708      	adds	r7, #8
 8006f54:	46bd      	mov	sp, r7
 8006f56:	bd80      	pop	{r7, pc}

08006f58 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8006f58:	b580      	push	{r7, lr}
 8006f5a:	b082      	sub	sp, #8
 8006f5c:	af00      	add	r7, sp, #0
 8006f5e:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 8006f60:	f000 f9aa 	bl	80072b8 <BSP_SD_ReadCpltCallback>
}
 8006f64:	bf00      	nop
 8006f66:	3708      	adds	r7, #8
 8006f68:	46bd      	mov	sp, r7
 8006f6a:	bd80      	pop	{r7, pc}

08006f6c <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 8006f6c:	b480      	push	{r7}
 8006f6e:	af00      	add	r7, sp, #0

}
 8006f70:	bf00      	nop
 8006f72:	46bd      	mov	sp, r7
 8006f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f78:	4770      	bx	lr

08006f7a <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8006f7a:	b580      	push	{r7, lr}
 8006f7c:	b082      	sub	sp, #8
 8006f7e:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8006f80:	2301      	movs	r3, #1
 8006f82:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 8006f84:	f000 f80c 	bl	8006fa0 <BSP_PlatformIsDetected>
 8006f88:	4603      	mov	r3, r0
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d101      	bne.n	8006f92 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 8006f8e:	2300      	movs	r3, #0
 8006f90:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8006f92:	79fb      	ldrb	r3, [r7, #7]
 8006f94:	b2db      	uxtb	r3, r3
}
 8006f96:	4618      	mov	r0, r3
 8006f98:	3708      	adds	r7, #8
 8006f9a:	46bd      	mov	sp, r7
 8006f9c:	bd80      	pop	{r7, pc}
	...

08006fa0 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 8006fa0:	b580      	push	{r7, lr}
 8006fa2:	b082      	sub	sp, #8
 8006fa4:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 8006fa6:	2301      	movs	r3, #1
 8006fa8:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 8006faa:	2180      	movs	r1, #128	@ 0x80
 8006fac:	4806      	ldr	r0, [pc, #24]	@ (8006fc8 <BSP_PlatformIsDetected+0x28>)
 8006fae:	f7fa fddd 	bl	8001b6c <HAL_GPIO_ReadPin>
 8006fb2:	4603      	mov	r3, r0
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d001      	beq.n	8006fbc <BSP_PlatformIsDetected+0x1c>
    {
        status = SD_NOT_PRESENT;
 8006fb8:	2300      	movs	r3, #0
 8006fba:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 8006fbc:	79fb      	ldrb	r3, [r7, #7]
}
 8006fbe:	4618      	mov	r0, r3
 8006fc0:	3708      	adds	r7, #8
 8006fc2:	46bd      	mov	sp, r7
 8006fc4:	bd80      	pop	{r7, pc}
 8006fc6:	bf00      	nop
 8006fc8:	48000400 	.word	0x48000400

08006fcc <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 8006fcc:	b580      	push	{r7, lr}
 8006fce:	b084      	sub	sp, #16
 8006fd0:	af00      	add	r7, sp, #0
 8006fd2:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 8006fd4:	f7fa f898 	bl	8001108 <HAL_GetTick>
 8006fd8:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 8006fda:	e006      	b.n	8006fea <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8006fdc:	f7ff ff8a 	bl	8006ef4 <BSP_SD_GetCardState>
 8006fe0:	4603      	mov	r3, r0
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d101      	bne.n	8006fea <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 8006fe6:	2300      	movs	r3, #0
 8006fe8:	e009      	b.n	8006ffe <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 8006fea:	f7fa f88d 	bl	8001108 <HAL_GetTick>
 8006fee:	4602      	mov	r2, r0
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	1ad3      	subs	r3, r2, r3
 8006ff4:	687a      	ldr	r2, [r7, #4]
 8006ff6:	429a      	cmp	r2, r3
 8006ff8:	d8f0      	bhi.n	8006fdc <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 8006ffa:	f04f 33ff 	mov.w	r3, #4294967295
}
 8006ffe:	4618      	mov	r0, r3
 8007000:	3710      	adds	r7, #16
 8007002:	46bd      	mov	sp, r7
 8007004:	bd80      	pop	{r7, pc}
	...

08007008 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8007008:	b580      	push	{r7, lr}
 800700a:	b082      	sub	sp, #8
 800700c:	af00      	add	r7, sp, #0
 800700e:	4603      	mov	r3, r0
 8007010:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8007012:	4b0b      	ldr	r3, [pc, #44]	@ (8007040 <SD_CheckStatus+0x38>)
 8007014:	2201      	movs	r2, #1
 8007016:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8007018:	f7ff ff6c 	bl	8006ef4 <BSP_SD_GetCardState>
 800701c:	4603      	mov	r3, r0
 800701e:	2b00      	cmp	r3, #0
 8007020:	d107      	bne.n	8007032 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8007022:	4b07      	ldr	r3, [pc, #28]	@ (8007040 <SD_CheckStatus+0x38>)
 8007024:	781b      	ldrb	r3, [r3, #0]
 8007026:	b2db      	uxtb	r3, r3
 8007028:	f023 0301 	bic.w	r3, r3, #1
 800702c:	b2da      	uxtb	r2, r3
 800702e:	4b04      	ldr	r3, [pc, #16]	@ (8007040 <SD_CheckStatus+0x38>)
 8007030:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8007032:	4b03      	ldr	r3, [pc, #12]	@ (8007040 <SD_CheckStatus+0x38>)
 8007034:	781b      	ldrb	r3, [r3, #0]
 8007036:	b2db      	uxtb	r3, r3
}
 8007038:	4618      	mov	r0, r3
 800703a:	3708      	adds	r7, #8
 800703c:	46bd      	mov	sp, r7
 800703e:	bd80      	pop	{r7, pc}
 8007040:	20000009 	.word	0x20000009

08007044 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8007044:	b580      	push	{r7, lr}
 8007046:	b082      	sub	sp, #8
 8007048:	af00      	add	r7, sp, #0
 800704a:	4603      	mov	r3, r0
 800704c:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800704e:	f7ff ff05 	bl	8006e5c <BSP_SD_Init>
 8007052:	4603      	mov	r3, r0
 8007054:	2b00      	cmp	r3, #0
 8007056:	d107      	bne.n	8007068 <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 8007058:	79fb      	ldrb	r3, [r7, #7]
 800705a:	4618      	mov	r0, r3
 800705c:	f7ff ffd4 	bl	8007008 <SD_CheckStatus>
 8007060:	4603      	mov	r3, r0
 8007062:	461a      	mov	r2, r3
 8007064:	4b04      	ldr	r3, [pc, #16]	@ (8007078 <SD_initialize+0x34>)
 8007066:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 8007068:	4b03      	ldr	r3, [pc, #12]	@ (8007078 <SD_initialize+0x34>)
 800706a:	781b      	ldrb	r3, [r3, #0]
 800706c:	b2db      	uxtb	r3, r3
}
 800706e:	4618      	mov	r0, r3
 8007070:	3708      	adds	r7, #8
 8007072:	46bd      	mov	sp, r7
 8007074:	bd80      	pop	{r7, pc}
 8007076:	bf00      	nop
 8007078:	20000009 	.word	0x20000009

0800707c <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800707c:	b580      	push	{r7, lr}
 800707e:	b082      	sub	sp, #8
 8007080:	af00      	add	r7, sp, #0
 8007082:	4603      	mov	r3, r0
 8007084:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8007086:	79fb      	ldrb	r3, [r7, #7]
 8007088:	4618      	mov	r0, r3
 800708a:	f7ff ffbd 	bl	8007008 <SD_CheckStatus>
 800708e:	4603      	mov	r3, r0
}
 8007090:	4618      	mov	r0, r3
 8007092:	3708      	adds	r7, #8
 8007094:	46bd      	mov	sp, r7
 8007096:	bd80      	pop	{r7, pc}

08007098 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8007098:	b580      	push	{r7, lr}
 800709a:	b086      	sub	sp, #24
 800709c:	af00      	add	r7, sp, #0
 800709e:	60b9      	str	r1, [r7, #8]
 80070a0:	607a      	str	r2, [r7, #4]
 80070a2:	603b      	str	r3, [r7, #0]
 80070a4:	4603      	mov	r3, r0
 80070a6:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80070a8:	2301      	movs	r3, #1
 80070aa:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 80070ac:	f247 5030 	movw	r0, #30000	@ 0x7530
 80070b0:	f7ff ff8c 	bl	8006fcc <SD_CheckStatusWithTimeout>
 80070b4:	4603      	mov	r3, r0
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	da01      	bge.n	80070be <SD_read+0x26>
  {
    return res;
 80070ba:	7dfb      	ldrb	r3, [r7, #23]
 80070bc:	e03b      	b.n	8007136 <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 80070be:	683a      	ldr	r2, [r7, #0]
 80070c0:	6879      	ldr	r1, [r7, #4]
 80070c2:	68b8      	ldr	r0, [r7, #8]
 80070c4:	f7ff fee2 	bl	8006e8c <BSP_SD_ReadBlocks_DMA>
 80070c8:	4603      	mov	r3, r0
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d132      	bne.n	8007134 <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 80070ce:	4b1c      	ldr	r3, [pc, #112]	@ (8007140 <SD_read+0xa8>)
 80070d0:	2200      	movs	r2, #0
 80070d2:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 80070d4:	f7fa f818 	bl	8001108 <HAL_GetTick>
 80070d8:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 80070da:	bf00      	nop
 80070dc:	4b18      	ldr	r3, [pc, #96]	@ (8007140 <SD_read+0xa8>)
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d108      	bne.n	80070f6 <SD_read+0x5e>
 80070e4:	f7fa f810 	bl	8001108 <HAL_GetTick>
 80070e8:	4602      	mov	r2, r0
 80070ea:	693b      	ldr	r3, [r7, #16]
 80070ec:	1ad3      	subs	r3, r2, r3
 80070ee:	f247 522f 	movw	r2, #29999	@ 0x752f
 80070f2:	4293      	cmp	r3, r2
 80070f4:	d9f2      	bls.n	80070dc <SD_read+0x44>
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
 80070f6:	4b12      	ldr	r3, [pc, #72]	@ (8007140 <SD_read+0xa8>)
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d102      	bne.n	8007104 <SD_read+0x6c>
      {
        res = RES_ERROR;
 80070fe:	2301      	movs	r3, #1
 8007100:	75fb      	strb	r3, [r7, #23]
 8007102:	e017      	b.n	8007134 <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 8007104:	4b0e      	ldr	r3, [pc, #56]	@ (8007140 <SD_read+0xa8>)
 8007106:	2200      	movs	r2, #0
 8007108:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800710a:	f7f9 fffd 	bl	8001108 <HAL_GetTick>
 800710e:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8007110:	e007      	b.n	8007122 <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8007112:	f7ff feef 	bl	8006ef4 <BSP_SD_GetCardState>
 8007116:	4603      	mov	r3, r0
 8007118:	2b00      	cmp	r3, #0
 800711a:	d102      	bne.n	8007122 <SD_read+0x8a>
          {
            res = RES_OK;
 800711c:	2300      	movs	r3, #0
 800711e:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 8007120:	e008      	b.n	8007134 <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8007122:	f7f9 fff1 	bl	8001108 <HAL_GetTick>
 8007126:	4602      	mov	r2, r0
 8007128:	693b      	ldr	r3, [r7, #16]
 800712a:	1ad3      	subs	r3, r2, r3
 800712c:	f247 522f 	movw	r2, #29999	@ 0x752f
 8007130:	4293      	cmp	r3, r2
 8007132:	d9ee      	bls.n	8007112 <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 8007134:	7dfb      	ldrb	r3, [r7, #23]
}
 8007136:	4618      	mov	r0, r3
 8007138:	3718      	adds	r7, #24
 800713a:	46bd      	mov	sp, r7
 800713c:	bd80      	pop	{r7, pc}
 800713e:	bf00      	nop
 8007140:	20000f68 	.word	0x20000f68

08007144 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8007144:	b580      	push	{r7, lr}
 8007146:	b086      	sub	sp, #24
 8007148:	af00      	add	r7, sp, #0
 800714a:	60b9      	str	r1, [r7, #8]
 800714c:	607a      	str	r2, [r7, #4]
 800714e:	603b      	str	r3, [r7, #0]
 8007150:	4603      	mov	r3, r0
 8007152:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8007154:	2301      	movs	r3, #1
 8007156:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 8007158:	4b24      	ldr	r3, [pc, #144]	@ (80071ec <SD_write+0xa8>)
 800715a:	2200      	movs	r2, #0
 800715c:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800715e:	f247 5030 	movw	r0, #30000	@ 0x7530
 8007162:	f7ff ff33 	bl	8006fcc <SD_CheckStatusWithTimeout>
 8007166:	4603      	mov	r3, r0
 8007168:	2b00      	cmp	r3, #0
 800716a:	da01      	bge.n	8007170 <SD_write+0x2c>
  {
    return res;
 800716c:	7dfb      	ldrb	r3, [r7, #23]
 800716e:	e038      	b.n	80071e2 <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 8007170:	683a      	ldr	r2, [r7, #0]
 8007172:	6879      	ldr	r1, [r7, #4]
 8007174:	68b8      	ldr	r0, [r7, #8]
 8007176:	f7ff fea3 	bl	8006ec0 <BSP_SD_WriteBlocks_DMA>
 800717a:	4603      	mov	r3, r0
 800717c:	2b00      	cmp	r3, #0
 800717e:	d12f      	bne.n	80071e0 <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 8007180:	f7f9 ffc2 	bl	8001108 <HAL_GetTick>
 8007184:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8007186:	bf00      	nop
 8007188:	4b18      	ldr	r3, [pc, #96]	@ (80071ec <SD_write+0xa8>)
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	2b00      	cmp	r3, #0
 800718e:	d108      	bne.n	80071a2 <SD_write+0x5e>
 8007190:	f7f9 ffba 	bl	8001108 <HAL_GetTick>
 8007194:	4602      	mov	r2, r0
 8007196:	693b      	ldr	r3, [r7, #16]
 8007198:	1ad3      	subs	r3, r2, r3
 800719a:	f247 522f 	movw	r2, #29999	@ 0x752f
 800719e:	4293      	cmp	r3, r2
 80071a0:	d9f2      	bls.n	8007188 <SD_write+0x44>
      {
      }
      /* in case of a timeout return error */
      if (WriteStatus == 0)
 80071a2:	4b12      	ldr	r3, [pc, #72]	@ (80071ec <SD_write+0xa8>)
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d102      	bne.n	80071b0 <SD_write+0x6c>
      {
        res = RES_ERROR;
 80071aa:	2301      	movs	r3, #1
 80071ac:	75fb      	strb	r3, [r7, #23]
 80071ae:	e017      	b.n	80071e0 <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 80071b0:	4b0e      	ldr	r3, [pc, #56]	@ (80071ec <SD_write+0xa8>)
 80071b2:	2200      	movs	r2, #0
 80071b4:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 80071b6:	f7f9 ffa7 	bl	8001108 <HAL_GetTick>
 80071ba:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 80071bc:	e007      	b.n	80071ce <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80071be:	f7ff fe99 	bl	8006ef4 <BSP_SD_GetCardState>
 80071c2:	4603      	mov	r3, r0
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d102      	bne.n	80071ce <SD_write+0x8a>
          {
            res = RES_OK;
 80071c8:	2300      	movs	r3, #0
 80071ca:	75fb      	strb	r3, [r7, #23]
            break;
 80071cc:	e008      	b.n	80071e0 <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 80071ce:	f7f9 ff9b 	bl	8001108 <HAL_GetTick>
 80071d2:	4602      	mov	r2, r0
 80071d4:	693b      	ldr	r3, [r7, #16]
 80071d6:	1ad3      	subs	r3, r2, r3
 80071d8:	f247 522f 	movw	r2, #29999	@ 0x752f
 80071dc:	4293      	cmp	r3, r2
 80071de:	d9ee      	bls.n	80071be <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 80071e0:	7dfb      	ldrb	r3, [r7, #23]
}
 80071e2:	4618      	mov	r0, r3
 80071e4:	3718      	adds	r7, #24
 80071e6:	46bd      	mov	sp, r7
 80071e8:	bd80      	pop	{r7, pc}
 80071ea:	bf00      	nop
 80071ec:	20000f64 	.word	0x20000f64

080071f0 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 80071f0:	b580      	push	{r7, lr}
 80071f2:	b08c      	sub	sp, #48	@ 0x30
 80071f4:	af00      	add	r7, sp, #0
 80071f6:	4603      	mov	r3, r0
 80071f8:	603a      	str	r2, [r7, #0]
 80071fa:	71fb      	strb	r3, [r7, #7]
 80071fc:	460b      	mov	r3, r1
 80071fe:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8007200:	2301      	movs	r3, #1
 8007202:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8007206:	4b25      	ldr	r3, [pc, #148]	@ (800729c <SD_ioctl+0xac>)
 8007208:	781b      	ldrb	r3, [r3, #0]
 800720a:	b2db      	uxtb	r3, r3
 800720c:	f003 0301 	and.w	r3, r3, #1
 8007210:	2b00      	cmp	r3, #0
 8007212:	d001      	beq.n	8007218 <SD_ioctl+0x28>
 8007214:	2303      	movs	r3, #3
 8007216:	e03c      	b.n	8007292 <SD_ioctl+0xa2>

  switch (cmd)
 8007218:	79bb      	ldrb	r3, [r7, #6]
 800721a:	2b03      	cmp	r3, #3
 800721c:	d834      	bhi.n	8007288 <SD_ioctl+0x98>
 800721e:	a201      	add	r2, pc, #4	@ (adr r2, 8007224 <SD_ioctl+0x34>)
 8007220:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007224:	08007235 	.word	0x08007235
 8007228:	0800723d 	.word	0x0800723d
 800722c:	08007255 	.word	0x08007255
 8007230:	0800726f 	.word	0x0800726f
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8007234:	2300      	movs	r3, #0
 8007236:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800723a:	e028      	b.n	800728e <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800723c:	f107 030c 	add.w	r3, r7, #12
 8007240:	4618      	mov	r0, r3
 8007242:	f7ff fe67 	bl	8006f14 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8007246:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007248:	683b      	ldr	r3, [r7, #0]
 800724a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800724c:	2300      	movs	r3, #0
 800724e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8007252:	e01c      	b.n	800728e <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8007254:	f107 030c 	add.w	r3, r7, #12
 8007258:	4618      	mov	r0, r3
 800725a:	f7ff fe5b 	bl	8006f14 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800725e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007260:	b29a      	uxth	r2, r3
 8007262:	683b      	ldr	r3, [r7, #0]
 8007264:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8007266:	2300      	movs	r3, #0
 8007268:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800726c:	e00f      	b.n	800728e <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800726e:	f107 030c 	add.w	r3, r7, #12
 8007272:	4618      	mov	r0, r3
 8007274:	f7ff fe4e 	bl	8006f14 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8007278:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800727a:	0a5a      	lsrs	r2, r3, #9
 800727c:	683b      	ldr	r3, [r7, #0]
 800727e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8007280:	2300      	movs	r3, #0
 8007282:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8007286:	e002      	b.n	800728e <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8007288:	2304      	movs	r3, #4
 800728a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  return res;
 800728e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8007292:	4618      	mov	r0, r3
 8007294:	3730      	adds	r7, #48	@ 0x30
 8007296:	46bd      	mov	sp, r7
 8007298:	bd80      	pop	{r7, pc}
 800729a:	bf00      	nop
 800729c:	20000009 	.word	0x20000009

080072a0 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 80072a0:	b480      	push	{r7}
 80072a2:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 80072a4:	4b03      	ldr	r3, [pc, #12]	@ (80072b4 <BSP_SD_WriteCpltCallback+0x14>)
 80072a6:	2201      	movs	r2, #1
 80072a8:	601a      	str	r2, [r3, #0]
}
 80072aa:	bf00      	nop
 80072ac:	46bd      	mov	sp, r7
 80072ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072b2:	4770      	bx	lr
 80072b4:	20000f64 	.word	0x20000f64

080072b8 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 80072b8:	b480      	push	{r7}
 80072ba:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 80072bc:	4b03      	ldr	r3, [pc, #12]	@ (80072cc <BSP_SD_ReadCpltCallback+0x14>)
 80072be:	2201      	movs	r2, #1
 80072c0:	601a      	str	r2, [r3, #0]
}
 80072c2:	bf00      	nop
 80072c4:	46bd      	mov	sp, r7
 80072c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ca:	4770      	bx	lr
 80072cc:	20000f68 	.word	0x20000f68

080072d0 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 80072d0:	b580      	push	{r7, lr}
 80072d2:	b084      	sub	sp, #16
 80072d4:	af00      	add	r7, sp, #0
 80072d6:	4603      	mov	r3, r0
 80072d8:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 80072da:	79fb      	ldrb	r3, [r7, #7]
 80072dc:	4a08      	ldr	r2, [pc, #32]	@ (8007300 <disk_status+0x30>)
 80072de:	009b      	lsls	r3, r3, #2
 80072e0:	4413      	add	r3, r2
 80072e2:	685b      	ldr	r3, [r3, #4]
 80072e4:	685b      	ldr	r3, [r3, #4]
 80072e6:	79fa      	ldrb	r2, [r7, #7]
 80072e8:	4905      	ldr	r1, [pc, #20]	@ (8007300 <disk_status+0x30>)
 80072ea:	440a      	add	r2, r1
 80072ec:	7a12      	ldrb	r2, [r2, #8]
 80072ee:	4610      	mov	r0, r2
 80072f0:	4798      	blx	r3
 80072f2:	4603      	mov	r3, r0
 80072f4:	73fb      	strb	r3, [r7, #15]
  return stat;
 80072f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80072f8:	4618      	mov	r0, r3
 80072fa:	3710      	adds	r7, #16
 80072fc:	46bd      	mov	sp, r7
 80072fe:	bd80      	pop	{r7, pc}
 8007300:	20000fa4 	.word	0x20000fa4

08007304 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8007304:	b580      	push	{r7, lr}
 8007306:	b084      	sub	sp, #16
 8007308:	af00      	add	r7, sp, #0
 800730a:	4603      	mov	r3, r0
 800730c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800730e:	2300      	movs	r3, #0
 8007310:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8007312:	79fb      	ldrb	r3, [r7, #7]
 8007314:	4a0d      	ldr	r2, [pc, #52]	@ (800734c <disk_initialize+0x48>)
 8007316:	5cd3      	ldrb	r3, [r2, r3]
 8007318:	2b00      	cmp	r3, #0
 800731a:	d111      	bne.n	8007340 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800731c:	79fb      	ldrb	r3, [r7, #7]
 800731e:	4a0b      	ldr	r2, [pc, #44]	@ (800734c <disk_initialize+0x48>)
 8007320:	2101      	movs	r1, #1
 8007322:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8007324:	79fb      	ldrb	r3, [r7, #7]
 8007326:	4a09      	ldr	r2, [pc, #36]	@ (800734c <disk_initialize+0x48>)
 8007328:	009b      	lsls	r3, r3, #2
 800732a:	4413      	add	r3, r2
 800732c:	685b      	ldr	r3, [r3, #4]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	79fa      	ldrb	r2, [r7, #7]
 8007332:	4906      	ldr	r1, [pc, #24]	@ (800734c <disk_initialize+0x48>)
 8007334:	440a      	add	r2, r1
 8007336:	7a12      	ldrb	r2, [r2, #8]
 8007338:	4610      	mov	r0, r2
 800733a:	4798      	blx	r3
 800733c:	4603      	mov	r3, r0
 800733e:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8007340:	7bfb      	ldrb	r3, [r7, #15]
}
 8007342:	4618      	mov	r0, r3
 8007344:	3710      	adds	r7, #16
 8007346:	46bd      	mov	sp, r7
 8007348:	bd80      	pop	{r7, pc}
 800734a:	bf00      	nop
 800734c:	20000fa4 	.word	0x20000fa4

08007350 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8007350:	b590      	push	{r4, r7, lr}
 8007352:	b087      	sub	sp, #28
 8007354:	af00      	add	r7, sp, #0
 8007356:	60b9      	str	r1, [r7, #8]
 8007358:	607a      	str	r2, [r7, #4]
 800735a:	603b      	str	r3, [r7, #0]
 800735c:	4603      	mov	r3, r0
 800735e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8007360:	7bfb      	ldrb	r3, [r7, #15]
 8007362:	4a0a      	ldr	r2, [pc, #40]	@ (800738c <disk_read+0x3c>)
 8007364:	009b      	lsls	r3, r3, #2
 8007366:	4413      	add	r3, r2
 8007368:	685b      	ldr	r3, [r3, #4]
 800736a:	689c      	ldr	r4, [r3, #8]
 800736c:	7bfb      	ldrb	r3, [r7, #15]
 800736e:	4a07      	ldr	r2, [pc, #28]	@ (800738c <disk_read+0x3c>)
 8007370:	4413      	add	r3, r2
 8007372:	7a18      	ldrb	r0, [r3, #8]
 8007374:	683b      	ldr	r3, [r7, #0]
 8007376:	687a      	ldr	r2, [r7, #4]
 8007378:	68b9      	ldr	r1, [r7, #8]
 800737a:	47a0      	blx	r4
 800737c:	4603      	mov	r3, r0
 800737e:	75fb      	strb	r3, [r7, #23]
  return res;
 8007380:	7dfb      	ldrb	r3, [r7, #23]
}
 8007382:	4618      	mov	r0, r3
 8007384:	371c      	adds	r7, #28
 8007386:	46bd      	mov	sp, r7
 8007388:	bd90      	pop	{r4, r7, pc}
 800738a:	bf00      	nop
 800738c:	20000fa4 	.word	0x20000fa4

08007390 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8007390:	b590      	push	{r4, r7, lr}
 8007392:	b087      	sub	sp, #28
 8007394:	af00      	add	r7, sp, #0
 8007396:	60b9      	str	r1, [r7, #8]
 8007398:	607a      	str	r2, [r7, #4]
 800739a:	603b      	str	r3, [r7, #0]
 800739c:	4603      	mov	r3, r0
 800739e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 80073a0:	7bfb      	ldrb	r3, [r7, #15]
 80073a2:	4a0a      	ldr	r2, [pc, #40]	@ (80073cc <disk_write+0x3c>)
 80073a4:	009b      	lsls	r3, r3, #2
 80073a6:	4413      	add	r3, r2
 80073a8:	685b      	ldr	r3, [r3, #4]
 80073aa:	68dc      	ldr	r4, [r3, #12]
 80073ac:	7bfb      	ldrb	r3, [r7, #15]
 80073ae:	4a07      	ldr	r2, [pc, #28]	@ (80073cc <disk_write+0x3c>)
 80073b0:	4413      	add	r3, r2
 80073b2:	7a18      	ldrb	r0, [r3, #8]
 80073b4:	683b      	ldr	r3, [r7, #0]
 80073b6:	687a      	ldr	r2, [r7, #4]
 80073b8:	68b9      	ldr	r1, [r7, #8]
 80073ba:	47a0      	blx	r4
 80073bc:	4603      	mov	r3, r0
 80073be:	75fb      	strb	r3, [r7, #23]
  return res;
 80073c0:	7dfb      	ldrb	r3, [r7, #23]
}
 80073c2:	4618      	mov	r0, r3
 80073c4:	371c      	adds	r7, #28
 80073c6:	46bd      	mov	sp, r7
 80073c8:	bd90      	pop	{r4, r7, pc}
 80073ca:	bf00      	nop
 80073cc:	20000fa4 	.word	0x20000fa4

080073d0 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 80073d0:	b580      	push	{r7, lr}
 80073d2:	b084      	sub	sp, #16
 80073d4:	af00      	add	r7, sp, #0
 80073d6:	4603      	mov	r3, r0
 80073d8:	603a      	str	r2, [r7, #0]
 80073da:	71fb      	strb	r3, [r7, #7]
 80073dc:	460b      	mov	r3, r1
 80073de:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 80073e0:	79fb      	ldrb	r3, [r7, #7]
 80073e2:	4a09      	ldr	r2, [pc, #36]	@ (8007408 <disk_ioctl+0x38>)
 80073e4:	009b      	lsls	r3, r3, #2
 80073e6:	4413      	add	r3, r2
 80073e8:	685b      	ldr	r3, [r3, #4]
 80073ea:	691b      	ldr	r3, [r3, #16]
 80073ec:	79fa      	ldrb	r2, [r7, #7]
 80073ee:	4906      	ldr	r1, [pc, #24]	@ (8007408 <disk_ioctl+0x38>)
 80073f0:	440a      	add	r2, r1
 80073f2:	7a10      	ldrb	r0, [r2, #8]
 80073f4:	79b9      	ldrb	r1, [r7, #6]
 80073f6:	683a      	ldr	r2, [r7, #0]
 80073f8:	4798      	blx	r3
 80073fa:	4603      	mov	r3, r0
 80073fc:	73fb      	strb	r3, [r7, #15]
  return res;
 80073fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8007400:	4618      	mov	r0, r3
 8007402:	3710      	adds	r7, #16
 8007404:	46bd      	mov	sp, r7
 8007406:	bd80      	pop	{r7, pc}
 8007408:	20000fa4 	.word	0x20000fa4

0800740c <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800740c:	b480      	push	{r7}
 800740e:	b085      	sub	sp, #20
 8007410:	af00      	add	r7, sp, #0
 8007412:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	3301      	adds	r3, #1
 8007418:	781b      	ldrb	r3, [r3, #0]
 800741a:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800741c:	89fb      	ldrh	r3, [r7, #14]
 800741e:	021b      	lsls	r3, r3, #8
 8007420:	b21a      	sxth	r2, r3
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	781b      	ldrb	r3, [r3, #0]
 8007426:	b21b      	sxth	r3, r3
 8007428:	4313      	orrs	r3, r2
 800742a:	b21b      	sxth	r3, r3
 800742c:	81fb      	strh	r3, [r7, #14]
	return rv;
 800742e:	89fb      	ldrh	r3, [r7, #14]
}
 8007430:	4618      	mov	r0, r3
 8007432:	3714      	adds	r7, #20
 8007434:	46bd      	mov	sp, r7
 8007436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800743a:	4770      	bx	lr

0800743c <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800743c:	b480      	push	{r7}
 800743e:	b085      	sub	sp, #20
 8007440:	af00      	add	r7, sp, #0
 8007442:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	3303      	adds	r3, #3
 8007448:	781b      	ldrb	r3, [r3, #0]
 800744a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	021b      	lsls	r3, r3, #8
 8007450:	687a      	ldr	r2, [r7, #4]
 8007452:	3202      	adds	r2, #2
 8007454:	7812      	ldrb	r2, [r2, #0]
 8007456:	4313      	orrs	r3, r2
 8007458:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	021b      	lsls	r3, r3, #8
 800745e:	687a      	ldr	r2, [r7, #4]
 8007460:	3201      	adds	r2, #1
 8007462:	7812      	ldrb	r2, [r2, #0]
 8007464:	4313      	orrs	r3, r2
 8007466:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	021b      	lsls	r3, r3, #8
 800746c:	687a      	ldr	r2, [r7, #4]
 800746e:	7812      	ldrb	r2, [r2, #0]
 8007470:	4313      	orrs	r3, r2
 8007472:	60fb      	str	r3, [r7, #12]
	return rv;
 8007474:	68fb      	ldr	r3, [r7, #12]
}
 8007476:	4618      	mov	r0, r3
 8007478:	3714      	adds	r7, #20
 800747a:	46bd      	mov	sp, r7
 800747c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007480:	4770      	bx	lr

08007482 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8007482:	b480      	push	{r7}
 8007484:	b083      	sub	sp, #12
 8007486:	af00      	add	r7, sp, #0
 8007488:	6078      	str	r0, [r7, #4]
 800748a:	460b      	mov	r3, r1
 800748c:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	1c5a      	adds	r2, r3, #1
 8007492:	607a      	str	r2, [r7, #4]
 8007494:	887a      	ldrh	r2, [r7, #2]
 8007496:	b2d2      	uxtb	r2, r2
 8007498:	701a      	strb	r2, [r3, #0]
 800749a:	887b      	ldrh	r3, [r7, #2]
 800749c:	0a1b      	lsrs	r3, r3, #8
 800749e:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	1c5a      	adds	r2, r3, #1
 80074a4:	607a      	str	r2, [r7, #4]
 80074a6:	887a      	ldrh	r2, [r7, #2]
 80074a8:	b2d2      	uxtb	r2, r2
 80074aa:	701a      	strb	r2, [r3, #0]
}
 80074ac:	bf00      	nop
 80074ae:	370c      	adds	r7, #12
 80074b0:	46bd      	mov	sp, r7
 80074b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074b6:	4770      	bx	lr

080074b8 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 80074b8:	b480      	push	{r7}
 80074ba:	b083      	sub	sp, #12
 80074bc:	af00      	add	r7, sp, #0
 80074be:	6078      	str	r0, [r7, #4]
 80074c0:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	1c5a      	adds	r2, r3, #1
 80074c6:	607a      	str	r2, [r7, #4]
 80074c8:	683a      	ldr	r2, [r7, #0]
 80074ca:	b2d2      	uxtb	r2, r2
 80074cc:	701a      	strb	r2, [r3, #0]
 80074ce:	683b      	ldr	r3, [r7, #0]
 80074d0:	0a1b      	lsrs	r3, r3, #8
 80074d2:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	1c5a      	adds	r2, r3, #1
 80074d8:	607a      	str	r2, [r7, #4]
 80074da:	683a      	ldr	r2, [r7, #0]
 80074dc:	b2d2      	uxtb	r2, r2
 80074de:	701a      	strb	r2, [r3, #0]
 80074e0:	683b      	ldr	r3, [r7, #0]
 80074e2:	0a1b      	lsrs	r3, r3, #8
 80074e4:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	1c5a      	adds	r2, r3, #1
 80074ea:	607a      	str	r2, [r7, #4]
 80074ec:	683a      	ldr	r2, [r7, #0]
 80074ee:	b2d2      	uxtb	r2, r2
 80074f0:	701a      	strb	r2, [r3, #0]
 80074f2:	683b      	ldr	r3, [r7, #0]
 80074f4:	0a1b      	lsrs	r3, r3, #8
 80074f6:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	1c5a      	adds	r2, r3, #1
 80074fc:	607a      	str	r2, [r7, #4]
 80074fe:	683a      	ldr	r2, [r7, #0]
 8007500:	b2d2      	uxtb	r2, r2
 8007502:	701a      	strb	r2, [r3, #0]
}
 8007504:	bf00      	nop
 8007506:	370c      	adds	r7, #12
 8007508:	46bd      	mov	sp, r7
 800750a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800750e:	4770      	bx	lr

08007510 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8007510:	b480      	push	{r7}
 8007512:	b087      	sub	sp, #28
 8007514:	af00      	add	r7, sp, #0
 8007516:	60f8      	str	r0, [r7, #12]
 8007518:	60b9      	str	r1, [r7, #8]
 800751a:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8007520:	68bb      	ldr	r3, [r7, #8]
 8007522:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	2b00      	cmp	r3, #0
 8007528:	d00d      	beq.n	8007546 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800752a:	693a      	ldr	r2, [r7, #16]
 800752c:	1c53      	adds	r3, r2, #1
 800752e:	613b      	str	r3, [r7, #16]
 8007530:	697b      	ldr	r3, [r7, #20]
 8007532:	1c59      	adds	r1, r3, #1
 8007534:	6179      	str	r1, [r7, #20]
 8007536:	7812      	ldrb	r2, [r2, #0]
 8007538:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	3b01      	subs	r3, #1
 800753e:	607b      	str	r3, [r7, #4]
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	2b00      	cmp	r3, #0
 8007544:	d1f1      	bne.n	800752a <mem_cpy+0x1a>
	}
}
 8007546:	bf00      	nop
 8007548:	371c      	adds	r7, #28
 800754a:	46bd      	mov	sp, r7
 800754c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007550:	4770      	bx	lr

08007552 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8007552:	b480      	push	{r7}
 8007554:	b087      	sub	sp, #28
 8007556:	af00      	add	r7, sp, #0
 8007558:	60f8      	str	r0, [r7, #12]
 800755a:	60b9      	str	r1, [r7, #8]
 800755c:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8007562:	697b      	ldr	r3, [r7, #20]
 8007564:	1c5a      	adds	r2, r3, #1
 8007566:	617a      	str	r2, [r7, #20]
 8007568:	68ba      	ldr	r2, [r7, #8]
 800756a:	b2d2      	uxtb	r2, r2
 800756c:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	3b01      	subs	r3, #1
 8007572:	607b      	str	r3, [r7, #4]
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	2b00      	cmp	r3, #0
 8007578:	d1f3      	bne.n	8007562 <mem_set+0x10>
}
 800757a:	bf00      	nop
 800757c:	bf00      	nop
 800757e:	371c      	adds	r7, #28
 8007580:	46bd      	mov	sp, r7
 8007582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007586:	4770      	bx	lr

08007588 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8007588:	b480      	push	{r7}
 800758a:	b089      	sub	sp, #36	@ 0x24
 800758c:	af00      	add	r7, sp, #0
 800758e:	60f8      	str	r0, [r7, #12]
 8007590:	60b9      	str	r1, [r7, #8]
 8007592:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	61fb      	str	r3, [r7, #28]
 8007598:	68bb      	ldr	r3, [r7, #8]
 800759a:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800759c:	2300      	movs	r3, #0
 800759e:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 80075a0:	69fb      	ldr	r3, [r7, #28]
 80075a2:	1c5a      	adds	r2, r3, #1
 80075a4:	61fa      	str	r2, [r7, #28]
 80075a6:	781b      	ldrb	r3, [r3, #0]
 80075a8:	4619      	mov	r1, r3
 80075aa:	69bb      	ldr	r3, [r7, #24]
 80075ac:	1c5a      	adds	r2, r3, #1
 80075ae:	61ba      	str	r2, [r7, #24]
 80075b0:	781b      	ldrb	r3, [r3, #0]
 80075b2:	1acb      	subs	r3, r1, r3
 80075b4:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	3b01      	subs	r3, #1
 80075ba:	607b      	str	r3, [r7, #4]
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d002      	beq.n	80075c8 <mem_cmp+0x40>
 80075c2:	697b      	ldr	r3, [r7, #20]
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d0eb      	beq.n	80075a0 <mem_cmp+0x18>

	return r;
 80075c8:	697b      	ldr	r3, [r7, #20]
}
 80075ca:	4618      	mov	r0, r3
 80075cc:	3724      	adds	r7, #36	@ 0x24
 80075ce:	46bd      	mov	sp, r7
 80075d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075d4:	4770      	bx	lr

080075d6 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 80075d6:	b480      	push	{r7}
 80075d8:	b083      	sub	sp, #12
 80075da:	af00      	add	r7, sp, #0
 80075dc:	6078      	str	r0, [r7, #4]
 80075de:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 80075e0:	e002      	b.n	80075e8 <chk_chr+0x12>
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	3301      	adds	r3, #1
 80075e6:	607b      	str	r3, [r7, #4]
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	781b      	ldrb	r3, [r3, #0]
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d005      	beq.n	80075fc <chk_chr+0x26>
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	781b      	ldrb	r3, [r3, #0]
 80075f4:	461a      	mov	r2, r3
 80075f6:	683b      	ldr	r3, [r7, #0]
 80075f8:	4293      	cmp	r3, r2
 80075fa:	d1f2      	bne.n	80075e2 <chk_chr+0xc>
	return *str;
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	781b      	ldrb	r3, [r3, #0]
}
 8007600:	4618      	mov	r0, r3
 8007602:	370c      	adds	r7, #12
 8007604:	46bd      	mov	sp, r7
 8007606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800760a:	4770      	bx	lr

0800760c <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800760c:	b480      	push	{r7}
 800760e:	b085      	sub	sp, #20
 8007610:	af00      	add	r7, sp, #0
 8007612:	6078      	str	r0, [r7, #4]
 8007614:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8007616:	2300      	movs	r3, #0
 8007618:	60bb      	str	r3, [r7, #8]
 800761a:	68bb      	ldr	r3, [r7, #8]
 800761c:	60fb      	str	r3, [r7, #12]
 800761e:	e029      	b.n	8007674 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8007620:	4a27      	ldr	r2, [pc, #156]	@ (80076c0 <chk_lock+0xb4>)
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	011b      	lsls	r3, r3, #4
 8007626:	4413      	add	r3, r2
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	2b00      	cmp	r3, #0
 800762c:	d01d      	beq.n	800766a <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800762e:	4a24      	ldr	r2, [pc, #144]	@ (80076c0 <chk_lock+0xb4>)
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	011b      	lsls	r3, r3, #4
 8007634:	4413      	add	r3, r2
 8007636:	681a      	ldr	r2, [r3, #0]
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	429a      	cmp	r2, r3
 800763e:	d116      	bne.n	800766e <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8007640:	4a1f      	ldr	r2, [pc, #124]	@ (80076c0 <chk_lock+0xb4>)
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	011b      	lsls	r3, r3, #4
 8007646:	4413      	add	r3, r2
 8007648:	3304      	adds	r3, #4
 800764a:	681a      	ldr	r2, [r3, #0]
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8007650:	429a      	cmp	r2, r3
 8007652:	d10c      	bne.n	800766e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8007654:	4a1a      	ldr	r2, [pc, #104]	@ (80076c0 <chk_lock+0xb4>)
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	011b      	lsls	r3, r3, #4
 800765a:	4413      	add	r3, r2
 800765c:	3308      	adds	r3, #8
 800765e:	681a      	ldr	r2, [r3, #0]
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8007664:	429a      	cmp	r2, r3
 8007666:	d102      	bne.n	800766e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8007668:	e007      	b.n	800767a <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800766a:	2301      	movs	r3, #1
 800766c:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	3301      	adds	r3, #1
 8007672:	60fb      	str	r3, [r7, #12]
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	2b02      	cmp	r3, #2
 8007678:	d9d2      	bls.n	8007620 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	2b03      	cmp	r3, #3
 800767e:	d109      	bne.n	8007694 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8007680:	68bb      	ldr	r3, [r7, #8]
 8007682:	2b00      	cmp	r3, #0
 8007684:	d102      	bne.n	800768c <chk_lock+0x80>
 8007686:	683b      	ldr	r3, [r7, #0]
 8007688:	2b02      	cmp	r3, #2
 800768a:	d101      	bne.n	8007690 <chk_lock+0x84>
 800768c:	2300      	movs	r3, #0
 800768e:	e010      	b.n	80076b2 <chk_lock+0xa6>
 8007690:	2312      	movs	r3, #18
 8007692:	e00e      	b.n	80076b2 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8007694:	683b      	ldr	r3, [r7, #0]
 8007696:	2b00      	cmp	r3, #0
 8007698:	d108      	bne.n	80076ac <chk_lock+0xa0>
 800769a:	4a09      	ldr	r2, [pc, #36]	@ (80076c0 <chk_lock+0xb4>)
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	011b      	lsls	r3, r3, #4
 80076a0:	4413      	add	r3, r2
 80076a2:	330c      	adds	r3, #12
 80076a4:	881b      	ldrh	r3, [r3, #0]
 80076a6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80076aa:	d101      	bne.n	80076b0 <chk_lock+0xa4>
 80076ac:	2310      	movs	r3, #16
 80076ae:	e000      	b.n	80076b2 <chk_lock+0xa6>
 80076b0:	2300      	movs	r3, #0
}
 80076b2:	4618      	mov	r0, r3
 80076b4:	3714      	adds	r7, #20
 80076b6:	46bd      	mov	sp, r7
 80076b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076bc:	4770      	bx	lr
 80076be:	bf00      	nop
 80076c0:	20000f74 	.word	0x20000f74

080076c4 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 80076c4:	b480      	push	{r7}
 80076c6:	b083      	sub	sp, #12
 80076c8:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80076ca:	2300      	movs	r3, #0
 80076cc:	607b      	str	r3, [r7, #4]
 80076ce:	e002      	b.n	80076d6 <enq_lock+0x12>
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	3301      	adds	r3, #1
 80076d4:	607b      	str	r3, [r7, #4]
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	2b02      	cmp	r3, #2
 80076da:	d806      	bhi.n	80076ea <enq_lock+0x26>
 80076dc:	4a09      	ldr	r2, [pc, #36]	@ (8007704 <enq_lock+0x40>)
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	011b      	lsls	r3, r3, #4
 80076e2:	4413      	add	r3, r2
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d1f2      	bne.n	80076d0 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	2b03      	cmp	r3, #3
 80076ee:	bf14      	ite	ne
 80076f0:	2301      	movne	r3, #1
 80076f2:	2300      	moveq	r3, #0
 80076f4:	b2db      	uxtb	r3, r3
}
 80076f6:	4618      	mov	r0, r3
 80076f8:	370c      	adds	r7, #12
 80076fa:	46bd      	mov	sp, r7
 80076fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007700:	4770      	bx	lr
 8007702:	bf00      	nop
 8007704:	20000f74 	.word	0x20000f74

08007708 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8007708:	b480      	push	{r7}
 800770a:	b085      	sub	sp, #20
 800770c:	af00      	add	r7, sp, #0
 800770e:	6078      	str	r0, [r7, #4]
 8007710:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8007712:	2300      	movs	r3, #0
 8007714:	60fb      	str	r3, [r7, #12]
 8007716:	e01f      	b.n	8007758 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8007718:	4a41      	ldr	r2, [pc, #260]	@ (8007820 <inc_lock+0x118>)
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	011b      	lsls	r3, r3, #4
 800771e:	4413      	add	r3, r2
 8007720:	681a      	ldr	r2, [r3, #0]
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	429a      	cmp	r2, r3
 8007728:	d113      	bne.n	8007752 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800772a:	4a3d      	ldr	r2, [pc, #244]	@ (8007820 <inc_lock+0x118>)
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	011b      	lsls	r3, r3, #4
 8007730:	4413      	add	r3, r2
 8007732:	3304      	adds	r3, #4
 8007734:	681a      	ldr	r2, [r3, #0]
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800773a:	429a      	cmp	r2, r3
 800773c:	d109      	bne.n	8007752 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800773e:	4a38      	ldr	r2, [pc, #224]	@ (8007820 <inc_lock+0x118>)
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	011b      	lsls	r3, r3, #4
 8007744:	4413      	add	r3, r2
 8007746:	3308      	adds	r3, #8
 8007748:	681a      	ldr	r2, [r3, #0]
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800774e:	429a      	cmp	r2, r3
 8007750:	d006      	beq.n	8007760 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	3301      	adds	r3, #1
 8007756:	60fb      	str	r3, [r7, #12]
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	2b02      	cmp	r3, #2
 800775c:	d9dc      	bls.n	8007718 <inc_lock+0x10>
 800775e:	e000      	b.n	8007762 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8007760:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	2b03      	cmp	r3, #3
 8007766:	d132      	bne.n	80077ce <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8007768:	2300      	movs	r3, #0
 800776a:	60fb      	str	r3, [r7, #12]
 800776c:	e002      	b.n	8007774 <inc_lock+0x6c>
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	3301      	adds	r3, #1
 8007772:	60fb      	str	r3, [r7, #12]
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	2b02      	cmp	r3, #2
 8007778:	d806      	bhi.n	8007788 <inc_lock+0x80>
 800777a:	4a29      	ldr	r2, [pc, #164]	@ (8007820 <inc_lock+0x118>)
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	011b      	lsls	r3, r3, #4
 8007780:	4413      	add	r3, r2
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	2b00      	cmp	r3, #0
 8007786:	d1f2      	bne.n	800776e <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	2b03      	cmp	r3, #3
 800778c:	d101      	bne.n	8007792 <inc_lock+0x8a>
 800778e:	2300      	movs	r3, #0
 8007790:	e040      	b.n	8007814 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	681a      	ldr	r2, [r3, #0]
 8007796:	4922      	ldr	r1, [pc, #136]	@ (8007820 <inc_lock+0x118>)
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	011b      	lsls	r3, r3, #4
 800779c:	440b      	add	r3, r1
 800779e:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	689a      	ldr	r2, [r3, #8]
 80077a4:	491e      	ldr	r1, [pc, #120]	@ (8007820 <inc_lock+0x118>)
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	011b      	lsls	r3, r3, #4
 80077aa:	440b      	add	r3, r1
 80077ac:	3304      	adds	r3, #4
 80077ae:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	695a      	ldr	r2, [r3, #20]
 80077b4:	491a      	ldr	r1, [pc, #104]	@ (8007820 <inc_lock+0x118>)
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	011b      	lsls	r3, r3, #4
 80077ba:	440b      	add	r3, r1
 80077bc:	3308      	adds	r3, #8
 80077be:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 80077c0:	4a17      	ldr	r2, [pc, #92]	@ (8007820 <inc_lock+0x118>)
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	011b      	lsls	r3, r3, #4
 80077c6:	4413      	add	r3, r2
 80077c8:	330c      	adds	r3, #12
 80077ca:	2200      	movs	r2, #0
 80077cc:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 80077ce:	683b      	ldr	r3, [r7, #0]
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d009      	beq.n	80077e8 <inc_lock+0xe0>
 80077d4:	4a12      	ldr	r2, [pc, #72]	@ (8007820 <inc_lock+0x118>)
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	011b      	lsls	r3, r3, #4
 80077da:	4413      	add	r3, r2
 80077dc:	330c      	adds	r3, #12
 80077de:	881b      	ldrh	r3, [r3, #0]
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d001      	beq.n	80077e8 <inc_lock+0xe0>
 80077e4:	2300      	movs	r3, #0
 80077e6:	e015      	b.n	8007814 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80077e8:	683b      	ldr	r3, [r7, #0]
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d108      	bne.n	8007800 <inc_lock+0xf8>
 80077ee:	4a0c      	ldr	r2, [pc, #48]	@ (8007820 <inc_lock+0x118>)
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	011b      	lsls	r3, r3, #4
 80077f4:	4413      	add	r3, r2
 80077f6:	330c      	adds	r3, #12
 80077f8:	881b      	ldrh	r3, [r3, #0]
 80077fa:	3301      	adds	r3, #1
 80077fc:	b29a      	uxth	r2, r3
 80077fe:	e001      	b.n	8007804 <inc_lock+0xfc>
 8007800:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007804:	4906      	ldr	r1, [pc, #24]	@ (8007820 <inc_lock+0x118>)
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	011b      	lsls	r3, r3, #4
 800780a:	440b      	add	r3, r1
 800780c:	330c      	adds	r3, #12
 800780e:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	3301      	adds	r3, #1
}
 8007814:	4618      	mov	r0, r3
 8007816:	3714      	adds	r7, #20
 8007818:	46bd      	mov	sp, r7
 800781a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800781e:	4770      	bx	lr
 8007820:	20000f74 	.word	0x20000f74

08007824 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8007824:	b480      	push	{r7}
 8007826:	b085      	sub	sp, #20
 8007828:	af00      	add	r7, sp, #0
 800782a:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	3b01      	subs	r3, #1
 8007830:	607b      	str	r3, [r7, #4]
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	2b02      	cmp	r3, #2
 8007836:	d825      	bhi.n	8007884 <dec_lock+0x60>
		n = Files[i].ctr;
 8007838:	4a17      	ldr	r2, [pc, #92]	@ (8007898 <dec_lock+0x74>)
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	011b      	lsls	r3, r3, #4
 800783e:	4413      	add	r3, r2
 8007840:	330c      	adds	r3, #12
 8007842:	881b      	ldrh	r3, [r3, #0]
 8007844:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8007846:	89fb      	ldrh	r3, [r7, #14]
 8007848:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800784c:	d101      	bne.n	8007852 <dec_lock+0x2e>
 800784e:	2300      	movs	r3, #0
 8007850:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8007852:	89fb      	ldrh	r3, [r7, #14]
 8007854:	2b00      	cmp	r3, #0
 8007856:	d002      	beq.n	800785e <dec_lock+0x3a>
 8007858:	89fb      	ldrh	r3, [r7, #14]
 800785a:	3b01      	subs	r3, #1
 800785c:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800785e:	4a0e      	ldr	r2, [pc, #56]	@ (8007898 <dec_lock+0x74>)
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	011b      	lsls	r3, r3, #4
 8007864:	4413      	add	r3, r2
 8007866:	330c      	adds	r3, #12
 8007868:	89fa      	ldrh	r2, [r7, #14]
 800786a:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800786c:	89fb      	ldrh	r3, [r7, #14]
 800786e:	2b00      	cmp	r3, #0
 8007870:	d105      	bne.n	800787e <dec_lock+0x5a>
 8007872:	4a09      	ldr	r2, [pc, #36]	@ (8007898 <dec_lock+0x74>)
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	011b      	lsls	r3, r3, #4
 8007878:	4413      	add	r3, r2
 800787a:	2200      	movs	r2, #0
 800787c:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800787e:	2300      	movs	r3, #0
 8007880:	737b      	strb	r3, [r7, #13]
 8007882:	e001      	b.n	8007888 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8007884:	2302      	movs	r3, #2
 8007886:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8007888:	7b7b      	ldrb	r3, [r7, #13]
}
 800788a:	4618      	mov	r0, r3
 800788c:	3714      	adds	r7, #20
 800788e:	46bd      	mov	sp, r7
 8007890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007894:	4770      	bx	lr
 8007896:	bf00      	nop
 8007898:	20000f74 	.word	0x20000f74

0800789c <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800789c:	b480      	push	{r7}
 800789e:	b085      	sub	sp, #20
 80078a0:	af00      	add	r7, sp, #0
 80078a2:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 80078a4:	2300      	movs	r3, #0
 80078a6:	60fb      	str	r3, [r7, #12]
 80078a8:	e010      	b.n	80078cc <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 80078aa:	4a0d      	ldr	r2, [pc, #52]	@ (80078e0 <clear_lock+0x44>)
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	011b      	lsls	r3, r3, #4
 80078b0:	4413      	add	r3, r2
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	687a      	ldr	r2, [r7, #4]
 80078b6:	429a      	cmp	r2, r3
 80078b8:	d105      	bne.n	80078c6 <clear_lock+0x2a>
 80078ba:	4a09      	ldr	r2, [pc, #36]	@ (80078e0 <clear_lock+0x44>)
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	011b      	lsls	r3, r3, #4
 80078c0:	4413      	add	r3, r2
 80078c2:	2200      	movs	r2, #0
 80078c4:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	3301      	adds	r3, #1
 80078ca:	60fb      	str	r3, [r7, #12]
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	2b02      	cmp	r3, #2
 80078d0:	d9eb      	bls.n	80078aa <clear_lock+0xe>
	}
}
 80078d2:	bf00      	nop
 80078d4:	bf00      	nop
 80078d6:	3714      	adds	r7, #20
 80078d8:	46bd      	mov	sp, r7
 80078da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078de:	4770      	bx	lr
 80078e0:	20000f74 	.word	0x20000f74

080078e4 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 80078e4:	b580      	push	{r7, lr}
 80078e6:	b086      	sub	sp, #24
 80078e8:	af00      	add	r7, sp, #0
 80078ea:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 80078ec:	2300      	movs	r3, #0
 80078ee:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	78db      	ldrb	r3, [r3, #3]
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d034      	beq.n	8007962 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80078fc:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	7858      	ldrb	r0, [r3, #1]
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8007908:	2301      	movs	r3, #1
 800790a:	697a      	ldr	r2, [r7, #20]
 800790c:	f7ff fd40 	bl	8007390 <disk_write>
 8007910:	4603      	mov	r3, r0
 8007912:	2b00      	cmp	r3, #0
 8007914:	d002      	beq.n	800791c <sync_window+0x38>
			res = FR_DISK_ERR;
 8007916:	2301      	movs	r3, #1
 8007918:	73fb      	strb	r3, [r7, #15]
 800791a:	e022      	b.n	8007962 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	2200      	movs	r2, #0
 8007920:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007926:	697a      	ldr	r2, [r7, #20]
 8007928:	1ad2      	subs	r2, r2, r3
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	69db      	ldr	r3, [r3, #28]
 800792e:	429a      	cmp	r2, r3
 8007930:	d217      	bcs.n	8007962 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	789b      	ldrb	r3, [r3, #2]
 8007936:	613b      	str	r3, [r7, #16]
 8007938:	e010      	b.n	800795c <sync_window+0x78>
					wsect += fs->fsize;
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	69db      	ldr	r3, [r3, #28]
 800793e:	697a      	ldr	r2, [r7, #20]
 8007940:	4413      	add	r3, r2
 8007942:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	7858      	ldrb	r0, [r3, #1]
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800794e:	2301      	movs	r3, #1
 8007950:	697a      	ldr	r2, [r7, #20]
 8007952:	f7ff fd1d 	bl	8007390 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8007956:	693b      	ldr	r3, [r7, #16]
 8007958:	3b01      	subs	r3, #1
 800795a:	613b      	str	r3, [r7, #16]
 800795c:	693b      	ldr	r3, [r7, #16]
 800795e:	2b01      	cmp	r3, #1
 8007960:	d8eb      	bhi.n	800793a <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8007962:	7bfb      	ldrb	r3, [r7, #15]
}
 8007964:	4618      	mov	r0, r3
 8007966:	3718      	adds	r7, #24
 8007968:	46bd      	mov	sp, r7
 800796a:	bd80      	pop	{r7, pc}

0800796c <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800796c:	b580      	push	{r7, lr}
 800796e:	b084      	sub	sp, #16
 8007970:	af00      	add	r7, sp, #0
 8007972:	6078      	str	r0, [r7, #4]
 8007974:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8007976:	2300      	movs	r3, #0
 8007978:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800797e:	683a      	ldr	r2, [r7, #0]
 8007980:	429a      	cmp	r2, r3
 8007982:	d01b      	beq.n	80079bc <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8007984:	6878      	ldr	r0, [r7, #4]
 8007986:	f7ff ffad 	bl	80078e4 <sync_window>
 800798a:	4603      	mov	r3, r0
 800798c:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800798e:	7bfb      	ldrb	r3, [r7, #15]
 8007990:	2b00      	cmp	r3, #0
 8007992:	d113      	bne.n	80079bc <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	7858      	ldrb	r0, [r3, #1]
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800799e:	2301      	movs	r3, #1
 80079a0:	683a      	ldr	r2, [r7, #0]
 80079a2:	f7ff fcd5 	bl	8007350 <disk_read>
 80079a6:	4603      	mov	r3, r0
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d004      	beq.n	80079b6 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 80079ac:	f04f 33ff 	mov.w	r3, #4294967295
 80079b0:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 80079b2:	2301      	movs	r3, #1
 80079b4:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	683a      	ldr	r2, [r7, #0]
 80079ba:	631a      	str	r2, [r3, #48]	@ 0x30
		}
	}
	return res;
 80079bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80079be:	4618      	mov	r0, r3
 80079c0:	3710      	adds	r7, #16
 80079c2:	46bd      	mov	sp, r7
 80079c4:	bd80      	pop	{r7, pc}
	...

080079c8 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 80079c8:	b580      	push	{r7, lr}
 80079ca:	b084      	sub	sp, #16
 80079cc:	af00      	add	r7, sp, #0
 80079ce:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 80079d0:	6878      	ldr	r0, [r7, #4]
 80079d2:	f7ff ff87 	bl	80078e4 <sync_window>
 80079d6:	4603      	mov	r3, r0
 80079d8:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80079da:	7bfb      	ldrb	r3, [r7, #15]
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d158      	bne.n	8007a92 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	781b      	ldrb	r3, [r3, #0]
 80079e4:	2b03      	cmp	r3, #3
 80079e6:	d148      	bne.n	8007a7a <sync_fs+0xb2>
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	791b      	ldrb	r3, [r3, #4]
 80079ec:	2b01      	cmp	r3, #1
 80079ee:	d144      	bne.n	8007a7a <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	3334      	adds	r3, #52	@ 0x34
 80079f4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80079f8:	2100      	movs	r1, #0
 80079fa:	4618      	mov	r0, r3
 80079fc:	f7ff fda9 	bl	8007552 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	3334      	adds	r3, #52	@ 0x34
 8007a04:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8007a08:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 8007a0c:	4618      	mov	r0, r3
 8007a0e:	f7ff fd38 	bl	8007482 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	3334      	adds	r3, #52	@ 0x34
 8007a16:	4921      	ldr	r1, [pc, #132]	@ (8007a9c <sync_fs+0xd4>)
 8007a18:	4618      	mov	r0, r3
 8007a1a:	f7ff fd4d 	bl	80074b8 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	3334      	adds	r3, #52	@ 0x34
 8007a22:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8007a26:	491e      	ldr	r1, [pc, #120]	@ (8007aa0 <sync_fs+0xd8>)
 8007a28:	4618      	mov	r0, r3
 8007a2a:	f7ff fd45 	bl	80074b8 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	3334      	adds	r3, #52	@ 0x34
 8007a32:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	695b      	ldr	r3, [r3, #20]
 8007a3a:	4619      	mov	r1, r3
 8007a3c:	4610      	mov	r0, r2
 8007a3e:	f7ff fd3b 	bl	80074b8 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	3334      	adds	r3, #52	@ 0x34
 8007a46:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	691b      	ldr	r3, [r3, #16]
 8007a4e:	4619      	mov	r1, r3
 8007a50:	4610      	mov	r0, r2
 8007a52:	f7ff fd31 	bl	80074b8 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	6a1b      	ldr	r3, [r3, #32]
 8007a5a:	1c5a      	adds	r2, r3, #1
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	631a      	str	r2, [r3, #48]	@ 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	7858      	ldrb	r0, [r3, #1]
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007a6e:	2301      	movs	r3, #1
 8007a70:	f7ff fc8e 	bl	8007390 <disk_write>
			fs->fsi_flag = 0;
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	2200      	movs	r2, #0
 8007a78:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	785b      	ldrb	r3, [r3, #1]
 8007a7e:	2200      	movs	r2, #0
 8007a80:	2100      	movs	r1, #0
 8007a82:	4618      	mov	r0, r3
 8007a84:	f7ff fca4 	bl	80073d0 <disk_ioctl>
 8007a88:	4603      	mov	r3, r0
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d001      	beq.n	8007a92 <sync_fs+0xca>
 8007a8e:	2301      	movs	r3, #1
 8007a90:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8007a92:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a94:	4618      	mov	r0, r3
 8007a96:	3710      	adds	r7, #16
 8007a98:	46bd      	mov	sp, r7
 8007a9a:	bd80      	pop	{r7, pc}
 8007a9c:	41615252 	.word	0x41615252
 8007aa0:	61417272 	.word	0x61417272

08007aa4 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8007aa4:	b480      	push	{r7}
 8007aa6:	b083      	sub	sp, #12
 8007aa8:	af00      	add	r7, sp, #0
 8007aaa:	6078      	str	r0, [r7, #4]
 8007aac:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8007aae:	683b      	ldr	r3, [r7, #0]
 8007ab0:	3b02      	subs	r3, #2
 8007ab2:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	699b      	ldr	r3, [r3, #24]
 8007ab8:	3b02      	subs	r3, #2
 8007aba:	683a      	ldr	r2, [r7, #0]
 8007abc:	429a      	cmp	r2, r3
 8007abe:	d301      	bcc.n	8007ac4 <clust2sect+0x20>
 8007ac0:	2300      	movs	r3, #0
 8007ac2:	e008      	b.n	8007ad6 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	895b      	ldrh	r3, [r3, #10]
 8007ac8:	461a      	mov	r2, r3
 8007aca:	683b      	ldr	r3, [r7, #0]
 8007acc:	fb03 f202 	mul.w	r2, r3, r2
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ad4:	4413      	add	r3, r2
}
 8007ad6:	4618      	mov	r0, r3
 8007ad8:	370c      	adds	r7, #12
 8007ada:	46bd      	mov	sp, r7
 8007adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ae0:	4770      	bx	lr

08007ae2 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8007ae2:	b580      	push	{r7, lr}
 8007ae4:	b086      	sub	sp, #24
 8007ae6:	af00      	add	r7, sp, #0
 8007ae8:	6078      	str	r0, [r7, #4]
 8007aea:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8007af2:	683b      	ldr	r3, [r7, #0]
 8007af4:	2b01      	cmp	r3, #1
 8007af6:	d904      	bls.n	8007b02 <get_fat+0x20>
 8007af8:	693b      	ldr	r3, [r7, #16]
 8007afa:	699b      	ldr	r3, [r3, #24]
 8007afc:	683a      	ldr	r2, [r7, #0]
 8007afe:	429a      	cmp	r2, r3
 8007b00:	d302      	bcc.n	8007b08 <get_fat+0x26>
		val = 1;	/* Internal error */
 8007b02:	2301      	movs	r3, #1
 8007b04:	617b      	str	r3, [r7, #20]
 8007b06:	e08e      	b.n	8007c26 <get_fat+0x144>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8007b08:	f04f 33ff 	mov.w	r3, #4294967295
 8007b0c:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8007b0e:	693b      	ldr	r3, [r7, #16]
 8007b10:	781b      	ldrb	r3, [r3, #0]
 8007b12:	2b03      	cmp	r3, #3
 8007b14:	d061      	beq.n	8007bda <get_fat+0xf8>
 8007b16:	2b03      	cmp	r3, #3
 8007b18:	dc7b      	bgt.n	8007c12 <get_fat+0x130>
 8007b1a:	2b01      	cmp	r3, #1
 8007b1c:	d002      	beq.n	8007b24 <get_fat+0x42>
 8007b1e:	2b02      	cmp	r3, #2
 8007b20:	d041      	beq.n	8007ba6 <get_fat+0xc4>
 8007b22:	e076      	b.n	8007c12 <get_fat+0x130>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8007b24:	683b      	ldr	r3, [r7, #0]
 8007b26:	60fb      	str	r3, [r7, #12]
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	085b      	lsrs	r3, r3, #1
 8007b2c:	68fa      	ldr	r2, [r7, #12]
 8007b2e:	4413      	add	r3, r2
 8007b30:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007b32:	693b      	ldr	r3, [r7, #16]
 8007b34:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	0a5b      	lsrs	r3, r3, #9
 8007b3a:	4413      	add	r3, r2
 8007b3c:	4619      	mov	r1, r3
 8007b3e:	6938      	ldr	r0, [r7, #16]
 8007b40:	f7ff ff14 	bl	800796c <move_window>
 8007b44:	4603      	mov	r3, r0
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d166      	bne.n	8007c18 <get_fat+0x136>
			wc = fs->win[bc++ % SS(fs)];
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	1c5a      	adds	r2, r3, #1
 8007b4e:	60fa      	str	r2, [r7, #12]
 8007b50:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007b54:	693a      	ldr	r2, [r7, #16]
 8007b56:	4413      	add	r3, r2
 8007b58:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8007b5c:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007b5e:	693b      	ldr	r3, [r7, #16]
 8007b60:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	0a5b      	lsrs	r3, r3, #9
 8007b66:	4413      	add	r3, r2
 8007b68:	4619      	mov	r1, r3
 8007b6a:	6938      	ldr	r0, [r7, #16]
 8007b6c:	f7ff fefe 	bl	800796c <move_window>
 8007b70:	4603      	mov	r3, r0
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d152      	bne.n	8007c1c <get_fat+0x13a>
			wc |= fs->win[bc % SS(fs)] << 8;
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007b7c:	693a      	ldr	r2, [r7, #16]
 8007b7e:	4413      	add	r3, r2
 8007b80:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8007b84:	021b      	lsls	r3, r3, #8
 8007b86:	68ba      	ldr	r2, [r7, #8]
 8007b88:	4313      	orrs	r3, r2
 8007b8a:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8007b8c:	683b      	ldr	r3, [r7, #0]
 8007b8e:	f003 0301 	and.w	r3, r3, #1
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d002      	beq.n	8007b9c <get_fat+0xba>
 8007b96:	68bb      	ldr	r3, [r7, #8]
 8007b98:	091b      	lsrs	r3, r3, #4
 8007b9a:	e002      	b.n	8007ba2 <get_fat+0xc0>
 8007b9c:	68bb      	ldr	r3, [r7, #8]
 8007b9e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007ba2:	617b      	str	r3, [r7, #20]
			break;
 8007ba4:	e03f      	b.n	8007c26 <get_fat+0x144>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8007ba6:	693b      	ldr	r3, [r7, #16]
 8007ba8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007baa:	683b      	ldr	r3, [r7, #0]
 8007bac:	0a1b      	lsrs	r3, r3, #8
 8007bae:	4413      	add	r3, r2
 8007bb0:	4619      	mov	r1, r3
 8007bb2:	6938      	ldr	r0, [r7, #16]
 8007bb4:	f7ff feda 	bl	800796c <move_window>
 8007bb8:	4603      	mov	r3, r0
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d130      	bne.n	8007c20 <get_fat+0x13e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8007bbe:	693b      	ldr	r3, [r7, #16]
 8007bc0:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8007bc4:	683b      	ldr	r3, [r7, #0]
 8007bc6:	005b      	lsls	r3, r3, #1
 8007bc8:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 8007bcc:	4413      	add	r3, r2
 8007bce:	4618      	mov	r0, r3
 8007bd0:	f7ff fc1c 	bl	800740c <ld_word>
 8007bd4:	4603      	mov	r3, r0
 8007bd6:	617b      	str	r3, [r7, #20]
			break;
 8007bd8:	e025      	b.n	8007c26 <get_fat+0x144>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8007bda:	693b      	ldr	r3, [r7, #16]
 8007bdc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007bde:	683b      	ldr	r3, [r7, #0]
 8007be0:	09db      	lsrs	r3, r3, #7
 8007be2:	4413      	add	r3, r2
 8007be4:	4619      	mov	r1, r3
 8007be6:	6938      	ldr	r0, [r7, #16]
 8007be8:	f7ff fec0 	bl	800796c <move_window>
 8007bec:	4603      	mov	r3, r0
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d118      	bne.n	8007c24 <get_fat+0x142>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8007bf2:	693b      	ldr	r3, [r7, #16]
 8007bf4:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8007bf8:	683b      	ldr	r3, [r7, #0]
 8007bfa:	009b      	lsls	r3, r3, #2
 8007bfc:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8007c00:	4413      	add	r3, r2
 8007c02:	4618      	mov	r0, r3
 8007c04:	f7ff fc1a 	bl	800743c <ld_dword>
 8007c08:	4603      	mov	r3, r0
 8007c0a:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8007c0e:	617b      	str	r3, [r7, #20]
			break;
 8007c10:	e009      	b.n	8007c26 <get_fat+0x144>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8007c12:	2301      	movs	r3, #1
 8007c14:	617b      	str	r3, [r7, #20]
 8007c16:	e006      	b.n	8007c26 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007c18:	bf00      	nop
 8007c1a:	e004      	b.n	8007c26 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007c1c:	bf00      	nop
 8007c1e:	e002      	b.n	8007c26 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8007c20:	bf00      	nop
 8007c22:	e000      	b.n	8007c26 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8007c24:	bf00      	nop
		}
	}

	return val;
 8007c26:	697b      	ldr	r3, [r7, #20]
}
 8007c28:	4618      	mov	r0, r3
 8007c2a:	3718      	adds	r7, #24
 8007c2c:	46bd      	mov	sp, r7
 8007c2e:	bd80      	pop	{r7, pc}

08007c30 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8007c30:	b590      	push	{r4, r7, lr}
 8007c32:	b089      	sub	sp, #36	@ 0x24
 8007c34:	af00      	add	r7, sp, #0
 8007c36:	60f8      	str	r0, [r7, #12]
 8007c38:	60b9      	str	r1, [r7, #8]
 8007c3a:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8007c3c:	2302      	movs	r3, #2
 8007c3e:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8007c40:	68bb      	ldr	r3, [r7, #8]
 8007c42:	2b01      	cmp	r3, #1
 8007c44:	f240 80d9 	bls.w	8007dfa <put_fat+0x1ca>
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	699b      	ldr	r3, [r3, #24]
 8007c4c:	68ba      	ldr	r2, [r7, #8]
 8007c4e:	429a      	cmp	r2, r3
 8007c50:	f080 80d3 	bcs.w	8007dfa <put_fat+0x1ca>
		switch (fs->fs_type) {
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	781b      	ldrb	r3, [r3, #0]
 8007c58:	2b03      	cmp	r3, #3
 8007c5a:	f000 8096 	beq.w	8007d8a <put_fat+0x15a>
 8007c5e:	2b03      	cmp	r3, #3
 8007c60:	f300 80cb 	bgt.w	8007dfa <put_fat+0x1ca>
 8007c64:	2b01      	cmp	r3, #1
 8007c66:	d002      	beq.n	8007c6e <put_fat+0x3e>
 8007c68:	2b02      	cmp	r3, #2
 8007c6a:	d06e      	beq.n	8007d4a <put_fat+0x11a>
 8007c6c:	e0c5      	b.n	8007dfa <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8007c6e:	68bb      	ldr	r3, [r7, #8]
 8007c70:	61bb      	str	r3, [r7, #24]
 8007c72:	69bb      	ldr	r3, [r7, #24]
 8007c74:	085b      	lsrs	r3, r3, #1
 8007c76:	69ba      	ldr	r2, [r7, #24]
 8007c78:	4413      	add	r3, r2
 8007c7a:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007c80:	69bb      	ldr	r3, [r7, #24]
 8007c82:	0a5b      	lsrs	r3, r3, #9
 8007c84:	4413      	add	r3, r2
 8007c86:	4619      	mov	r1, r3
 8007c88:	68f8      	ldr	r0, [r7, #12]
 8007c8a:	f7ff fe6f 	bl	800796c <move_window>
 8007c8e:	4603      	mov	r3, r0
 8007c90:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007c92:	7ffb      	ldrb	r3, [r7, #31]
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	f040 80a9 	bne.w	8007dec <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8007ca0:	69bb      	ldr	r3, [r7, #24]
 8007ca2:	1c59      	adds	r1, r3, #1
 8007ca4:	61b9      	str	r1, [r7, #24]
 8007ca6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007caa:	4413      	add	r3, r2
 8007cac:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8007cae:	68bb      	ldr	r3, [r7, #8]
 8007cb0:	f003 0301 	and.w	r3, r3, #1
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d00d      	beq.n	8007cd4 <put_fat+0xa4>
 8007cb8:	697b      	ldr	r3, [r7, #20]
 8007cba:	781b      	ldrb	r3, [r3, #0]
 8007cbc:	b25b      	sxtb	r3, r3
 8007cbe:	f003 030f 	and.w	r3, r3, #15
 8007cc2:	b25a      	sxtb	r2, r3
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	b2db      	uxtb	r3, r3
 8007cc8:	011b      	lsls	r3, r3, #4
 8007cca:	b25b      	sxtb	r3, r3
 8007ccc:	4313      	orrs	r3, r2
 8007cce:	b25b      	sxtb	r3, r3
 8007cd0:	b2db      	uxtb	r3, r3
 8007cd2:	e001      	b.n	8007cd8 <put_fat+0xa8>
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	b2db      	uxtb	r3, r3
 8007cd8:	697a      	ldr	r2, [r7, #20]
 8007cda:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	2201      	movs	r2, #1
 8007ce0:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007ce6:	69bb      	ldr	r3, [r7, #24]
 8007ce8:	0a5b      	lsrs	r3, r3, #9
 8007cea:	4413      	add	r3, r2
 8007cec:	4619      	mov	r1, r3
 8007cee:	68f8      	ldr	r0, [r7, #12]
 8007cf0:	f7ff fe3c 	bl	800796c <move_window>
 8007cf4:	4603      	mov	r3, r0
 8007cf6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007cf8:	7ffb      	ldrb	r3, [r7, #31]
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d178      	bne.n	8007df0 <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8007d04:	69bb      	ldr	r3, [r7, #24]
 8007d06:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007d0a:	4413      	add	r3, r2
 8007d0c:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8007d0e:	68bb      	ldr	r3, [r7, #8]
 8007d10:	f003 0301 	and.w	r3, r3, #1
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	d003      	beq.n	8007d20 <put_fat+0xf0>
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	091b      	lsrs	r3, r3, #4
 8007d1c:	b2db      	uxtb	r3, r3
 8007d1e:	e00e      	b.n	8007d3e <put_fat+0x10e>
 8007d20:	697b      	ldr	r3, [r7, #20]
 8007d22:	781b      	ldrb	r3, [r3, #0]
 8007d24:	b25b      	sxtb	r3, r3
 8007d26:	f023 030f 	bic.w	r3, r3, #15
 8007d2a:	b25a      	sxtb	r2, r3
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	0a1b      	lsrs	r3, r3, #8
 8007d30:	b25b      	sxtb	r3, r3
 8007d32:	f003 030f 	and.w	r3, r3, #15
 8007d36:	b25b      	sxtb	r3, r3
 8007d38:	4313      	orrs	r3, r2
 8007d3a:	b25b      	sxtb	r3, r3
 8007d3c:	b2db      	uxtb	r3, r3
 8007d3e:	697a      	ldr	r2, [r7, #20]
 8007d40:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	2201      	movs	r2, #1
 8007d46:	70da      	strb	r2, [r3, #3]
			break;
 8007d48:	e057      	b.n	8007dfa <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007d4e:	68bb      	ldr	r3, [r7, #8]
 8007d50:	0a1b      	lsrs	r3, r3, #8
 8007d52:	4413      	add	r3, r2
 8007d54:	4619      	mov	r1, r3
 8007d56:	68f8      	ldr	r0, [r7, #12]
 8007d58:	f7ff fe08 	bl	800796c <move_window>
 8007d5c:	4603      	mov	r3, r0
 8007d5e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007d60:	7ffb      	ldrb	r3, [r7, #31]
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	d146      	bne.n	8007df4 <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8007d6c:	68bb      	ldr	r3, [r7, #8]
 8007d6e:	005b      	lsls	r3, r3, #1
 8007d70:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 8007d74:	4413      	add	r3, r2
 8007d76:	687a      	ldr	r2, [r7, #4]
 8007d78:	b292      	uxth	r2, r2
 8007d7a:	4611      	mov	r1, r2
 8007d7c:	4618      	mov	r0, r3
 8007d7e:	f7ff fb80 	bl	8007482 <st_word>
			fs->wflag = 1;
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	2201      	movs	r2, #1
 8007d86:	70da      	strb	r2, [r3, #3]
			break;
 8007d88:	e037      	b.n	8007dfa <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007d8e:	68bb      	ldr	r3, [r7, #8]
 8007d90:	09db      	lsrs	r3, r3, #7
 8007d92:	4413      	add	r3, r2
 8007d94:	4619      	mov	r1, r3
 8007d96:	68f8      	ldr	r0, [r7, #12]
 8007d98:	f7ff fde8 	bl	800796c <move_window>
 8007d9c:	4603      	mov	r3, r0
 8007d9e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007da0:	7ffb      	ldrb	r3, [r7, #31]
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d128      	bne.n	8007df8 <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8007db2:	68bb      	ldr	r3, [r7, #8]
 8007db4:	009b      	lsls	r3, r3, #2
 8007db6:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8007dba:	4413      	add	r3, r2
 8007dbc:	4618      	mov	r0, r3
 8007dbe:	f7ff fb3d 	bl	800743c <ld_dword>
 8007dc2:	4603      	mov	r3, r0
 8007dc4:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8007dc8:	4323      	orrs	r3, r4
 8007dca:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8007dd2:	68bb      	ldr	r3, [r7, #8]
 8007dd4:	009b      	lsls	r3, r3, #2
 8007dd6:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8007dda:	4413      	add	r3, r2
 8007ddc:	6879      	ldr	r1, [r7, #4]
 8007dde:	4618      	mov	r0, r3
 8007de0:	f7ff fb6a 	bl	80074b8 <st_dword>
			fs->wflag = 1;
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	2201      	movs	r2, #1
 8007de8:	70da      	strb	r2, [r3, #3]
			break;
 8007dea:	e006      	b.n	8007dfa <put_fat+0x1ca>
			if (res != FR_OK) break;
 8007dec:	bf00      	nop
 8007dee:	e004      	b.n	8007dfa <put_fat+0x1ca>
			if (res != FR_OK) break;
 8007df0:	bf00      	nop
 8007df2:	e002      	b.n	8007dfa <put_fat+0x1ca>
			if (res != FR_OK) break;
 8007df4:	bf00      	nop
 8007df6:	e000      	b.n	8007dfa <put_fat+0x1ca>
			if (res != FR_OK) break;
 8007df8:	bf00      	nop
		}
	}
	return res;
 8007dfa:	7ffb      	ldrb	r3, [r7, #31]
}
 8007dfc:	4618      	mov	r0, r3
 8007dfe:	3724      	adds	r7, #36	@ 0x24
 8007e00:	46bd      	mov	sp, r7
 8007e02:	bd90      	pop	{r4, r7, pc}

08007e04 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8007e04:	b580      	push	{r7, lr}
 8007e06:	b088      	sub	sp, #32
 8007e08:	af00      	add	r7, sp, #0
 8007e0a:	60f8      	str	r0, [r7, #12]
 8007e0c:	60b9      	str	r1, [r7, #8]
 8007e0e:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8007e10:	2300      	movs	r3, #0
 8007e12:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8007e1a:	68bb      	ldr	r3, [r7, #8]
 8007e1c:	2b01      	cmp	r3, #1
 8007e1e:	d904      	bls.n	8007e2a <remove_chain+0x26>
 8007e20:	69bb      	ldr	r3, [r7, #24]
 8007e22:	699b      	ldr	r3, [r3, #24]
 8007e24:	68ba      	ldr	r2, [r7, #8]
 8007e26:	429a      	cmp	r2, r3
 8007e28:	d301      	bcc.n	8007e2e <remove_chain+0x2a>
 8007e2a:	2302      	movs	r3, #2
 8007e2c:	e04b      	b.n	8007ec6 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	d00c      	beq.n	8007e4e <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8007e34:	f04f 32ff 	mov.w	r2, #4294967295
 8007e38:	6879      	ldr	r1, [r7, #4]
 8007e3a:	69b8      	ldr	r0, [r7, #24]
 8007e3c:	f7ff fef8 	bl	8007c30 <put_fat>
 8007e40:	4603      	mov	r3, r0
 8007e42:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8007e44:	7ffb      	ldrb	r3, [r7, #31]
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d001      	beq.n	8007e4e <remove_chain+0x4a>
 8007e4a:	7ffb      	ldrb	r3, [r7, #31]
 8007e4c:	e03b      	b.n	8007ec6 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8007e4e:	68b9      	ldr	r1, [r7, #8]
 8007e50:	68f8      	ldr	r0, [r7, #12]
 8007e52:	f7ff fe46 	bl	8007ae2 <get_fat>
 8007e56:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8007e58:	697b      	ldr	r3, [r7, #20]
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	d031      	beq.n	8007ec2 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8007e5e:	697b      	ldr	r3, [r7, #20]
 8007e60:	2b01      	cmp	r3, #1
 8007e62:	d101      	bne.n	8007e68 <remove_chain+0x64>
 8007e64:	2302      	movs	r3, #2
 8007e66:	e02e      	b.n	8007ec6 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8007e68:	697b      	ldr	r3, [r7, #20]
 8007e6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e6e:	d101      	bne.n	8007e74 <remove_chain+0x70>
 8007e70:	2301      	movs	r3, #1
 8007e72:	e028      	b.n	8007ec6 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8007e74:	2200      	movs	r2, #0
 8007e76:	68b9      	ldr	r1, [r7, #8]
 8007e78:	69b8      	ldr	r0, [r7, #24]
 8007e7a:	f7ff fed9 	bl	8007c30 <put_fat>
 8007e7e:	4603      	mov	r3, r0
 8007e80:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8007e82:	7ffb      	ldrb	r3, [r7, #31]
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d001      	beq.n	8007e8c <remove_chain+0x88>
 8007e88:	7ffb      	ldrb	r3, [r7, #31]
 8007e8a:	e01c      	b.n	8007ec6 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8007e8c:	69bb      	ldr	r3, [r7, #24]
 8007e8e:	695a      	ldr	r2, [r3, #20]
 8007e90:	69bb      	ldr	r3, [r7, #24]
 8007e92:	699b      	ldr	r3, [r3, #24]
 8007e94:	3b02      	subs	r3, #2
 8007e96:	429a      	cmp	r2, r3
 8007e98:	d20b      	bcs.n	8007eb2 <remove_chain+0xae>
			fs->free_clst++;
 8007e9a:	69bb      	ldr	r3, [r7, #24]
 8007e9c:	695b      	ldr	r3, [r3, #20]
 8007e9e:	1c5a      	adds	r2, r3, #1
 8007ea0:	69bb      	ldr	r3, [r7, #24]
 8007ea2:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 8007ea4:	69bb      	ldr	r3, [r7, #24]
 8007ea6:	791b      	ldrb	r3, [r3, #4]
 8007ea8:	f043 0301 	orr.w	r3, r3, #1
 8007eac:	b2da      	uxtb	r2, r3
 8007eae:	69bb      	ldr	r3, [r7, #24]
 8007eb0:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8007eb2:	697b      	ldr	r3, [r7, #20]
 8007eb4:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8007eb6:	69bb      	ldr	r3, [r7, #24]
 8007eb8:	699b      	ldr	r3, [r3, #24]
 8007eba:	68ba      	ldr	r2, [r7, #8]
 8007ebc:	429a      	cmp	r2, r3
 8007ebe:	d3c6      	bcc.n	8007e4e <remove_chain+0x4a>
 8007ec0:	e000      	b.n	8007ec4 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8007ec2:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8007ec4:	2300      	movs	r3, #0
}
 8007ec6:	4618      	mov	r0, r3
 8007ec8:	3720      	adds	r7, #32
 8007eca:	46bd      	mov	sp, r7
 8007ecc:	bd80      	pop	{r7, pc}

08007ece <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8007ece:	b580      	push	{r7, lr}
 8007ed0:	b088      	sub	sp, #32
 8007ed2:	af00      	add	r7, sp, #0
 8007ed4:	6078      	str	r0, [r7, #4]
 8007ed6:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8007ede:	683b      	ldr	r3, [r7, #0]
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	d10d      	bne.n	8007f00 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8007ee4:	693b      	ldr	r3, [r7, #16]
 8007ee6:	691b      	ldr	r3, [r3, #16]
 8007ee8:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8007eea:	69bb      	ldr	r3, [r7, #24]
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d004      	beq.n	8007efa <create_chain+0x2c>
 8007ef0:	693b      	ldr	r3, [r7, #16]
 8007ef2:	699b      	ldr	r3, [r3, #24]
 8007ef4:	69ba      	ldr	r2, [r7, #24]
 8007ef6:	429a      	cmp	r2, r3
 8007ef8:	d31b      	bcc.n	8007f32 <create_chain+0x64>
 8007efa:	2301      	movs	r3, #1
 8007efc:	61bb      	str	r3, [r7, #24]
 8007efe:	e018      	b.n	8007f32 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8007f00:	6839      	ldr	r1, [r7, #0]
 8007f02:	6878      	ldr	r0, [r7, #4]
 8007f04:	f7ff fded 	bl	8007ae2 <get_fat>
 8007f08:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	2b01      	cmp	r3, #1
 8007f0e:	d801      	bhi.n	8007f14 <create_chain+0x46>
 8007f10:	2301      	movs	r3, #1
 8007f12:	e070      	b.n	8007ff6 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f1a:	d101      	bne.n	8007f20 <create_chain+0x52>
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	e06a      	b.n	8007ff6 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8007f20:	693b      	ldr	r3, [r7, #16]
 8007f22:	699b      	ldr	r3, [r3, #24]
 8007f24:	68fa      	ldr	r2, [r7, #12]
 8007f26:	429a      	cmp	r2, r3
 8007f28:	d201      	bcs.n	8007f2e <create_chain+0x60>
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	e063      	b.n	8007ff6 <create_chain+0x128>
		scl = clst;
 8007f2e:	683b      	ldr	r3, [r7, #0]
 8007f30:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8007f32:	69bb      	ldr	r3, [r7, #24]
 8007f34:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8007f36:	69fb      	ldr	r3, [r7, #28]
 8007f38:	3301      	adds	r3, #1
 8007f3a:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8007f3c:	693b      	ldr	r3, [r7, #16]
 8007f3e:	699b      	ldr	r3, [r3, #24]
 8007f40:	69fa      	ldr	r2, [r7, #28]
 8007f42:	429a      	cmp	r2, r3
 8007f44:	d307      	bcc.n	8007f56 <create_chain+0x88>
				ncl = 2;
 8007f46:	2302      	movs	r3, #2
 8007f48:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8007f4a:	69fa      	ldr	r2, [r7, #28]
 8007f4c:	69bb      	ldr	r3, [r7, #24]
 8007f4e:	429a      	cmp	r2, r3
 8007f50:	d901      	bls.n	8007f56 <create_chain+0x88>
 8007f52:	2300      	movs	r3, #0
 8007f54:	e04f      	b.n	8007ff6 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8007f56:	69f9      	ldr	r1, [r7, #28]
 8007f58:	6878      	ldr	r0, [r7, #4]
 8007f5a:	f7ff fdc2 	bl	8007ae2 <get_fat>
 8007f5e:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d00e      	beq.n	8007f84 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	2b01      	cmp	r3, #1
 8007f6a:	d003      	beq.n	8007f74 <create_chain+0xa6>
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f72:	d101      	bne.n	8007f78 <create_chain+0xaa>
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	e03e      	b.n	8007ff6 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8007f78:	69fa      	ldr	r2, [r7, #28]
 8007f7a:	69bb      	ldr	r3, [r7, #24]
 8007f7c:	429a      	cmp	r2, r3
 8007f7e:	d1da      	bne.n	8007f36 <create_chain+0x68>
 8007f80:	2300      	movs	r3, #0
 8007f82:	e038      	b.n	8007ff6 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8007f84:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8007f86:	f04f 32ff 	mov.w	r2, #4294967295
 8007f8a:	69f9      	ldr	r1, [r7, #28]
 8007f8c:	6938      	ldr	r0, [r7, #16]
 8007f8e:	f7ff fe4f 	bl	8007c30 <put_fat>
 8007f92:	4603      	mov	r3, r0
 8007f94:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8007f96:	7dfb      	ldrb	r3, [r7, #23]
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d109      	bne.n	8007fb0 <create_chain+0xe2>
 8007f9c:	683b      	ldr	r3, [r7, #0]
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d006      	beq.n	8007fb0 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8007fa2:	69fa      	ldr	r2, [r7, #28]
 8007fa4:	6839      	ldr	r1, [r7, #0]
 8007fa6:	6938      	ldr	r0, [r7, #16]
 8007fa8:	f7ff fe42 	bl	8007c30 <put_fat>
 8007fac:	4603      	mov	r3, r0
 8007fae:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8007fb0:	7dfb      	ldrb	r3, [r7, #23]
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d116      	bne.n	8007fe4 <create_chain+0x116>
		fs->last_clst = ncl;
 8007fb6:	693b      	ldr	r3, [r7, #16]
 8007fb8:	69fa      	ldr	r2, [r7, #28]
 8007fba:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8007fbc:	693b      	ldr	r3, [r7, #16]
 8007fbe:	695a      	ldr	r2, [r3, #20]
 8007fc0:	693b      	ldr	r3, [r7, #16]
 8007fc2:	699b      	ldr	r3, [r3, #24]
 8007fc4:	3b02      	subs	r3, #2
 8007fc6:	429a      	cmp	r2, r3
 8007fc8:	d804      	bhi.n	8007fd4 <create_chain+0x106>
 8007fca:	693b      	ldr	r3, [r7, #16]
 8007fcc:	695b      	ldr	r3, [r3, #20]
 8007fce:	1e5a      	subs	r2, r3, #1
 8007fd0:	693b      	ldr	r3, [r7, #16]
 8007fd2:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 8007fd4:	693b      	ldr	r3, [r7, #16]
 8007fd6:	791b      	ldrb	r3, [r3, #4]
 8007fd8:	f043 0301 	orr.w	r3, r3, #1
 8007fdc:	b2da      	uxtb	r2, r3
 8007fde:	693b      	ldr	r3, [r7, #16]
 8007fe0:	711a      	strb	r2, [r3, #4]
 8007fe2:	e007      	b.n	8007ff4 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8007fe4:	7dfb      	ldrb	r3, [r7, #23]
 8007fe6:	2b01      	cmp	r3, #1
 8007fe8:	d102      	bne.n	8007ff0 <create_chain+0x122>
 8007fea:	f04f 33ff 	mov.w	r3, #4294967295
 8007fee:	e000      	b.n	8007ff2 <create_chain+0x124>
 8007ff0:	2301      	movs	r3, #1
 8007ff2:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8007ff4:	69fb      	ldr	r3, [r7, #28]
}
 8007ff6:	4618      	mov	r0, r3
 8007ff8:	3720      	adds	r7, #32
 8007ffa:	46bd      	mov	sp, r7
 8007ffc:	bd80      	pop	{r7, pc}

08007ffe <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8007ffe:	b480      	push	{r7}
 8008000:	b087      	sub	sp, #28
 8008002:	af00      	add	r7, sp, #0
 8008004:	6078      	str	r0, [r7, #4]
 8008006:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008012:	3304      	adds	r3, #4
 8008014:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8008016:	683b      	ldr	r3, [r7, #0]
 8008018:	0a5b      	lsrs	r3, r3, #9
 800801a:	68fa      	ldr	r2, [r7, #12]
 800801c:	8952      	ldrh	r2, [r2, #10]
 800801e:	fbb3 f3f2 	udiv	r3, r3, r2
 8008022:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8008024:	693b      	ldr	r3, [r7, #16]
 8008026:	1d1a      	adds	r2, r3, #4
 8008028:	613a      	str	r2, [r7, #16]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800802e:	68bb      	ldr	r3, [r7, #8]
 8008030:	2b00      	cmp	r3, #0
 8008032:	d101      	bne.n	8008038 <clmt_clust+0x3a>
 8008034:	2300      	movs	r3, #0
 8008036:	e010      	b.n	800805a <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 8008038:	697a      	ldr	r2, [r7, #20]
 800803a:	68bb      	ldr	r3, [r7, #8]
 800803c:	429a      	cmp	r2, r3
 800803e:	d307      	bcc.n	8008050 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 8008040:	697a      	ldr	r2, [r7, #20]
 8008042:	68bb      	ldr	r3, [r7, #8]
 8008044:	1ad3      	subs	r3, r2, r3
 8008046:	617b      	str	r3, [r7, #20]
 8008048:	693b      	ldr	r3, [r7, #16]
 800804a:	3304      	adds	r3, #4
 800804c:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800804e:	e7e9      	b.n	8008024 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 8008050:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8008052:	693b      	ldr	r3, [r7, #16]
 8008054:	681a      	ldr	r2, [r3, #0]
 8008056:	697b      	ldr	r3, [r7, #20]
 8008058:	4413      	add	r3, r2
}
 800805a:	4618      	mov	r0, r3
 800805c:	371c      	adds	r7, #28
 800805e:	46bd      	mov	sp, r7
 8008060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008064:	4770      	bx	lr

08008066 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8008066:	b580      	push	{r7, lr}
 8008068:	b086      	sub	sp, #24
 800806a:	af00      	add	r7, sp, #0
 800806c:	6078      	str	r0, [r7, #4]
 800806e:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8008076:	683b      	ldr	r3, [r7, #0]
 8008078:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800807c:	d204      	bcs.n	8008088 <dir_sdi+0x22>
 800807e:	683b      	ldr	r3, [r7, #0]
 8008080:	f003 031f 	and.w	r3, r3, #31
 8008084:	2b00      	cmp	r3, #0
 8008086:	d001      	beq.n	800808c <dir_sdi+0x26>
		return FR_INT_ERR;
 8008088:	2302      	movs	r3, #2
 800808a:	e063      	b.n	8008154 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	683a      	ldr	r2, [r7, #0]
 8008090:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	689b      	ldr	r3, [r3, #8]
 8008096:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8008098:	697b      	ldr	r3, [r7, #20]
 800809a:	2b00      	cmp	r3, #0
 800809c:	d106      	bne.n	80080ac <dir_sdi+0x46>
 800809e:	693b      	ldr	r3, [r7, #16]
 80080a0:	781b      	ldrb	r3, [r3, #0]
 80080a2:	2b02      	cmp	r3, #2
 80080a4:	d902      	bls.n	80080ac <dir_sdi+0x46>
		clst = fs->dirbase;
 80080a6:	693b      	ldr	r3, [r7, #16]
 80080a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80080aa:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 80080ac:	697b      	ldr	r3, [r7, #20]
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d10c      	bne.n	80080cc <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 80080b2:	683b      	ldr	r3, [r7, #0]
 80080b4:	095b      	lsrs	r3, r3, #5
 80080b6:	693a      	ldr	r2, [r7, #16]
 80080b8:	8912      	ldrh	r2, [r2, #8]
 80080ba:	4293      	cmp	r3, r2
 80080bc:	d301      	bcc.n	80080c2 <dir_sdi+0x5c>
 80080be:	2302      	movs	r3, #2
 80080c0:	e048      	b.n	8008154 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 80080c2:	693b      	ldr	r3, [r7, #16]
 80080c4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	61da      	str	r2, [r3, #28]
 80080ca:	e029      	b.n	8008120 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 80080cc:	693b      	ldr	r3, [r7, #16]
 80080ce:	895b      	ldrh	r3, [r3, #10]
 80080d0:	025b      	lsls	r3, r3, #9
 80080d2:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 80080d4:	e019      	b.n	800810a <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	6979      	ldr	r1, [r7, #20]
 80080da:	4618      	mov	r0, r3
 80080dc:	f7ff fd01 	bl	8007ae2 <get_fat>
 80080e0:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80080e2:	697b      	ldr	r3, [r7, #20]
 80080e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80080e8:	d101      	bne.n	80080ee <dir_sdi+0x88>
 80080ea:	2301      	movs	r3, #1
 80080ec:	e032      	b.n	8008154 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 80080ee:	697b      	ldr	r3, [r7, #20]
 80080f0:	2b01      	cmp	r3, #1
 80080f2:	d904      	bls.n	80080fe <dir_sdi+0x98>
 80080f4:	693b      	ldr	r3, [r7, #16]
 80080f6:	699b      	ldr	r3, [r3, #24]
 80080f8:	697a      	ldr	r2, [r7, #20]
 80080fa:	429a      	cmp	r2, r3
 80080fc:	d301      	bcc.n	8008102 <dir_sdi+0x9c>
 80080fe:	2302      	movs	r3, #2
 8008100:	e028      	b.n	8008154 <dir_sdi+0xee>
			ofs -= csz;
 8008102:	683a      	ldr	r2, [r7, #0]
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	1ad3      	subs	r3, r2, r3
 8008108:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800810a:	683a      	ldr	r2, [r7, #0]
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	429a      	cmp	r2, r3
 8008110:	d2e1      	bcs.n	80080d6 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 8008112:	6979      	ldr	r1, [r7, #20]
 8008114:	6938      	ldr	r0, [r7, #16]
 8008116:	f7ff fcc5 	bl	8007aa4 <clust2sect>
 800811a:	4602      	mov	r2, r0
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	697a      	ldr	r2, [r7, #20]
 8008124:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	69db      	ldr	r3, [r3, #28]
 800812a:	2b00      	cmp	r3, #0
 800812c:	d101      	bne.n	8008132 <dir_sdi+0xcc>
 800812e:	2302      	movs	r3, #2
 8008130:	e010      	b.n	8008154 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	69da      	ldr	r2, [r3, #28]
 8008136:	683b      	ldr	r3, [r7, #0]
 8008138:	0a5b      	lsrs	r3, r3, #9
 800813a:	441a      	add	r2, r3
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8008140:	693b      	ldr	r3, [r7, #16]
 8008142:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8008146:	683b      	ldr	r3, [r7, #0]
 8008148:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800814c:	441a      	add	r2, r3
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8008152:	2300      	movs	r3, #0
}
 8008154:	4618      	mov	r0, r3
 8008156:	3718      	adds	r7, #24
 8008158:	46bd      	mov	sp, r7
 800815a:	bd80      	pop	{r7, pc}

0800815c <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800815c:	b580      	push	{r7, lr}
 800815e:	b086      	sub	sp, #24
 8008160:	af00      	add	r7, sp, #0
 8008162:	6078      	str	r0, [r7, #4]
 8008164:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	695b      	ldr	r3, [r3, #20]
 8008170:	3320      	adds	r3, #32
 8008172:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	69db      	ldr	r3, [r3, #28]
 8008178:	2b00      	cmp	r3, #0
 800817a:	d003      	beq.n	8008184 <dir_next+0x28>
 800817c:	68bb      	ldr	r3, [r7, #8]
 800817e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008182:	d301      	bcc.n	8008188 <dir_next+0x2c>
 8008184:	2304      	movs	r3, #4
 8008186:	e0aa      	b.n	80082de <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8008188:	68bb      	ldr	r3, [r7, #8]
 800818a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800818e:	2b00      	cmp	r3, #0
 8008190:	f040 8098 	bne.w	80082c4 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	69db      	ldr	r3, [r3, #28]
 8008198:	1c5a      	adds	r2, r3, #1
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	699b      	ldr	r3, [r3, #24]
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d10b      	bne.n	80081be <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 80081a6:	68bb      	ldr	r3, [r7, #8]
 80081a8:	095b      	lsrs	r3, r3, #5
 80081aa:	68fa      	ldr	r2, [r7, #12]
 80081ac:	8912      	ldrh	r2, [r2, #8]
 80081ae:	4293      	cmp	r3, r2
 80081b0:	f0c0 8088 	bcc.w	80082c4 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	2200      	movs	r2, #0
 80081b8:	61da      	str	r2, [r3, #28]
 80081ba:	2304      	movs	r3, #4
 80081bc:	e08f      	b.n	80082de <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 80081be:	68bb      	ldr	r3, [r7, #8]
 80081c0:	0a5b      	lsrs	r3, r3, #9
 80081c2:	68fa      	ldr	r2, [r7, #12]
 80081c4:	8952      	ldrh	r2, [r2, #10]
 80081c6:	3a01      	subs	r2, #1
 80081c8:	4013      	ands	r3, r2
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d17a      	bne.n	80082c4 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 80081ce:	687a      	ldr	r2, [r7, #4]
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	699b      	ldr	r3, [r3, #24]
 80081d4:	4619      	mov	r1, r3
 80081d6:	4610      	mov	r0, r2
 80081d8:	f7ff fc83 	bl	8007ae2 <get_fat>
 80081dc:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 80081de:	697b      	ldr	r3, [r7, #20]
 80081e0:	2b01      	cmp	r3, #1
 80081e2:	d801      	bhi.n	80081e8 <dir_next+0x8c>
 80081e4:	2302      	movs	r3, #2
 80081e6:	e07a      	b.n	80082de <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 80081e8:	697b      	ldr	r3, [r7, #20]
 80081ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80081ee:	d101      	bne.n	80081f4 <dir_next+0x98>
 80081f0:	2301      	movs	r3, #1
 80081f2:	e074      	b.n	80082de <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	699b      	ldr	r3, [r3, #24]
 80081f8:	697a      	ldr	r2, [r7, #20]
 80081fa:	429a      	cmp	r2, r3
 80081fc:	d358      	bcc.n	80082b0 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 80081fe:	683b      	ldr	r3, [r7, #0]
 8008200:	2b00      	cmp	r3, #0
 8008202:	d104      	bne.n	800820e <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	2200      	movs	r2, #0
 8008208:	61da      	str	r2, [r3, #28]
 800820a:	2304      	movs	r3, #4
 800820c:	e067      	b.n	80082de <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800820e:	687a      	ldr	r2, [r7, #4]
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	699b      	ldr	r3, [r3, #24]
 8008214:	4619      	mov	r1, r3
 8008216:	4610      	mov	r0, r2
 8008218:	f7ff fe59 	bl	8007ece <create_chain>
 800821c:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800821e:	697b      	ldr	r3, [r7, #20]
 8008220:	2b00      	cmp	r3, #0
 8008222:	d101      	bne.n	8008228 <dir_next+0xcc>
 8008224:	2307      	movs	r3, #7
 8008226:	e05a      	b.n	80082de <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8008228:	697b      	ldr	r3, [r7, #20]
 800822a:	2b01      	cmp	r3, #1
 800822c:	d101      	bne.n	8008232 <dir_next+0xd6>
 800822e:	2302      	movs	r3, #2
 8008230:	e055      	b.n	80082de <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8008232:	697b      	ldr	r3, [r7, #20]
 8008234:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008238:	d101      	bne.n	800823e <dir_next+0xe2>
 800823a:	2301      	movs	r3, #1
 800823c:	e04f      	b.n	80082de <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800823e:	68f8      	ldr	r0, [r7, #12]
 8008240:	f7ff fb50 	bl	80078e4 <sync_window>
 8008244:	4603      	mov	r3, r0
 8008246:	2b00      	cmp	r3, #0
 8008248:	d001      	beq.n	800824e <dir_next+0xf2>
 800824a:	2301      	movs	r3, #1
 800824c:	e047      	b.n	80082de <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	3334      	adds	r3, #52	@ 0x34
 8008252:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008256:	2100      	movs	r1, #0
 8008258:	4618      	mov	r0, r3
 800825a:	f7ff f97a 	bl	8007552 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800825e:	2300      	movs	r3, #0
 8008260:	613b      	str	r3, [r7, #16]
 8008262:	6979      	ldr	r1, [r7, #20]
 8008264:	68f8      	ldr	r0, [r7, #12]
 8008266:	f7ff fc1d 	bl	8007aa4 <clust2sect>
 800826a:	4602      	mov	r2, r0
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	631a      	str	r2, [r3, #48]	@ 0x30
 8008270:	e012      	b.n	8008298 <dir_next+0x13c>
						fs->wflag = 1;
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	2201      	movs	r2, #1
 8008276:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8008278:	68f8      	ldr	r0, [r7, #12]
 800827a:	f7ff fb33 	bl	80078e4 <sync_window>
 800827e:	4603      	mov	r3, r0
 8008280:	2b00      	cmp	r3, #0
 8008282:	d001      	beq.n	8008288 <dir_next+0x12c>
 8008284:	2301      	movs	r3, #1
 8008286:	e02a      	b.n	80082de <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8008288:	693b      	ldr	r3, [r7, #16]
 800828a:	3301      	adds	r3, #1
 800828c:	613b      	str	r3, [r7, #16]
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008292:	1c5a      	adds	r2, r3, #1
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	631a      	str	r2, [r3, #48]	@ 0x30
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	895b      	ldrh	r3, [r3, #10]
 800829c:	461a      	mov	r2, r3
 800829e:	693b      	ldr	r3, [r7, #16]
 80082a0:	4293      	cmp	r3, r2
 80082a2:	d3e6      	bcc.n	8008272 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80082a8:	693b      	ldr	r3, [r7, #16]
 80082aa:	1ad2      	subs	r2, r2, r3
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	631a      	str	r2, [r3, #48]	@ 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	697a      	ldr	r2, [r7, #20]
 80082b4:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 80082b6:	6979      	ldr	r1, [r7, #20]
 80082b8:	68f8      	ldr	r0, [r7, #12]
 80082ba:	f7ff fbf3 	bl	8007aa4 <clust2sect>
 80082be:	4602      	mov	r2, r0
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	68ba      	ldr	r2, [r7, #8]
 80082c8:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 80082d0:	68bb      	ldr	r3, [r7, #8]
 80082d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80082d6:	441a      	add	r2, r3
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80082dc:	2300      	movs	r3, #0
}
 80082de:	4618      	mov	r0, r3
 80082e0:	3718      	adds	r7, #24
 80082e2:	46bd      	mov	sp, r7
 80082e4:	bd80      	pop	{r7, pc}

080082e6 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 80082e6:	b580      	push	{r7, lr}
 80082e8:	b086      	sub	sp, #24
 80082ea:	af00      	add	r7, sp, #0
 80082ec:	6078      	str	r0, [r7, #4]
 80082ee:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 80082f6:	2100      	movs	r1, #0
 80082f8:	6878      	ldr	r0, [r7, #4]
 80082fa:	f7ff feb4 	bl	8008066 <dir_sdi>
 80082fe:	4603      	mov	r3, r0
 8008300:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8008302:	7dfb      	ldrb	r3, [r7, #23]
 8008304:	2b00      	cmp	r3, #0
 8008306:	d12b      	bne.n	8008360 <dir_alloc+0x7a>
		n = 0;
 8008308:	2300      	movs	r3, #0
 800830a:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	69db      	ldr	r3, [r3, #28]
 8008310:	4619      	mov	r1, r3
 8008312:	68f8      	ldr	r0, [r7, #12]
 8008314:	f7ff fb2a 	bl	800796c <move_window>
 8008318:	4603      	mov	r3, r0
 800831a:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800831c:	7dfb      	ldrb	r3, [r7, #23]
 800831e:	2b00      	cmp	r3, #0
 8008320:	d11d      	bne.n	800835e <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	6a1b      	ldr	r3, [r3, #32]
 8008326:	781b      	ldrb	r3, [r3, #0]
 8008328:	2be5      	cmp	r3, #229	@ 0xe5
 800832a:	d004      	beq.n	8008336 <dir_alloc+0x50>
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	6a1b      	ldr	r3, [r3, #32]
 8008330:	781b      	ldrb	r3, [r3, #0]
 8008332:	2b00      	cmp	r3, #0
 8008334:	d107      	bne.n	8008346 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8008336:	693b      	ldr	r3, [r7, #16]
 8008338:	3301      	adds	r3, #1
 800833a:	613b      	str	r3, [r7, #16]
 800833c:	693a      	ldr	r2, [r7, #16]
 800833e:	683b      	ldr	r3, [r7, #0]
 8008340:	429a      	cmp	r2, r3
 8008342:	d102      	bne.n	800834a <dir_alloc+0x64>
 8008344:	e00c      	b.n	8008360 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8008346:	2300      	movs	r3, #0
 8008348:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800834a:	2101      	movs	r1, #1
 800834c:	6878      	ldr	r0, [r7, #4]
 800834e:	f7ff ff05 	bl	800815c <dir_next>
 8008352:	4603      	mov	r3, r0
 8008354:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8008356:	7dfb      	ldrb	r3, [r7, #23]
 8008358:	2b00      	cmp	r3, #0
 800835a:	d0d7      	beq.n	800830c <dir_alloc+0x26>
 800835c:	e000      	b.n	8008360 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800835e:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8008360:	7dfb      	ldrb	r3, [r7, #23]
 8008362:	2b04      	cmp	r3, #4
 8008364:	d101      	bne.n	800836a <dir_alloc+0x84>
 8008366:	2307      	movs	r3, #7
 8008368:	75fb      	strb	r3, [r7, #23]
	return res;
 800836a:	7dfb      	ldrb	r3, [r7, #23]
}
 800836c:	4618      	mov	r0, r3
 800836e:	3718      	adds	r7, #24
 8008370:	46bd      	mov	sp, r7
 8008372:	bd80      	pop	{r7, pc}

08008374 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8008374:	b580      	push	{r7, lr}
 8008376:	b084      	sub	sp, #16
 8008378:	af00      	add	r7, sp, #0
 800837a:	6078      	str	r0, [r7, #4]
 800837c:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800837e:	683b      	ldr	r3, [r7, #0]
 8008380:	331a      	adds	r3, #26
 8008382:	4618      	mov	r0, r3
 8008384:	f7ff f842 	bl	800740c <ld_word>
 8008388:	4603      	mov	r3, r0
 800838a:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	781b      	ldrb	r3, [r3, #0]
 8008390:	2b03      	cmp	r3, #3
 8008392:	d109      	bne.n	80083a8 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8008394:	683b      	ldr	r3, [r7, #0]
 8008396:	3314      	adds	r3, #20
 8008398:	4618      	mov	r0, r3
 800839a:	f7ff f837 	bl	800740c <ld_word>
 800839e:	4603      	mov	r3, r0
 80083a0:	041b      	lsls	r3, r3, #16
 80083a2:	68fa      	ldr	r2, [r7, #12]
 80083a4:	4313      	orrs	r3, r2
 80083a6:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 80083a8:	68fb      	ldr	r3, [r7, #12]
}
 80083aa:	4618      	mov	r0, r3
 80083ac:	3710      	adds	r7, #16
 80083ae:	46bd      	mov	sp, r7
 80083b0:	bd80      	pop	{r7, pc}

080083b2 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 80083b2:	b580      	push	{r7, lr}
 80083b4:	b084      	sub	sp, #16
 80083b6:	af00      	add	r7, sp, #0
 80083b8:	60f8      	str	r0, [r7, #12]
 80083ba:	60b9      	str	r1, [r7, #8]
 80083bc:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 80083be:	68bb      	ldr	r3, [r7, #8]
 80083c0:	331a      	adds	r3, #26
 80083c2:	687a      	ldr	r2, [r7, #4]
 80083c4:	b292      	uxth	r2, r2
 80083c6:	4611      	mov	r1, r2
 80083c8:	4618      	mov	r0, r3
 80083ca:	f7ff f85a 	bl	8007482 <st_word>
	if (fs->fs_type == FS_FAT32) {
 80083ce:	68fb      	ldr	r3, [r7, #12]
 80083d0:	781b      	ldrb	r3, [r3, #0]
 80083d2:	2b03      	cmp	r3, #3
 80083d4:	d109      	bne.n	80083ea <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 80083d6:	68bb      	ldr	r3, [r7, #8]
 80083d8:	f103 0214 	add.w	r2, r3, #20
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	0c1b      	lsrs	r3, r3, #16
 80083e0:	b29b      	uxth	r3, r3
 80083e2:	4619      	mov	r1, r3
 80083e4:	4610      	mov	r0, r2
 80083e6:	f7ff f84c 	bl	8007482 <st_word>
	}
}
 80083ea:	bf00      	nop
 80083ec:	3710      	adds	r7, #16
 80083ee:	46bd      	mov	sp, r7
 80083f0:	bd80      	pop	{r7, pc}
	...

080083f4 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 80083f4:	b590      	push	{r4, r7, lr}
 80083f6:	b087      	sub	sp, #28
 80083f8:	af00      	add	r7, sp, #0
 80083fa:	6078      	str	r0, [r7, #4]
 80083fc:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 80083fe:	683b      	ldr	r3, [r7, #0]
 8008400:	331a      	adds	r3, #26
 8008402:	4618      	mov	r0, r3
 8008404:	f7ff f802 	bl	800740c <ld_word>
 8008408:	4603      	mov	r3, r0
 800840a:	2b00      	cmp	r3, #0
 800840c:	d001      	beq.n	8008412 <cmp_lfn+0x1e>
 800840e:	2300      	movs	r3, #0
 8008410:	e059      	b.n	80084c6 <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 8008412:	683b      	ldr	r3, [r7, #0]
 8008414:	781b      	ldrb	r3, [r3, #0]
 8008416:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800841a:	1e5a      	subs	r2, r3, #1
 800841c:	4613      	mov	r3, r2
 800841e:	005b      	lsls	r3, r3, #1
 8008420:	4413      	add	r3, r2
 8008422:	009b      	lsls	r3, r3, #2
 8008424:	4413      	add	r3, r2
 8008426:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8008428:	2301      	movs	r3, #1
 800842a:	81fb      	strh	r3, [r7, #14]
 800842c:	2300      	movs	r3, #0
 800842e:	613b      	str	r3, [r7, #16]
 8008430:	e033      	b.n	800849a <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 8008432:	4a27      	ldr	r2, [pc, #156]	@ (80084d0 <cmp_lfn+0xdc>)
 8008434:	693b      	ldr	r3, [r7, #16]
 8008436:	4413      	add	r3, r2
 8008438:	781b      	ldrb	r3, [r3, #0]
 800843a:	461a      	mov	r2, r3
 800843c:	683b      	ldr	r3, [r7, #0]
 800843e:	4413      	add	r3, r2
 8008440:	4618      	mov	r0, r3
 8008442:	f7fe ffe3 	bl	800740c <ld_word>
 8008446:	4603      	mov	r3, r0
 8008448:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800844a:	89fb      	ldrh	r3, [r7, #14]
 800844c:	2b00      	cmp	r3, #0
 800844e:	d01a      	beq.n	8008486 <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 8008450:	697b      	ldr	r3, [r7, #20]
 8008452:	2bfe      	cmp	r3, #254	@ 0xfe
 8008454:	d812      	bhi.n	800847c <cmp_lfn+0x88>
 8008456:	89bb      	ldrh	r3, [r7, #12]
 8008458:	4618      	mov	r0, r3
 800845a:	f001 fdc9 	bl	8009ff0 <ff_wtoupper>
 800845e:	4603      	mov	r3, r0
 8008460:	461c      	mov	r4, r3
 8008462:	697b      	ldr	r3, [r7, #20]
 8008464:	1c5a      	adds	r2, r3, #1
 8008466:	617a      	str	r2, [r7, #20]
 8008468:	005b      	lsls	r3, r3, #1
 800846a:	687a      	ldr	r2, [r7, #4]
 800846c:	4413      	add	r3, r2
 800846e:	881b      	ldrh	r3, [r3, #0]
 8008470:	4618      	mov	r0, r3
 8008472:	f001 fdbd 	bl	8009ff0 <ff_wtoupper>
 8008476:	4603      	mov	r3, r0
 8008478:	429c      	cmp	r4, r3
 800847a:	d001      	beq.n	8008480 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 800847c:	2300      	movs	r3, #0
 800847e:	e022      	b.n	80084c6 <cmp_lfn+0xd2>
			}
			wc = uc;
 8008480:	89bb      	ldrh	r3, [r7, #12]
 8008482:	81fb      	strh	r3, [r7, #14]
 8008484:	e006      	b.n	8008494 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8008486:	89bb      	ldrh	r3, [r7, #12]
 8008488:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800848c:	4293      	cmp	r3, r2
 800848e:	d001      	beq.n	8008494 <cmp_lfn+0xa0>
 8008490:	2300      	movs	r3, #0
 8008492:	e018      	b.n	80084c6 <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8008494:	693b      	ldr	r3, [r7, #16]
 8008496:	3301      	adds	r3, #1
 8008498:	613b      	str	r3, [r7, #16]
 800849a:	693b      	ldr	r3, [r7, #16]
 800849c:	2b0c      	cmp	r3, #12
 800849e:	d9c8      	bls.n	8008432 <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 80084a0:	683b      	ldr	r3, [r7, #0]
 80084a2:	781b      	ldrb	r3, [r3, #0]
 80084a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d00b      	beq.n	80084c4 <cmp_lfn+0xd0>
 80084ac:	89fb      	ldrh	r3, [r7, #14]
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	d008      	beq.n	80084c4 <cmp_lfn+0xd0>
 80084b2:	697b      	ldr	r3, [r7, #20]
 80084b4:	005b      	lsls	r3, r3, #1
 80084b6:	687a      	ldr	r2, [r7, #4]
 80084b8:	4413      	add	r3, r2
 80084ba:	881b      	ldrh	r3, [r3, #0]
 80084bc:	2b00      	cmp	r3, #0
 80084be:	d001      	beq.n	80084c4 <cmp_lfn+0xd0>
 80084c0:	2300      	movs	r3, #0
 80084c2:	e000      	b.n	80084c6 <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 80084c4:	2301      	movs	r3, #1
}
 80084c6:	4618      	mov	r0, r3
 80084c8:	371c      	adds	r7, #28
 80084ca:	46bd      	mov	sp, r7
 80084cc:	bd90      	pop	{r4, r7, pc}
 80084ce:	bf00      	nop
 80084d0:	0800abf4 	.word	0x0800abf4

080084d4 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 80084d4:	b580      	push	{r7, lr}
 80084d6:	b088      	sub	sp, #32
 80084d8:	af00      	add	r7, sp, #0
 80084da:	60f8      	str	r0, [r7, #12]
 80084dc:	60b9      	str	r1, [r7, #8]
 80084de:	4611      	mov	r1, r2
 80084e0:	461a      	mov	r2, r3
 80084e2:	460b      	mov	r3, r1
 80084e4:	71fb      	strb	r3, [r7, #7]
 80084e6:	4613      	mov	r3, r2
 80084e8:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 80084ea:	68bb      	ldr	r3, [r7, #8]
 80084ec:	330d      	adds	r3, #13
 80084ee:	79ba      	ldrb	r2, [r7, #6]
 80084f0:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 80084f2:	68bb      	ldr	r3, [r7, #8]
 80084f4:	330b      	adds	r3, #11
 80084f6:	220f      	movs	r2, #15
 80084f8:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 80084fa:	68bb      	ldr	r3, [r7, #8]
 80084fc:	330c      	adds	r3, #12
 80084fe:	2200      	movs	r2, #0
 8008500:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 8008502:	68bb      	ldr	r3, [r7, #8]
 8008504:	331a      	adds	r3, #26
 8008506:	2100      	movs	r1, #0
 8008508:	4618      	mov	r0, r3
 800850a:	f7fe ffba 	bl	8007482 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800850e:	79fb      	ldrb	r3, [r7, #7]
 8008510:	1e5a      	subs	r2, r3, #1
 8008512:	4613      	mov	r3, r2
 8008514:	005b      	lsls	r3, r3, #1
 8008516:	4413      	add	r3, r2
 8008518:	009b      	lsls	r3, r3, #2
 800851a:	4413      	add	r3, r2
 800851c:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800851e:	2300      	movs	r3, #0
 8008520:	82fb      	strh	r3, [r7, #22]
 8008522:	2300      	movs	r3, #0
 8008524:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8008526:	8afb      	ldrh	r3, [r7, #22]
 8008528:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800852c:	4293      	cmp	r3, r2
 800852e:	d007      	beq.n	8008540 <put_lfn+0x6c>
 8008530:	69fb      	ldr	r3, [r7, #28]
 8008532:	1c5a      	adds	r2, r3, #1
 8008534:	61fa      	str	r2, [r7, #28]
 8008536:	005b      	lsls	r3, r3, #1
 8008538:	68fa      	ldr	r2, [r7, #12]
 800853a:	4413      	add	r3, r2
 800853c:	881b      	ldrh	r3, [r3, #0]
 800853e:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 8008540:	4a17      	ldr	r2, [pc, #92]	@ (80085a0 <put_lfn+0xcc>)
 8008542:	69bb      	ldr	r3, [r7, #24]
 8008544:	4413      	add	r3, r2
 8008546:	781b      	ldrb	r3, [r3, #0]
 8008548:	461a      	mov	r2, r3
 800854a:	68bb      	ldr	r3, [r7, #8]
 800854c:	4413      	add	r3, r2
 800854e:	8afa      	ldrh	r2, [r7, #22]
 8008550:	4611      	mov	r1, r2
 8008552:	4618      	mov	r0, r3
 8008554:	f7fe ff95 	bl	8007482 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8008558:	8afb      	ldrh	r3, [r7, #22]
 800855a:	2b00      	cmp	r3, #0
 800855c:	d102      	bne.n	8008564 <put_lfn+0x90>
 800855e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8008562:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 8008564:	69bb      	ldr	r3, [r7, #24]
 8008566:	3301      	adds	r3, #1
 8008568:	61bb      	str	r3, [r7, #24]
 800856a:	69bb      	ldr	r3, [r7, #24]
 800856c:	2b0c      	cmp	r3, #12
 800856e:	d9da      	bls.n	8008526 <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 8008570:	8afb      	ldrh	r3, [r7, #22]
 8008572:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8008576:	4293      	cmp	r3, r2
 8008578:	d006      	beq.n	8008588 <put_lfn+0xb4>
 800857a:	69fb      	ldr	r3, [r7, #28]
 800857c:	005b      	lsls	r3, r3, #1
 800857e:	68fa      	ldr	r2, [r7, #12]
 8008580:	4413      	add	r3, r2
 8008582:	881b      	ldrh	r3, [r3, #0]
 8008584:	2b00      	cmp	r3, #0
 8008586:	d103      	bne.n	8008590 <put_lfn+0xbc>
 8008588:	79fb      	ldrb	r3, [r7, #7]
 800858a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800858e:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8008590:	68bb      	ldr	r3, [r7, #8]
 8008592:	79fa      	ldrb	r2, [r7, #7]
 8008594:	701a      	strb	r2, [r3, #0]
}
 8008596:	bf00      	nop
 8008598:	3720      	adds	r7, #32
 800859a:	46bd      	mov	sp, r7
 800859c:	bd80      	pop	{r7, pc}
 800859e:	bf00      	nop
 80085a0:	0800abf4 	.word	0x0800abf4

080085a4 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 80085a4:	b580      	push	{r7, lr}
 80085a6:	b08c      	sub	sp, #48	@ 0x30
 80085a8:	af00      	add	r7, sp, #0
 80085aa:	60f8      	str	r0, [r7, #12]
 80085ac:	60b9      	str	r1, [r7, #8]
 80085ae:	607a      	str	r2, [r7, #4]
 80085b0:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 80085b2:	220b      	movs	r2, #11
 80085b4:	68b9      	ldr	r1, [r7, #8]
 80085b6:	68f8      	ldr	r0, [r7, #12]
 80085b8:	f7fe ffaa 	bl	8007510 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 80085bc:	683b      	ldr	r3, [r7, #0]
 80085be:	2b05      	cmp	r3, #5
 80085c0:	d92b      	bls.n	800861a <gen_numname+0x76>
		sr = seq;
 80085c2:	683b      	ldr	r3, [r7, #0]
 80085c4:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 80085c6:	e022      	b.n	800860e <gen_numname+0x6a>
			wc = *lfn++;
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	1c9a      	adds	r2, r3, #2
 80085cc:	607a      	str	r2, [r7, #4]
 80085ce:	881b      	ldrh	r3, [r3, #0]
 80085d0:	847b      	strh	r3, [r7, #34]	@ 0x22
			for (i = 0; i < 16; i++) {
 80085d2:	2300      	movs	r3, #0
 80085d4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80085d6:	e017      	b.n	8008608 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 80085d8:	69fb      	ldr	r3, [r7, #28]
 80085da:	005a      	lsls	r2, r3, #1
 80085dc:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80085de:	f003 0301 	and.w	r3, r3, #1
 80085e2:	4413      	add	r3, r2
 80085e4:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 80085e6:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80085e8:	085b      	lsrs	r3, r3, #1
 80085ea:	847b      	strh	r3, [r7, #34]	@ 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 80085ec:	69fb      	ldr	r3, [r7, #28]
 80085ee:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	d005      	beq.n	8008602 <gen_numname+0x5e>
 80085f6:	69fb      	ldr	r3, [r7, #28]
 80085f8:	f483 3388 	eor.w	r3, r3, #69632	@ 0x11000
 80085fc:	f083 0321 	eor.w	r3, r3, #33	@ 0x21
 8008600:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 8008602:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008604:	3301      	adds	r3, #1
 8008606:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008608:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800860a:	2b0f      	cmp	r3, #15
 800860c:	d9e4      	bls.n	80085d8 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	881b      	ldrh	r3, [r3, #0]
 8008612:	2b00      	cmp	r3, #0
 8008614:	d1d8      	bne.n	80085c8 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 8008616:	69fb      	ldr	r3, [r7, #28]
 8008618:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800861a:	2307      	movs	r3, #7
 800861c:	62bb      	str	r3, [r7, #40]	@ 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 800861e:	683b      	ldr	r3, [r7, #0]
 8008620:	b2db      	uxtb	r3, r3
 8008622:	f003 030f 	and.w	r3, r3, #15
 8008626:	b2db      	uxtb	r3, r3
 8008628:	3330      	adds	r3, #48	@ 0x30
 800862a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (c > '9') c += 7;
 800862e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8008632:	2b39      	cmp	r3, #57	@ 0x39
 8008634:	d904      	bls.n	8008640 <gen_numname+0x9c>
 8008636:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800863a:	3307      	adds	r3, #7
 800863c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		ns[i--] = c;
 8008640:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008642:	1e5a      	subs	r2, r3, #1
 8008644:	62ba      	str	r2, [r7, #40]	@ 0x28
 8008646:	3330      	adds	r3, #48	@ 0x30
 8008648:	443b      	add	r3, r7
 800864a:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 800864e:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 8008652:	683b      	ldr	r3, [r7, #0]
 8008654:	091b      	lsrs	r3, r3, #4
 8008656:	603b      	str	r3, [r7, #0]
	} while (seq);
 8008658:	683b      	ldr	r3, [r7, #0]
 800865a:	2b00      	cmp	r3, #0
 800865c:	d1df      	bne.n	800861e <gen_numname+0x7a>
	ns[i] = '~';
 800865e:	f107 0214 	add.w	r2, r7, #20
 8008662:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008664:	4413      	add	r3, r2
 8008666:	227e      	movs	r2, #126	@ 0x7e
 8008668:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800866a:	2300      	movs	r3, #0
 800866c:	627b      	str	r3, [r7, #36]	@ 0x24
 800866e:	e002      	b.n	8008676 <gen_numname+0xd2>
 8008670:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008672:	3301      	adds	r3, #1
 8008674:	627b      	str	r3, [r7, #36]	@ 0x24
 8008676:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008678:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800867a:	429a      	cmp	r2, r3
 800867c:	d205      	bcs.n	800868a <gen_numname+0xe6>
 800867e:	68fa      	ldr	r2, [r7, #12]
 8008680:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008682:	4413      	add	r3, r2
 8008684:	781b      	ldrb	r3, [r3, #0]
 8008686:	2b20      	cmp	r3, #32
 8008688:	d1f2      	bne.n	8008670 <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800868a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800868c:	2b07      	cmp	r3, #7
 800868e:	d807      	bhi.n	80086a0 <gen_numname+0xfc>
 8008690:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008692:	1c5a      	adds	r2, r3, #1
 8008694:	62ba      	str	r2, [r7, #40]	@ 0x28
 8008696:	3330      	adds	r3, #48	@ 0x30
 8008698:	443b      	add	r3, r7
 800869a:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800869e:	e000      	b.n	80086a2 <gen_numname+0xfe>
 80086a0:	2120      	movs	r1, #32
 80086a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086a4:	1c5a      	adds	r2, r3, #1
 80086a6:	627a      	str	r2, [r7, #36]	@ 0x24
 80086a8:	68fa      	ldr	r2, [r7, #12]
 80086aa:	4413      	add	r3, r2
 80086ac:	460a      	mov	r2, r1
 80086ae:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 80086b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086b2:	2b07      	cmp	r3, #7
 80086b4:	d9e9      	bls.n	800868a <gen_numname+0xe6>
}
 80086b6:	bf00      	nop
 80086b8:	bf00      	nop
 80086ba:	3730      	adds	r7, #48	@ 0x30
 80086bc:	46bd      	mov	sp, r7
 80086be:	bd80      	pop	{r7, pc}

080086c0 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 80086c0:	b480      	push	{r7}
 80086c2:	b085      	sub	sp, #20
 80086c4:	af00      	add	r7, sp, #0
 80086c6:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 80086c8:	2300      	movs	r3, #0
 80086ca:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 80086cc:	230b      	movs	r3, #11
 80086ce:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 80086d0:	7bfb      	ldrb	r3, [r7, #15]
 80086d2:	b2da      	uxtb	r2, r3
 80086d4:	0852      	lsrs	r2, r2, #1
 80086d6:	01db      	lsls	r3, r3, #7
 80086d8:	4313      	orrs	r3, r2
 80086da:	b2da      	uxtb	r2, r3
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	1c59      	adds	r1, r3, #1
 80086e0:	6079      	str	r1, [r7, #4]
 80086e2:	781b      	ldrb	r3, [r3, #0]
 80086e4:	4413      	add	r3, r2
 80086e6:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 80086e8:	68bb      	ldr	r3, [r7, #8]
 80086ea:	3b01      	subs	r3, #1
 80086ec:	60bb      	str	r3, [r7, #8]
 80086ee:	68bb      	ldr	r3, [r7, #8]
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	d1ed      	bne.n	80086d0 <sum_sfn+0x10>
	return sum;
 80086f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80086f6:	4618      	mov	r0, r3
 80086f8:	3714      	adds	r7, #20
 80086fa:	46bd      	mov	sp, r7
 80086fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008700:	4770      	bx	lr

08008702 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8008702:	b580      	push	{r7, lr}
 8008704:	b086      	sub	sp, #24
 8008706:	af00      	add	r7, sp, #0
 8008708:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8008710:	2100      	movs	r1, #0
 8008712:	6878      	ldr	r0, [r7, #4]
 8008714:	f7ff fca7 	bl	8008066 <dir_sdi>
 8008718:	4603      	mov	r3, r0
 800871a:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800871c:	7dfb      	ldrb	r3, [r7, #23]
 800871e:	2b00      	cmp	r3, #0
 8008720:	d001      	beq.n	8008726 <dir_find+0x24>
 8008722:	7dfb      	ldrb	r3, [r7, #23]
 8008724:	e0a9      	b.n	800887a <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8008726:	23ff      	movs	r3, #255	@ 0xff
 8008728:	753b      	strb	r3, [r7, #20]
 800872a:	7d3b      	ldrb	r3, [r7, #20]
 800872c:	757b      	strb	r3, [r7, #21]
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	f04f 32ff 	mov.w	r2, #4294967295
 8008734:	631a      	str	r2, [r3, #48]	@ 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	69db      	ldr	r3, [r3, #28]
 800873a:	4619      	mov	r1, r3
 800873c:	6938      	ldr	r0, [r7, #16]
 800873e:	f7ff f915 	bl	800796c <move_window>
 8008742:	4603      	mov	r3, r0
 8008744:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8008746:	7dfb      	ldrb	r3, [r7, #23]
 8008748:	2b00      	cmp	r3, #0
 800874a:	f040 8090 	bne.w	800886e <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	6a1b      	ldr	r3, [r3, #32]
 8008752:	781b      	ldrb	r3, [r3, #0]
 8008754:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8008756:	7dbb      	ldrb	r3, [r7, #22]
 8008758:	2b00      	cmp	r3, #0
 800875a:	d102      	bne.n	8008762 <dir_find+0x60>
 800875c:	2304      	movs	r3, #4
 800875e:	75fb      	strb	r3, [r7, #23]
 8008760:	e08a      	b.n	8008878 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	6a1b      	ldr	r3, [r3, #32]
 8008766:	330b      	adds	r3, #11
 8008768:	781b      	ldrb	r3, [r3, #0]
 800876a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800876e:	73fb      	strb	r3, [r7, #15]
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	7bfa      	ldrb	r2, [r7, #15]
 8008774:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8008776:	7dbb      	ldrb	r3, [r7, #22]
 8008778:	2be5      	cmp	r3, #229	@ 0xe5
 800877a:	d007      	beq.n	800878c <dir_find+0x8a>
 800877c:	7bfb      	ldrb	r3, [r7, #15]
 800877e:	f003 0308 	and.w	r3, r3, #8
 8008782:	2b00      	cmp	r3, #0
 8008784:	d009      	beq.n	800879a <dir_find+0x98>
 8008786:	7bfb      	ldrb	r3, [r7, #15]
 8008788:	2b0f      	cmp	r3, #15
 800878a:	d006      	beq.n	800879a <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800878c:	23ff      	movs	r3, #255	@ 0xff
 800878e:	757b      	strb	r3, [r7, #21]
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	f04f 32ff 	mov.w	r2, #4294967295
 8008796:	631a      	str	r2, [r3, #48]	@ 0x30
 8008798:	e05e      	b.n	8008858 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800879a:	7bfb      	ldrb	r3, [r7, #15]
 800879c:	2b0f      	cmp	r3, #15
 800879e:	d136      	bne.n	800880e <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 80087a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80087aa:	2b00      	cmp	r3, #0
 80087ac:	d154      	bne.n	8008858 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 80087ae:	7dbb      	ldrb	r3, [r7, #22]
 80087b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80087b4:	2b00      	cmp	r3, #0
 80087b6:	d00d      	beq.n	80087d4 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	6a1b      	ldr	r3, [r3, #32]
 80087bc:	7b5b      	ldrb	r3, [r3, #13]
 80087be:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 80087c0:	7dbb      	ldrb	r3, [r7, #22]
 80087c2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80087c6:	75bb      	strb	r3, [r7, #22]
 80087c8:	7dbb      	ldrb	r3, [r7, #22]
 80087ca:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	695a      	ldr	r2, [r3, #20]
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	631a      	str	r2, [r3, #48]	@ 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 80087d4:	7dba      	ldrb	r2, [r7, #22]
 80087d6:	7d7b      	ldrb	r3, [r7, #21]
 80087d8:	429a      	cmp	r2, r3
 80087da:	d115      	bne.n	8008808 <dir_find+0x106>
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	6a1b      	ldr	r3, [r3, #32]
 80087e0:	330d      	adds	r3, #13
 80087e2:	781b      	ldrb	r3, [r3, #0]
 80087e4:	7d3a      	ldrb	r2, [r7, #20]
 80087e6:	429a      	cmp	r2, r3
 80087e8:	d10e      	bne.n	8008808 <dir_find+0x106>
 80087ea:	693b      	ldr	r3, [r7, #16]
 80087ec:	68da      	ldr	r2, [r3, #12]
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	6a1b      	ldr	r3, [r3, #32]
 80087f2:	4619      	mov	r1, r3
 80087f4:	4610      	mov	r0, r2
 80087f6:	f7ff fdfd 	bl	80083f4 <cmp_lfn>
 80087fa:	4603      	mov	r3, r0
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	d003      	beq.n	8008808 <dir_find+0x106>
 8008800:	7d7b      	ldrb	r3, [r7, #21]
 8008802:	3b01      	subs	r3, #1
 8008804:	b2db      	uxtb	r3, r3
 8008806:	e000      	b.n	800880a <dir_find+0x108>
 8008808:	23ff      	movs	r3, #255	@ 0xff
 800880a:	757b      	strb	r3, [r7, #21]
 800880c:	e024      	b.n	8008858 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800880e:	7d7b      	ldrb	r3, [r7, #21]
 8008810:	2b00      	cmp	r3, #0
 8008812:	d109      	bne.n	8008828 <dir_find+0x126>
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	6a1b      	ldr	r3, [r3, #32]
 8008818:	4618      	mov	r0, r3
 800881a:	f7ff ff51 	bl	80086c0 <sum_sfn>
 800881e:	4603      	mov	r3, r0
 8008820:	461a      	mov	r2, r3
 8008822:	7d3b      	ldrb	r3, [r7, #20]
 8008824:	4293      	cmp	r3, r2
 8008826:	d024      	beq.n	8008872 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800882e:	f003 0301 	and.w	r3, r3, #1
 8008832:	2b00      	cmp	r3, #0
 8008834:	d10a      	bne.n	800884c <dir_find+0x14a>
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	6a18      	ldr	r0, [r3, #32]
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	3324      	adds	r3, #36	@ 0x24
 800883e:	220b      	movs	r2, #11
 8008840:	4619      	mov	r1, r3
 8008842:	f7fe fea1 	bl	8007588 <mem_cmp>
 8008846:	4603      	mov	r3, r0
 8008848:	2b00      	cmp	r3, #0
 800884a:	d014      	beq.n	8008876 <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800884c:	23ff      	movs	r3, #255	@ 0xff
 800884e:	757b      	strb	r3, [r7, #21]
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	f04f 32ff 	mov.w	r2, #4294967295
 8008856:	631a      	str	r2, [r3, #48]	@ 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8008858:	2100      	movs	r1, #0
 800885a:	6878      	ldr	r0, [r7, #4]
 800885c:	f7ff fc7e 	bl	800815c <dir_next>
 8008860:	4603      	mov	r3, r0
 8008862:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8008864:	7dfb      	ldrb	r3, [r7, #23]
 8008866:	2b00      	cmp	r3, #0
 8008868:	f43f af65 	beq.w	8008736 <dir_find+0x34>
 800886c:	e004      	b.n	8008878 <dir_find+0x176>
		if (res != FR_OK) break;
 800886e:	bf00      	nop
 8008870:	e002      	b.n	8008878 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8008872:	bf00      	nop
 8008874:	e000      	b.n	8008878 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8008876:	bf00      	nop

	return res;
 8008878:	7dfb      	ldrb	r3, [r7, #23]
}
 800887a:	4618      	mov	r0, r3
 800887c:	3718      	adds	r7, #24
 800887e:	46bd      	mov	sp, r7
 8008880:	bd80      	pop	{r7, pc}
	...

08008884 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8008884:	b580      	push	{r7, lr}
 8008886:	b08c      	sub	sp, #48	@ 0x30
 8008888:	af00      	add	r7, sp, #0
 800888a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8008898:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 800889c:	2b00      	cmp	r3, #0
 800889e:	d001      	beq.n	80088a4 <dir_register+0x20>
 80088a0:	2306      	movs	r3, #6
 80088a2:	e0e0      	b.n	8008a66 <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 80088a4:	2300      	movs	r3, #0
 80088a6:	627b      	str	r3, [r7, #36]	@ 0x24
 80088a8:	e002      	b.n	80088b0 <dir_register+0x2c>
 80088aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80088ac:	3301      	adds	r3, #1
 80088ae:	627b      	str	r3, [r7, #36]	@ 0x24
 80088b0:	69fb      	ldr	r3, [r7, #28]
 80088b2:	68da      	ldr	r2, [r3, #12]
 80088b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80088b6:	005b      	lsls	r3, r3, #1
 80088b8:	4413      	add	r3, r2
 80088ba:	881b      	ldrh	r3, [r3, #0]
 80088bc:	2b00      	cmp	r3, #0
 80088be:	d1f4      	bne.n	80088aa <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	f103 0124 	add.w	r1, r3, #36	@ 0x24
 80088c6:	f107 030c 	add.w	r3, r7, #12
 80088ca:	220c      	movs	r2, #12
 80088cc:	4618      	mov	r0, r3
 80088ce:	f7fe fe1f 	bl	8007510 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 80088d2:	7dfb      	ldrb	r3, [r7, #23]
 80088d4:	f003 0301 	and.w	r3, r3, #1
 80088d8:	2b00      	cmp	r3, #0
 80088da:	d032      	beq.n	8008942 <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	2240      	movs	r2, #64	@ 0x40
 80088e0:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		for (n = 1; n < 100; n++) {
 80088e4:	2301      	movs	r3, #1
 80088e6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80088e8:	e016      	b.n	8008918 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	f103 0024 	add.w	r0, r3, #36	@ 0x24
 80088f0:	69fb      	ldr	r3, [r7, #28]
 80088f2:	68da      	ldr	r2, [r3, #12]
 80088f4:	f107 010c 	add.w	r1, r7, #12
 80088f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80088fa:	f7ff fe53 	bl	80085a4 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 80088fe:	6878      	ldr	r0, [r7, #4]
 8008900:	f7ff feff 	bl	8008702 <dir_find>
 8008904:	4603      	mov	r3, r0
 8008906:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			if (res != FR_OK) break;
 800890a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800890e:	2b00      	cmp	r3, #0
 8008910:	d106      	bne.n	8008920 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 8008912:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008914:	3301      	adds	r3, #1
 8008916:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008918:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800891a:	2b63      	cmp	r3, #99	@ 0x63
 800891c:	d9e5      	bls.n	80088ea <dir_register+0x66>
 800891e:	e000      	b.n	8008922 <dir_register+0x9e>
			if (res != FR_OK) break;
 8008920:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 8008922:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008924:	2b64      	cmp	r3, #100	@ 0x64
 8008926:	d101      	bne.n	800892c <dir_register+0xa8>
 8008928:	2307      	movs	r3, #7
 800892a:	e09c      	b.n	8008a66 <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800892c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8008930:	2b04      	cmp	r3, #4
 8008932:	d002      	beq.n	800893a <dir_register+0xb6>
 8008934:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8008938:	e095      	b.n	8008a66 <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 800893a:	7dfa      	ldrb	r2, [r7, #23]
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 8008942:	7dfb      	ldrb	r3, [r7, #23]
 8008944:	f003 0302 	and.w	r3, r3, #2
 8008948:	2b00      	cmp	r3, #0
 800894a:	d007      	beq.n	800895c <dir_register+0xd8>
 800894c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800894e:	330c      	adds	r3, #12
 8008950:	4a47      	ldr	r2, [pc, #284]	@ (8008a70 <dir_register+0x1ec>)
 8008952:	fba2 2303 	umull	r2, r3, r2, r3
 8008956:	089b      	lsrs	r3, r3, #2
 8008958:	3301      	adds	r3, #1
 800895a:	e000      	b.n	800895e <dir_register+0xda>
 800895c:	2301      	movs	r3, #1
 800895e:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 8008960:	6a39      	ldr	r1, [r7, #32]
 8008962:	6878      	ldr	r0, [r7, #4]
 8008964:	f7ff fcbf 	bl	80082e6 <dir_alloc>
 8008968:	4603      	mov	r3, r0
 800896a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800896e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8008972:	2b00      	cmp	r3, #0
 8008974:	d148      	bne.n	8008a08 <dir_register+0x184>
 8008976:	6a3b      	ldr	r3, [r7, #32]
 8008978:	3b01      	subs	r3, #1
 800897a:	623b      	str	r3, [r7, #32]
 800897c:	6a3b      	ldr	r3, [r7, #32]
 800897e:	2b00      	cmp	r3, #0
 8008980:	d042      	beq.n	8008a08 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	695a      	ldr	r2, [r3, #20]
 8008986:	6a3b      	ldr	r3, [r7, #32]
 8008988:	015b      	lsls	r3, r3, #5
 800898a:	1ad3      	subs	r3, r2, r3
 800898c:	4619      	mov	r1, r3
 800898e:	6878      	ldr	r0, [r7, #4]
 8008990:	f7ff fb69 	bl	8008066 <dir_sdi>
 8008994:	4603      	mov	r3, r0
 8008996:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 800899a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800899e:	2b00      	cmp	r3, #0
 80089a0:	d132      	bne.n	8008a08 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	3324      	adds	r3, #36	@ 0x24
 80089a6:	4618      	mov	r0, r3
 80089a8:	f7ff fe8a 	bl	80086c0 <sum_sfn>
 80089ac:	4603      	mov	r3, r0
 80089ae:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	69db      	ldr	r3, [r3, #28]
 80089b4:	4619      	mov	r1, r3
 80089b6:	69f8      	ldr	r0, [r7, #28]
 80089b8:	f7fe ffd8 	bl	800796c <move_window>
 80089bc:	4603      	mov	r3, r0
 80089be:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				if (res != FR_OK) break;
 80089c2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	d11d      	bne.n	8008a06 <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 80089ca:	69fb      	ldr	r3, [r7, #28]
 80089cc:	68d8      	ldr	r0, [r3, #12]
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	6a19      	ldr	r1, [r3, #32]
 80089d2:	6a3b      	ldr	r3, [r7, #32]
 80089d4:	b2da      	uxtb	r2, r3
 80089d6:	7efb      	ldrb	r3, [r7, #27]
 80089d8:	f7ff fd7c 	bl	80084d4 <put_lfn>
				fs->wflag = 1;
 80089dc:	69fb      	ldr	r3, [r7, #28]
 80089de:	2201      	movs	r2, #1
 80089e0:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 80089e2:	2100      	movs	r1, #0
 80089e4:	6878      	ldr	r0, [r7, #4]
 80089e6:	f7ff fbb9 	bl	800815c <dir_next>
 80089ea:	4603      	mov	r3, r0
 80089ec:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			} while (res == FR_OK && --nent);
 80089f0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	d107      	bne.n	8008a08 <dir_register+0x184>
 80089f8:	6a3b      	ldr	r3, [r7, #32]
 80089fa:	3b01      	subs	r3, #1
 80089fc:	623b      	str	r3, [r7, #32]
 80089fe:	6a3b      	ldr	r3, [r7, #32]
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	d1d5      	bne.n	80089b0 <dir_register+0x12c>
 8008a04:	e000      	b.n	8008a08 <dir_register+0x184>
				if (res != FR_OK) break;
 8008a06:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8008a08:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	d128      	bne.n	8008a62 <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	69db      	ldr	r3, [r3, #28]
 8008a14:	4619      	mov	r1, r3
 8008a16:	69f8      	ldr	r0, [r7, #28]
 8008a18:	f7fe ffa8 	bl	800796c <move_window>
 8008a1c:	4603      	mov	r3, r0
 8008a1e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 8008a22:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	d11b      	bne.n	8008a62 <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	6a1b      	ldr	r3, [r3, #32]
 8008a2e:	2220      	movs	r2, #32
 8008a30:	2100      	movs	r1, #0
 8008a32:	4618      	mov	r0, r3
 8008a34:	f7fe fd8d 	bl	8007552 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	6a18      	ldr	r0, [r3, #32]
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	3324      	adds	r3, #36	@ 0x24
 8008a40:	220b      	movs	r2, #11
 8008a42:	4619      	mov	r1, r3
 8008a44:	f7fe fd64 	bl	8007510 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	f893 202f 	ldrb.w	r2, [r3, #47]	@ 0x2f
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	6a1b      	ldr	r3, [r3, #32]
 8008a52:	330c      	adds	r3, #12
 8008a54:	f002 0218 	and.w	r2, r2, #24
 8008a58:	b2d2      	uxtb	r2, r2
 8008a5a:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 8008a5c:	69fb      	ldr	r3, [r7, #28]
 8008a5e:	2201      	movs	r2, #1
 8008a60:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8008a62:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8008a66:	4618      	mov	r0, r3
 8008a68:	3730      	adds	r7, #48	@ 0x30
 8008a6a:	46bd      	mov	sp, r7
 8008a6c:	bd80      	pop	{r7, pc}
 8008a6e:	bf00      	nop
 8008a70:	4ec4ec4f 	.word	0x4ec4ec4f

08008a74 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8008a74:	b580      	push	{r7, lr}
 8008a76:	b08a      	sub	sp, #40	@ 0x28
 8008a78:	af00      	add	r7, sp, #0
 8008a7a:	6078      	str	r0, [r7, #4]
 8008a7c:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 8008a7e:	683b      	ldr	r3, [r7, #0]
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	613b      	str	r3, [r7, #16]
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	68db      	ldr	r3, [r3, #12]
 8008a8a:	60fb      	str	r3, [r7, #12]
 8008a8c:	2300      	movs	r3, #0
 8008a8e:	617b      	str	r3, [r7, #20]
 8008a90:	697b      	ldr	r3, [r7, #20]
 8008a92:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 8008a94:	69bb      	ldr	r3, [r7, #24]
 8008a96:	1c5a      	adds	r2, r3, #1
 8008a98:	61ba      	str	r2, [r7, #24]
 8008a9a:	693a      	ldr	r2, [r7, #16]
 8008a9c:	4413      	add	r3, r2
 8008a9e:	781b      	ldrb	r3, [r3, #0]
 8008aa0:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 8008aa2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008aa4:	2b1f      	cmp	r3, #31
 8008aa6:	d940      	bls.n	8008b2a <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 8008aa8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008aaa:	2b2f      	cmp	r3, #47	@ 0x2f
 8008aac:	d006      	beq.n	8008abc <create_name+0x48>
 8008aae:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008ab0:	2b5c      	cmp	r3, #92	@ 0x5c
 8008ab2:	d110      	bne.n	8008ad6 <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8008ab4:	e002      	b.n	8008abc <create_name+0x48>
 8008ab6:	69bb      	ldr	r3, [r7, #24]
 8008ab8:	3301      	adds	r3, #1
 8008aba:	61bb      	str	r3, [r7, #24]
 8008abc:	693a      	ldr	r2, [r7, #16]
 8008abe:	69bb      	ldr	r3, [r7, #24]
 8008ac0:	4413      	add	r3, r2
 8008ac2:	781b      	ldrb	r3, [r3, #0]
 8008ac4:	2b2f      	cmp	r3, #47	@ 0x2f
 8008ac6:	d0f6      	beq.n	8008ab6 <create_name+0x42>
 8008ac8:	693a      	ldr	r2, [r7, #16]
 8008aca:	69bb      	ldr	r3, [r7, #24]
 8008acc:	4413      	add	r3, r2
 8008ace:	781b      	ldrb	r3, [r3, #0]
 8008ad0:	2b5c      	cmp	r3, #92	@ 0x5c
 8008ad2:	d0f0      	beq.n	8008ab6 <create_name+0x42>
			break;
 8008ad4:	e02a      	b.n	8008b2c <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 8008ad6:	697b      	ldr	r3, [r7, #20]
 8008ad8:	2bfe      	cmp	r3, #254	@ 0xfe
 8008ada:	d901      	bls.n	8008ae0 <create_name+0x6c>
 8008adc:	2306      	movs	r3, #6
 8008ade:	e17d      	b.n	8008ddc <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 8008ae0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008ae2:	b2db      	uxtb	r3, r3
 8008ae4:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 8008ae6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008ae8:	2101      	movs	r1, #1
 8008aea:	4618      	mov	r0, r3
 8008aec:	f001 fa44 	bl	8009f78 <ff_convert>
 8008af0:	4603      	mov	r3, r0
 8008af2:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8008af4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	d101      	bne.n	8008afe <create_name+0x8a>
 8008afa:	2306      	movs	r3, #6
 8008afc:	e16e      	b.n	8008ddc <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 8008afe:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008b00:	2b7f      	cmp	r3, #127	@ 0x7f
 8008b02:	d809      	bhi.n	8008b18 <create_name+0xa4>
 8008b04:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008b06:	4619      	mov	r1, r3
 8008b08:	488d      	ldr	r0, [pc, #564]	@ (8008d40 <create_name+0x2cc>)
 8008b0a:	f7fe fd64 	bl	80075d6 <chk_chr>
 8008b0e:	4603      	mov	r3, r0
 8008b10:	2b00      	cmp	r3, #0
 8008b12:	d001      	beq.n	8008b18 <create_name+0xa4>
 8008b14:	2306      	movs	r3, #6
 8008b16:	e161      	b.n	8008ddc <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 8008b18:	697b      	ldr	r3, [r7, #20]
 8008b1a:	1c5a      	adds	r2, r3, #1
 8008b1c:	617a      	str	r2, [r7, #20]
 8008b1e:	005b      	lsls	r3, r3, #1
 8008b20:	68fa      	ldr	r2, [r7, #12]
 8008b22:	4413      	add	r3, r2
 8008b24:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8008b26:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 8008b28:	e7b4      	b.n	8008a94 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 8008b2a:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8008b2c:	693a      	ldr	r2, [r7, #16]
 8008b2e:	69bb      	ldr	r3, [r7, #24]
 8008b30:	441a      	add	r2, r3
 8008b32:	683b      	ldr	r3, [r7, #0]
 8008b34:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8008b36:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008b38:	2b1f      	cmp	r3, #31
 8008b3a:	d801      	bhi.n	8008b40 <create_name+0xcc>
 8008b3c:	2304      	movs	r3, #4
 8008b3e:	e000      	b.n	8008b42 <create_name+0xce>
 8008b40:	2300      	movs	r3, #0
 8008b42:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8008b46:	e011      	b.n	8008b6c <create_name+0xf8>
		w = lfn[di - 1];
 8008b48:	697b      	ldr	r3, [r7, #20]
 8008b4a:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8008b4e:	3b01      	subs	r3, #1
 8008b50:	005b      	lsls	r3, r3, #1
 8008b52:	68fa      	ldr	r2, [r7, #12]
 8008b54:	4413      	add	r3, r2
 8008b56:	881b      	ldrh	r3, [r3, #0]
 8008b58:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w != ' ' && w != '.') break;
 8008b5a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008b5c:	2b20      	cmp	r3, #32
 8008b5e:	d002      	beq.n	8008b66 <create_name+0xf2>
 8008b60:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008b62:	2b2e      	cmp	r3, #46	@ 0x2e
 8008b64:	d106      	bne.n	8008b74 <create_name+0x100>
		di--;
 8008b66:	697b      	ldr	r3, [r7, #20]
 8008b68:	3b01      	subs	r3, #1
 8008b6a:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8008b6c:	697b      	ldr	r3, [r7, #20]
 8008b6e:	2b00      	cmp	r3, #0
 8008b70:	d1ea      	bne.n	8008b48 <create_name+0xd4>
 8008b72:	e000      	b.n	8008b76 <create_name+0x102>
		if (w != ' ' && w != '.') break;
 8008b74:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 8008b76:	697b      	ldr	r3, [r7, #20]
 8008b78:	005b      	lsls	r3, r3, #1
 8008b7a:	68fa      	ldr	r2, [r7, #12]
 8008b7c:	4413      	add	r3, r2
 8008b7e:	2200      	movs	r2, #0
 8008b80:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 8008b82:	697b      	ldr	r3, [r7, #20]
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	d101      	bne.n	8008b8c <create_name+0x118>
 8008b88:	2306      	movs	r3, #6
 8008b8a:	e127      	b.n	8008ddc <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	3324      	adds	r3, #36	@ 0x24
 8008b90:	220b      	movs	r2, #11
 8008b92:	2120      	movs	r1, #32
 8008b94:	4618      	mov	r0, r3
 8008b96:	f7fe fcdc 	bl	8007552 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 8008b9a:	2300      	movs	r3, #0
 8008b9c:	61bb      	str	r3, [r7, #24]
 8008b9e:	e002      	b.n	8008ba6 <create_name+0x132>
 8008ba0:	69bb      	ldr	r3, [r7, #24]
 8008ba2:	3301      	adds	r3, #1
 8008ba4:	61bb      	str	r3, [r7, #24]
 8008ba6:	69bb      	ldr	r3, [r7, #24]
 8008ba8:	005b      	lsls	r3, r3, #1
 8008baa:	68fa      	ldr	r2, [r7, #12]
 8008bac:	4413      	add	r3, r2
 8008bae:	881b      	ldrh	r3, [r3, #0]
 8008bb0:	2b20      	cmp	r3, #32
 8008bb2:	d0f5      	beq.n	8008ba0 <create_name+0x12c>
 8008bb4:	69bb      	ldr	r3, [r7, #24]
 8008bb6:	005b      	lsls	r3, r3, #1
 8008bb8:	68fa      	ldr	r2, [r7, #12]
 8008bba:	4413      	add	r3, r2
 8008bbc:	881b      	ldrh	r3, [r3, #0]
 8008bbe:	2b2e      	cmp	r3, #46	@ 0x2e
 8008bc0:	d0ee      	beq.n	8008ba0 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 8008bc2:	69bb      	ldr	r3, [r7, #24]
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	d009      	beq.n	8008bdc <create_name+0x168>
 8008bc8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008bcc:	f043 0303 	orr.w	r3, r3, #3
 8008bd0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 8008bd4:	e002      	b.n	8008bdc <create_name+0x168>
 8008bd6:	697b      	ldr	r3, [r7, #20]
 8008bd8:	3b01      	subs	r3, #1
 8008bda:	617b      	str	r3, [r7, #20]
 8008bdc:	697b      	ldr	r3, [r7, #20]
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	d009      	beq.n	8008bf6 <create_name+0x182>
 8008be2:	697b      	ldr	r3, [r7, #20]
 8008be4:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8008be8:	3b01      	subs	r3, #1
 8008bea:	005b      	lsls	r3, r3, #1
 8008bec:	68fa      	ldr	r2, [r7, #12]
 8008bee:	4413      	add	r3, r2
 8008bf0:	881b      	ldrh	r3, [r3, #0]
 8008bf2:	2b2e      	cmp	r3, #46	@ 0x2e
 8008bf4:	d1ef      	bne.n	8008bd6 <create_name+0x162>

	i = b = 0; ni = 8;
 8008bf6:	2300      	movs	r3, #0
 8008bf8:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8008bfc:	2300      	movs	r3, #0
 8008bfe:	623b      	str	r3, [r7, #32]
 8008c00:	2308      	movs	r3, #8
 8008c02:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 8008c04:	69bb      	ldr	r3, [r7, #24]
 8008c06:	1c5a      	adds	r2, r3, #1
 8008c08:	61ba      	str	r2, [r7, #24]
 8008c0a:	005b      	lsls	r3, r3, #1
 8008c0c:	68fa      	ldr	r2, [r7, #12]
 8008c0e:	4413      	add	r3, r2
 8008c10:	881b      	ldrh	r3, [r3, #0]
 8008c12:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) break;					/* Break on end of the LFN */
 8008c14:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	f000 8090 	beq.w	8008d3c <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8008c1c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008c1e:	2b20      	cmp	r3, #32
 8008c20:	d006      	beq.n	8008c30 <create_name+0x1bc>
 8008c22:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008c24:	2b2e      	cmp	r3, #46	@ 0x2e
 8008c26:	d10a      	bne.n	8008c3e <create_name+0x1ca>
 8008c28:	69ba      	ldr	r2, [r7, #24]
 8008c2a:	697b      	ldr	r3, [r7, #20]
 8008c2c:	429a      	cmp	r2, r3
 8008c2e:	d006      	beq.n	8008c3e <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 8008c30:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008c34:	f043 0303 	orr.w	r3, r3, #3
 8008c38:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8008c3c:	e07d      	b.n	8008d3a <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 8008c3e:	6a3a      	ldr	r2, [r7, #32]
 8008c40:	69fb      	ldr	r3, [r7, #28]
 8008c42:	429a      	cmp	r2, r3
 8008c44:	d203      	bcs.n	8008c4e <create_name+0x1da>
 8008c46:	69ba      	ldr	r2, [r7, #24]
 8008c48:	697b      	ldr	r3, [r7, #20]
 8008c4a:	429a      	cmp	r2, r3
 8008c4c:	d123      	bne.n	8008c96 <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 8008c4e:	69fb      	ldr	r3, [r7, #28]
 8008c50:	2b0b      	cmp	r3, #11
 8008c52:	d106      	bne.n	8008c62 <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 8008c54:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008c58:	f043 0303 	orr.w	r3, r3, #3
 8008c5c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8008c60:	e075      	b.n	8008d4e <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 8008c62:	69ba      	ldr	r2, [r7, #24]
 8008c64:	697b      	ldr	r3, [r7, #20]
 8008c66:	429a      	cmp	r2, r3
 8008c68:	d005      	beq.n	8008c76 <create_name+0x202>
 8008c6a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008c6e:	f043 0303 	orr.w	r3, r3, #3
 8008c72:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (si > di) break;			/* No extension */
 8008c76:	69ba      	ldr	r2, [r7, #24]
 8008c78:	697b      	ldr	r3, [r7, #20]
 8008c7a:	429a      	cmp	r2, r3
 8008c7c:	d866      	bhi.n	8008d4c <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 8008c7e:	697b      	ldr	r3, [r7, #20]
 8008c80:	61bb      	str	r3, [r7, #24]
 8008c82:	2308      	movs	r3, #8
 8008c84:	623b      	str	r3, [r7, #32]
 8008c86:	230b      	movs	r3, #11
 8008c88:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 8008c8a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8008c8e:	009b      	lsls	r3, r3, #2
 8008c90:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8008c94:	e051      	b.n	8008d3a <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 8008c96:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008c98:	2b7f      	cmp	r3, #127	@ 0x7f
 8008c9a:	d914      	bls.n	8008cc6 <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8008c9c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008c9e:	2100      	movs	r1, #0
 8008ca0:	4618      	mov	r0, r3
 8008ca2:	f001 f969 	bl	8009f78 <ff_convert>
 8008ca6:	4603      	mov	r3, r0
 8008ca8:	84bb      	strh	r3, [r7, #36]	@ 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 8008caa:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	d004      	beq.n	8008cba <create_name+0x246>
 8008cb0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008cb2:	3b80      	subs	r3, #128	@ 0x80
 8008cb4:	4a23      	ldr	r2, [pc, #140]	@ (8008d44 <create_name+0x2d0>)
 8008cb6:	5cd3      	ldrb	r3, [r2, r3]
 8008cb8:	84bb      	strh	r3, [r7, #36]	@ 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 8008cba:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008cbe:	f043 0302 	orr.w	r3, r3, #2
 8008cc2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 8008cc6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008cc8:	2b00      	cmp	r3, #0
 8008cca:	d007      	beq.n	8008cdc <create_name+0x268>
 8008ccc:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008cce:	4619      	mov	r1, r3
 8008cd0:	481d      	ldr	r0, [pc, #116]	@ (8008d48 <create_name+0x2d4>)
 8008cd2:	f7fe fc80 	bl	80075d6 <chk_chr>
 8008cd6:	4603      	mov	r3, r0
 8008cd8:	2b00      	cmp	r3, #0
 8008cda:	d008      	beq.n	8008cee <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8008cdc:	235f      	movs	r3, #95	@ 0x5f
 8008cde:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8008ce0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008ce4:	f043 0303 	orr.w	r3, r3, #3
 8008ce8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8008cec:	e01b      	b.n	8008d26 <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 8008cee:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008cf0:	2b40      	cmp	r3, #64	@ 0x40
 8008cf2:	d909      	bls.n	8008d08 <create_name+0x294>
 8008cf4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008cf6:	2b5a      	cmp	r3, #90	@ 0x5a
 8008cf8:	d806      	bhi.n	8008d08 <create_name+0x294>
					b |= 2;
 8008cfa:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8008cfe:	f043 0302 	orr.w	r3, r3, #2
 8008d02:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8008d06:	e00e      	b.n	8008d26 <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 8008d08:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008d0a:	2b60      	cmp	r3, #96	@ 0x60
 8008d0c:	d90b      	bls.n	8008d26 <create_name+0x2b2>
 8008d0e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008d10:	2b7a      	cmp	r3, #122	@ 0x7a
 8008d12:	d808      	bhi.n	8008d26 <create_name+0x2b2>
						b |= 1; w -= 0x20;
 8008d14:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8008d18:	f043 0301 	orr.w	r3, r3, #1
 8008d1c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8008d20:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008d22:	3b20      	subs	r3, #32
 8008d24:	84bb      	strh	r3, [r7, #36]	@ 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 8008d26:	6a3b      	ldr	r3, [r7, #32]
 8008d28:	1c5a      	adds	r2, r3, #1
 8008d2a:	623a      	str	r2, [r7, #32]
 8008d2c:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8008d2e:	b2d1      	uxtb	r1, r2
 8008d30:	687a      	ldr	r2, [r7, #4]
 8008d32:	4413      	add	r3, r2
 8008d34:	460a      	mov	r2, r1
 8008d36:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
		w = lfn[si++];					/* Get an LFN character */
 8008d3a:	e763      	b.n	8008c04 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 8008d3c:	bf00      	nop
 8008d3e:	e006      	b.n	8008d4e <create_name+0x2da>
 8008d40:	0800aad0 	.word	0x0800aad0
 8008d44:	0800ab74 	.word	0x0800ab74
 8008d48:	0800aadc 	.word	0x0800aadc
			if (si > di) break;			/* No extension */
 8008d4c:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8008d54:	2be5      	cmp	r3, #229	@ 0xe5
 8008d56:	d103      	bne.n	8008d60 <create_name+0x2ec>
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	2205      	movs	r2, #5
 8008d5c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

	if (ni == 8) b <<= 2;
 8008d60:	69fb      	ldr	r3, [r7, #28]
 8008d62:	2b08      	cmp	r3, #8
 8008d64:	d104      	bne.n	8008d70 <create_name+0x2fc>
 8008d66:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8008d6a:	009b      	lsls	r3, r3, #2
 8008d6c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 8008d70:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8008d74:	f003 030c 	and.w	r3, r3, #12
 8008d78:	2b0c      	cmp	r3, #12
 8008d7a:	d005      	beq.n	8008d88 <create_name+0x314>
 8008d7c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8008d80:	f003 0303 	and.w	r3, r3, #3
 8008d84:	2b03      	cmp	r3, #3
 8008d86:	d105      	bne.n	8008d94 <create_name+0x320>
 8008d88:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008d8c:	f043 0302 	orr.w	r3, r3, #2
 8008d90:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8008d94:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008d98:	f003 0302 	and.w	r3, r3, #2
 8008d9c:	2b00      	cmp	r3, #0
 8008d9e:	d117      	bne.n	8008dd0 <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8008da0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8008da4:	f003 0303 	and.w	r3, r3, #3
 8008da8:	2b01      	cmp	r3, #1
 8008daa:	d105      	bne.n	8008db8 <create_name+0x344>
 8008dac:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008db0:	f043 0310 	orr.w	r3, r3, #16
 8008db4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8008db8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8008dbc:	f003 030c 	and.w	r3, r3, #12
 8008dc0:	2b04      	cmp	r3, #4
 8008dc2:	d105      	bne.n	8008dd0 <create_name+0x35c>
 8008dc4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008dc8:	f043 0308 	orr.w	r3, r3, #8
 8008dcc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8008dd6:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f

	return FR_OK;
 8008dda:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 8008ddc:	4618      	mov	r0, r3
 8008dde:	3728      	adds	r7, #40	@ 0x28
 8008de0:	46bd      	mov	sp, r7
 8008de2:	bd80      	pop	{r7, pc}

08008de4 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8008de4:	b580      	push	{r7, lr}
 8008de6:	b086      	sub	sp, #24
 8008de8:	af00      	add	r7, sp, #0
 8008dea:	6078      	str	r0, [r7, #4]
 8008dec:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8008df2:	693b      	ldr	r3, [r7, #16]
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8008df8:	e002      	b.n	8008e00 <follow_path+0x1c>
 8008dfa:	683b      	ldr	r3, [r7, #0]
 8008dfc:	3301      	adds	r3, #1
 8008dfe:	603b      	str	r3, [r7, #0]
 8008e00:	683b      	ldr	r3, [r7, #0]
 8008e02:	781b      	ldrb	r3, [r3, #0]
 8008e04:	2b2f      	cmp	r3, #47	@ 0x2f
 8008e06:	d0f8      	beq.n	8008dfa <follow_path+0x16>
 8008e08:	683b      	ldr	r3, [r7, #0]
 8008e0a:	781b      	ldrb	r3, [r3, #0]
 8008e0c:	2b5c      	cmp	r3, #92	@ 0x5c
 8008e0e:	d0f4      	beq.n	8008dfa <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8008e10:	693b      	ldr	r3, [r7, #16]
 8008e12:	2200      	movs	r2, #0
 8008e14:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8008e16:	683b      	ldr	r3, [r7, #0]
 8008e18:	781b      	ldrb	r3, [r3, #0]
 8008e1a:	2b1f      	cmp	r3, #31
 8008e1c:	d80a      	bhi.n	8008e34 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	2280      	movs	r2, #128	@ 0x80
 8008e22:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 8008e26:	2100      	movs	r1, #0
 8008e28:	6878      	ldr	r0, [r7, #4]
 8008e2a:	f7ff f91c 	bl	8008066 <dir_sdi>
 8008e2e:	4603      	mov	r3, r0
 8008e30:	75fb      	strb	r3, [r7, #23]
 8008e32:	e043      	b.n	8008ebc <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8008e34:	463b      	mov	r3, r7
 8008e36:	4619      	mov	r1, r3
 8008e38:	6878      	ldr	r0, [r7, #4]
 8008e3a:	f7ff fe1b 	bl	8008a74 <create_name>
 8008e3e:	4603      	mov	r3, r0
 8008e40:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8008e42:	7dfb      	ldrb	r3, [r7, #23]
 8008e44:	2b00      	cmp	r3, #0
 8008e46:	d134      	bne.n	8008eb2 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 8008e48:	6878      	ldr	r0, [r7, #4]
 8008e4a:	f7ff fc5a 	bl	8008702 <dir_find>
 8008e4e:	4603      	mov	r3, r0
 8008e50:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8008e58:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8008e5a:	7dfb      	ldrb	r3, [r7, #23]
 8008e5c:	2b00      	cmp	r3, #0
 8008e5e:	d00a      	beq.n	8008e76 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8008e60:	7dfb      	ldrb	r3, [r7, #23]
 8008e62:	2b04      	cmp	r3, #4
 8008e64:	d127      	bne.n	8008eb6 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8008e66:	7afb      	ldrb	r3, [r7, #11]
 8008e68:	f003 0304 	and.w	r3, r3, #4
 8008e6c:	2b00      	cmp	r3, #0
 8008e6e:	d122      	bne.n	8008eb6 <follow_path+0xd2>
 8008e70:	2305      	movs	r3, #5
 8008e72:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8008e74:	e01f      	b.n	8008eb6 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8008e76:	7afb      	ldrb	r3, [r7, #11]
 8008e78:	f003 0304 	and.w	r3, r3, #4
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	d11c      	bne.n	8008eba <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8008e80:	693b      	ldr	r3, [r7, #16]
 8008e82:	799b      	ldrb	r3, [r3, #6]
 8008e84:	f003 0310 	and.w	r3, r3, #16
 8008e88:	2b00      	cmp	r3, #0
 8008e8a:	d102      	bne.n	8008e92 <follow_path+0xae>
				res = FR_NO_PATH; break;
 8008e8c:	2305      	movs	r3, #5
 8008e8e:	75fb      	strb	r3, [r7, #23]
 8008e90:	e014      	b.n	8008ebc <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8008e92:	68fb      	ldr	r3, [r7, #12]
 8008e94:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	695b      	ldr	r3, [r3, #20]
 8008e9c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008ea0:	4413      	add	r3, r2
 8008ea2:	4619      	mov	r1, r3
 8008ea4:	68f8      	ldr	r0, [r7, #12]
 8008ea6:	f7ff fa65 	bl	8008374 <ld_clust>
 8008eaa:	4602      	mov	r2, r0
 8008eac:	693b      	ldr	r3, [r7, #16]
 8008eae:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8008eb0:	e7c0      	b.n	8008e34 <follow_path+0x50>
			if (res != FR_OK) break;
 8008eb2:	bf00      	nop
 8008eb4:	e002      	b.n	8008ebc <follow_path+0xd8>
				break;
 8008eb6:	bf00      	nop
 8008eb8:	e000      	b.n	8008ebc <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8008eba:	bf00      	nop
			}
		}
	}

	return res;
 8008ebc:	7dfb      	ldrb	r3, [r7, #23]
}
 8008ebe:	4618      	mov	r0, r3
 8008ec0:	3718      	adds	r7, #24
 8008ec2:	46bd      	mov	sp, r7
 8008ec4:	bd80      	pop	{r7, pc}

08008ec6 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8008ec6:	b480      	push	{r7}
 8008ec8:	b087      	sub	sp, #28
 8008eca:	af00      	add	r7, sp, #0
 8008ecc:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8008ece:	f04f 33ff 	mov.w	r3, #4294967295
 8008ed2:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	d031      	beq.n	8008f40 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	617b      	str	r3, [r7, #20]
 8008ee2:	e002      	b.n	8008eea <get_ldnumber+0x24>
 8008ee4:	697b      	ldr	r3, [r7, #20]
 8008ee6:	3301      	adds	r3, #1
 8008ee8:	617b      	str	r3, [r7, #20]
 8008eea:	697b      	ldr	r3, [r7, #20]
 8008eec:	781b      	ldrb	r3, [r3, #0]
 8008eee:	2b1f      	cmp	r3, #31
 8008ef0:	d903      	bls.n	8008efa <get_ldnumber+0x34>
 8008ef2:	697b      	ldr	r3, [r7, #20]
 8008ef4:	781b      	ldrb	r3, [r3, #0]
 8008ef6:	2b3a      	cmp	r3, #58	@ 0x3a
 8008ef8:	d1f4      	bne.n	8008ee4 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8008efa:	697b      	ldr	r3, [r7, #20]
 8008efc:	781b      	ldrb	r3, [r3, #0]
 8008efe:	2b3a      	cmp	r3, #58	@ 0x3a
 8008f00:	d11c      	bne.n	8008f3c <get_ldnumber+0x76>
			tp = *path;
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8008f08:	68fb      	ldr	r3, [r7, #12]
 8008f0a:	1c5a      	adds	r2, r3, #1
 8008f0c:	60fa      	str	r2, [r7, #12]
 8008f0e:	781b      	ldrb	r3, [r3, #0]
 8008f10:	3b30      	subs	r3, #48	@ 0x30
 8008f12:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8008f14:	68bb      	ldr	r3, [r7, #8]
 8008f16:	2b09      	cmp	r3, #9
 8008f18:	d80e      	bhi.n	8008f38 <get_ldnumber+0x72>
 8008f1a:	68fa      	ldr	r2, [r7, #12]
 8008f1c:	697b      	ldr	r3, [r7, #20]
 8008f1e:	429a      	cmp	r2, r3
 8008f20:	d10a      	bne.n	8008f38 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8008f22:	68bb      	ldr	r3, [r7, #8]
 8008f24:	2b00      	cmp	r3, #0
 8008f26:	d107      	bne.n	8008f38 <get_ldnumber+0x72>
					vol = (int)i;
 8008f28:	68bb      	ldr	r3, [r7, #8]
 8008f2a:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8008f2c:	697b      	ldr	r3, [r7, #20]
 8008f2e:	3301      	adds	r3, #1
 8008f30:	617b      	str	r3, [r7, #20]
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	697a      	ldr	r2, [r7, #20]
 8008f36:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8008f38:	693b      	ldr	r3, [r7, #16]
 8008f3a:	e002      	b.n	8008f42 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8008f3c:	2300      	movs	r3, #0
 8008f3e:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8008f40:	693b      	ldr	r3, [r7, #16]
}
 8008f42:	4618      	mov	r0, r3
 8008f44:	371c      	adds	r7, #28
 8008f46:	46bd      	mov	sp, r7
 8008f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f4c:	4770      	bx	lr
	...

08008f50 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8008f50:	b580      	push	{r7, lr}
 8008f52:	b082      	sub	sp, #8
 8008f54:	af00      	add	r7, sp, #0
 8008f56:	6078      	str	r0, [r7, #4]
 8008f58:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	2200      	movs	r2, #0
 8008f5e:	70da      	strb	r2, [r3, #3]
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	f04f 32ff 	mov.w	r2, #4294967295
 8008f66:	631a      	str	r2, [r3, #48]	@ 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8008f68:	6839      	ldr	r1, [r7, #0]
 8008f6a:	6878      	ldr	r0, [r7, #4]
 8008f6c:	f7fe fcfe 	bl	800796c <move_window>
 8008f70:	4603      	mov	r3, r0
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	d001      	beq.n	8008f7a <check_fs+0x2a>
 8008f76:	2304      	movs	r3, #4
 8008f78:	e038      	b.n	8008fec <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	3334      	adds	r3, #52	@ 0x34
 8008f7e:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8008f82:	4618      	mov	r0, r3
 8008f84:	f7fe fa42 	bl	800740c <ld_word>
 8008f88:	4603      	mov	r3, r0
 8008f8a:	461a      	mov	r2, r3
 8008f8c:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8008f90:	429a      	cmp	r2, r3
 8008f92:	d001      	beq.n	8008f98 <check_fs+0x48>
 8008f94:	2303      	movs	r3, #3
 8008f96:	e029      	b.n	8008fec <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8008f9e:	2be9      	cmp	r3, #233	@ 0xe9
 8008fa0:	d009      	beq.n	8008fb6 <check_fs+0x66>
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8008fa8:	2beb      	cmp	r3, #235	@ 0xeb
 8008faa:	d11e      	bne.n	8008fea <check_fs+0x9a>
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8008fb2:	2b90      	cmp	r3, #144	@ 0x90
 8008fb4:	d119      	bne.n	8008fea <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	3334      	adds	r3, #52	@ 0x34
 8008fba:	3336      	adds	r3, #54	@ 0x36
 8008fbc:	4618      	mov	r0, r3
 8008fbe:	f7fe fa3d 	bl	800743c <ld_dword>
 8008fc2:	4603      	mov	r3, r0
 8008fc4:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8008fc8:	4a0a      	ldr	r2, [pc, #40]	@ (8008ff4 <check_fs+0xa4>)
 8008fca:	4293      	cmp	r3, r2
 8008fcc:	d101      	bne.n	8008fd2 <check_fs+0x82>
 8008fce:	2300      	movs	r3, #0
 8008fd0:	e00c      	b.n	8008fec <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	3334      	adds	r3, #52	@ 0x34
 8008fd6:	3352      	adds	r3, #82	@ 0x52
 8008fd8:	4618      	mov	r0, r3
 8008fda:	f7fe fa2f 	bl	800743c <ld_dword>
 8008fde:	4603      	mov	r3, r0
 8008fe0:	4a05      	ldr	r2, [pc, #20]	@ (8008ff8 <check_fs+0xa8>)
 8008fe2:	4293      	cmp	r3, r2
 8008fe4:	d101      	bne.n	8008fea <check_fs+0x9a>
 8008fe6:	2300      	movs	r3, #0
 8008fe8:	e000      	b.n	8008fec <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8008fea:	2302      	movs	r3, #2
}
 8008fec:	4618      	mov	r0, r3
 8008fee:	3708      	adds	r7, #8
 8008ff0:	46bd      	mov	sp, r7
 8008ff2:	bd80      	pop	{r7, pc}
 8008ff4:	00544146 	.word	0x00544146
 8008ff8:	33544146 	.word	0x33544146

08008ffc <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8008ffc:	b580      	push	{r7, lr}
 8008ffe:	b096      	sub	sp, #88	@ 0x58
 8009000:	af00      	add	r7, sp, #0
 8009002:	60f8      	str	r0, [r7, #12]
 8009004:	60b9      	str	r1, [r7, #8]
 8009006:	4613      	mov	r3, r2
 8009008:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800900a:	68bb      	ldr	r3, [r7, #8]
 800900c:	2200      	movs	r2, #0
 800900e:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8009010:	68f8      	ldr	r0, [r7, #12]
 8009012:	f7ff ff58 	bl	8008ec6 <get_ldnumber>
 8009016:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8009018:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800901a:	2b00      	cmp	r3, #0
 800901c:	da01      	bge.n	8009022 <find_volume+0x26>
 800901e:	230b      	movs	r3, #11
 8009020:	e22d      	b.n	800947e <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8009022:	4aa1      	ldr	r2, [pc, #644]	@ (80092a8 <find_volume+0x2ac>)
 8009024:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009026:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800902a:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800902c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800902e:	2b00      	cmp	r3, #0
 8009030:	d101      	bne.n	8009036 <find_volume+0x3a>
 8009032:	230c      	movs	r3, #12
 8009034:	e223      	b.n	800947e <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8009036:	68bb      	ldr	r3, [r7, #8]
 8009038:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800903a:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800903c:	79fb      	ldrb	r3, [r7, #7]
 800903e:	f023 0301 	bic.w	r3, r3, #1
 8009042:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8009044:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009046:	781b      	ldrb	r3, [r3, #0]
 8009048:	2b00      	cmp	r3, #0
 800904a:	d01a      	beq.n	8009082 <find_volume+0x86>
		stat = disk_status(fs->drv);
 800904c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800904e:	785b      	ldrb	r3, [r3, #1]
 8009050:	4618      	mov	r0, r3
 8009052:	f7fe f93d 	bl	80072d0 <disk_status>
 8009056:	4603      	mov	r3, r0
 8009058:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800905c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8009060:	f003 0301 	and.w	r3, r3, #1
 8009064:	2b00      	cmp	r3, #0
 8009066:	d10c      	bne.n	8009082 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8009068:	79fb      	ldrb	r3, [r7, #7]
 800906a:	2b00      	cmp	r3, #0
 800906c:	d007      	beq.n	800907e <find_volume+0x82>
 800906e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8009072:	f003 0304 	and.w	r3, r3, #4
 8009076:	2b00      	cmp	r3, #0
 8009078:	d001      	beq.n	800907e <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800907a:	230a      	movs	r3, #10
 800907c:	e1ff      	b.n	800947e <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 800907e:	2300      	movs	r3, #0
 8009080:	e1fd      	b.n	800947e <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8009082:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009084:	2200      	movs	r2, #0
 8009086:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8009088:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800908a:	b2da      	uxtb	r2, r3
 800908c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800908e:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8009090:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009092:	785b      	ldrb	r3, [r3, #1]
 8009094:	4618      	mov	r0, r3
 8009096:	f7fe f935 	bl	8007304 <disk_initialize>
 800909a:	4603      	mov	r3, r0
 800909c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 80090a0:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80090a4:	f003 0301 	and.w	r3, r3, #1
 80090a8:	2b00      	cmp	r3, #0
 80090aa:	d001      	beq.n	80090b0 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 80090ac:	2303      	movs	r3, #3
 80090ae:	e1e6      	b.n	800947e <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 80090b0:	79fb      	ldrb	r3, [r7, #7]
 80090b2:	2b00      	cmp	r3, #0
 80090b4:	d007      	beq.n	80090c6 <find_volume+0xca>
 80090b6:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80090ba:	f003 0304 	and.w	r3, r3, #4
 80090be:	2b00      	cmp	r3, #0
 80090c0:	d001      	beq.n	80090c6 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 80090c2:	230a      	movs	r3, #10
 80090c4:	e1db      	b.n	800947e <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 80090c6:	2300      	movs	r3, #0
 80090c8:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 80090ca:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80090cc:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80090ce:	f7ff ff3f 	bl	8008f50 <check_fs>
 80090d2:	4603      	mov	r3, r0
 80090d4:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 80090d8:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80090dc:	2b02      	cmp	r3, #2
 80090de:	d149      	bne.n	8009174 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80090e0:	2300      	movs	r3, #0
 80090e2:	643b      	str	r3, [r7, #64]	@ 0x40
 80090e4:	e01e      	b.n	8009124 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 80090e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80090e8:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 80090ec:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80090ee:	011b      	lsls	r3, r3, #4
 80090f0:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 80090f4:	4413      	add	r3, r2
 80090f6:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 80090f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80090fa:	3304      	adds	r3, #4
 80090fc:	781b      	ldrb	r3, [r3, #0]
 80090fe:	2b00      	cmp	r3, #0
 8009100:	d006      	beq.n	8009110 <find_volume+0x114>
 8009102:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009104:	3308      	adds	r3, #8
 8009106:	4618      	mov	r0, r3
 8009108:	f7fe f998 	bl	800743c <ld_dword>
 800910c:	4602      	mov	r2, r0
 800910e:	e000      	b.n	8009112 <find_volume+0x116>
 8009110:	2200      	movs	r2, #0
 8009112:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009114:	009b      	lsls	r3, r3, #2
 8009116:	3358      	adds	r3, #88	@ 0x58
 8009118:	443b      	add	r3, r7
 800911a:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800911e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009120:	3301      	adds	r3, #1
 8009122:	643b      	str	r3, [r7, #64]	@ 0x40
 8009124:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009126:	2b03      	cmp	r3, #3
 8009128:	d9dd      	bls.n	80090e6 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800912a:	2300      	movs	r3, #0
 800912c:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 800912e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009130:	2b00      	cmp	r3, #0
 8009132:	d002      	beq.n	800913a <find_volume+0x13e>
 8009134:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009136:	3b01      	subs	r3, #1
 8009138:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800913a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800913c:	009b      	lsls	r3, r3, #2
 800913e:	3358      	adds	r3, #88	@ 0x58
 8009140:	443b      	add	r3, r7
 8009142:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8009146:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8009148:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800914a:	2b00      	cmp	r3, #0
 800914c:	d005      	beq.n	800915a <find_volume+0x15e>
 800914e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8009150:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8009152:	f7ff fefd 	bl	8008f50 <check_fs>
 8009156:	4603      	mov	r3, r0
 8009158:	e000      	b.n	800915c <find_volume+0x160>
 800915a:	2303      	movs	r3, #3
 800915c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8009160:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8009164:	2b01      	cmp	r3, #1
 8009166:	d905      	bls.n	8009174 <find_volume+0x178>
 8009168:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800916a:	3301      	adds	r3, #1
 800916c:	643b      	str	r3, [r7, #64]	@ 0x40
 800916e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009170:	2b03      	cmp	r3, #3
 8009172:	d9e2      	bls.n	800913a <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8009174:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8009178:	2b04      	cmp	r3, #4
 800917a:	d101      	bne.n	8009180 <find_volume+0x184>
 800917c:	2301      	movs	r3, #1
 800917e:	e17e      	b.n	800947e <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8009180:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8009184:	2b01      	cmp	r3, #1
 8009186:	d901      	bls.n	800918c <find_volume+0x190>
 8009188:	230d      	movs	r3, #13
 800918a:	e178      	b.n	800947e <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800918c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800918e:	3334      	adds	r3, #52	@ 0x34
 8009190:	330b      	adds	r3, #11
 8009192:	4618      	mov	r0, r3
 8009194:	f7fe f93a 	bl	800740c <ld_word>
 8009198:	4603      	mov	r3, r0
 800919a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800919e:	d001      	beq.n	80091a4 <find_volume+0x1a8>
 80091a0:	230d      	movs	r3, #13
 80091a2:	e16c      	b.n	800947e <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 80091a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80091a6:	3334      	adds	r3, #52	@ 0x34
 80091a8:	3316      	adds	r3, #22
 80091aa:	4618      	mov	r0, r3
 80091ac:	f7fe f92e 	bl	800740c <ld_word>
 80091b0:	4603      	mov	r3, r0
 80091b2:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 80091b4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80091b6:	2b00      	cmp	r3, #0
 80091b8:	d106      	bne.n	80091c8 <find_volume+0x1cc>
 80091ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80091bc:	3334      	adds	r3, #52	@ 0x34
 80091be:	3324      	adds	r3, #36	@ 0x24
 80091c0:	4618      	mov	r0, r3
 80091c2:	f7fe f93b 	bl	800743c <ld_dword>
 80091c6:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 80091c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80091ca:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80091cc:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 80091ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80091d0:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 80091d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80091d6:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 80091d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80091da:	789b      	ldrb	r3, [r3, #2]
 80091dc:	2b01      	cmp	r3, #1
 80091de:	d005      	beq.n	80091ec <find_volume+0x1f0>
 80091e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80091e2:	789b      	ldrb	r3, [r3, #2]
 80091e4:	2b02      	cmp	r3, #2
 80091e6:	d001      	beq.n	80091ec <find_volume+0x1f0>
 80091e8:	230d      	movs	r3, #13
 80091ea:	e148      	b.n	800947e <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 80091ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80091ee:	789b      	ldrb	r3, [r3, #2]
 80091f0:	461a      	mov	r2, r3
 80091f2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80091f4:	fb02 f303 	mul.w	r3, r2, r3
 80091f8:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 80091fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80091fc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009200:	461a      	mov	r2, r3
 8009202:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009204:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8009206:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009208:	895b      	ldrh	r3, [r3, #10]
 800920a:	2b00      	cmp	r3, #0
 800920c:	d008      	beq.n	8009220 <find_volume+0x224>
 800920e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009210:	895b      	ldrh	r3, [r3, #10]
 8009212:	461a      	mov	r2, r3
 8009214:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009216:	895b      	ldrh	r3, [r3, #10]
 8009218:	3b01      	subs	r3, #1
 800921a:	4013      	ands	r3, r2
 800921c:	2b00      	cmp	r3, #0
 800921e:	d001      	beq.n	8009224 <find_volume+0x228>
 8009220:	230d      	movs	r3, #13
 8009222:	e12c      	b.n	800947e <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8009224:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009226:	3334      	adds	r3, #52	@ 0x34
 8009228:	3311      	adds	r3, #17
 800922a:	4618      	mov	r0, r3
 800922c:	f7fe f8ee 	bl	800740c <ld_word>
 8009230:	4603      	mov	r3, r0
 8009232:	461a      	mov	r2, r3
 8009234:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009236:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8009238:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800923a:	891b      	ldrh	r3, [r3, #8]
 800923c:	f003 030f 	and.w	r3, r3, #15
 8009240:	b29b      	uxth	r3, r3
 8009242:	2b00      	cmp	r3, #0
 8009244:	d001      	beq.n	800924a <find_volume+0x24e>
 8009246:	230d      	movs	r3, #13
 8009248:	e119      	b.n	800947e <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800924a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800924c:	3334      	adds	r3, #52	@ 0x34
 800924e:	3313      	adds	r3, #19
 8009250:	4618      	mov	r0, r3
 8009252:	f7fe f8db 	bl	800740c <ld_word>
 8009256:	4603      	mov	r3, r0
 8009258:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800925a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800925c:	2b00      	cmp	r3, #0
 800925e:	d106      	bne.n	800926e <find_volume+0x272>
 8009260:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009262:	3334      	adds	r3, #52	@ 0x34
 8009264:	3320      	adds	r3, #32
 8009266:	4618      	mov	r0, r3
 8009268:	f7fe f8e8 	bl	800743c <ld_dword>
 800926c:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800926e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009270:	3334      	adds	r3, #52	@ 0x34
 8009272:	330e      	adds	r3, #14
 8009274:	4618      	mov	r0, r3
 8009276:	f7fe f8c9 	bl	800740c <ld_word>
 800927a:	4603      	mov	r3, r0
 800927c:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800927e:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8009280:	2b00      	cmp	r3, #0
 8009282:	d101      	bne.n	8009288 <find_volume+0x28c>
 8009284:	230d      	movs	r3, #13
 8009286:	e0fa      	b.n	800947e <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8009288:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800928a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800928c:	4413      	add	r3, r2
 800928e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009290:	8912      	ldrh	r2, [r2, #8]
 8009292:	0912      	lsrs	r2, r2, #4
 8009294:	b292      	uxth	r2, r2
 8009296:	4413      	add	r3, r2
 8009298:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800929a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800929c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800929e:	429a      	cmp	r2, r3
 80092a0:	d204      	bcs.n	80092ac <find_volume+0x2b0>
 80092a2:	230d      	movs	r3, #13
 80092a4:	e0eb      	b.n	800947e <find_volume+0x482>
 80092a6:	bf00      	nop
 80092a8:	20000f6c 	.word	0x20000f6c
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 80092ac:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80092ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80092b0:	1ad3      	subs	r3, r2, r3
 80092b2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80092b4:	8952      	ldrh	r2, [r2, #10]
 80092b6:	fbb3 f3f2 	udiv	r3, r3, r2
 80092ba:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 80092bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80092be:	2b00      	cmp	r3, #0
 80092c0:	d101      	bne.n	80092c6 <find_volume+0x2ca>
 80092c2:	230d      	movs	r3, #13
 80092c4:	e0db      	b.n	800947e <find_volume+0x482>
		fmt = FS_FAT32;
 80092c6:	2303      	movs	r3, #3
 80092c8:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 80092cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80092ce:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 80092d2:	4293      	cmp	r3, r2
 80092d4:	d802      	bhi.n	80092dc <find_volume+0x2e0>
 80092d6:	2302      	movs	r3, #2
 80092d8:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 80092dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80092de:	f640 72f5 	movw	r2, #4085	@ 0xff5
 80092e2:	4293      	cmp	r3, r2
 80092e4:	d802      	bhi.n	80092ec <find_volume+0x2f0>
 80092e6:	2301      	movs	r3, #1
 80092e8:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 80092ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80092ee:	1c9a      	adds	r2, r3, #2
 80092f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80092f2:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 80092f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80092f6:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80092f8:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 80092fa:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 80092fc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80092fe:	441a      	add	r2, r3
 8009300:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009302:	625a      	str	r2, [r3, #36]	@ 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 8009304:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8009306:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009308:	441a      	add	r2, r3
 800930a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800930c:	62da      	str	r2, [r3, #44]	@ 0x2c
		if (fmt == FS_FAT32) {
 800930e:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8009312:	2b03      	cmp	r3, #3
 8009314:	d11e      	bne.n	8009354 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8009316:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009318:	3334      	adds	r3, #52	@ 0x34
 800931a:	332a      	adds	r3, #42	@ 0x2a
 800931c:	4618      	mov	r0, r3
 800931e:	f7fe f875 	bl	800740c <ld_word>
 8009322:	4603      	mov	r3, r0
 8009324:	2b00      	cmp	r3, #0
 8009326:	d001      	beq.n	800932c <find_volume+0x330>
 8009328:	230d      	movs	r3, #13
 800932a:	e0a8      	b.n	800947e <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800932c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800932e:	891b      	ldrh	r3, [r3, #8]
 8009330:	2b00      	cmp	r3, #0
 8009332:	d001      	beq.n	8009338 <find_volume+0x33c>
 8009334:	230d      	movs	r3, #13
 8009336:	e0a2      	b.n	800947e <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8009338:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800933a:	3334      	adds	r3, #52	@ 0x34
 800933c:	332c      	adds	r3, #44	@ 0x2c
 800933e:	4618      	mov	r0, r3
 8009340:	f7fe f87c 	bl	800743c <ld_dword>
 8009344:	4602      	mov	r2, r0
 8009346:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009348:	629a      	str	r2, [r3, #40]	@ 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800934a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800934c:	699b      	ldr	r3, [r3, #24]
 800934e:	009b      	lsls	r3, r3, #2
 8009350:	647b      	str	r3, [r7, #68]	@ 0x44
 8009352:	e01f      	b.n	8009394 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8009354:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009356:	891b      	ldrh	r3, [r3, #8]
 8009358:	2b00      	cmp	r3, #0
 800935a:	d101      	bne.n	8009360 <find_volume+0x364>
 800935c:	230d      	movs	r3, #13
 800935e:	e08e      	b.n	800947e <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8009360:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009362:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009364:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009366:	441a      	add	r2, r3
 8009368:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800936a:	629a      	str	r2, [r3, #40]	@ 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800936c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8009370:	2b02      	cmp	r3, #2
 8009372:	d103      	bne.n	800937c <find_volume+0x380>
 8009374:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009376:	699b      	ldr	r3, [r3, #24]
 8009378:	005b      	lsls	r3, r3, #1
 800937a:	e00a      	b.n	8009392 <find_volume+0x396>
 800937c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800937e:	699a      	ldr	r2, [r3, #24]
 8009380:	4613      	mov	r3, r2
 8009382:	005b      	lsls	r3, r3, #1
 8009384:	4413      	add	r3, r2
 8009386:	085a      	lsrs	r2, r3, #1
 8009388:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800938a:	699b      	ldr	r3, [r3, #24]
 800938c:	f003 0301 	and.w	r3, r3, #1
 8009390:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8009392:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8009394:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009396:	69da      	ldr	r2, [r3, #28]
 8009398:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800939a:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 800939e:	0a5b      	lsrs	r3, r3, #9
 80093a0:	429a      	cmp	r2, r3
 80093a2:	d201      	bcs.n	80093a8 <find_volume+0x3ac>
 80093a4:	230d      	movs	r3, #13
 80093a6:	e06a      	b.n	800947e <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 80093a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80093aa:	f04f 32ff 	mov.w	r2, #4294967295
 80093ae:	615a      	str	r2, [r3, #20]
 80093b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80093b2:	695a      	ldr	r2, [r3, #20]
 80093b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80093b6:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 80093b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80093ba:	2280      	movs	r2, #128	@ 0x80
 80093bc:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 80093be:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80093c2:	2b03      	cmp	r3, #3
 80093c4:	d149      	bne.n	800945a <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 80093c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80093c8:	3334      	adds	r3, #52	@ 0x34
 80093ca:	3330      	adds	r3, #48	@ 0x30
 80093cc:	4618      	mov	r0, r3
 80093ce:	f7fe f81d 	bl	800740c <ld_word>
 80093d2:	4603      	mov	r3, r0
 80093d4:	2b01      	cmp	r3, #1
 80093d6:	d140      	bne.n	800945a <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 80093d8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80093da:	3301      	adds	r3, #1
 80093dc:	4619      	mov	r1, r3
 80093de:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80093e0:	f7fe fac4 	bl	800796c <move_window>
 80093e4:	4603      	mov	r3, r0
 80093e6:	2b00      	cmp	r3, #0
 80093e8:	d137      	bne.n	800945a <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 80093ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80093ec:	2200      	movs	r2, #0
 80093ee:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 80093f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80093f2:	3334      	adds	r3, #52	@ 0x34
 80093f4:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 80093f8:	4618      	mov	r0, r3
 80093fa:	f7fe f807 	bl	800740c <ld_word>
 80093fe:	4603      	mov	r3, r0
 8009400:	461a      	mov	r2, r3
 8009402:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8009406:	429a      	cmp	r2, r3
 8009408:	d127      	bne.n	800945a <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800940a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800940c:	3334      	adds	r3, #52	@ 0x34
 800940e:	4618      	mov	r0, r3
 8009410:	f7fe f814 	bl	800743c <ld_dword>
 8009414:	4603      	mov	r3, r0
 8009416:	4a1c      	ldr	r2, [pc, #112]	@ (8009488 <find_volume+0x48c>)
 8009418:	4293      	cmp	r3, r2
 800941a:	d11e      	bne.n	800945a <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800941c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800941e:	3334      	adds	r3, #52	@ 0x34
 8009420:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8009424:	4618      	mov	r0, r3
 8009426:	f7fe f809 	bl	800743c <ld_dword>
 800942a:	4603      	mov	r3, r0
 800942c:	4a17      	ldr	r2, [pc, #92]	@ (800948c <find_volume+0x490>)
 800942e:	4293      	cmp	r3, r2
 8009430:	d113      	bne.n	800945a <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8009432:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009434:	3334      	adds	r3, #52	@ 0x34
 8009436:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 800943a:	4618      	mov	r0, r3
 800943c:	f7fd fffe 	bl	800743c <ld_dword>
 8009440:	4602      	mov	r2, r0
 8009442:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009444:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8009446:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009448:	3334      	adds	r3, #52	@ 0x34
 800944a:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 800944e:	4618      	mov	r0, r3
 8009450:	f7fd fff4 	bl	800743c <ld_dword>
 8009454:	4602      	mov	r2, r0
 8009456:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009458:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800945a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800945c:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 8009460:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8009462:	4b0b      	ldr	r3, [pc, #44]	@ (8009490 <find_volume+0x494>)
 8009464:	881b      	ldrh	r3, [r3, #0]
 8009466:	3301      	adds	r3, #1
 8009468:	b29a      	uxth	r2, r3
 800946a:	4b09      	ldr	r3, [pc, #36]	@ (8009490 <find_volume+0x494>)
 800946c:	801a      	strh	r2, [r3, #0]
 800946e:	4b08      	ldr	r3, [pc, #32]	@ (8009490 <find_volume+0x494>)
 8009470:	881a      	ldrh	r2, [r3, #0]
 8009472:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009474:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8009476:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8009478:	f7fe fa10 	bl	800789c <clear_lock>
#endif
	return FR_OK;
 800947c:	2300      	movs	r3, #0
}
 800947e:	4618      	mov	r0, r3
 8009480:	3758      	adds	r7, #88	@ 0x58
 8009482:	46bd      	mov	sp, r7
 8009484:	bd80      	pop	{r7, pc}
 8009486:	bf00      	nop
 8009488:	41615252 	.word	0x41615252
 800948c:	61417272 	.word	0x61417272
 8009490:	20000f70 	.word	0x20000f70

08009494 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8009494:	b580      	push	{r7, lr}
 8009496:	b084      	sub	sp, #16
 8009498:	af00      	add	r7, sp, #0
 800949a:	6078      	str	r0, [r7, #4]
 800949c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800949e:	2309      	movs	r3, #9
 80094a0:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	2b00      	cmp	r3, #0
 80094a6:	d01c      	beq.n	80094e2 <validate+0x4e>
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	681b      	ldr	r3, [r3, #0]
 80094ac:	2b00      	cmp	r3, #0
 80094ae:	d018      	beq.n	80094e2 <validate+0x4e>
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	681b      	ldr	r3, [r3, #0]
 80094b4:	781b      	ldrb	r3, [r3, #0]
 80094b6:	2b00      	cmp	r3, #0
 80094b8:	d013      	beq.n	80094e2 <validate+0x4e>
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	889a      	ldrh	r2, [r3, #4]
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	681b      	ldr	r3, [r3, #0]
 80094c2:	88db      	ldrh	r3, [r3, #6]
 80094c4:	429a      	cmp	r2, r3
 80094c6:	d10c      	bne.n	80094e2 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	785b      	ldrb	r3, [r3, #1]
 80094ce:	4618      	mov	r0, r3
 80094d0:	f7fd fefe 	bl	80072d0 <disk_status>
 80094d4:	4603      	mov	r3, r0
 80094d6:	f003 0301 	and.w	r3, r3, #1
 80094da:	2b00      	cmp	r3, #0
 80094dc:	d101      	bne.n	80094e2 <validate+0x4e>
			res = FR_OK;
 80094de:	2300      	movs	r3, #0
 80094e0:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 80094e2:	7bfb      	ldrb	r3, [r7, #15]
 80094e4:	2b00      	cmp	r3, #0
 80094e6:	d102      	bne.n	80094ee <validate+0x5a>
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	681b      	ldr	r3, [r3, #0]
 80094ec:	e000      	b.n	80094f0 <validate+0x5c>
 80094ee:	2300      	movs	r3, #0
 80094f0:	683a      	ldr	r2, [r7, #0]
 80094f2:	6013      	str	r3, [r2, #0]
	return res;
 80094f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80094f6:	4618      	mov	r0, r3
 80094f8:	3710      	adds	r7, #16
 80094fa:	46bd      	mov	sp, r7
 80094fc:	bd80      	pop	{r7, pc}
	...

08009500 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8009500:	b580      	push	{r7, lr}
 8009502:	b088      	sub	sp, #32
 8009504:	af00      	add	r7, sp, #0
 8009506:	60f8      	str	r0, [r7, #12]
 8009508:	60b9      	str	r1, [r7, #8]
 800950a:	4613      	mov	r3, r2
 800950c:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800950e:	68bb      	ldr	r3, [r7, #8]
 8009510:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8009512:	f107 0310 	add.w	r3, r7, #16
 8009516:	4618      	mov	r0, r3
 8009518:	f7ff fcd5 	bl	8008ec6 <get_ldnumber>
 800951c:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800951e:	69fb      	ldr	r3, [r7, #28]
 8009520:	2b00      	cmp	r3, #0
 8009522:	da01      	bge.n	8009528 <f_mount+0x28>
 8009524:	230b      	movs	r3, #11
 8009526:	e02b      	b.n	8009580 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8009528:	4a17      	ldr	r2, [pc, #92]	@ (8009588 <f_mount+0x88>)
 800952a:	69fb      	ldr	r3, [r7, #28]
 800952c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009530:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8009532:	69bb      	ldr	r3, [r7, #24]
 8009534:	2b00      	cmp	r3, #0
 8009536:	d005      	beq.n	8009544 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8009538:	69b8      	ldr	r0, [r7, #24]
 800953a:	f7fe f9af 	bl	800789c <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800953e:	69bb      	ldr	r3, [r7, #24]
 8009540:	2200      	movs	r2, #0
 8009542:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8009544:	68fb      	ldr	r3, [r7, #12]
 8009546:	2b00      	cmp	r3, #0
 8009548:	d002      	beq.n	8009550 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800954a:	68fb      	ldr	r3, [r7, #12]
 800954c:	2200      	movs	r2, #0
 800954e:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8009550:	68fa      	ldr	r2, [r7, #12]
 8009552:	490d      	ldr	r1, [pc, #52]	@ (8009588 <f_mount+0x88>)
 8009554:	69fb      	ldr	r3, [r7, #28]
 8009556:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800955a:	68fb      	ldr	r3, [r7, #12]
 800955c:	2b00      	cmp	r3, #0
 800955e:	d002      	beq.n	8009566 <f_mount+0x66>
 8009560:	79fb      	ldrb	r3, [r7, #7]
 8009562:	2b01      	cmp	r3, #1
 8009564:	d001      	beq.n	800956a <f_mount+0x6a>
 8009566:	2300      	movs	r3, #0
 8009568:	e00a      	b.n	8009580 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800956a:	f107 010c 	add.w	r1, r7, #12
 800956e:	f107 0308 	add.w	r3, r7, #8
 8009572:	2200      	movs	r2, #0
 8009574:	4618      	mov	r0, r3
 8009576:	f7ff fd41 	bl	8008ffc <find_volume>
 800957a:	4603      	mov	r3, r0
 800957c:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800957e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009580:	4618      	mov	r0, r3
 8009582:	3720      	adds	r7, #32
 8009584:	46bd      	mov	sp, r7
 8009586:	bd80      	pop	{r7, pc}
 8009588:	20000f6c 	.word	0x20000f6c

0800958c <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800958c:	b580      	push	{r7, lr}
 800958e:	f5ad 7d1a 	sub.w	sp, sp, #616	@ 0x268
 8009592:	af00      	add	r7, sp, #0
 8009594:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8009598:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 800959c:	6018      	str	r0, [r3, #0]
 800959e:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80095a2:	f5a3 7318 	sub.w	r3, r3, #608	@ 0x260
 80095a6:	6019      	str	r1, [r3, #0]
 80095a8:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80095ac:	f2a3 2361 	subw	r3, r3, #609	@ 0x261
 80095b0:	701a      	strb	r2, [r3, #0]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 80095b2:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80095b6:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	2b00      	cmp	r3, #0
 80095be:	d101      	bne.n	80095c4 <f_open+0x38>
 80095c0:	2309      	movs	r3, #9
 80095c2:	e291      	b.n	8009ae8 <f_open+0x55c>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 80095c4:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80095c8:	f2a3 2361 	subw	r3, r3, #609	@ 0x261
 80095cc:	f507 721a 	add.w	r2, r7, #616	@ 0x268
 80095d0:	f2a2 2261 	subw	r2, r2, #609	@ 0x261
 80095d4:	7812      	ldrb	r2, [r2, #0]
 80095d6:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 80095da:	701a      	strb	r2, [r3, #0]
	res = find_volume(&path, &fs, mode);
 80095dc:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80095e0:	f2a3 2361 	subw	r3, r3, #609	@ 0x261
 80095e4:	781a      	ldrb	r2, [r3, #0]
 80095e6:	f507 7105 	add.w	r1, r7, #532	@ 0x214
 80095ea:	f107 0308 	add.w	r3, r7, #8
 80095ee:	4618      	mov	r0, r3
 80095f0:	f7ff fd04 	bl	8008ffc <find_volume>
 80095f4:	4603      	mov	r3, r0
 80095f6:	f887 3267 	strb.w	r3, [r7, #615]	@ 0x267
	if (res == FR_OK) {
 80095fa:	f897 3267 	ldrb.w	r3, [r7, #615]	@ 0x267
 80095fe:	2b00      	cmp	r3, #0
 8009600:	f040 8265 	bne.w	8009ace <f_open+0x542>
		dj.obj.fs = fs;
 8009604:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8009608:	f8c7 3218 	str.w	r3, [r7, #536]	@ 0x218
		INIT_NAMBUF(fs);
 800960c:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8009610:	f107 0214 	add.w	r2, r7, #20
 8009614:	60da      	str	r2, [r3, #12]
		res = follow_path(&dj, path);	/* Follow the file path */
 8009616:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800961a:	f5a3 7318 	sub.w	r3, r3, #608	@ 0x260
 800961e:	681a      	ldr	r2, [r3, #0]
 8009620:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8009624:	4611      	mov	r1, r2
 8009626:	4618      	mov	r0, r3
 8009628:	f7ff fbdc 	bl	8008de4 <follow_path>
 800962c:	4603      	mov	r3, r0
 800962e:	f887 3267 	strb.w	r3, [r7, #615]	@ 0x267
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8009632:	f897 3267 	ldrb.w	r3, [r7, #615]	@ 0x267
 8009636:	2b00      	cmp	r3, #0
 8009638:	d11c      	bne.n	8009674 <f_open+0xe8>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800963a:	f897 3247 	ldrb.w	r3, [r7, #583]	@ 0x247
 800963e:	b25b      	sxtb	r3, r3
 8009640:	2b00      	cmp	r3, #0
 8009642:	da03      	bge.n	800964c <f_open+0xc0>
				res = FR_INVALID_NAME;
 8009644:	2306      	movs	r3, #6
 8009646:	f887 3267 	strb.w	r3, [r7, #615]	@ 0x267
 800964a:	e013      	b.n	8009674 <f_open+0xe8>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800964c:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8009650:	f2a3 2361 	subw	r3, r3, #609	@ 0x261
 8009654:	781b      	ldrb	r3, [r3, #0]
 8009656:	2b01      	cmp	r3, #1
 8009658:	bf8c      	ite	hi
 800965a:	2301      	movhi	r3, #1
 800965c:	2300      	movls	r3, #0
 800965e:	b2db      	uxtb	r3, r3
 8009660:	461a      	mov	r2, r3
 8009662:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8009666:	4611      	mov	r1, r2
 8009668:	4618      	mov	r0, r3
 800966a:	f7fd ffcf 	bl	800760c <chk_lock>
 800966e:	4603      	mov	r3, r0
 8009670:	f887 3267 	strb.w	r3, [r7, #615]	@ 0x267
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8009674:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8009678:	f2a3 2361 	subw	r3, r3, #609	@ 0x261
 800967c:	781b      	ldrb	r3, [r3, #0]
 800967e:	f003 031c 	and.w	r3, r3, #28
 8009682:	2b00      	cmp	r3, #0
 8009684:	f000 80a7 	beq.w	80097d6 <f_open+0x24a>
			if (res != FR_OK) {					/* No file, create new */
 8009688:	f897 3267 	ldrb.w	r3, [r7, #615]	@ 0x267
 800968c:	2b00      	cmp	r3, #0
 800968e:	d01f      	beq.n	80096d0 <f_open+0x144>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8009690:	f897 3267 	ldrb.w	r3, [r7, #615]	@ 0x267
 8009694:	2b04      	cmp	r3, #4
 8009696:	d10e      	bne.n	80096b6 <f_open+0x12a>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8009698:	f7fe f814 	bl	80076c4 <enq_lock>
 800969c:	4603      	mov	r3, r0
 800969e:	2b00      	cmp	r3, #0
 80096a0:	d006      	beq.n	80096b0 <f_open+0x124>
 80096a2:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80096a6:	4618      	mov	r0, r3
 80096a8:	f7ff f8ec 	bl	8008884 <dir_register>
 80096ac:	4603      	mov	r3, r0
 80096ae:	e000      	b.n	80096b2 <f_open+0x126>
 80096b0:	2312      	movs	r3, #18
 80096b2:	f887 3267 	strb.w	r3, [r7, #615]	@ 0x267
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 80096b6:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80096ba:	f2a3 2361 	subw	r3, r3, #609	@ 0x261
 80096be:	f507 721a 	add.w	r2, r7, #616	@ 0x268
 80096c2:	f2a2 2261 	subw	r2, r2, #609	@ 0x261
 80096c6:	7812      	ldrb	r2, [r2, #0]
 80096c8:	f042 0208 	orr.w	r2, r2, #8
 80096cc:	701a      	strb	r2, [r3, #0]
 80096ce:	e015      	b.n	80096fc <f_open+0x170>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 80096d0:	f897 321e 	ldrb.w	r3, [r7, #542]	@ 0x21e
 80096d4:	f003 0311 	and.w	r3, r3, #17
 80096d8:	2b00      	cmp	r3, #0
 80096da:	d003      	beq.n	80096e4 <f_open+0x158>
					res = FR_DENIED;
 80096dc:	2307      	movs	r3, #7
 80096de:	f887 3267 	strb.w	r3, [r7, #615]	@ 0x267
 80096e2:	e00b      	b.n	80096fc <f_open+0x170>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 80096e4:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80096e8:	f2a3 2361 	subw	r3, r3, #609	@ 0x261
 80096ec:	781b      	ldrb	r3, [r3, #0]
 80096ee:	f003 0304 	and.w	r3, r3, #4
 80096f2:	2b00      	cmp	r3, #0
 80096f4:	d002      	beq.n	80096fc <f_open+0x170>
 80096f6:	2308      	movs	r3, #8
 80096f8:	f887 3267 	strb.w	r3, [r7, #615]	@ 0x267
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 80096fc:	f897 3267 	ldrb.w	r3, [r7, #615]	@ 0x267
 8009700:	2b00      	cmp	r3, #0
 8009702:	f040 8088 	bne.w	8009816 <f_open+0x28a>
 8009706:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800970a:	f2a3 2361 	subw	r3, r3, #609	@ 0x261
 800970e:	781b      	ldrb	r3, [r3, #0]
 8009710:	f003 0308 	and.w	r3, r3, #8
 8009714:	2b00      	cmp	r3, #0
 8009716:	d07e      	beq.n	8009816 <f_open+0x28a>
				dw = GET_FATTIME();
 8009718:	f7fd fb98 	bl	8006e4c <get_fattime>
 800971c:	f8c7 0258 	str.w	r0, [r7, #600]	@ 0x258
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8009720:	f8d7 3238 	ldr.w	r3, [r7, #568]	@ 0x238
 8009724:	330e      	adds	r3, #14
 8009726:	f8d7 1258 	ldr.w	r1, [r7, #600]	@ 0x258
 800972a:	4618      	mov	r0, r3
 800972c:	f7fd fec4 	bl	80074b8 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8009730:	f8d7 3238 	ldr.w	r3, [r7, #568]	@ 0x238
 8009734:	3316      	adds	r3, #22
 8009736:	f8d7 1258 	ldr.w	r1, [r7, #600]	@ 0x258
 800973a:	4618      	mov	r0, r3
 800973c:	f7fd febc 	bl	80074b8 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8009740:	f8d7 3238 	ldr.w	r3, [r7, #568]	@ 0x238
 8009744:	330b      	adds	r3, #11
 8009746:	2220      	movs	r2, #32
 8009748:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800974a:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 800974e:	f8d7 2238 	ldr.w	r2, [r7, #568]	@ 0x238
 8009752:	4611      	mov	r1, r2
 8009754:	4618      	mov	r0, r3
 8009756:	f7fe fe0d 	bl	8008374 <ld_clust>
 800975a:	f8c7 0254 	str.w	r0, [r7, #596]	@ 0x254
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800975e:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8009762:	f8d7 1238 	ldr.w	r1, [r7, #568]	@ 0x238
 8009766:	2200      	movs	r2, #0
 8009768:	4618      	mov	r0, r3
 800976a:	f7fe fe22 	bl	80083b2 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800976e:	f8d7 3238 	ldr.w	r3, [r7, #568]	@ 0x238
 8009772:	331c      	adds	r3, #28
 8009774:	2100      	movs	r1, #0
 8009776:	4618      	mov	r0, r3
 8009778:	f7fd fe9e 	bl	80074b8 <st_dword>
					fs->wflag = 1;
 800977c:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8009780:	2201      	movs	r2, #1
 8009782:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8009784:	f8d7 3254 	ldr.w	r3, [r7, #596]	@ 0x254
 8009788:	2b00      	cmp	r3, #0
 800978a:	d044      	beq.n	8009816 <f_open+0x28a>
						dw = fs->winsect;
 800978c:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8009790:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009792:	f8c7 3258 	str.w	r3, [r7, #600]	@ 0x258
						res = remove_chain(&dj.obj, cl, 0);
 8009796:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 800979a:	2200      	movs	r2, #0
 800979c:	f8d7 1254 	ldr.w	r1, [r7, #596]	@ 0x254
 80097a0:	4618      	mov	r0, r3
 80097a2:	f7fe fb2f 	bl	8007e04 <remove_chain>
 80097a6:	4603      	mov	r3, r0
 80097a8:	f887 3267 	strb.w	r3, [r7, #615]	@ 0x267
						if (res == FR_OK) {
 80097ac:	f897 3267 	ldrb.w	r3, [r7, #615]	@ 0x267
 80097b0:	2b00      	cmp	r3, #0
 80097b2:	d130      	bne.n	8009816 <f_open+0x28a>
							res = move_window(fs, dw);
 80097b4:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 80097b8:	f8d7 1258 	ldr.w	r1, [r7, #600]	@ 0x258
 80097bc:	4618      	mov	r0, r3
 80097be:	f7fe f8d5 	bl	800796c <move_window>
 80097c2:	4603      	mov	r3, r0
 80097c4:	f887 3267 	strb.w	r3, [r7, #615]	@ 0x267
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 80097c8:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 80097cc:	f8d7 2254 	ldr.w	r2, [r7, #596]	@ 0x254
 80097d0:	3a01      	subs	r2, #1
 80097d2:	611a      	str	r2, [r3, #16]
 80097d4:	e01f      	b.n	8009816 <f_open+0x28a>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 80097d6:	f897 3267 	ldrb.w	r3, [r7, #615]	@ 0x267
 80097da:	2b00      	cmp	r3, #0
 80097dc:	d11b      	bne.n	8009816 <f_open+0x28a>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 80097de:	f897 321e 	ldrb.w	r3, [r7, #542]	@ 0x21e
 80097e2:	f003 0310 	and.w	r3, r3, #16
 80097e6:	2b00      	cmp	r3, #0
 80097e8:	d003      	beq.n	80097f2 <f_open+0x266>
					res = FR_NO_FILE;
 80097ea:	2304      	movs	r3, #4
 80097ec:	f887 3267 	strb.w	r3, [r7, #615]	@ 0x267
 80097f0:	e011      	b.n	8009816 <f_open+0x28a>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 80097f2:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80097f6:	f2a3 2361 	subw	r3, r3, #609	@ 0x261
 80097fa:	781b      	ldrb	r3, [r3, #0]
 80097fc:	f003 0302 	and.w	r3, r3, #2
 8009800:	2b00      	cmp	r3, #0
 8009802:	d008      	beq.n	8009816 <f_open+0x28a>
 8009804:	f897 321e 	ldrb.w	r3, [r7, #542]	@ 0x21e
 8009808:	f003 0301 	and.w	r3, r3, #1
 800980c:	2b00      	cmp	r3, #0
 800980e:	d002      	beq.n	8009816 <f_open+0x28a>
						res = FR_DENIED;
 8009810:	2307      	movs	r3, #7
 8009812:	f887 3267 	strb.w	r3, [r7, #615]	@ 0x267
					}
				}
			}
		}
		if (res == FR_OK) {
 8009816:	f897 3267 	ldrb.w	r3, [r7, #615]	@ 0x267
 800981a:	2b00      	cmp	r3, #0
 800981c:	d148      	bne.n	80098b0 <f_open+0x324>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800981e:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8009822:	f2a3 2361 	subw	r3, r3, #609	@ 0x261
 8009826:	781b      	ldrb	r3, [r3, #0]
 8009828:	f003 0308 	and.w	r3, r3, #8
 800982c:	2b00      	cmp	r3, #0
 800982e:	d00b      	beq.n	8009848 <f_open+0x2bc>
				mode |= FA_MODIFIED;
 8009830:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8009834:	f2a3 2361 	subw	r3, r3, #609	@ 0x261
 8009838:	f507 721a 	add.w	r2, r7, #616	@ 0x268
 800983c:	f2a2 2261 	subw	r2, r2, #609	@ 0x261
 8009840:	7812      	ldrb	r2, [r2, #0]
 8009842:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009846:	701a      	strb	r2, [r3, #0]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8009848:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 800984c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800984e:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8009852:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 8009856:	681b      	ldr	r3, [r3, #0]
 8009858:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 800985a:	f8d7 2238 	ldr.w	r2, [r7, #568]	@ 0x238
 800985e:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8009862:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 8009866:	681b      	ldr	r3, [r3, #0]
 8009868:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800986a:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800986e:	f2a3 2361 	subw	r3, r3, #609	@ 0x261
 8009872:	781b      	ldrb	r3, [r3, #0]
 8009874:	2b01      	cmp	r3, #1
 8009876:	bf8c      	ite	hi
 8009878:	2301      	movhi	r3, #1
 800987a:	2300      	movls	r3, #0
 800987c:	b2db      	uxtb	r3, r3
 800987e:	461a      	mov	r2, r3
 8009880:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8009884:	4611      	mov	r1, r2
 8009886:	4618      	mov	r0, r3
 8009888:	f7fd ff3e 	bl	8007708 <inc_lock>
 800988c:	4602      	mov	r2, r0
 800988e:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8009892:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 8009896:	681b      	ldr	r3, [r3, #0]
 8009898:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800989a:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800989e:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 80098a2:	681b      	ldr	r3, [r3, #0]
 80098a4:	691b      	ldr	r3, [r3, #16]
 80098a6:	2b00      	cmp	r3, #0
 80098a8:	d102      	bne.n	80098b0 <f_open+0x324>
 80098aa:	2302      	movs	r3, #2
 80098ac:	f887 3267 	strb.w	r3, [r7, #615]	@ 0x267
				}
			}
		}
#endif

		if (res == FR_OK) {
 80098b0:	f897 3267 	ldrb.w	r3, [r7, #615]	@ 0x267
 80098b4:	2b00      	cmp	r3, #0
 80098b6:	f040 810a 	bne.w	8009ace <f_open+0x542>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 80098ba:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 80098be:	f8d7 2238 	ldr.w	r2, [r7, #568]	@ 0x238
 80098c2:	4611      	mov	r1, r2
 80098c4:	4618      	mov	r0, r3
 80098c6:	f7fe fd55 	bl	8008374 <ld_clust>
 80098ca:	4602      	mov	r2, r0
 80098cc:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80098d0:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 80098d4:	681b      	ldr	r3, [r3, #0]
 80098d6:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 80098d8:	f8d7 3238 	ldr.w	r3, [r7, #568]	@ 0x238
 80098dc:	331c      	adds	r3, #28
 80098de:	4618      	mov	r0, r3
 80098e0:	f7fd fdac 	bl	800743c <ld_dword>
 80098e4:	4602      	mov	r2, r0
 80098e6:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80098ea:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 80098ee:	681b      	ldr	r3, [r3, #0]
 80098f0:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 80098f2:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80098f6:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 80098fa:	681b      	ldr	r3, [r3, #0]
 80098fc:	2200      	movs	r2, #0
 80098fe:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8009900:	f8d7 2214 	ldr.w	r2, [r7, #532]	@ 0x214
 8009904:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8009908:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 800990c:	681b      	ldr	r3, [r3, #0]
 800990e:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8009910:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8009914:	88da      	ldrh	r2, [r3, #6]
 8009916:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800991a:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 800991e:	681b      	ldr	r3, [r3, #0]
 8009920:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8009922:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8009926:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 800992a:	681b      	ldr	r3, [r3, #0]
 800992c:	f507 721a 	add.w	r2, r7, #616	@ 0x268
 8009930:	f2a2 2261 	subw	r2, r2, #609	@ 0x261
 8009934:	7812      	ldrb	r2, [r2, #0]
 8009936:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8009938:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800993c:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 8009940:	681b      	ldr	r3, [r3, #0]
 8009942:	2200      	movs	r2, #0
 8009944:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8009946:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800994a:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 800994e:	681b      	ldr	r3, [r3, #0]
 8009950:	2200      	movs	r2, #0
 8009952:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8009954:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8009958:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 800995c:	681b      	ldr	r3, [r3, #0]
 800995e:	2200      	movs	r2, #0
 8009960:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8009962:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8009966:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 800996a:	681b      	ldr	r3, [r3, #0]
 800996c:	3330      	adds	r3, #48	@ 0x30
 800996e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009972:	2100      	movs	r1, #0
 8009974:	4618      	mov	r0, r3
 8009976:	f7fd fdec 	bl	8007552 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800997a:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800997e:	f2a3 2361 	subw	r3, r3, #609	@ 0x261
 8009982:	781b      	ldrb	r3, [r3, #0]
 8009984:	f003 0320 	and.w	r3, r3, #32
 8009988:	2b00      	cmp	r3, #0
 800998a:	f000 80a0 	beq.w	8009ace <f_open+0x542>
 800998e:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8009992:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 8009996:	681b      	ldr	r3, [r3, #0]
 8009998:	68db      	ldr	r3, [r3, #12]
 800999a:	2b00      	cmp	r3, #0
 800999c:	f000 8097 	beq.w	8009ace <f_open+0x542>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 80099a0:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80099a4:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 80099a8:	681b      	ldr	r3, [r3, #0]
 80099aa:	68da      	ldr	r2, [r3, #12]
 80099ac:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80099b0:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 80099b4:	681b      	ldr	r3, [r3, #0]
 80099b6:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 80099b8:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 80099bc:	895b      	ldrh	r3, [r3, #10]
 80099be:	025b      	lsls	r3, r3, #9
 80099c0:	f8c7 3250 	str.w	r3, [r7, #592]	@ 0x250
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 80099c4:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80099c8:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 80099cc:	681b      	ldr	r3, [r3, #0]
 80099ce:	689b      	ldr	r3, [r3, #8]
 80099d0:	f8c7 3260 	str.w	r3, [r7, #608]	@ 0x260
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80099d4:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80099d8:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	68db      	ldr	r3, [r3, #12]
 80099e0:	f8c7 325c 	str.w	r3, [r7, #604]	@ 0x25c
 80099e4:	e021      	b.n	8009a2a <f_open+0x49e>
					clst = get_fat(&fp->obj, clst);
 80099e6:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80099ea:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 80099ee:	681b      	ldr	r3, [r3, #0]
 80099f0:	f8d7 1260 	ldr.w	r1, [r7, #608]	@ 0x260
 80099f4:	4618      	mov	r0, r3
 80099f6:	f7fe f874 	bl	8007ae2 <get_fat>
 80099fa:	f8c7 0260 	str.w	r0, [r7, #608]	@ 0x260
					if (clst <= 1) res = FR_INT_ERR;
 80099fe:	f8d7 3260 	ldr.w	r3, [r7, #608]	@ 0x260
 8009a02:	2b01      	cmp	r3, #1
 8009a04:	d802      	bhi.n	8009a0c <f_open+0x480>
 8009a06:	2302      	movs	r3, #2
 8009a08:	f887 3267 	strb.w	r3, [r7, #615]	@ 0x267
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8009a0c:	f8d7 3260 	ldr.w	r3, [r7, #608]	@ 0x260
 8009a10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a14:	d102      	bne.n	8009a1c <f_open+0x490>
 8009a16:	2301      	movs	r3, #1
 8009a18:	f887 3267 	strb.w	r3, [r7, #615]	@ 0x267
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8009a1c:	f8d7 225c 	ldr.w	r2, [r7, #604]	@ 0x25c
 8009a20:	f8d7 3250 	ldr.w	r3, [r7, #592]	@ 0x250
 8009a24:	1ad3      	subs	r3, r2, r3
 8009a26:	f8c7 325c 	str.w	r3, [r7, #604]	@ 0x25c
 8009a2a:	f897 3267 	ldrb.w	r3, [r7, #615]	@ 0x267
 8009a2e:	2b00      	cmp	r3, #0
 8009a30:	d105      	bne.n	8009a3e <f_open+0x4b2>
 8009a32:	f8d7 225c 	ldr.w	r2, [r7, #604]	@ 0x25c
 8009a36:	f8d7 3250 	ldr.w	r3, [r7, #592]	@ 0x250
 8009a3a:	429a      	cmp	r2, r3
 8009a3c:	d8d3      	bhi.n	80099e6 <f_open+0x45a>
				}
				fp->clust = clst;
 8009a3e:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8009a42:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 8009a46:	681b      	ldr	r3, [r3, #0]
 8009a48:	f8d7 2260 	ldr.w	r2, [r7, #608]	@ 0x260
 8009a4c:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8009a4e:	f897 3267 	ldrb.w	r3, [r7, #615]	@ 0x267
 8009a52:	2b00      	cmp	r3, #0
 8009a54:	d13b      	bne.n	8009ace <f_open+0x542>
 8009a56:	f8d7 325c 	ldr.w	r3, [r7, #604]	@ 0x25c
 8009a5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009a5e:	2b00      	cmp	r3, #0
 8009a60:	d035      	beq.n	8009ace <f_open+0x542>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8009a62:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8009a66:	f8d7 1260 	ldr.w	r1, [r7, #608]	@ 0x260
 8009a6a:	4618      	mov	r0, r3
 8009a6c:	f7fe f81a 	bl	8007aa4 <clust2sect>
 8009a70:	f8c7 024c 	str.w	r0, [r7, #588]	@ 0x24c
 8009a74:	f8d7 324c 	ldr.w	r3, [r7, #588]	@ 0x24c
 8009a78:	2b00      	cmp	r3, #0
 8009a7a:	d103      	bne.n	8009a84 <f_open+0x4f8>
						res = FR_INT_ERR;
 8009a7c:	2302      	movs	r3, #2
 8009a7e:	f887 3267 	strb.w	r3, [r7, #615]	@ 0x267
 8009a82:	e024      	b.n	8009ace <f_open+0x542>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8009a84:	f8d7 325c 	ldr.w	r3, [r7, #604]	@ 0x25c
 8009a88:	0a5a      	lsrs	r2, r3, #9
 8009a8a:	f8d7 324c 	ldr.w	r3, [r7, #588]	@ 0x24c
 8009a8e:	441a      	add	r2, r3
 8009a90:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8009a94:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 8009a98:	681b      	ldr	r3, [r3, #0]
 8009a9a:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8009a9c:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8009aa0:	7858      	ldrb	r0, [r3, #1]
 8009aa2:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8009aa6:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 8009aaa:	681b      	ldr	r3, [r3, #0]
 8009aac:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8009ab0:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8009ab4:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 8009ab8:	681b      	ldr	r3, [r3, #0]
 8009aba:	6a1a      	ldr	r2, [r3, #32]
 8009abc:	2301      	movs	r3, #1
 8009abe:	f7fd fc47 	bl	8007350 <disk_read>
 8009ac2:	4603      	mov	r3, r0
 8009ac4:	2b00      	cmp	r3, #0
 8009ac6:	d002      	beq.n	8009ace <f_open+0x542>
 8009ac8:	2301      	movs	r3, #1
 8009aca:	f887 3267 	strb.w	r3, [r7, #615]	@ 0x267
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8009ace:	f897 3267 	ldrb.w	r3, [r7, #615]	@ 0x267
 8009ad2:	2b00      	cmp	r3, #0
 8009ad4:	d006      	beq.n	8009ae4 <f_open+0x558>
 8009ad6:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8009ada:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 8009ade:	681b      	ldr	r3, [r3, #0]
 8009ae0:	2200      	movs	r2, #0
 8009ae2:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8009ae4:	f897 3267 	ldrb.w	r3, [r7, #615]	@ 0x267
}
 8009ae8:	4618      	mov	r0, r3
 8009aea:	f507 771a 	add.w	r7, r7, #616	@ 0x268
 8009aee:	46bd      	mov	sp, r7
 8009af0:	bd80      	pop	{r7, pc}

08009af2 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8009af2:	b580      	push	{r7, lr}
 8009af4:	b08e      	sub	sp, #56	@ 0x38
 8009af6:	af00      	add	r7, sp, #0
 8009af8:	60f8      	str	r0, [r7, #12]
 8009afa:	60b9      	str	r1, [r7, #8]
 8009afc:	607a      	str	r2, [r7, #4]
 8009afe:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 8009b00:	68bb      	ldr	r3, [r7, #8]
 8009b02:	627b      	str	r3, [r7, #36]	@ 0x24


	*br = 0;	/* Clear read byte counter */
 8009b04:	683b      	ldr	r3, [r7, #0]
 8009b06:	2200      	movs	r2, #0
 8009b08:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8009b0a:	68fb      	ldr	r3, [r7, #12]
 8009b0c:	f107 0214 	add.w	r2, r7, #20
 8009b10:	4611      	mov	r1, r2
 8009b12:	4618      	mov	r0, r3
 8009b14:	f7ff fcbe 	bl	8009494 <validate>
 8009b18:	4603      	mov	r3, r0
 8009b1a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8009b1e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8009b22:	2b00      	cmp	r3, #0
 8009b24:	d107      	bne.n	8009b36 <f_read+0x44>
 8009b26:	68fb      	ldr	r3, [r7, #12]
 8009b28:	7d5b      	ldrb	r3, [r3, #21]
 8009b2a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8009b2e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8009b32:	2b00      	cmp	r3, #0
 8009b34:	d002      	beq.n	8009b3c <f_read+0x4a>
 8009b36:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8009b3a:	e115      	b.n	8009d68 <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8009b3c:	68fb      	ldr	r3, [r7, #12]
 8009b3e:	7d1b      	ldrb	r3, [r3, #20]
 8009b40:	f003 0301 	and.w	r3, r3, #1
 8009b44:	2b00      	cmp	r3, #0
 8009b46:	d101      	bne.n	8009b4c <f_read+0x5a>
 8009b48:	2307      	movs	r3, #7
 8009b4a:	e10d      	b.n	8009d68 <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 8009b4c:	68fb      	ldr	r3, [r7, #12]
 8009b4e:	68da      	ldr	r2, [r3, #12]
 8009b50:	68fb      	ldr	r3, [r7, #12]
 8009b52:	699b      	ldr	r3, [r3, #24]
 8009b54:	1ad3      	subs	r3, r2, r3
 8009b56:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8009b58:	687a      	ldr	r2, [r7, #4]
 8009b5a:	6a3b      	ldr	r3, [r7, #32]
 8009b5c:	429a      	cmp	r2, r3
 8009b5e:	f240 80fe 	bls.w	8009d5e <f_read+0x26c>
 8009b62:	6a3b      	ldr	r3, [r7, #32]
 8009b64:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8009b66:	e0fa      	b.n	8009d5e <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8009b68:	68fb      	ldr	r3, [r7, #12]
 8009b6a:	699b      	ldr	r3, [r3, #24]
 8009b6c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009b70:	2b00      	cmp	r3, #0
 8009b72:	f040 80c6 	bne.w	8009d02 <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8009b76:	68fb      	ldr	r3, [r7, #12]
 8009b78:	699b      	ldr	r3, [r3, #24]
 8009b7a:	0a5b      	lsrs	r3, r3, #9
 8009b7c:	697a      	ldr	r2, [r7, #20]
 8009b7e:	8952      	ldrh	r2, [r2, #10]
 8009b80:	3a01      	subs	r2, #1
 8009b82:	4013      	ands	r3, r2
 8009b84:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 8009b86:	69fb      	ldr	r3, [r7, #28]
 8009b88:	2b00      	cmp	r3, #0
 8009b8a:	d12f      	bne.n	8009bec <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8009b8c:	68fb      	ldr	r3, [r7, #12]
 8009b8e:	699b      	ldr	r3, [r3, #24]
 8009b90:	2b00      	cmp	r3, #0
 8009b92:	d103      	bne.n	8009b9c <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8009b94:	68fb      	ldr	r3, [r7, #12]
 8009b96:	689b      	ldr	r3, [r3, #8]
 8009b98:	633b      	str	r3, [r7, #48]	@ 0x30
 8009b9a:	e013      	b.n	8009bc4 <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8009b9c:	68fb      	ldr	r3, [r7, #12]
 8009b9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009ba0:	2b00      	cmp	r3, #0
 8009ba2:	d007      	beq.n	8009bb4 <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8009ba4:	68fb      	ldr	r3, [r7, #12]
 8009ba6:	699b      	ldr	r3, [r3, #24]
 8009ba8:	4619      	mov	r1, r3
 8009baa:	68f8      	ldr	r0, [r7, #12]
 8009bac:	f7fe fa27 	bl	8007ffe <clmt_clust>
 8009bb0:	6338      	str	r0, [r7, #48]	@ 0x30
 8009bb2:	e007      	b.n	8009bc4 <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8009bb4:	68fa      	ldr	r2, [r7, #12]
 8009bb6:	68fb      	ldr	r3, [r7, #12]
 8009bb8:	69db      	ldr	r3, [r3, #28]
 8009bba:	4619      	mov	r1, r3
 8009bbc:	4610      	mov	r0, r2
 8009bbe:	f7fd ff90 	bl	8007ae2 <get_fat>
 8009bc2:	6338      	str	r0, [r7, #48]	@ 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8009bc4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009bc6:	2b01      	cmp	r3, #1
 8009bc8:	d804      	bhi.n	8009bd4 <f_read+0xe2>
 8009bca:	68fb      	ldr	r3, [r7, #12]
 8009bcc:	2202      	movs	r2, #2
 8009bce:	755a      	strb	r2, [r3, #21]
 8009bd0:	2302      	movs	r3, #2
 8009bd2:	e0c9      	b.n	8009d68 <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8009bd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009bd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009bda:	d104      	bne.n	8009be6 <f_read+0xf4>
 8009bdc:	68fb      	ldr	r3, [r7, #12]
 8009bde:	2201      	movs	r2, #1
 8009be0:	755a      	strb	r2, [r3, #21]
 8009be2:	2301      	movs	r3, #1
 8009be4:	e0c0      	b.n	8009d68 <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 8009be6:	68fb      	ldr	r3, [r7, #12]
 8009be8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009bea:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8009bec:	697a      	ldr	r2, [r7, #20]
 8009bee:	68fb      	ldr	r3, [r7, #12]
 8009bf0:	69db      	ldr	r3, [r3, #28]
 8009bf2:	4619      	mov	r1, r3
 8009bf4:	4610      	mov	r0, r2
 8009bf6:	f7fd ff55 	bl	8007aa4 <clust2sect>
 8009bfa:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8009bfc:	69bb      	ldr	r3, [r7, #24]
 8009bfe:	2b00      	cmp	r3, #0
 8009c00:	d104      	bne.n	8009c0c <f_read+0x11a>
 8009c02:	68fb      	ldr	r3, [r7, #12]
 8009c04:	2202      	movs	r2, #2
 8009c06:	755a      	strb	r2, [r3, #21]
 8009c08:	2302      	movs	r3, #2
 8009c0a:	e0ad      	b.n	8009d68 <f_read+0x276>
			sect += csect;
 8009c0c:	69ba      	ldr	r2, [r7, #24]
 8009c0e:	69fb      	ldr	r3, [r7, #28]
 8009c10:	4413      	add	r3, r2
 8009c12:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	0a5b      	lsrs	r3, r3, #9
 8009c18:	62bb      	str	r3, [r7, #40]	@ 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 8009c1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c1c:	2b00      	cmp	r3, #0
 8009c1e:	d039      	beq.n	8009c94 <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8009c20:	69fa      	ldr	r2, [r7, #28]
 8009c22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c24:	4413      	add	r3, r2
 8009c26:	697a      	ldr	r2, [r7, #20]
 8009c28:	8952      	ldrh	r2, [r2, #10]
 8009c2a:	4293      	cmp	r3, r2
 8009c2c:	d905      	bls.n	8009c3a <f_read+0x148>
					cc = fs->csize - csect;
 8009c2e:	697b      	ldr	r3, [r7, #20]
 8009c30:	895b      	ldrh	r3, [r3, #10]
 8009c32:	461a      	mov	r2, r3
 8009c34:	69fb      	ldr	r3, [r7, #28]
 8009c36:	1ad3      	subs	r3, r2, r3
 8009c38:	62bb      	str	r3, [r7, #40]	@ 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8009c3a:	697b      	ldr	r3, [r7, #20]
 8009c3c:	7858      	ldrb	r0, [r3, #1]
 8009c3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c40:	69ba      	ldr	r2, [r7, #24]
 8009c42:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8009c44:	f7fd fb84 	bl	8007350 <disk_read>
 8009c48:	4603      	mov	r3, r0
 8009c4a:	2b00      	cmp	r3, #0
 8009c4c:	d004      	beq.n	8009c58 <f_read+0x166>
 8009c4e:	68fb      	ldr	r3, [r7, #12]
 8009c50:	2201      	movs	r2, #1
 8009c52:	755a      	strb	r2, [r3, #21]
 8009c54:	2301      	movs	r3, #1
 8009c56:	e087      	b.n	8009d68 <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8009c58:	68fb      	ldr	r3, [r7, #12]
 8009c5a:	7d1b      	ldrb	r3, [r3, #20]
 8009c5c:	b25b      	sxtb	r3, r3
 8009c5e:	2b00      	cmp	r3, #0
 8009c60:	da14      	bge.n	8009c8c <f_read+0x19a>
 8009c62:	68fb      	ldr	r3, [r7, #12]
 8009c64:	6a1a      	ldr	r2, [r3, #32]
 8009c66:	69bb      	ldr	r3, [r7, #24]
 8009c68:	1ad3      	subs	r3, r2, r3
 8009c6a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009c6c:	429a      	cmp	r2, r3
 8009c6e:	d90d      	bls.n	8009c8c <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 8009c70:	68fb      	ldr	r3, [r7, #12]
 8009c72:	6a1a      	ldr	r2, [r3, #32]
 8009c74:	69bb      	ldr	r3, [r7, #24]
 8009c76:	1ad3      	subs	r3, r2, r3
 8009c78:	025b      	lsls	r3, r3, #9
 8009c7a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009c7c:	18d0      	adds	r0, r2, r3
 8009c7e:	68fb      	ldr	r3, [r7, #12]
 8009c80:	3330      	adds	r3, #48	@ 0x30
 8009c82:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009c86:	4619      	mov	r1, r3
 8009c88:	f7fd fc42 	bl	8007510 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8009c8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c8e:	025b      	lsls	r3, r3, #9
 8009c90:	62fb      	str	r3, [r7, #44]	@ 0x2c
				continue;
 8009c92:	e050      	b.n	8009d36 <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 8009c94:	68fb      	ldr	r3, [r7, #12]
 8009c96:	6a1b      	ldr	r3, [r3, #32]
 8009c98:	69ba      	ldr	r2, [r7, #24]
 8009c9a:	429a      	cmp	r2, r3
 8009c9c:	d02e      	beq.n	8009cfc <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8009c9e:	68fb      	ldr	r3, [r7, #12]
 8009ca0:	7d1b      	ldrb	r3, [r3, #20]
 8009ca2:	b25b      	sxtb	r3, r3
 8009ca4:	2b00      	cmp	r3, #0
 8009ca6:	da18      	bge.n	8009cda <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8009ca8:	697b      	ldr	r3, [r7, #20]
 8009caa:	7858      	ldrb	r0, [r3, #1]
 8009cac:	68fb      	ldr	r3, [r7, #12]
 8009cae:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8009cb2:	68fb      	ldr	r3, [r7, #12]
 8009cb4:	6a1a      	ldr	r2, [r3, #32]
 8009cb6:	2301      	movs	r3, #1
 8009cb8:	f7fd fb6a 	bl	8007390 <disk_write>
 8009cbc:	4603      	mov	r3, r0
 8009cbe:	2b00      	cmp	r3, #0
 8009cc0:	d004      	beq.n	8009ccc <f_read+0x1da>
 8009cc2:	68fb      	ldr	r3, [r7, #12]
 8009cc4:	2201      	movs	r2, #1
 8009cc6:	755a      	strb	r2, [r3, #21]
 8009cc8:	2301      	movs	r3, #1
 8009cca:	e04d      	b.n	8009d68 <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 8009ccc:	68fb      	ldr	r3, [r7, #12]
 8009cce:	7d1b      	ldrb	r3, [r3, #20]
 8009cd0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009cd4:	b2da      	uxtb	r2, r3
 8009cd6:	68fb      	ldr	r3, [r7, #12]
 8009cd8:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8009cda:	697b      	ldr	r3, [r7, #20]
 8009cdc:	7858      	ldrb	r0, [r3, #1]
 8009cde:	68fb      	ldr	r3, [r7, #12]
 8009ce0:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8009ce4:	2301      	movs	r3, #1
 8009ce6:	69ba      	ldr	r2, [r7, #24]
 8009ce8:	f7fd fb32 	bl	8007350 <disk_read>
 8009cec:	4603      	mov	r3, r0
 8009cee:	2b00      	cmp	r3, #0
 8009cf0:	d004      	beq.n	8009cfc <f_read+0x20a>
 8009cf2:	68fb      	ldr	r3, [r7, #12]
 8009cf4:	2201      	movs	r2, #1
 8009cf6:	755a      	strb	r2, [r3, #21]
 8009cf8:	2301      	movs	r3, #1
 8009cfa:	e035      	b.n	8009d68 <f_read+0x276>
			}
#endif
			fp->sect = sect;
 8009cfc:	68fb      	ldr	r3, [r7, #12]
 8009cfe:	69ba      	ldr	r2, [r7, #24]
 8009d00:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8009d02:	68fb      	ldr	r3, [r7, #12]
 8009d04:	699b      	ldr	r3, [r3, #24]
 8009d06:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009d0a:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 8009d0e:	62fb      	str	r3, [r7, #44]	@ 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 8009d10:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	429a      	cmp	r2, r3
 8009d16:	d901      	bls.n	8009d1c <f_read+0x22a>
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8009d1c:	68fb      	ldr	r3, [r7, #12]
 8009d1e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8009d22:	68fb      	ldr	r3, [r7, #12]
 8009d24:	699b      	ldr	r3, [r3, #24]
 8009d26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009d2a:	4413      	add	r3, r2
 8009d2c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009d2e:	4619      	mov	r1, r3
 8009d30:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8009d32:	f7fd fbed 	bl	8007510 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8009d36:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009d38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009d3a:	4413      	add	r3, r2
 8009d3c:	627b      	str	r3, [r7, #36]	@ 0x24
 8009d3e:	68fb      	ldr	r3, [r7, #12]
 8009d40:	699a      	ldr	r2, [r3, #24]
 8009d42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009d44:	441a      	add	r2, r3
 8009d46:	68fb      	ldr	r3, [r7, #12]
 8009d48:	619a      	str	r2, [r3, #24]
 8009d4a:	683b      	ldr	r3, [r7, #0]
 8009d4c:	681a      	ldr	r2, [r3, #0]
 8009d4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009d50:	441a      	add	r2, r3
 8009d52:	683b      	ldr	r3, [r7, #0]
 8009d54:	601a      	str	r2, [r3, #0]
 8009d56:	687a      	ldr	r2, [r7, #4]
 8009d58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009d5a:	1ad3      	subs	r3, r2, r3
 8009d5c:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	2b00      	cmp	r3, #0
 8009d62:	f47f af01 	bne.w	8009b68 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8009d66:	2300      	movs	r3, #0
}
 8009d68:	4618      	mov	r0, r3
 8009d6a:	3738      	adds	r7, #56	@ 0x38
 8009d6c:	46bd      	mov	sp, r7
 8009d6e:	bd80      	pop	{r7, pc}

08009d70 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8009d70:	b580      	push	{r7, lr}
 8009d72:	b086      	sub	sp, #24
 8009d74:	af00      	add	r7, sp, #0
 8009d76:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	f107 0208 	add.w	r2, r7, #8
 8009d7e:	4611      	mov	r1, r2
 8009d80:	4618      	mov	r0, r3
 8009d82:	f7ff fb87 	bl	8009494 <validate>
 8009d86:	4603      	mov	r3, r0
 8009d88:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8009d8a:	7dfb      	ldrb	r3, [r7, #23]
 8009d8c:	2b00      	cmp	r3, #0
 8009d8e:	d168      	bne.n	8009e62 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	7d1b      	ldrb	r3, [r3, #20]
 8009d94:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009d98:	2b00      	cmp	r3, #0
 8009d9a:	d062      	beq.n	8009e62 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	7d1b      	ldrb	r3, [r3, #20]
 8009da0:	b25b      	sxtb	r3, r3
 8009da2:	2b00      	cmp	r3, #0
 8009da4:	da15      	bge.n	8009dd2 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8009da6:	68bb      	ldr	r3, [r7, #8]
 8009da8:	7858      	ldrb	r0, [r3, #1]
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	6a1a      	ldr	r2, [r3, #32]
 8009db4:	2301      	movs	r3, #1
 8009db6:	f7fd faeb 	bl	8007390 <disk_write>
 8009dba:	4603      	mov	r3, r0
 8009dbc:	2b00      	cmp	r3, #0
 8009dbe:	d001      	beq.n	8009dc4 <f_sync+0x54>
 8009dc0:	2301      	movs	r3, #1
 8009dc2:	e04f      	b.n	8009e64 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	7d1b      	ldrb	r3, [r3, #20]
 8009dc8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009dcc:	b2da      	uxtb	r2, r3
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8009dd2:	f7fd f83b 	bl	8006e4c <get_fattime>
 8009dd6:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8009dd8:	68ba      	ldr	r2, [r7, #8]
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009dde:	4619      	mov	r1, r3
 8009de0:	4610      	mov	r0, r2
 8009de2:	f7fd fdc3 	bl	800796c <move_window>
 8009de6:	4603      	mov	r3, r0
 8009de8:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8009dea:	7dfb      	ldrb	r3, [r7, #23]
 8009dec:	2b00      	cmp	r3, #0
 8009dee:	d138      	bne.n	8009e62 <f_sync+0xf2>
					dir = fp->dir_ptr;
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009df4:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8009df6:	68fb      	ldr	r3, [r7, #12]
 8009df8:	330b      	adds	r3, #11
 8009dfa:	781a      	ldrb	r2, [r3, #0]
 8009dfc:	68fb      	ldr	r3, [r7, #12]
 8009dfe:	330b      	adds	r3, #11
 8009e00:	f042 0220 	orr.w	r2, r2, #32
 8009e04:	b2d2      	uxtb	r2, r2
 8009e06:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	6818      	ldr	r0, [r3, #0]
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	689b      	ldr	r3, [r3, #8]
 8009e10:	461a      	mov	r2, r3
 8009e12:	68f9      	ldr	r1, [r7, #12]
 8009e14:	f7fe facd 	bl	80083b2 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8009e18:	68fb      	ldr	r3, [r7, #12]
 8009e1a:	f103 021c 	add.w	r2, r3, #28
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	68db      	ldr	r3, [r3, #12]
 8009e22:	4619      	mov	r1, r3
 8009e24:	4610      	mov	r0, r2
 8009e26:	f7fd fb47 	bl	80074b8 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8009e2a:	68fb      	ldr	r3, [r7, #12]
 8009e2c:	3316      	adds	r3, #22
 8009e2e:	6939      	ldr	r1, [r7, #16]
 8009e30:	4618      	mov	r0, r3
 8009e32:	f7fd fb41 	bl	80074b8 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8009e36:	68fb      	ldr	r3, [r7, #12]
 8009e38:	3312      	adds	r3, #18
 8009e3a:	2100      	movs	r1, #0
 8009e3c:	4618      	mov	r0, r3
 8009e3e:	f7fd fb20 	bl	8007482 <st_word>
					fs->wflag = 1;
 8009e42:	68bb      	ldr	r3, [r7, #8]
 8009e44:	2201      	movs	r2, #1
 8009e46:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8009e48:	68bb      	ldr	r3, [r7, #8]
 8009e4a:	4618      	mov	r0, r3
 8009e4c:	f7fd fdbc 	bl	80079c8 <sync_fs>
 8009e50:	4603      	mov	r3, r0
 8009e52:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	7d1b      	ldrb	r3, [r3, #20]
 8009e58:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009e5c:	b2da      	uxtb	r2, r3
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8009e62:	7dfb      	ldrb	r3, [r7, #23]
}
 8009e64:	4618      	mov	r0, r3
 8009e66:	3718      	adds	r7, #24
 8009e68:	46bd      	mov	sp, r7
 8009e6a:	bd80      	pop	{r7, pc}

08009e6c <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8009e6c:	b580      	push	{r7, lr}
 8009e6e:	b084      	sub	sp, #16
 8009e70:	af00      	add	r7, sp, #0
 8009e72:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8009e74:	6878      	ldr	r0, [r7, #4]
 8009e76:	f7ff ff7b 	bl	8009d70 <f_sync>
 8009e7a:	4603      	mov	r3, r0
 8009e7c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8009e7e:	7bfb      	ldrb	r3, [r7, #15]
 8009e80:	2b00      	cmp	r3, #0
 8009e82:	d118      	bne.n	8009eb6 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	f107 0208 	add.w	r2, r7, #8
 8009e8a:	4611      	mov	r1, r2
 8009e8c:	4618      	mov	r0, r3
 8009e8e:	f7ff fb01 	bl	8009494 <validate>
 8009e92:	4603      	mov	r3, r0
 8009e94:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8009e96:	7bfb      	ldrb	r3, [r7, #15]
 8009e98:	2b00      	cmp	r3, #0
 8009e9a:	d10c      	bne.n	8009eb6 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	691b      	ldr	r3, [r3, #16]
 8009ea0:	4618      	mov	r0, r3
 8009ea2:	f7fd fcbf 	bl	8007824 <dec_lock>
 8009ea6:	4603      	mov	r3, r0
 8009ea8:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8009eaa:	7bfb      	ldrb	r3, [r7, #15]
 8009eac:	2b00      	cmp	r3, #0
 8009eae:	d102      	bne.n	8009eb6 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	2200      	movs	r2, #0
 8009eb4:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8009eb6:	7bfb      	ldrb	r3, [r7, #15]
}
 8009eb8:	4618      	mov	r0, r3
 8009eba:	3710      	adds	r7, #16
 8009ebc:	46bd      	mov	sp, r7
 8009ebe:	bd80      	pop	{r7, pc}

08009ec0 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8009ec0:	b480      	push	{r7}
 8009ec2:	b087      	sub	sp, #28
 8009ec4:	af00      	add	r7, sp, #0
 8009ec6:	60f8      	str	r0, [r7, #12]
 8009ec8:	60b9      	str	r1, [r7, #8]
 8009eca:	4613      	mov	r3, r2
 8009ecc:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8009ece:	2301      	movs	r3, #1
 8009ed0:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8009ed2:	2300      	movs	r3, #0
 8009ed4:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8009ed6:	4b1f      	ldr	r3, [pc, #124]	@ (8009f54 <FATFS_LinkDriverEx+0x94>)
 8009ed8:	7a5b      	ldrb	r3, [r3, #9]
 8009eda:	b2db      	uxtb	r3, r3
 8009edc:	2b00      	cmp	r3, #0
 8009ede:	d131      	bne.n	8009f44 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8009ee0:	4b1c      	ldr	r3, [pc, #112]	@ (8009f54 <FATFS_LinkDriverEx+0x94>)
 8009ee2:	7a5b      	ldrb	r3, [r3, #9]
 8009ee4:	b2db      	uxtb	r3, r3
 8009ee6:	461a      	mov	r2, r3
 8009ee8:	4b1a      	ldr	r3, [pc, #104]	@ (8009f54 <FATFS_LinkDriverEx+0x94>)
 8009eea:	2100      	movs	r1, #0
 8009eec:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8009eee:	4b19      	ldr	r3, [pc, #100]	@ (8009f54 <FATFS_LinkDriverEx+0x94>)
 8009ef0:	7a5b      	ldrb	r3, [r3, #9]
 8009ef2:	b2db      	uxtb	r3, r3
 8009ef4:	4a17      	ldr	r2, [pc, #92]	@ (8009f54 <FATFS_LinkDriverEx+0x94>)
 8009ef6:	009b      	lsls	r3, r3, #2
 8009ef8:	4413      	add	r3, r2
 8009efa:	68fa      	ldr	r2, [r7, #12]
 8009efc:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8009efe:	4b15      	ldr	r3, [pc, #84]	@ (8009f54 <FATFS_LinkDriverEx+0x94>)
 8009f00:	7a5b      	ldrb	r3, [r3, #9]
 8009f02:	b2db      	uxtb	r3, r3
 8009f04:	461a      	mov	r2, r3
 8009f06:	4b13      	ldr	r3, [pc, #76]	@ (8009f54 <FATFS_LinkDriverEx+0x94>)
 8009f08:	4413      	add	r3, r2
 8009f0a:	79fa      	ldrb	r2, [r7, #7]
 8009f0c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8009f0e:	4b11      	ldr	r3, [pc, #68]	@ (8009f54 <FATFS_LinkDriverEx+0x94>)
 8009f10:	7a5b      	ldrb	r3, [r3, #9]
 8009f12:	b2db      	uxtb	r3, r3
 8009f14:	1c5a      	adds	r2, r3, #1
 8009f16:	b2d1      	uxtb	r1, r2
 8009f18:	4a0e      	ldr	r2, [pc, #56]	@ (8009f54 <FATFS_LinkDriverEx+0x94>)
 8009f1a:	7251      	strb	r1, [r2, #9]
 8009f1c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8009f1e:	7dbb      	ldrb	r3, [r7, #22]
 8009f20:	3330      	adds	r3, #48	@ 0x30
 8009f22:	b2da      	uxtb	r2, r3
 8009f24:	68bb      	ldr	r3, [r7, #8]
 8009f26:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8009f28:	68bb      	ldr	r3, [r7, #8]
 8009f2a:	3301      	adds	r3, #1
 8009f2c:	223a      	movs	r2, #58	@ 0x3a
 8009f2e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8009f30:	68bb      	ldr	r3, [r7, #8]
 8009f32:	3302      	adds	r3, #2
 8009f34:	222f      	movs	r2, #47	@ 0x2f
 8009f36:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8009f38:	68bb      	ldr	r3, [r7, #8]
 8009f3a:	3303      	adds	r3, #3
 8009f3c:	2200      	movs	r2, #0
 8009f3e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8009f40:	2300      	movs	r3, #0
 8009f42:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8009f44:	7dfb      	ldrb	r3, [r7, #23]
}
 8009f46:	4618      	mov	r0, r3
 8009f48:	371c      	adds	r7, #28
 8009f4a:	46bd      	mov	sp, r7
 8009f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f50:	4770      	bx	lr
 8009f52:	bf00      	nop
 8009f54:	20000fa4 	.word	0x20000fa4

08009f58 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8009f58:	b580      	push	{r7, lr}
 8009f5a:	b082      	sub	sp, #8
 8009f5c:	af00      	add	r7, sp, #0
 8009f5e:	6078      	str	r0, [r7, #4]
 8009f60:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8009f62:	2200      	movs	r2, #0
 8009f64:	6839      	ldr	r1, [r7, #0]
 8009f66:	6878      	ldr	r0, [r7, #4]
 8009f68:	f7ff ffaa 	bl	8009ec0 <FATFS_LinkDriverEx>
 8009f6c:	4603      	mov	r3, r0
}
 8009f6e:	4618      	mov	r0, r3
 8009f70:	3708      	adds	r7, #8
 8009f72:	46bd      	mov	sp, r7
 8009f74:	bd80      	pop	{r7, pc}
	...

08009f78 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 8009f78:	b480      	push	{r7}
 8009f7a:	b085      	sub	sp, #20
 8009f7c:	af00      	add	r7, sp, #0
 8009f7e:	4603      	mov	r3, r0
 8009f80:	6039      	str	r1, [r7, #0]
 8009f82:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 8009f84:	88fb      	ldrh	r3, [r7, #6]
 8009f86:	2b7f      	cmp	r3, #127	@ 0x7f
 8009f88:	d802      	bhi.n	8009f90 <ff_convert+0x18>
		c = chr;
 8009f8a:	88fb      	ldrh	r3, [r7, #6]
 8009f8c:	81fb      	strh	r3, [r7, #14]
 8009f8e:	e025      	b.n	8009fdc <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 8009f90:	683b      	ldr	r3, [r7, #0]
 8009f92:	2b00      	cmp	r3, #0
 8009f94:	d00b      	beq.n	8009fae <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 8009f96:	88fb      	ldrh	r3, [r7, #6]
 8009f98:	2bff      	cmp	r3, #255	@ 0xff
 8009f9a:	d805      	bhi.n	8009fa8 <ff_convert+0x30>
 8009f9c:	88fb      	ldrh	r3, [r7, #6]
 8009f9e:	3b80      	subs	r3, #128	@ 0x80
 8009fa0:	4a12      	ldr	r2, [pc, #72]	@ (8009fec <ff_convert+0x74>)
 8009fa2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009fa6:	e000      	b.n	8009faa <ff_convert+0x32>
 8009fa8:	2300      	movs	r3, #0
 8009faa:	81fb      	strh	r3, [r7, #14]
 8009fac:	e016      	b.n	8009fdc <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 8009fae:	2300      	movs	r3, #0
 8009fb0:	81fb      	strh	r3, [r7, #14]
 8009fb2:	e009      	b.n	8009fc8 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 8009fb4:	89fb      	ldrh	r3, [r7, #14]
 8009fb6:	4a0d      	ldr	r2, [pc, #52]	@ (8009fec <ff_convert+0x74>)
 8009fb8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009fbc:	88fa      	ldrh	r2, [r7, #6]
 8009fbe:	429a      	cmp	r2, r3
 8009fc0:	d006      	beq.n	8009fd0 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 8009fc2:	89fb      	ldrh	r3, [r7, #14]
 8009fc4:	3301      	adds	r3, #1
 8009fc6:	81fb      	strh	r3, [r7, #14]
 8009fc8:	89fb      	ldrh	r3, [r7, #14]
 8009fca:	2b7f      	cmp	r3, #127	@ 0x7f
 8009fcc:	d9f2      	bls.n	8009fb4 <ff_convert+0x3c>
 8009fce:	e000      	b.n	8009fd2 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 8009fd0:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 8009fd2:	89fb      	ldrh	r3, [r7, #14]
 8009fd4:	3380      	adds	r3, #128	@ 0x80
 8009fd6:	b29b      	uxth	r3, r3
 8009fd8:	b2db      	uxtb	r3, r3
 8009fda:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 8009fdc:	89fb      	ldrh	r3, [r7, #14]
}
 8009fde:	4618      	mov	r0, r3
 8009fe0:	3714      	adds	r7, #20
 8009fe2:	46bd      	mov	sp, r7
 8009fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fe8:	4770      	bx	lr
 8009fea:	bf00      	nop
 8009fec:	0800ac04 	.word	0x0800ac04

08009ff0 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 8009ff0:	b480      	push	{r7}
 8009ff2:	b087      	sub	sp, #28
 8009ff4:	af00      	add	r7, sp, #0
 8009ff6:	4603      	mov	r3, r0
 8009ff8:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 8009ffa:	88fb      	ldrh	r3, [r7, #6]
 8009ffc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a000:	d201      	bcs.n	800a006 <ff_wtoupper+0x16>
 800a002:	4b3e      	ldr	r3, [pc, #248]	@ (800a0fc <ff_wtoupper+0x10c>)
 800a004:	e000      	b.n	800a008 <ff_wtoupper+0x18>
 800a006:	4b3e      	ldr	r3, [pc, #248]	@ (800a100 <ff_wtoupper+0x110>)
 800a008:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 800a00a:	697b      	ldr	r3, [r7, #20]
 800a00c:	1c9a      	adds	r2, r3, #2
 800a00e:	617a      	str	r2, [r7, #20]
 800a010:	881b      	ldrh	r3, [r3, #0]
 800a012:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 800a014:	8a7b      	ldrh	r3, [r7, #18]
 800a016:	2b00      	cmp	r3, #0
 800a018:	d068      	beq.n	800a0ec <ff_wtoupper+0xfc>
 800a01a:	88fa      	ldrh	r2, [r7, #6]
 800a01c:	8a7b      	ldrh	r3, [r7, #18]
 800a01e:	429a      	cmp	r2, r3
 800a020:	d364      	bcc.n	800a0ec <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800a022:	697b      	ldr	r3, [r7, #20]
 800a024:	1c9a      	adds	r2, r3, #2
 800a026:	617a      	str	r2, [r7, #20]
 800a028:	881b      	ldrh	r3, [r3, #0]
 800a02a:	823b      	strh	r3, [r7, #16]
 800a02c:	8a3b      	ldrh	r3, [r7, #16]
 800a02e:	0a1b      	lsrs	r3, r3, #8
 800a030:	81fb      	strh	r3, [r7, #14]
 800a032:	8a3b      	ldrh	r3, [r7, #16]
 800a034:	b2db      	uxtb	r3, r3
 800a036:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 800a038:	88fa      	ldrh	r2, [r7, #6]
 800a03a:	8a79      	ldrh	r1, [r7, #18]
 800a03c:	8a3b      	ldrh	r3, [r7, #16]
 800a03e:	440b      	add	r3, r1
 800a040:	429a      	cmp	r2, r3
 800a042:	da49      	bge.n	800a0d8 <ff_wtoupper+0xe8>
			switch (cmd) {
 800a044:	89fb      	ldrh	r3, [r7, #14]
 800a046:	2b08      	cmp	r3, #8
 800a048:	d84f      	bhi.n	800a0ea <ff_wtoupper+0xfa>
 800a04a:	a201      	add	r2, pc, #4	@ (adr r2, 800a050 <ff_wtoupper+0x60>)
 800a04c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a050:	0800a075 	.word	0x0800a075
 800a054:	0800a087 	.word	0x0800a087
 800a058:	0800a09d 	.word	0x0800a09d
 800a05c:	0800a0a5 	.word	0x0800a0a5
 800a060:	0800a0ad 	.word	0x0800a0ad
 800a064:	0800a0b5 	.word	0x0800a0b5
 800a068:	0800a0bd 	.word	0x0800a0bd
 800a06c:	0800a0c5 	.word	0x0800a0c5
 800a070:	0800a0cd 	.word	0x0800a0cd
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 800a074:	88fa      	ldrh	r2, [r7, #6]
 800a076:	8a7b      	ldrh	r3, [r7, #18]
 800a078:	1ad3      	subs	r3, r2, r3
 800a07a:	005b      	lsls	r3, r3, #1
 800a07c:	697a      	ldr	r2, [r7, #20]
 800a07e:	4413      	add	r3, r2
 800a080:	881b      	ldrh	r3, [r3, #0]
 800a082:	80fb      	strh	r3, [r7, #6]
 800a084:	e027      	b.n	800a0d6 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 800a086:	88fa      	ldrh	r2, [r7, #6]
 800a088:	8a7b      	ldrh	r3, [r7, #18]
 800a08a:	1ad3      	subs	r3, r2, r3
 800a08c:	b29b      	uxth	r3, r3
 800a08e:	f003 0301 	and.w	r3, r3, #1
 800a092:	b29b      	uxth	r3, r3
 800a094:	88fa      	ldrh	r2, [r7, #6]
 800a096:	1ad3      	subs	r3, r2, r3
 800a098:	80fb      	strh	r3, [r7, #6]
 800a09a:	e01c      	b.n	800a0d6 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 800a09c:	88fb      	ldrh	r3, [r7, #6]
 800a09e:	3b10      	subs	r3, #16
 800a0a0:	80fb      	strh	r3, [r7, #6]
 800a0a2:	e018      	b.n	800a0d6 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 800a0a4:	88fb      	ldrh	r3, [r7, #6]
 800a0a6:	3b20      	subs	r3, #32
 800a0a8:	80fb      	strh	r3, [r7, #6]
 800a0aa:	e014      	b.n	800a0d6 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 800a0ac:	88fb      	ldrh	r3, [r7, #6]
 800a0ae:	3b30      	subs	r3, #48	@ 0x30
 800a0b0:	80fb      	strh	r3, [r7, #6]
 800a0b2:	e010      	b.n	800a0d6 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 800a0b4:	88fb      	ldrh	r3, [r7, #6]
 800a0b6:	3b1a      	subs	r3, #26
 800a0b8:	80fb      	strh	r3, [r7, #6]
 800a0ba:	e00c      	b.n	800a0d6 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 800a0bc:	88fb      	ldrh	r3, [r7, #6]
 800a0be:	3308      	adds	r3, #8
 800a0c0:	80fb      	strh	r3, [r7, #6]
 800a0c2:	e008      	b.n	800a0d6 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 800a0c4:	88fb      	ldrh	r3, [r7, #6]
 800a0c6:	3b50      	subs	r3, #80	@ 0x50
 800a0c8:	80fb      	strh	r3, [r7, #6]
 800a0ca:	e004      	b.n	800a0d6 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 800a0cc:	88fb      	ldrh	r3, [r7, #6]
 800a0ce:	f5a3 53e3 	sub.w	r3, r3, #7264	@ 0x1c60
 800a0d2:	80fb      	strh	r3, [r7, #6]
 800a0d4:	bf00      	nop
			}
			break;
 800a0d6:	e008      	b.n	800a0ea <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 800a0d8:	89fb      	ldrh	r3, [r7, #14]
 800a0da:	2b00      	cmp	r3, #0
 800a0dc:	d195      	bne.n	800a00a <ff_wtoupper+0x1a>
 800a0de:	8a3b      	ldrh	r3, [r7, #16]
 800a0e0:	005b      	lsls	r3, r3, #1
 800a0e2:	697a      	ldr	r2, [r7, #20]
 800a0e4:	4413      	add	r3, r2
 800a0e6:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 800a0e8:	e78f      	b.n	800a00a <ff_wtoupper+0x1a>
			break;
 800a0ea:	bf00      	nop
	}

	return chr;
 800a0ec:	88fb      	ldrh	r3, [r7, #6]
}
 800a0ee:	4618      	mov	r0, r3
 800a0f0:	371c      	adds	r7, #28
 800a0f2:	46bd      	mov	sp, r7
 800a0f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0f8:	4770      	bx	lr
 800a0fa:	bf00      	nop
 800a0fc:	0800ad04 	.word	0x0800ad04
 800a100:	0800aef8 	.word	0x0800aef8

0800a104 <std>:
 800a104:	2300      	movs	r3, #0
 800a106:	b510      	push	{r4, lr}
 800a108:	4604      	mov	r4, r0
 800a10a:	e9c0 3300 	strd	r3, r3, [r0]
 800a10e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a112:	6083      	str	r3, [r0, #8]
 800a114:	8181      	strh	r1, [r0, #12]
 800a116:	6643      	str	r3, [r0, #100]	@ 0x64
 800a118:	81c2      	strh	r2, [r0, #14]
 800a11a:	6183      	str	r3, [r0, #24]
 800a11c:	4619      	mov	r1, r3
 800a11e:	2208      	movs	r2, #8
 800a120:	305c      	adds	r0, #92	@ 0x5c
 800a122:	f000 f9f7 	bl	800a514 <memset>
 800a126:	4b0d      	ldr	r3, [pc, #52]	@ (800a15c <std+0x58>)
 800a128:	6263      	str	r3, [r4, #36]	@ 0x24
 800a12a:	4b0d      	ldr	r3, [pc, #52]	@ (800a160 <std+0x5c>)
 800a12c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800a12e:	4b0d      	ldr	r3, [pc, #52]	@ (800a164 <std+0x60>)
 800a130:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800a132:	4b0d      	ldr	r3, [pc, #52]	@ (800a168 <std+0x64>)
 800a134:	6323      	str	r3, [r4, #48]	@ 0x30
 800a136:	4b0d      	ldr	r3, [pc, #52]	@ (800a16c <std+0x68>)
 800a138:	6224      	str	r4, [r4, #32]
 800a13a:	429c      	cmp	r4, r3
 800a13c:	d006      	beq.n	800a14c <std+0x48>
 800a13e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800a142:	4294      	cmp	r4, r2
 800a144:	d002      	beq.n	800a14c <std+0x48>
 800a146:	33d0      	adds	r3, #208	@ 0xd0
 800a148:	429c      	cmp	r4, r3
 800a14a:	d105      	bne.n	800a158 <std+0x54>
 800a14c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800a150:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a154:	f000 ba56 	b.w	800a604 <__retarget_lock_init_recursive>
 800a158:	bd10      	pop	{r4, pc}
 800a15a:	bf00      	nop
 800a15c:	0800a345 	.word	0x0800a345
 800a160:	0800a367 	.word	0x0800a367
 800a164:	0800a39f 	.word	0x0800a39f
 800a168:	0800a3c3 	.word	0x0800a3c3
 800a16c:	20000fb0 	.word	0x20000fb0

0800a170 <stdio_exit_handler>:
 800a170:	4a02      	ldr	r2, [pc, #8]	@ (800a17c <stdio_exit_handler+0xc>)
 800a172:	4903      	ldr	r1, [pc, #12]	@ (800a180 <stdio_exit_handler+0x10>)
 800a174:	4803      	ldr	r0, [pc, #12]	@ (800a184 <stdio_exit_handler+0x14>)
 800a176:	f000 b869 	b.w	800a24c <_fwalk_sglue>
 800a17a:	bf00      	nop
 800a17c:	2000000c 	.word	0x2000000c
 800a180:	0800a905 	.word	0x0800a905
 800a184:	2000001c 	.word	0x2000001c

0800a188 <cleanup_stdio>:
 800a188:	6841      	ldr	r1, [r0, #4]
 800a18a:	4b0c      	ldr	r3, [pc, #48]	@ (800a1bc <cleanup_stdio+0x34>)
 800a18c:	4299      	cmp	r1, r3
 800a18e:	b510      	push	{r4, lr}
 800a190:	4604      	mov	r4, r0
 800a192:	d001      	beq.n	800a198 <cleanup_stdio+0x10>
 800a194:	f000 fbb6 	bl	800a904 <_fflush_r>
 800a198:	68a1      	ldr	r1, [r4, #8]
 800a19a:	4b09      	ldr	r3, [pc, #36]	@ (800a1c0 <cleanup_stdio+0x38>)
 800a19c:	4299      	cmp	r1, r3
 800a19e:	d002      	beq.n	800a1a6 <cleanup_stdio+0x1e>
 800a1a0:	4620      	mov	r0, r4
 800a1a2:	f000 fbaf 	bl	800a904 <_fflush_r>
 800a1a6:	68e1      	ldr	r1, [r4, #12]
 800a1a8:	4b06      	ldr	r3, [pc, #24]	@ (800a1c4 <cleanup_stdio+0x3c>)
 800a1aa:	4299      	cmp	r1, r3
 800a1ac:	d004      	beq.n	800a1b8 <cleanup_stdio+0x30>
 800a1ae:	4620      	mov	r0, r4
 800a1b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a1b4:	f000 bba6 	b.w	800a904 <_fflush_r>
 800a1b8:	bd10      	pop	{r4, pc}
 800a1ba:	bf00      	nop
 800a1bc:	20000fb0 	.word	0x20000fb0
 800a1c0:	20001018 	.word	0x20001018
 800a1c4:	20001080 	.word	0x20001080

0800a1c8 <global_stdio_init.part.0>:
 800a1c8:	b510      	push	{r4, lr}
 800a1ca:	4b0b      	ldr	r3, [pc, #44]	@ (800a1f8 <global_stdio_init.part.0+0x30>)
 800a1cc:	4c0b      	ldr	r4, [pc, #44]	@ (800a1fc <global_stdio_init.part.0+0x34>)
 800a1ce:	4a0c      	ldr	r2, [pc, #48]	@ (800a200 <global_stdio_init.part.0+0x38>)
 800a1d0:	601a      	str	r2, [r3, #0]
 800a1d2:	4620      	mov	r0, r4
 800a1d4:	2200      	movs	r2, #0
 800a1d6:	2104      	movs	r1, #4
 800a1d8:	f7ff ff94 	bl	800a104 <std>
 800a1dc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800a1e0:	2201      	movs	r2, #1
 800a1e2:	2109      	movs	r1, #9
 800a1e4:	f7ff ff8e 	bl	800a104 <std>
 800a1e8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800a1ec:	2202      	movs	r2, #2
 800a1ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a1f2:	2112      	movs	r1, #18
 800a1f4:	f7ff bf86 	b.w	800a104 <std>
 800a1f8:	200010e8 	.word	0x200010e8
 800a1fc:	20000fb0 	.word	0x20000fb0
 800a200:	0800a171 	.word	0x0800a171

0800a204 <__sfp_lock_acquire>:
 800a204:	4801      	ldr	r0, [pc, #4]	@ (800a20c <__sfp_lock_acquire+0x8>)
 800a206:	f000 b9fe 	b.w	800a606 <__retarget_lock_acquire_recursive>
 800a20a:	bf00      	nop
 800a20c:	200010f1 	.word	0x200010f1

0800a210 <__sfp_lock_release>:
 800a210:	4801      	ldr	r0, [pc, #4]	@ (800a218 <__sfp_lock_release+0x8>)
 800a212:	f000 b9f9 	b.w	800a608 <__retarget_lock_release_recursive>
 800a216:	bf00      	nop
 800a218:	200010f1 	.word	0x200010f1

0800a21c <__sinit>:
 800a21c:	b510      	push	{r4, lr}
 800a21e:	4604      	mov	r4, r0
 800a220:	f7ff fff0 	bl	800a204 <__sfp_lock_acquire>
 800a224:	6a23      	ldr	r3, [r4, #32]
 800a226:	b11b      	cbz	r3, 800a230 <__sinit+0x14>
 800a228:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a22c:	f7ff bff0 	b.w	800a210 <__sfp_lock_release>
 800a230:	4b04      	ldr	r3, [pc, #16]	@ (800a244 <__sinit+0x28>)
 800a232:	6223      	str	r3, [r4, #32]
 800a234:	4b04      	ldr	r3, [pc, #16]	@ (800a248 <__sinit+0x2c>)
 800a236:	681b      	ldr	r3, [r3, #0]
 800a238:	2b00      	cmp	r3, #0
 800a23a:	d1f5      	bne.n	800a228 <__sinit+0xc>
 800a23c:	f7ff ffc4 	bl	800a1c8 <global_stdio_init.part.0>
 800a240:	e7f2      	b.n	800a228 <__sinit+0xc>
 800a242:	bf00      	nop
 800a244:	0800a189 	.word	0x0800a189
 800a248:	200010e8 	.word	0x200010e8

0800a24c <_fwalk_sglue>:
 800a24c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a250:	4607      	mov	r7, r0
 800a252:	4688      	mov	r8, r1
 800a254:	4614      	mov	r4, r2
 800a256:	2600      	movs	r6, #0
 800a258:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a25c:	f1b9 0901 	subs.w	r9, r9, #1
 800a260:	d505      	bpl.n	800a26e <_fwalk_sglue+0x22>
 800a262:	6824      	ldr	r4, [r4, #0]
 800a264:	2c00      	cmp	r4, #0
 800a266:	d1f7      	bne.n	800a258 <_fwalk_sglue+0xc>
 800a268:	4630      	mov	r0, r6
 800a26a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a26e:	89ab      	ldrh	r3, [r5, #12]
 800a270:	2b01      	cmp	r3, #1
 800a272:	d907      	bls.n	800a284 <_fwalk_sglue+0x38>
 800a274:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a278:	3301      	adds	r3, #1
 800a27a:	d003      	beq.n	800a284 <_fwalk_sglue+0x38>
 800a27c:	4629      	mov	r1, r5
 800a27e:	4638      	mov	r0, r7
 800a280:	47c0      	blx	r8
 800a282:	4306      	orrs	r6, r0
 800a284:	3568      	adds	r5, #104	@ 0x68
 800a286:	e7e9      	b.n	800a25c <_fwalk_sglue+0x10>

0800a288 <_puts_r>:
 800a288:	6a03      	ldr	r3, [r0, #32]
 800a28a:	b570      	push	{r4, r5, r6, lr}
 800a28c:	6884      	ldr	r4, [r0, #8]
 800a28e:	4605      	mov	r5, r0
 800a290:	460e      	mov	r6, r1
 800a292:	b90b      	cbnz	r3, 800a298 <_puts_r+0x10>
 800a294:	f7ff ffc2 	bl	800a21c <__sinit>
 800a298:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a29a:	07db      	lsls	r3, r3, #31
 800a29c:	d405      	bmi.n	800a2aa <_puts_r+0x22>
 800a29e:	89a3      	ldrh	r3, [r4, #12]
 800a2a0:	0598      	lsls	r0, r3, #22
 800a2a2:	d402      	bmi.n	800a2aa <_puts_r+0x22>
 800a2a4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a2a6:	f000 f9ae 	bl	800a606 <__retarget_lock_acquire_recursive>
 800a2aa:	89a3      	ldrh	r3, [r4, #12]
 800a2ac:	0719      	lsls	r1, r3, #28
 800a2ae:	d502      	bpl.n	800a2b6 <_puts_r+0x2e>
 800a2b0:	6923      	ldr	r3, [r4, #16]
 800a2b2:	2b00      	cmp	r3, #0
 800a2b4:	d135      	bne.n	800a322 <_puts_r+0x9a>
 800a2b6:	4621      	mov	r1, r4
 800a2b8:	4628      	mov	r0, r5
 800a2ba:	f000 f8c5 	bl	800a448 <__swsetup_r>
 800a2be:	b380      	cbz	r0, 800a322 <_puts_r+0x9a>
 800a2c0:	f04f 35ff 	mov.w	r5, #4294967295
 800a2c4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a2c6:	07da      	lsls	r2, r3, #31
 800a2c8:	d405      	bmi.n	800a2d6 <_puts_r+0x4e>
 800a2ca:	89a3      	ldrh	r3, [r4, #12]
 800a2cc:	059b      	lsls	r3, r3, #22
 800a2ce:	d402      	bmi.n	800a2d6 <_puts_r+0x4e>
 800a2d0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a2d2:	f000 f999 	bl	800a608 <__retarget_lock_release_recursive>
 800a2d6:	4628      	mov	r0, r5
 800a2d8:	bd70      	pop	{r4, r5, r6, pc}
 800a2da:	2b00      	cmp	r3, #0
 800a2dc:	da04      	bge.n	800a2e8 <_puts_r+0x60>
 800a2de:	69a2      	ldr	r2, [r4, #24]
 800a2e0:	429a      	cmp	r2, r3
 800a2e2:	dc17      	bgt.n	800a314 <_puts_r+0x8c>
 800a2e4:	290a      	cmp	r1, #10
 800a2e6:	d015      	beq.n	800a314 <_puts_r+0x8c>
 800a2e8:	6823      	ldr	r3, [r4, #0]
 800a2ea:	1c5a      	adds	r2, r3, #1
 800a2ec:	6022      	str	r2, [r4, #0]
 800a2ee:	7019      	strb	r1, [r3, #0]
 800a2f0:	68a3      	ldr	r3, [r4, #8]
 800a2f2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800a2f6:	3b01      	subs	r3, #1
 800a2f8:	60a3      	str	r3, [r4, #8]
 800a2fa:	2900      	cmp	r1, #0
 800a2fc:	d1ed      	bne.n	800a2da <_puts_r+0x52>
 800a2fe:	2b00      	cmp	r3, #0
 800a300:	da11      	bge.n	800a326 <_puts_r+0x9e>
 800a302:	4622      	mov	r2, r4
 800a304:	210a      	movs	r1, #10
 800a306:	4628      	mov	r0, r5
 800a308:	f000 f85f 	bl	800a3ca <__swbuf_r>
 800a30c:	3001      	adds	r0, #1
 800a30e:	d0d7      	beq.n	800a2c0 <_puts_r+0x38>
 800a310:	250a      	movs	r5, #10
 800a312:	e7d7      	b.n	800a2c4 <_puts_r+0x3c>
 800a314:	4622      	mov	r2, r4
 800a316:	4628      	mov	r0, r5
 800a318:	f000 f857 	bl	800a3ca <__swbuf_r>
 800a31c:	3001      	adds	r0, #1
 800a31e:	d1e7      	bne.n	800a2f0 <_puts_r+0x68>
 800a320:	e7ce      	b.n	800a2c0 <_puts_r+0x38>
 800a322:	3e01      	subs	r6, #1
 800a324:	e7e4      	b.n	800a2f0 <_puts_r+0x68>
 800a326:	6823      	ldr	r3, [r4, #0]
 800a328:	1c5a      	adds	r2, r3, #1
 800a32a:	6022      	str	r2, [r4, #0]
 800a32c:	220a      	movs	r2, #10
 800a32e:	701a      	strb	r2, [r3, #0]
 800a330:	e7ee      	b.n	800a310 <_puts_r+0x88>
	...

0800a334 <puts>:
 800a334:	4b02      	ldr	r3, [pc, #8]	@ (800a340 <puts+0xc>)
 800a336:	4601      	mov	r1, r0
 800a338:	6818      	ldr	r0, [r3, #0]
 800a33a:	f7ff bfa5 	b.w	800a288 <_puts_r>
 800a33e:	bf00      	nop
 800a340:	20000018 	.word	0x20000018

0800a344 <__sread>:
 800a344:	b510      	push	{r4, lr}
 800a346:	460c      	mov	r4, r1
 800a348:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a34c:	f000 f90c 	bl	800a568 <_read_r>
 800a350:	2800      	cmp	r0, #0
 800a352:	bfab      	itete	ge
 800a354:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800a356:	89a3      	ldrhlt	r3, [r4, #12]
 800a358:	181b      	addge	r3, r3, r0
 800a35a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800a35e:	bfac      	ite	ge
 800a360:	6563      	strge	r3, [r4, #84]	@ 0x54
 800a362:	81a3      	strhlt	r3, [r4, #12]
 800a364:	bd10      	pop	{r4, pc}

0800a366 <__swrite>:
 800a366:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a36a:	461f      	mov	r7, r3
 800a36c:	898b      	ldrh	r3, [r1, #12]
 800a36e:	05db      	lsls	r3, r3, #23
 800a370:	4605      	mov	r5, r0
 800a372:	460c      	mov	r4, r1
 800a374:	4616      	mov	r6, r2
 800a376:	d505      	bpl.n	800a384 <__swrite+0x1e>
 800a378:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a37c:	2302      	movs	r3, #2
 800a37e:	2200      	movs	r2, #0
 800a380:	f000 f8e0 	bl	800a544 <_lseek_r>
 800a384:	89a3      	ldrh	r3, [r4, #12]
 800a386:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a38a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800a38e:	81a3      	strh	r3, [r4, #12]
 800a390:	4632      	mov	r2, r6
 800a392:	463b      	mov	r3, r7
 800a394:	4628      	mov	r0, r5
 800a396:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a39a:	f000 b8f7 	b.w	800a58c <_write_r>

0800a39e <__sseek>:
 800a39e:	b510      	push	{r4, lr}
 800a3a0:	460c      	mov	r4, r1
 800a3a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a3a6:	f000 f8cd 	bl	800a544 <_lseek_r>
 800a3aa:	1c43      	adds	r3, r0, #1
 800a3ac:	89a3      	ldrh	r3, [r4, #12]
 800a3ae:	bf15      	itete	ne
 800a3b0:	6560      	strne	r0, [r4, #84]	@ 0x54
 800a3b2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800a3b6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800a3ba:	81a3      	strheq	r3, [r4, #12]
 800a3bc:	bf18      	it	ne
 800a3be:	81a3      	strhne	r3, [r4, #12]
 800a3c0:	bd10      	pop	{r4, pc}

0800a3c2 <__sclose>:
 800a3c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a3c6:	f000 b8ad 	b.w	800a524 <_close_r>

0800a3ca <__swbuf_r>:
 800a3ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a3cc:	460e      	mov	r6, r1
 800a3ce:	4614      	mov	r4, r2
 800a3d0:	4605      	mov	r5, r0
 800a3d2:	b118      	cbz	r0, 800a3dc <__swbuf_r+0x12>
 800a3d4:	6a03      	ldr	r3, [r0, #32]
 800a3d6:	b90b      	cbnz	r3, 800a3dc <__swbuf_r+0x12>
 800a3d8:	f7ff ff20 	bl	800a21c <__sinit>
 800a3dc:	69a3      	ldr	r3, [r4, #24]
 800a3de:	60a3      	str	r3, [r4, #8]
 800a3e0:	89a3      	ldrh	r3, [r4, #12]
 800a3e2:	071a      	lsls	r2, r3, #28
 800a3e4:	d501      	bpl.n	800a3ea <__swbuf_r+0x20>
 800a3e6:	6923      	ldr	r3, [r4, #16]
 800a3e8:	b943      	cbnz	r3, 800a3fc <__swbuf_r+0x32>
 800a3ea:	4621      	mov	r1, r4
 800a3ec:	4628      	mov	r0, r5
 800a3ee:	f000 f82b 	bl	800a448 <__swsetup_r>
 800a3f2:	b118      	cbz	r0, 800a3fc <__swbuf_r+0x32>
 800a3f4:	f04f 37ff 	mov.w	r7, #4294967295
 800a3f8:	4638      	mov	r0, r7
 800a3fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a3fc:	6823      	ldr	r3, [r4, #0]
 800a3fe:	6922      	ldr	r2, [r4, #16]
 800a400:	1a98      	subs	r0, r3, r2
 800a402:	6963      	ldr	r3, [r4, #20]
 800a404:	b2f6      	uxtb	r6, r6
 800a406:	4283      	cmp	r3, r0
 800a408:	4637      	mov	r7, r6
 800a40a:	dc05      	bgt.n	800a418 <__swbuf_r+0x4e>
 800a40c:	4621      	mov	r1, r4
 800a40e:	4628      	mov	r0, r5
 800a410:	f000 fa78 	bl	800a904 <_fflush_r>
 800a414:	2800      	cmp	r0, #0
 800a416:	d1ed      	bne.n	800a3f4 <__swbuf_r+0x2a>
 800a418:	68a3      	ldr	r3, [r4, #8]
 800a41a:	3b01      	subs	r3, #1
 800a41c:	60a3      	str	r3, [r4, #8]
 800a41e:	6823      	ldr	r3, [r4, #0]
 800a420:	1c5a      	adds	r2, r3, #1
 800a422:	6022      	str	r2, [r4, #0]
 800a424:	701e      	strb	r6, [r3, #0]
 800a426:	6962      	ldr	r2, [r4, #20]
 800a428:	1c43      	adds	r3, r0, #1
 800a42a:	429a      	cmp	r2, r3
 800a42c:	d004      	beq.n	800a438 <__swbuf_r+0x6e>
 800a42e:	89a3      	ldrh	r3, [r4, #12]
 800a430:	07db      	lsls	r3, r3, #31
 800a432:	d5e1      	bpl.n	800a3f8 <__swbuf_r+0x2e>
 800a434:	2e0a      	cmp	r6, #10
 800a436:	d1df      	bne.n	800a3f8 <__swbuf_r+0x2e>
 800a438:	4621      	mov	r1, r4
 800a43a:	4628      	mov	r0, r5
 800a43c:	f000 fa62 	bl	800a904 <_fflush_r>
 800a440:	2800      	cmp	r0, #0
 800a442:	d0d9      	beq.n	800a3f8 <__swbuf_r+0x2e>
 800a444:	e7d6      	b.n	800a3f4 <__swbuf_r+0x2a>
	...

0800a448 <__swsetup_r>:
 800a448:	b538      	push	{r3, r4, r5, lr}
 800a44a:	4b29      	ldr	r3, [pc, #164]	@ (800a4f0 <__swsetup_r+0xa8>)
 800a44c:	4605      	mov	r5, r0
 800a44e:	6818      	ldr	r0, [r3, #0]
 800a450:	460c      	mov	r4, r1
 800a452:	b118      	cbz	r0, 800a45c <__swsetup_r+0x14>
 800a454:	6a03      	ldr	r3, [r0, #32]
 800a456:	b90b      	cbnz	r3, 800a45c <__swsetup_r+0x14>
 800a458:	f7ff fee0 	bl	800a21c <__sinit>
 800a45c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a460:	0719      	lsls	r1, r3, #28
 800a462:	d422      	bmi.n	800a4aa <__swsetup_r+0x62>
 800a464:	06da      	lsls	r2, r3, #27
 800a466:	d407      	bmi.n	800a478 <__swsetup_r+0x30>
 800a468:	2209      	movs	r2, #9
 800a46a:	602a      	str	r2, [r5, #0]
 800a46c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a470:	81a3      	strh	r3, [r4, #12]
 800a472:	f04f 30ff 	mov.w	r0, #4294967295
 800a476:	e033      	b.n	800a4e0 <__swsetup_r+0x98>
 800a478:	0758      	lsls	r0, r3, #29
 800a47a:	d512      	bpl.n	800a4a2 <__swsetup_r+0x5a>
 800a47c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a47e:	b141      	cbz	r1, 800a492 <__swsetup_r+0x4a>
 800a480:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a484:	4299      	cmp	r1, r3
 800a486:	d002      	beq.n	800a48e <__swsetup_r+0x46>
 800a488:	4628      	mov	r0, r5
 800a48a:	f000 f8bf 	bl	800a60c <_free_r>
 800a48e:	2300      	movs	r3, #0
 800a490:	6363      	str	r3, [r4, #52]	@ 0x34
 800a492:	89a3      	ldrh	r3, [r4, #12]
 800a494:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800a498:	81a3      	strh	r3, [r4, #12]
 800a49a:	2300      	movs	r3, #0
 800a49c:	6063      	str	r3, [r4, #4]
 800a49e:	6923      	ldr	r3, [r4, #16]
 800a4a0:	6023      	str	r3, [r4, #0]
 800a4a2:	89a3      	ldrh	r3, [r4, #12]
 800a4a4:	f043 0308 	orr.w	r3, r3, #8
 800a4a8:	81a3      	strh	r3, [r4, #12]
 800a4aa:	6923      	ldr	r3, [r4, #16]
 800a4ac:	b94b      	cbnz	r3, 800a4c2 <__swsetup_r+0x7a>
 800a4ae:	89a3      	ldrh	r3, [r4, #12]
 800a4b0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800a4b4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a4b8:	d003      	beq.n	800a4c2 <__swsetup_r+0x7a>
 800a4ba:	4621      	mov	r1, r4
 800a4bc:	4628      	mov	r0, r5
 800a4be:	f000 fa6f 	bl	800a9a0 <__smakebuf_r>
 800a4c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a4c6:	f013 0201 	ands.w	r2, r3, #1
 800a4ca:	d00a      	beq.n	800a4e2 <__swsetup_r+0x9a>
 800a4cc:	2200      	movs	r2, #0
 800a4ce:	60a2      	str	r2, [r4, #8]
 800a4d0:	6962      	ldr	r2, [r4, #20]
 800a4d2:	4252      	negs	r2, r2
 800a4d4:	61a2      	str	r2, [r4, #24]
 800a4d6:	6922      	ldr	r2, [r4, #16]
 800a4d8:	b942      	cbnz	r2, 800a4ec <__swsetup_r+0xa4>
 800a4da:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800a4de:	d1c5      	bne.n	800a46c <__swsetup_r+0x24>
 800a4e0:	bd38      	pop	{r3, r4, r5, pc}
 800a4e2:	0799      	lsls	r1, r3, #30
 800a4e4:	bf58      	it	pl
 800a4e6:	6962      	ldrpl	r2, [r4, #20]
 800a4e8:	60a2      	str	r2, [r4, #8]
 800a4ea:	e7f4      	b.n	800a4d6 <__swsetup_r+0x8e>
 800a4ec:	2000      	movs	r0, #0
 800a4ee:	e7f7      	b.n	800a4e0 <__swsetup_r+0x98>
 800a4f0:	20000018 	.word	0x20000018

0800a4f4 <memcmp>:
 800a4f4:	b510      	push	{r4, lr}
 800a4f6:	3901      	subs	r1, #1
 800a4f8:	4402      	add	r2, r0
 800a4fa:	4290      	cmp	r0, r2
 800a4fc:	d101      	bne.n	800a502 <memcmp+0xe>
 800a4fe:	2000      	movs	r0, #0
 800a500:	e005      	b.n	800a50e <memcmp+0x1a>
 800a502:	7803      	ldrb	r3, [r0, #0]
 800a504:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800a508:	42a3      	cmp	r3, r4
 800a50a:	d001      	beq.n	800a510 <memcmp+0x1c>
 800a50c:	1b18      	subs	r0, r3, r4
 800a50e:	bd10      	pop	{r4, pc}
 800a510:	3001      	adds	r0, #1
 800a512:	e7f2      	b.n	800a4fa <memcmp+0x6>

0800a514 <memset>:
 800a514:	4402      	add	r2, r0
 800a516:	4603      	mov	r3, r0
 800a518:	4293      	cmp	r3, r2
 800a51a:	d100      	bne.n	800a51e <memset+0xa>
 800a51c:	4770      	bx	lr
 800a51e:	f803 1b01 	strb.w	r1, [r3], #1
 800a522:	e7f9      	b.n	800a518 <memset+0x4>

0800a524 <_close_r>:
 800a524:	b538      	push	{r3, r4, r5, lr}
 800a526:	4d06      	ldr	r5, [pc, #24]	@ (800a540 <_close_r+0x1c>)
 800a528:	2300      	movs	r3, #0
 800a52a:	4604      	mov	r4, r0
 800a52c:	4608      	mov	r0, r1
 800a52e:	602b      	str	r3, [r5, #0]
 800a530:	f7f6 fcdb 	bl	8000eea <_close>
 800a534:	1c43      	adds	r3, r0, #1
 800a536:	d102      	bne.n	800a53e <_close_r+0x1a>
 800a538:	682b      	ldr	r3, [r5, #0]
 800a53a:	b103      	cbz	r3, 800a53e <_close_r+0x1a>
 800a53c:	6023      	str	r3, [r4, #0]
 800a53e:	bd38      	pop	{r3, r4, r5, pc}
 800a540:	200010ec 	.word	0x200010ec

0800a544 <_lseek_r>:
 800a544:	b538      	push	{r3, r4, r5, lr}
 800a546:	4d07      	ldr	r5, [pc, #28]	@ (800a564 <_lseek_r+0x20>)
 800a548:	4604      	mov	r4, r0
 800a54a:	4608      	mov	r0, r1
 800a54c:	4611      	mov	r1, r2
 800a54e:	2200      	movs	r2, #0
 800a550:	602a      	str	r2, [r5, #0]
 800a552:	461a      	mov	r2, r3
 800a554:	f7f6 fcf0 	bl	8000f38 <_lseek>
 800a558:	1c43      	adds	r3, r0, #1
 800a55a:	d102      	bne.n	800a562 <_lseek_r+0x1e>
 800a55c:	682b      	ldr	r3, [r5, #0]
 800a55e:	b103      	cbz	r3, 800a562 <_lseek_r+0x1e>
 800a560:	6023      	str	r3, [r4, #0]
 800a562:	bd38      	pop	{r3, r4, r5, pc}
 800a564:	200010ec 	.word	0x200010ec

0800a568 <_read_r>:
 800a568:	b538      	push	{r3, r4, r5, lr}
 800a56a:	4d07      	ldr	r5, [pc, #28]	@ (800a588 <_read_r+0x20>)
 800a56c:	4604      	mov	r4, r0
 800a56e:	4608      	mov	r0, r1
 800a570:	4611      	mov	r1, r2
 800a572:	2200      	movs	r2, #0
 800a574:	602a      	str	r2, [r5, #0]
 800a576:	461a      	mov	r2, r3
 800a578:	f7f6 fc9a 	bl	8000eb0 <_read>
 800a57c:	1c43      	adds	r3, r0, #1
 800a57e:	d102      	bne.n	800a586 <_read_r+0x1e>
 800a580:	682b      	ldr	r3, [r5, #0]
 800a582:	b103      	cbz	r3, 800a586 <_read_r+0x1e>
 800a584:	6023      	str	r3, [r4, #0]
 800a586:	bd38      	pop	{r3, r4, r5, pc}
 800a588:	200010ec 	.word	0x200010ec

0800a58c <_write_r>:
 800a58c:	b538      	push	{r3, r4, r5, lr}
 800a58e:	4d07      	ldr	r5, [pc, #28]	@ (800a5ac <_write_r+0x20>)
 800a590:	4604      	mov	r4, r0
 800a592:	4608      	mov	r0, r1
 800a594:	4611      	mov	r1, r2
 800a596:	2200      	movs	r2, #0
 800a598:	602a      	str	r2, [r5, #0]
 800a59a:	461a      	mov	r2, r3
 800a59c:	f7f5 fe3d 	bl	800021a <_write>
 800a5a0:	1c43      	adds	r3, r0, #1
 800a5a2:	d102      	bne.n	800a5aa <_write_r+0x1e>
 800a5a4:	682b      	ldr	r3, [r5, #0]
 800a5a6:	b103      	cbz	r3, 800a5aa <_write_r+0x1e>
 800a5a8:	6023      	str	r3, [r4, #0]
 800a5aa:	bd38      	pop	{r3, r4, r5, pc}
 800a5ac:	200010ec 	.word	0x200010ec

0800a5b0 <__errno>:
 800a5b0:	4b01      	ldr	r3, [pc, #4]	@ (800a5b8 <__errno+0x8>)
 800a5b2:	6818      	ldr	r0, [r3, #0]
 800a5b4:	4770      	bx	lr
 800a5b6:	bf00      	nop
 800a5b8:	20000018 	.word	0x20000018

0800a5bc <__libc_init_array>:
 800a5bc:	b570      	push	{r4, r5, r6, lr}
 800a5be:	4d0d      	ldr	r5, [pc, #52]	@ (800a5f4 <__libc_init_array+0x38>)
 800a5c0:	4c0d      	ldr	r4, [pc, #52]	@ (800a5f8 <__libc_init_array+0x3c>)
 800a5c2:	1b64      	subs	r4, r4, r5
 800a5c4:	10a4      	asrs	r4, r4, #2
 800a5c6:	2600      	movs	r6, #0
 800a5c8:	42a6      	cmp	r6, r4
 800a5ca:	d109      	bne.n	800a5e0 <__libc_init_array+0x24>
 800a5cc:	4d0b      	ldr	r5, [pc, #44]	@ (800a5fc <__libc_init_array+0x40>)
 800a5ce:	4c0c      	ldr	r4, [pc, #48]	@ (800a600 <__libc_init_array+0x44>)
 800a5d0:	f000 fa54 	bl	800aa7c <_init>
 800a5d4:	1b64      	subs	r4, r4, r5
 800a5d6:	10a4      	asrs	r4, r4, #2
 800a5d8:	2600      	movs	r6, #0
 800a5da:	42a6      	cmp	r6, r4
 800a5dc:	d105      	bne.n	800a5ea <__libc_init_array+0x2e>
 800a5de:	bd70      	pop	{r4, r5, r6, pc}
 800a5e0:	f855 3b04 	ldr.w	r3, [r5], #4
 800a5e4:	4798      	blx	r3
 800a5e6:	3601      	adds	r6, #1
 800a5e8:	e7ee      	b.n	800a5c8 <__libc_init_array+0xc>
 800a5ea:	f855 3b04 	ldr.w	r3, [r5], #4
 800a5ee:	4798      	blx	r3
 800a5f0:	3601      	adds	r6, #1
 800a5f2:	e7f2      	b.n	800a5da <__libc_init_array+0x1e>
 800a5f4:	0800afb4 	.word	0x0800afb4
 800a5f8:	0800afb4 	.word	0x0800afb4
 800a5fc:	0800afb4 	.word	0x0800afb4
 800a600:	0800afb8 	.word	0x0800afb8

0800a604 <__retarget_lock_init_recursive>:
 800a604:	4770      	bx	lr

0800a606 <__retarget_lock_acquire_recursive>:
 800a606:	4770      	bx	lr

0800a608 <__retarget_lock_release_recursive>:
 800a608:	4770      	bx	lr
	...

0800a60c <_free_r>:
 800a60c:	b538      	push	{r3, r4, r5, lr}
 800a60e:	4605      	mov	r5, r0
 800a610:	2900      	cmp	r1, #0
 800a612:	d041      	beq.n	800a698 <_free_r+0x8c>
 800a614:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a618:	1f0c      	subs	r4, r1, #4
 800a61a:	2b00      	cmp	r3, #0
 800a61c:	bfb8      	it	lt
 800a61e:	18e4      	addlt	r4, r4, r3
 800a620:	f000 f8e0 	bl	800a7e4 <__malloc_lock>
 800a624:	4a1d      	ldr	r2, [pc, #116]	@ (800a69c <_free_r+0x90>)
 800a626:	6813      	ldr	r3, [r2, #0]
 800a628:	b933      	cbnz	r3, 800a638 <_free_r+0x2c>
 800a62a:	6063      	str	r3, [r4, #4]
 800a62c:	6014      	str	r4, [r2, #0]
 800a62e:	4628      	mov	r0, r5
 800a630:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a634:	f000 b8dc 	b.w	800a7f0 <__malloc_unlock>
 800a638:	42a3      	cmp	r3, r4
 800a63a:	d908      	bls.n	800a64e <_free_r+0x42>
 800a63c:	6820      	ldr	r0, [r4, #0]
 800a63e:	1821      	adds	r1, r4, r0
 800a640:	428b      	cmp	r3, r1
 800a642:	bf01      	itttt	eq
 800a644:	6819      	ldreq	r1, [r3, #0]
 800a646:	685b      	ldreq	r3, [r3, #4]
 800a648:	1809      	addeq	r1, r1, r0
 800a64a:	6021      	streq	r1, [r4, #0]
 800a64c:	e7ed      	b.n	800a62a <_free_r+0x1e>
 800a64e:	461a      	mov	r2, r3
 800a650:	685b      	ldr	r3, [r3, #4]
 800a652:	b10b      	cbz	r3, 800a658 <_free_r+0x4c>
 800a654:	42a3      	cmp	r3, r4
 800a656:	d9fa      	bls.n	800a64e <_free_r+0x42>
 800a658:	6811      	ldr	r1, [r2, #0]
 800a65a:	1850      	adds	r0, r2, r1
 800a65c:	42a0      	cmp	r0, r4
 800a65e:	d10b      	bne.n	800a678 <_free_r+0x6c>
 800a660:	6820      	ldr	r0, [r4, #0]
 800a662:	4401      	add	r1, r0
 800a664:	1850      	adds	r0, r2, r1
 800a666:	4283      	cmp	r3, r0
 800a668:	6011      	str	r1, [r2, #0]
 800a66a:	d1e0      	bne.n	800a62e <_free_r+0x22>
 800a66c:	6818      	ldr	r0, [r3, #0]
 800a66e:	685b      	ldr	r3, [r3, #4]
 800a670:	6053      	str	r3, [r2, #4]
 800a672:	4408      	add	r0, r1
 800a674:	6010      	str	r0, [r2, #0]
 800a676:	e7da      	b.n	800a62e <_free_r+0x22>
 800a678:	d902      	bls.n	800a680 <_free_r+0x74>
 800a67a:	230c      	movs	r3, #12
 800a67c:	602b      	str	r3, [r5, #0]
 800a67e:	e7d6      	b.n	800a62e <_free_r+0x22>
 800a680:	6820      	ldr	r0, [r4, #0]
 800a682:	1821      	adds	r1, r4, r0
 800a684:	428b      	cmp	r3, r1
 800a686:	bf04      	itt	eq
 800a688:	6819      	ldreq	r1, [r3, #0]
 800a68a:	685b      	ldreq	r3, [r3, #4]
 800a68c:	6063      	str	r3, [r4, #4]
 800a68e:	bf04      	itt	eq
 800a690:	1809      	addeq	r1, r1, r0
 800a692:	6021      	streq	r1, [r4, #0]
 800a694:	6054      	str	r4, [r2, #4]
 800a696:	e7ca      	b.n	800a62e <_free_r+0x22>
 800a698:	bd38      	pop	{r3, r4, r5, pc}
 800a69a:	bf00      	nop
 800a69c:	200010f8 	.word	0x200010f8

0800a6a0 <sbrk_aligned>:
 800a6a0:	b570      	push	{r4, r5, r6, lr}
 800a6a2:	4e0f      	ldr	r6, [pc, #60]	@ (800a6e0 <sbrk_aligned+0x40>)
 800a6a4:	460c      	mov	r4, r1
 800a6a6:	6831      	ldr	r1, [r6, #0]
 800a6a8:	4605      	mov	r5, r0
 800a6aa:	b911      	cbnz	r1, 800a6b2 <sbrk_aligned+0x12>
 800a6ac:	f000 f9d6 	bl	800aa5c <_sbrk_r>
 800a6b0:	6030      	str	r0, [r6, #0]
 800a6b2:	4621      	mov	r1, r4
 800a6b4:	4628      	mov	r0, r5
 800a6b6:	f000 f9d1 	bl	800aa5c <_sbrk_r>
 800a6ba:	1c43      	adds	r3, r0, #1
 800a6bc:	d103      	bne.n	800a6c6 <sbrk_aligned+0x26>
 800a6be:	f04f 34ff 	mov.w	r4, #4294967295
 800a6c2:	4620      	mov	r0, r4
 800a6c4:	bd70      	pop	{r4, r5, r6, pc}
 800a6c6:	1cc4      	adds	r4, r0, #3
 800a6c8:	f024 0403 	bic.w	r4, r4, #3
 800a6cc:	42a0      	cmp	r0, r4
 800a6ce:	d0f8      	beq.n	800a6c2 <sbrk_aligned+0x22>
 800a6d0:	1a21      	subs	r1, r4, r0
 800a6d2:	4628      	mov	r0, r5
 800a6d4:	f000 f9c2 	bl	800aa5c <_sbrk_r>
 800a6d8:	3001      	adds	r0, #1
 800a6da:	d1f2      	bne.n	800a6c2 <sbrk_aligned+0x22>
 800a6dc:	e7ef      	b.n	800a6be <sbrk_aligned+0x1e>
 800a6de:	bf00      	nop
 800a6e0:	200010f4 	.word	0x200010f4

0800a6e4 <_malloc_r>:
 800a6e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a6e8:	1ccd      	adds	r5, r1, #3
 800a6ea:	f025 0503 	bic.w	r5, r5, #3
 800a6ee:	3508      	adds	r5, #8
 800a6f0:	2d0c      	cmp	r5, #12
 800a6f2:	bf38      	it	cc
 800a6f4:	250c      	movcc	r5, #12
 800a6f6:	2d00      	cmp	r5, #0
 800a6f8:	4606      	mov	r6, r0
 800a6fa:	db01      	blt.n	800a700 <_malloc_r+0x1c>
 800a6fc:	42a9      	cmp	r1, r5
 800a6fe:	d904      	bls.n	800a70a <_malloc_r+0x26>
 800a700:	230c      	movs	r3, #12
 800a702:	6033      	str	r3, [r6, #0]
 800a704:	2000      	movs	r0, #0
 800a706:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a70a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800a7e0 <_malloc_r+0xfc>
 800a70e:	f000 f869 	bl	800a7e4 <__malloc_lock>
 800a712:	f8d8 3000 	ldr.w	r3, [r8]
 800a716:	461c      	mov	r4, r3
 800a718:	bb44      	cbnz	r4, 800a76c <_malloc_r+0x88>
 800a71a:	4629      	mov	r1, r5
 800a71c:	4630      	mov	r0, r6
 800a71e:	f7ff ffbf 	bl	800a6a0 <sbrk_aligned>
 800a722:	1c43      	adds	r3, r0, #1
 800a724:	4604      	mov	r4, r0
 800a726:	d158      	bne.n	800a7da <_malloc_r+0xf6>
 800a728:	f8d8 4000 	ldr.w	r4, [r8]
 800a72c:	4627      	mov	r7, r4
 800a72e:	2f00      	cmp	r7, #0
 800a730:	d143      	bne.n	800a7ba <_malloc_r+0xd6>
 800a732:	2c00      	cmp	r4, #0
 800a734:	d04b      	beq.n	800a7ce <_malloc_r+0xea>
 800a736:	6823      	ldr	r3, [r4, #0]
 800a738:	4639      	mov	r1, r7
 800a73a:	4630      	mov	r0, r6
 800a73c:	eb04 0903 	add.w	r9, r4, r3
 800a740:	f000 f98c 	bl	800aa5c <_sbrk_r>
 800a744:	4581      	cmp	r9, r0
 800a746:	d142      	bne.n	800a7ce <_malloc_r+0xea>
 800a748:	6821      	ldr	r1, [r4, #0]
 800a74a:	1a6d      	subs	r5, r5, r1
 800a74c:	4629      	mov	r1, r5
 800a74e:	4630      	mov	r0, r6
 800a750:	f7ff ffa6 	bl	800a6a0 <sbrk_aligned>
 800a754:	3001      	adds	r0, #1
 800a756:	d03a      	beq.n	800a7ce <_malloc_r+0xea>
 800a758:	6823      	ldr	r3, [r4, #0]
 800a75a:	442b      	add	r3, r5
 800a75c:	6023      	str	r3, [r4, #0]
 800a75e:	f8d8 3000 	ldr.w	r3, [r8]
 800a762:	685a      	ldr	r2, [r3, #4]
 800a764:	bb62      	cbnz	r2, 800a7c0 <_malloc_r+0xdc>
 800a766:	f8c8 7000 	str.w	r7, [r8]
 800a76a:	e00f      	b.n	800a78c <_malloc_r+0xa8>
 800a76c:	6822      	ldr	r2, [r4, #0]
 800a76e:	1b52      	subs	r2, r2, r5
 800a770:	d420      	bmi.n	800a7b4 <_malloc_r+0xd0>
 800a772:	2a0b      	cmp	r2, #11
 800a774:	d917      	bls.n	800a7a6 <_malloc_r+0xc2>
 800a776:	1961      	adds	r1, r4, r5
 800a778:	42a3      	cmp	r3, r4
 800a77a:	6025      	str	r5, [r4, #0]
 800a77c:	bf18      	it	ne
 800a77e:	6059      	strne	r1, [r3, #4]
 800a780:	6863      	ldr	r3, [r4, #4]
 800a782:	bf08      	it	eq
 800a784:	f8c8 1000 	streq.w	r1, [r8]
 800a788:	5162      	str	r2, [r4, r5]
 800a78a:	604b      	str	r3, [r1, #4]
 800a78c:	4630      	mov	r0, r6
 800a78e:	f000 f82f 	bl	800a7f0 <__malloc_unlock>
 800a792:	f104 000b 	add.w	r0, r4, #11
 800a796:	1d23      	adds	r3, r4, #4
 800a798:	f020 0007 	bic.w	r0, r0, #7
 800a79c:	1ac2      	subs	r2, r0, r3
 800a79e:	bf1c      	itt	ne
 800a7a0:	1a1b      	subne	r3, r3, r0
 800a7a2:	50a3      	strne	r3, [r4, r2]
 800a7a4:	e7af      	b.n	800a706 <_malloc_r+0x22>
 800a7a6:	6862      	ldr	r2, [r4, #4]
 800a7a8:	42a3      	cmp	r3, r4
 800a7aa:	bf0c      	ite	eq
 800a7ac:	f8c8 2000 	streq.w	r2, [r8]
 800a7b0:	605a      	strne	r2, [r3, #4]
 800a7b2:	e7eb      	b.n	800a78c <_malloc_r+0xa8>
 800a7b4:	4623      	mov	r3, r4
 800a7b6:	6864      	ldr	r4, [r4, #4]
 800a7b8:	e7ae      	b.n	800a718 <_malloc_r+0x34>
 800a7ba:	463c      	mov	r4, r7
 800a7bc:	687f      	ldr	r7, [r7, #4]
 800a7be:	e7b6      	b.n	800a72e <_malloc_r+0x4a>
 800a7c0:	461a      	mov	r2, r3
 800a7c2:	685b      	ldr	r3, [r3, #4]
 800a7c4:	42a3      	cmp	r3, r4
 800a7c6:	d1fb      	bne.n	800a7c0 <_malloc_r+0xdc>
 800a7c8:	2300      	movs	r3, #0
 800a7ca:	6053      	str	r3, [r2, #4]
 800a7cc:	e7de      	b.n	800a78c <_malloc_r+0xa8>
 800a7ce:	230c      	movs	r3, #12
 800a7d0:	6033      	str	r3, [r6, #0]
 800a7d2:	4630      	mov	r0, r6
 800a7d4:	f000 f80c 	bl	800a7f0 <__malloc_unlock>
 800a7d8:	e794      	b.n	800a704 <_malloc_r+0x20>
 800a7da:	6005      	str	r5, [r0, #0]
 800a7dc:	e7d6      	b.n	800a78c <_malloc_r+0xa8>
 800a7de:	bf00      	nop
 800a7e0:	200010f8 	.word	0x200010f8

0800a7e4 <__malloc_lock>:
 800a7e4:	4801      	ldr	r0, [pc, #4]	@ (800a7ec <__malloc_lock+0x8>)
 800a7e6:	f7ff bf0e 	b.w	800a606 <__retarget_lock_acquire_recursive>
 800a7ea:	bf00      	nop
 800a7ec:	200010f0 	.word	0x200010f0

0800a7f0 <__malloc_unlock>:
 800a7f0:	4801      	ldr	r0, [pc, #4]	@ (800a7f8 <__malloc_unlock+0x8>)
 800a7f2:	f7ff bf09 	b.w	800a608 <__retarget_lock_release_recursive>
 800a7f6:	bf00      	nop
 800a7f8:	200010f0 	.word	0x200010f0

0800a7fc <__sflush_r>:
 800a7fc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a800:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a804:	0716      	lsls	r6, r2, #28
 800a806:	4605      	mov	r5, r0
 800a808:	460c      	mov	r4, r1
 800a80a:	d454      	bmi.n	800a8b6 <__sflush_r+0xba>
 800a80c:	684b      	ldr	r3, [r1, #4]
 800a80e:	2b00      	cmp	r3, #0
 800a810:	dc02      	bgt.n	800a818 <__sflush_r+0x1c>
 800a812:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800a814:	2b00      	cmp	r3, #0
 800a816:	dd48      	ble.n	800a8aa <__sflush_r+0xae>
 800a818:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a81a:	2e00      	cmp	r6, #0
 800a81c:	d045      	beq.n	800a8aa <__sflush_r+0xae>
 800a81e:	2300      	movs	r3, #0
 800a820:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800a824:	682f      	ldr	r7, [r5, #0]
 800a826:	6a21      	ldr	r1, [r4, #32]
 800a828:	602b      	str	r3, [r5, #0]
 800a82a:	d030      	beq.n	800a88e <__sflush_r+0x92>
 800a82c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800a82e:	89a3      	ldrh	r3, [r4, #12]
 800a830:	0759      	lsls	r1, r3, #29
 800a832:	d505      	bpl.n	800a840 <__sflush_r+0x44>
 800a834:	6863      	ldr	r3, [r4, #4]
 800a836:	1ad2      	subs	r2, r2, r3
 800a838:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800a83a:	b10b      	cbz	r3, 800a840 <__sflush_r+0x44>
 800a83c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800a83e:	1ad2      	subs	r2, r2, r3
 800a840:	2300      	movs	r3, #0
 800a842:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a844:	6a21      	ldr	r1, [r4, #32]
 800a846:	4628      	mov	r0, r5
 800a848:	47b0      	blx	r6
 800a84a:	1c43      	adds	r3, r0, #1
 800a84c:	89a3      	ldrh	r3, [r4, #12]
 800a84e:	d106      	bne.n	800a85e <__sflush_r+0x62>
 800a850:	6829      	ldr	r1, [r5, #0]
 800a852:	291d      	cmp	r1, #29
 800a854:	d82b      	bhi.n	800a8ae <__sflush_r+0xb2>
 800a856:	4a2a      	ldr	r2, [pc, #168]	@ (800a900 <__sflush_r+0x104>)
 800a858:	410a      	asrs	r2, r1
 800a85a:	07d6      	lsls	r6, r2, #31
 800a85c:	d427      	bmi.n	800a8ae <__sflush_r+0xb2>
 800a85e:	2200      	movs	r2, #0
 800a860:	6062      	str	r2, [r4, #4]
 800a862:	04d9      	lsls	r1, r3, #19
 800a864:	6922      	ldr	r2, [r4, #16]
 800a866:	6022      	str	r2, [r4, #0]
 800a868:	d504      	bpl.n	800a874 <__sflush_r+0x78>
 800a86a:	1c42      	adds	r2, r0, #1
 800a86c:	d101      	bne.n	800a872 <__sflush_r+0x76>
 800a86e:	682b      	ldr	r3, [r5, #0]
 800a870:	b903      	cbnz	r3, 800a874 <__sflush_r+0x78>
 800a872:	6560      	str	r0, [r4, #84]	@ 0x54
 800a874:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a876:	602f      	str	r7, [r5, #0]
 800a878:	b1b9      	cbz	r1, 800a8aa <__sflush_r+0xae>
 800a87a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a87e:	4299      	cmp	r1, r3
 800a880:	d002      	beq.n	800a888 <__sflush_r+0x8c>
 800a882:	4628      	mov	r0, r5
 800a884:	f7ff fec2 	bl	800a60c <_free_r>
 800a888:	2300      	movs	r3, #0
 800a88a:	6363      	str	r3, [r4, #52]	@ 0x34
 800a88c:	e00d      	b.n	800a8aa <__sflush_r+0xae>
 800a88e:	2301      	movs	r3, #1
 800a890:	4628      	mov	r0, r5
 800a892:	47b0      	blx	r6
 800a894:	4602      	mov	r2, r0
 800a896:	1c50      	adds	r0, r2, #1
 800a898:	d1c9      	bne.n	800a82e <__sflush_r+0x32>
 800a89a:	682b      	ldr	r3, [r5, #0]
 800a89c:	2b00      	cmp	r3, #0
 800a89e:	d0c6      	beq.n	800a82e <__sflush_r+0x32>
 800a8a0:	2b1d      	cmp	r3, #29
 800a8a2:	d001      	beq.n	800a8a8 <__sflush_r+0xac>
 800a8a4:	2b16      	cmp	r3, #22
 800a8a6:	d11e      	bne.n	800a8e6 <__sflush_r+0xea>
 800a8a8:	602f      	str	r7, [r5, #0]
 800a8aa:	2000      	movs	r0, #0
 800a8ac:	e022      	b.n	800a8f4 <__sflush_r+0xf8>
 800a8ae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a8b2:	b21b      	sxth	r3, r3
 800a8b4:	e01b      	b.n	800a8ee <__sflush_r+0xf2>
 800a8b6:	690f      	ldr	r7, [r1, #16]
 800a8b8:	2f00      	cmp	r7, #0
 800a8ba:	d0f6      	beq.n	800a8aa <__sflush_r+0xae>
 800a8bc:	0793      	lsls	r3, r2, #30
 800a8be:	680e      	ldr	r6, [r1, #0]
 800a8c0:	bf08      	it	eq
 800a8c2:	694b      	ldreq	r3, [r1, #20]
 800a8c4:	600f      	str	r7, [r1, #0]
 800a8c6:	bf18      	it	ne
 800a8c8:	2300      	movne	r3, #0
 800a8ca:	eba6 0807 	sub.w	r8, r6, r7
 800a8ce:	608b      	str	r3, [r1, #8]
 800a8d0:	f1b8 0f00 	cmp.w	r8, #0
 800a8d4:	dde9      	ble.n	800a8aa <__sflush_r+0xae>
 800a8d6:	6a21      	ldr	r1, [r4, #32]
 800a8d8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800a8da:	4643      	mov	r3, r8
 800a8dc:	463a      	mov	r2, r7
 800a8de:	4628      	mov	r0, r5
 800a8e0:	47b0      	blx	r6
 800a8e2:	2800      	cmp	r0, #0
 800a8e4:	dc08      	bgt.n	800a8f8 <__sflush_r+0xfc>
 800a8e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a8ea:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a8ee:	81a3      	strh	r3, [r4, #12]
 800a8f0:	f04f 30ff 	mov.w	r0, #4294967295
 800a8f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a8f8:	4407      	add	r7, r0
 800a8fa:	eba8 0800 	sub.w	r8, r8, r0
 800a8fe:	e7e7      	b.n	800a8d0 <__sflush_r+0xd4>
 800a900:	dfbffffe 	.word	0xdfbffffe

0800a904 <_fflush_r>:
 800a904:	b538      	push	{r3, r4, r5, lr}
 800a906:	690b      	ldr	r3, [r1, #16]
 800a908:	4605      	mov	r5, r0
 800a90a:	460c      	mov	r4, r1
 800a90c:	b913      	cbnz	r3, 800a914 <_fflush_r+0x10>
 800a90e:	2500      	movs	r5, #0
 800a910:	4628      	mov	r0, r5
 800a912:	bd38      	pop	{r3, r4, r5, pc}
 800a914:	b118      	cbz	r0, 800a91e <_fflush_r+0x1a>
 800a916:	6a03      	ldr	r3, [r0, #32]
 800a918:	b90b      	cbnz	r3, 800a91e <_fflush_r+0x1a>
 800a91a:	f7ff fc7f 	bl	800a21c <__sinit>
 800a91e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a922:	2b00      	cmp	r3, #0
 800a924:	d0f3      	beq.n	800a90e <_fflush_r+0xa>
 800a926:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800a928:	07d0      	lsls	r0, r2, #31
 800a92a:	d404      	bmi.n	800a936 <_fflush_r+0x32>
 800a92c:	0599      	lsls	r1, r3, #22
 800a92e:	d402      	bmi.n	800a936 <_fflush_r+0x32>
 800a930:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a932:	f7ff fe68 	bl	800a606 <__retarget_lock_acquire_recursive>
 800a936:	4628      	mov	r0, r5
 800a938:	4621      	mov	r1, r4
 800a93a:	f7ff ff5f 	bl	800a7fc <__sflush_r>
 800a93e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a940:	07da      	lsls	r2, r3, #31
 800a942:	4605      	mov	r5, r0
 800a944:	d4e4      	bmi.n	800a910 <_fflush_r+0xc>
 800a946:	89a3      	ldrh	r3, [r4, #12]
 800a948:	059b      	lsls	r3, r3, #22
 800a94a:	d4e1      	bmi.n	800a910 <_fflush_r+0xc>
 800a94c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a94e:	f7ff fe5b 	bl	800a608 <__retarget_lock_release_recursive>
 800a952:	e7dd      	b.n	800a910 <_fflush_r+0xc>

0800a954 <__swhatbuf_r>:
 800a954:	b570      	push	{r4, r5, r6, lr}
 800a956:	460c      	mov	r4, r1
 800a958:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a95c:	2900      	cmp	r1, #0
 800a95e:	b096      	sub	sp, #88	@ 0x58
 800a960:	4615      	mov	r5, r2
 800a962:	461e      	mov	r6, r3
 800a964:	da0d      	bge.n	800a982 <__swhatbuf_r+0x2e>
 800a966:	89a3      	ldrh	r3, [r4, #12]
 800a968:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800a96c:	f04f 0100 	mov.w	r1, #0
 800a970:	bf14      	ite	ne
 800a972:	2340      	movne	r3, #64	@ 0x40
 800a974:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800a978:	2000      	movs	r0, #0
 800a97a:	6031      	str	r1, [r6, #0]
 800a97c:	602b      	str	r3, [r5, #0]
 800a97e:	b016      	add	sp, #88	@ 0x58
 800a980:	bd70      	pop	{r4, r5, r6, pc}
 800a982:	466a      	mov	r2, sp
 800a984:	f000 f848 	bl	800aa18 <_fstat_r>
 800a988:	2800      	cmp	r0, #0
 800a98a:	dbec      	blt.n	800a966 <__swhatbuf_r+0x12>
 800a98c:	9901      	ldr	r1, [sp, #4]
 800a98e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800a992:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800a996:	4259      	negs	r1, r3
 800a998:	4159      	adcs	r1, r3
 800a99a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a99e:	e7eb      	b.n	800a978 <__swhatbuf_r+0x24>

0800a9a0 <__smakebuf_r>:
 800a9a0:	898b      	ldrh	r3, [r1, #12]
 800a9a2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a9a4:	079d      	lsls	r5, r3, #30
 800a9a6:	4606      	mov	r6, r0
 800a9a8:	460c      	mov	r4, r1
 800a9aa:	d507      	bpl.n	800a9bc <__smakebuf_r+0x1c>
 800a9ac:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800a9b0:	6023      	str	r3, [r4, #0]
 800a9b2:	6123      	str	r3, [r4, #16]
 800a9b4:	2301      	movs	r3, #1
 800a9b6:	6163      	str	r3, [r4, #20]
 800a9b8:	b003      	add	sp, #12
 800a9ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a9bc:	ab01      	add	r3, sp, #4
 800a9be:	466a      	mov	r2, sp
 800a9c0:	f7ff ffc8 	bl	800a954 <__swhatbuf_r>
 800a9c4:	9f00      	ldr	r7, [sp, #0]
 800a9c6:	4605      	mov	r5, r0
 800a9c8:	4639      	mov	r1, r7
 800a9ca:	4630      	mov	r0, r6
 800a9cc:	f7ff fe8a 	bl	800a6e4 <_malloc_r>
 800a9d0:	b948      	cbnz	r0, 800a9e6 <__smakebuf_r+0x46>
 800a9d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a9d6:	059a      	lsls	r2, r3, #22
 800a9d8:	d4ee      	bmi.n	800a9b8 <__smakebuf_r+0x18>
 800a9da:	f023 0303 	bic.w	r3, r3, #3
 800a9de:	f043 0302 	orr.w	r3, r3, #2
 800a9e2:	81a3      	strh	r3, [r4, #12]
 800a9e4:	e7e2      	b.n	800a9ac <__smakebuf_r+0xc>
 800a9e6:	89a3      	ldrh	r3, [r4, #12]
 800a9e8:	6020      	str	r0, [r4, #0]
 800a9ea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a9ee:	81a3      	strh	r3, [r4, #12]
 800a9f0:	9b01      	ldr	r3, [sp, #4]
 800a9f2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800a9f6:	b15b      	cbz	r3, 800aa10 <__smakebuf_r+0x70>
 800a9f8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a9fc:	4630      	mov	r0, r6
 800a9fe:	f000 f81d 	bl	800aa3c <_isatty_r>
 800aa02:	b128      	cbz	r0, 800aa10 <__smakebuf_r+0x70>
 800aa04:	89a3      	ldrh	r3, [r4, #12]
 800aa06:	f023 0303 	bic.w	r3, r3, #3
 800aa0a:	f043 0301 	orr.w	r3, r3, #1
 800aa0e:	81a3      	strh	r3, [r4, #12]
 800aa10:	89a3      	ldrh	r3, [r4, #12]
 800aa12:	431d      	orrs	r5, r3
 800aa14:	81a5      	strh	r5, [r4, #12]
 800aa16:	e7cf      	b.n	800a9b8 <__smakebuf_r+0x18>

0800aa18 <_fstat_r>:
 800aa18:	b538      	push	{r3, r4, r5, lr}
 800aa1a:	4d07      	ldr	r5, [pc, #28]	@ (800aa38 <_fstat_r+0x20>)
 800aa1c:	2300      	movs	r3, #0
 800aa1e:	4604      	mov	r4, r0
 800aa20:	4608      	mov	r0, r1
 800aa22:	4611      	mov	r1, r2
 800aa24:	602b      	str	r3, [r5, #0]
 800aa26:	f7f6 fa6c 	bl	8000f02 <_fstat>
 800aa2a:	1c43      	adds	r3, r0, #1
 800aa2c:	d102      	bne.n	800aa34 <_fstat_r+0x1c>
 800aa2e:	682b      	ldr	r3, [r5, #0]
 800aa30:	b103      	cbz	r3, 800aa34 <_fstat_r+0x1c>
 800aa32:	6023      	str	r3, [r4, #0]
 800aa34:	bd38      	pop	{r3, r4, r5, pc}
 800aa36:	bf00      	nop
 800aa38:	200010ec 	.word	0x200010ec

0800aa3c <_isatty_r>:
 800aa3c:	b538      	push	{r3, r4, r5, lr}
 800aa3e:	4d06      	ldr	r5, [pc, #24]	@ (800aa58 <_isatty_r+0x1c>)
 800aa40:	2300      	movs	r3, #0
 800aa42:	4604      	mov	r4, r0
 800aa44:	4608      	mov	r0, r1
 800aa46:	602b      	str	r3, [r5, #0]
 800aa48:	f7f6 fa6b 	bl	8000f22 <_isatty>
 800aa4c:	1c43      	adds	r3, r0, #1
 800aa4e:	d102      	bne.n	800aa56 <_isatty_r+0x1a>
 800aa50:	682b      	ldr	r3, [r5, #0]
 800aa52:	b103      	cbz	r3, 800aa56 <_isatty_r+0x1a>
 800aa54:	6023      	str	r3, [r4, #0]
 800aa56:	bd38      	pop	{r3, r4, r5, pc}
 800aa58:	200010ec 	.word	0x200010ec

0800aa5c <_sbrk_r>:
 800aa5c:	b538      	push	{r3, r4, r5, lr}
 800aa5e:	4d06      	ldr	r5, [pc, #24]	@ (800aa78 <_sbrk_r+0x1c>)
 800aa60:	2300      	movs	r3, #0
 800aa62:	4604      	mov	r4, r0
 800aa64:	4608      	mov	r0, r1
 800aa66:	602b      	str	r3, [r5, #0]
 800aa68:	f7f6 fa74 	bl	8000f54 <_sbrk>
 800aa6c:	1c43      	adds	r3, r0, #1
 800aa6e:	d102      	bne.n	800aa76 <_sbrk_r+0x1a>
 800aa70:	682b      	ldr	r3, [r5, #0]
 800aa72:	b103      	cbz	r3, 800aa76 <_sbrk_r+0x1a>
 800aa74:	6023      	str	r3, [r4, #0]
 800aa76:	bd38      	pop	{r3, r4, r5, pc}
 800aa78:	200010ec 	.word	0x200010ec

0800aa7c <_init>:
 800aa7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa7e:	bf00      	nop
 800aa80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aa82:	bc08      	pop	{r3}
 800aa84:	469e      	mov	lr, r3
 800aa86:	4770      	bx	lr

0800aa88 <_fini>:
 800aa88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa8a:	bf00      	nop
 800aa8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aa8e:	bc08      	pop	{r3}
 800aa90:	469e      	mov	lr, r3
 800aa92:	4770      	bx	lr
