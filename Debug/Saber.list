
Saber.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a924  0800018c  0800018c  0000118c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000548  0800aab0  0800aab0  0000bab0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800aff8  0800aff8  0000c068  2**0
                  CONTENTS
  4 .ARM          00000000  0800aff8  0800aff8  0000c068  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800aff8  0800aff8  0000c068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800aff8  0800aff8  0000bff8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800affc  0800affc  0000bffc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  0800b000  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001094  20000068  0800b068  0000c068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200010fc  0800b068  0000c0fc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000c068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001904a  00000000  00000000  0000c098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003a39  00000000  00000000  000250e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001920  00000000  00000000  00028b20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000137a  00000000  00000000  0002a440  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024076  00000000  00000000  0002b7ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001fe53  00000000  00000000  0004f830  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d9b15  00000000  00000000  0006f683  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00149198  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007008  00000000  00000000  001491dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005a  00000000  00000000  001501e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	@ (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	20000068 	.word	0x20000068
 80001a8:	00000000 	.word	0x00000000
 80001ac:	0800aa98 	.word	0x0800aa98

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	@ (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	@ (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	@ (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	2000006c 	.word	0x2000006c
 80001c8:	0800aa98 	.word	0x0800aa98

080001cc <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80001cc:	b480      	push	{r7}
 80001ce:	b083      	sub	sp, #12
 80001d0:	af00      	add	r7, sp, #0
 80001d2:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80001d4:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80001d8:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 80001dc:	f003 0301 	and.w	r3, r3, #1
 80001e0:	2b00      	cmp	r3, #0
 80001e2:	d013      	beq.n	800020c <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80001e4:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80001e8:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 80001ec:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80001f0:	2b00      	cmp	r3, #0
 80001f2:	d00b      	beq.n	800020c <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80001f4:	e000      	b.n	80001f8 <ITM_SendChar+0x2c>
    {
      __NOP();
 80001f6:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80001f8:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80001fc:	681b      	ldr	r3, [r3, #0]
 80001fe:	2b00      	cmp	r3, #0
 8000200:	d0f9      	beq.n	80001f6 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000202:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000206:	687a      	ldr	r2, [r7, #4]
 8000208:	b2d2      	uxtb	r2, r2
 800020a:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 800020c:	687b      	ldr	r3, [r7, #4]
}
 800020e:	4618      	mov	r0, r3
 8000210:	370c      	adds	r7, #12
 8000212:	46bd      	mov	sp, r7
 8000214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000218:	4770      	bx	lr

0800021a <_write>:
void StartAudioPlayback(void);
void AdjustVolume(void* buffer, uint16_t size, uint16_t vol);
//static void platform_delay(uint32_t ms);

int _write(int file, char *ptr, int len)
{
 800021a:	b580      	push	{r7, lr}
 800021c:	b086      	sub	sp, #24
 800021e:	af00      	add	r7, sp, #0
 8000220:	60f8      	str	r0, [r7, #12]
 8000222:	60b9      	str	r1, [r7, #8]
 8000224:	607a      	str	r2, [r7, #4]
	int i=0;
 8000226:	2300      	movs	r3, #0
 8000228:	617b      	str	r3, [r7, #20]
	for(i=0; i<len; i++)
 800022a:	2300      	movs	r3, #0
 800022c:	617b      	str	r3, [r7, #20]
 800022e:	e009      	b.n	8000244 <_write+0x2a>
		ITM_SendChar((*ptr++));
 8000230:	68bb      	ldr	r3, [r7, #8]
 8000232:	1c5a      	adds	r2, r3, #1
 8000234:	60ba      	str	r2, [r7, #8]
 8000236:	781b      	ldrb	r3, [r3, #0]
 8000238:	4618      	mov	r0, r3
 800023a:	f7ff ffc7 	bl	80001cc <ITM_SendChar>
	for(i=0; i<len; i++)
 800023e:	697b      	ldr	r3, [r7, #20]
 8000240:	3301      	adds	r3, #1
 8000242:	617b      	str	r3, [r7, #20]
 8000244:	697a      	ldr	r2, [r7, #20]
 8000246:	687b      	ldr	r3, [r7, #4]
 8000248:	429a      	cmp	r2, r3
 800024a:	dbf1      	blt.n	8000230 <_write+0x16>
	return len;
 800024c:	687b      	ldr	r3, [r7, #4]
}
 800024e:	4618      	mov	r0, r3
 8000250:	3718      	adds	r7, #24
 8000252:	46bd      	mov	sp, r7
 8000254:	bd80      	pop	{r7, pc}
	...

08000258 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000258:	b580      	push	{r7, lr}
 800025a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800025c:	f000 fef9 	bl	8001052 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000260:	f000 f844 	bl	80002ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000264:	f000 f9fa 	bl	800065c <MX_GPIO_Init>
  MX_DMA_Init();
 8000268:	f000 f9d2 	bl	8000610 <MX_DMA_Init>
  MX_I2C2_Init();
 800026c:	f000 f88e 	bl	800038c <MX_I2C2_Init>
  MX_SAI1_Init();
 8000270:	f000 f8cc 	bl	800040c <MX_SAI1_Init>
  MX_SDMMC1_SD_Init();
 8000274:	f000 f900 	bl	8000478 <MX_SDMMC1_SD_Init>
  MX_TIM1_Init();
 8000278:	f000 f91e 	bl	80004b8 <MX_TIM1_Init>
  MX_FATFS_Init();
 800027c:	f006 fde2 	bl	8006e44 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
  StartAudioPlayback();
 8000280:	f000 fb26 	bl	80008d0 <StartAudioPlayback>
	      }

#endif

	      //printf("Looping\n\r");
	      if (fillBuffer)
 8000284:	4b12      	ldr	r3, [pc, #72]	@ (80002d0 <main+0x78>)
 8000286:	781b      	ldrb	r3, [r3, #0]
 8000288:	2b00      	cmp	r3, #0
 800028a:	d0fb      	beq.n	8000284 <main+0x2c>
	      {
	    	currentBuffer = 1 - currentBuffer;  // Toggle between 0 and 1
 800028c:	4b11      	ldr	r3, [pc, #68]	@ (80002d4 <main+0x7c>)
 800028e:	781b      	ldrb	r3, [r3, #0]
 8000290:	f1c3 0301 	rsb	r3, r3, #1
 8000294:	b2da      	uxtb	r2, r3
 8000296:	4b0f      	ldr	r3, [pc, #60]	@ (80002d4 <main+0x7c>)
 8000298:	701a      	strb	r2, [r3, #0]
			if (currentBuffer == 0)
 800029a:	4b0e      	ldr	r3, [pc, #56]	@ (80002d4 <main+0x7c>)
 800029c:	781b      	ldrb	r3, [r3, #0]
 800029e:	2b00      	cmp	r3, #0
 80002a0:	d109      	bne.n	80002b6 <main+0x5e>
				{
					FillBuffer(&audioFile, bufferA, BUFFER_SIZE);
 80002a2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80002a6:	490c      	ldr	r1, [pc, #48]	@ (80002d8 <main+0x80>)
 80002a8:	480c      	ldr	r0, [pc, #48]	@ (80002dc <main+0x84>)
 80002aa:	f000 fa55 	bl	8000758 <FillBuffer>
					printf("Filled Buffer A!\n");
 80002ae:	480c      	ldr	r0, [pc, #48]	@ (80002e0 <main+0x88>)
 80002b0:	f00a f84e 	bl	800a350 <puts>
 80002b4:	e008      	b.n	80002c8 <main+0x70>
				}
				else
				{
					FillBuffer(&audioFile, bufferB, BUFFER_SIZE);
 80002b6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80002ba:	490a      	ldr	r1, [pc, #40]	@ (80002e4 <main+0x8c>)
 80002bc:	4807      	ldr	r0, [pc, #28]	@ (80002dc <main+0x84>)
 80002be:	f000 fa4b 	bl	8000758 <FillBuffer>
					printf("Filled Buffer B!\n");
 80002c2:	4809      	ldr	r0, [pc, #36]	@ (80002e8 <main+0x90>)
 80002c4:	f00a f844 	bl	800a350 <puts>
				}
			fillBuffer = 0;
 80002c8:	4b01      	ldr	r3, [pc, #4]	@ (80002d0 <main+0x78>)
 80002ca:	2200      	movs	r2, #0
 80002cc:	701a      	strb	r2, [r3, #0]
	      if (fillBuffer)
 80002ce:	e7d9      	b.n	8000284 <main+0x2c>
 80002d0:	20000f4d 	.word	0x20000f4d
 80002d4:	20000f4c 	.word	0x20000f4c
 80002d8:	2000074c 	.word	0x2000074c
 80002dc:	200004f0 	.word	0x200004f0
 80002e0:	0800aab0 	.word	0x0800aab0
 80002e4:	20000b4c 	.word	0x20000b4c
 80002e8:	0800aac4 	.word	0x0800aac4

080002ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002ec:	b580      	push	{r7, lr}
 80002ee:	b096      	sub	sp, #88	@ 0x58
 80002f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002f2:	f107 0314 	add.w	r3, r7, #20
 80002f6:	2244      	movs	r2, #68	@ 0x44
 80002f8:	2100      	movs	r1, #0
 80002fa:	4618      	mov	r0, r3
 80002fc:	f00a f918 	bl	800a530 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000300:	463b      	mov	r3, r7
 8000302:	2200      	movs	r2, #0
 8000304:	601a      	str	r2, [r3, #0]
 8000306:	605a      	str	r2, [r3, #4]
 8000308:	609a      	str	r2, [r3, #8]
 800030a:	60da      	str	r2, [r3, #12]
 800030c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800030e:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000312:	f001 fda9 	bl	8001e68 <HAL_PWREx_ControlVoltageScaling>
 8000316:	4603      	mov	r3, r0
 8000318:	2b00      	cmp	r3, #0
 800031a:	d001      	beq.n	8000320 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800031c:	f000 fb2a 	bl	8000974 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000320:	2301      	movs	r3, #1
 8000322:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000324:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000328:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800032a:	2302      	movs	r3, #2
 800032c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800032e:	2303      	movs	r3, #3
 8000330:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000332:	2301      	movs	r3, #1
 8000334:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 20;
 8000336:	2314      	movs	r3, #20
 8000338:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800033a:	2307      	movs	r3, #7
 800033c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV8;
 800033e:	2308      	movs	r3, #8
 8000340:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000342:	2302      	movs	r3, #2
 8000344:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000346:	f107 0314 	add.w	r3, r7, #20
 800034a:	4618      	mov	r0, r3
 800034c:	f001 fde2 	bl	8001f14 <HAL_RCC_OscConfig>
 8000350:	4603      	mov	r3, r0
 8000352:	2b00      	cmp	r3, #0
 8000354:	d001      	beq.n	800035a <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000356:	f000 fb0d 	bl	8000974 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800035a:	230f      	movs	r3, #15
 800035c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800035e:	2303      	movs	r3, #3
 8000360:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000362:	2300      	movs	r3, #0
 8000364:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000366:	2300      	movs	r3, #0
 8000368:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800036a:	2300      	movs	r3, #0
 800036c:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800036e:	463b      	mov	r3, r7
 8000370:	2104      	movs	r1, #4
 8000372:	4618      	mov	r0, r3
 8000374:	f002 f9e2 	bl	800273c <HAL_RCC_ClockConfig>
 8000378:	4603      	mov	r3, r0
 800037a:	2b00      	cmp	r3, #0
 800037c:	d001      	beq.n	8000382 <SystemClock_Config+0x96>
  {
    Error_Handler();
 800037e:	f000 faf9 	bl	8000974 <Error_Handler>
  }
}
 8000382:	bf00      	nop
 8000384:	3758      	adds	r7, #88	@ 0x58
 8000386:	46bd      	mov	sp, r7
 8000388:	bd80      	pop	{r7, pc}
	...

0800038c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 800038c:	b580      	push	{r7, lr}
 800038e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000390:	4b1b      	ldr	r3, [pc, #108]	@ (8000400 <MX_I2C2_Init+0x74>)
 8000392:	4a1c      	ldr	r2, [pc, #112]	@ (8000404 <MX_I2C2_Init+0x78>)
 8000394:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10909CEC;
 8000396:	4b1a      	ldr	r3, [pc, #104]	@ (8000400 <MX_I2C2_Init+0x74>)
 8000398:	4a1b      	ldr	r2, [pc, #108]	@ (8000408 <MX_I2C2_Init+0x7c>)
 800039a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 800039c:	4b18      	ldr	r3, [pc, #96]	@ (8000400 <MX_I2C2_Init+0x74>)
 800039e:	2200      	movs	r2, #0
 80003a0:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80003a2:	4b17      	ldr	r3, [pc, #92]	@ (8000400 <MX_I2C2_Init+0x74>)
 80003a4:	2201      	movs	r2, #1
 80003a6:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80003a8:	4b15      	ldr	r3, [pc, #84]	@ (8000400 <MX_I2C2_Init+0x74>)
 80003aa:	2200      	movs	r2, #0
 80003ac:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80003ae:	4b14      	ldr	r3, [pc, #80]	@ (8000400 <MX_I2C2_Init+0x74>)
 80003b0:	2200      	movs	r2, #0
 80003b2:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80003b4:	4b12      	ldr	r3, [pc, #72]	@ (8000400 <MX_I2C2_Init+0x74>)
 80003b6:	2200      	movs	r2, #0
 80003b8:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80003ba:	4b11      	ldr	r3, [pc, #68]	@ (8000400 <MX_I2C2_Init+0x74>)
 80003bc:	2200      	movs	r2, #0
 80003be:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80003c0:	4b0f      	ldr	r3, [pc, #60]	@ (8000400 <MX_I2C2_Init+0x74>)
 80003c2:	2200      	movs	r2, #0
 80003c4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80003c6:	480e      	ldr	r0, [pc, #56]	@ (8000400 <MX_I2C2_Init+0x74>)
 80003c8:	f001 fc0e 	bl	8001be8 <HAL_I2C_Init>
 80003cc:	4603      	mov	r3, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d001      	beq.n	80003d6 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80003d2:	f000 facf 	bl	8000974 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80003d6:	2100      	movs	r1, #0
 80003d8:	4809      	ldr	r0, [pc, #36]	@ (8000400 <MX_I2C2_Init+0x74>)
 80003da:	f001 fca0 	bl	8001d1e <HAL_I2CEx_ConfigAnalogFilter>
 80003de:	4603      	mov	r3, r0
 80003e0:	2b00      	cmp	r3, #0
 80003e2:	d001      	beq.n	80003e8 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80003e4:	f000 fac6 	bl	8000974 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80003e8:	2100      	movs	r1, #0
 80003ea:	4805      	ldr	r0, [pc, #20]	@ (8000400 <MX_I2C2_Init+0x74>)
 80003ec:	f001 fce2 	bl	8001db4 <HAL_I2CEx_ConfigDigitalFilter>
 80003f0:	4603      	mov	r3, r0
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	d001      	beq.n	80003fa <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80003f6:	f000 fabd 	bl	8000974 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80003fa:	bf00      	nop
 80003fc:	bd80      	pop	{r7, pc}
 80003fe:	bf00      	nop
 8000400:	20000084 	.word	0x20000084
 8000404:	40005800 	.word	0x40005800
 8000408:	10909cec 	.word	0x10909cec

0800040c <MX_SAI1_Init>:
  * @brief SAI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI1_Init(void)
{
 800040c:	b580      	push	{r7, lr}
 800040e:	af00      	add	r7, sp, #0
  /* USER CODE END SAI1_Init 0 */

  /* USER CODE BEGIN SAI1_Init 1 */

  /* USER CODE END SAI1_Init 1 */
  hsai_BlockA1.Instance = SAI1_Block_A;
 8000410:	4b17      	ldr	r3, [pc, #92]	@ (8000470 <MX_SAI1_Init+0x64>)
 8000412:	4a18      	ldr	r2, [pc, #96]	@ (8000474 <MX_SAI1_Init+0x68>)
 8000414:	601a      	str	r2, [r3, #0]
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_TX;
 8000416:	4b16      	ldr	r3, [pc, #88]	@ (8000470 <MX_SAI1_Init+0x64>)
 8000418:	2200      	movs	r2, #0
 800041a:	605a      	str	r2, [r3, #4]
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
 800041c:	4b14      	ldr	r3, [pc, #80]	@ (8000470 <MX_SAI1_Init+0x64>)
 800041e:	2200      	movs	r2, #0
 8000420:	609a      	str	r2, [r3, #8]
  hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_ENABLE;
 8000422:	4b13      	ldr	r3, [pc, #76]	@ (8000470 <MX_SAI1_Init+0x64>)
 8000424:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000428:	611a      	str	r2, [r3, #16]
  hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 800042a:	4b11      	ldr	r3, [pc, #68]	@ (8000470 <MX_SAI1_Init+0x64>)
 800042c:	2200      	movs	r2, #0
 800042e:	615a      	str	r2, [r3, #20]
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8000430:	4b0f      	ldr	r3, [pc, #60]	@ (8000470 <MX_SAI1_Init+0x64>)
 8000432:	2200      	movs	r2, #0
 8000434:	619a      	str	r2, [r3, #24]
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_48K;
 8000436:	4b0e      	ldr	r3, [pc, #56]	@ (8000470 <MX_SAI1_Init+0x64>)
 8000438:	f64b 3280 	movw	r2, #48000	@ 0xbb80
 800043c:	61da      	str	r2, [r3, #28]
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 800043e:	4b0c      	ldr	r3, [pc, #48]	@ (8000470 <MX_SAI1_Init+0x64>)
 8000440:	2200      	movs	r2, #0
 8000442:	60da      	str	r2, [r3, #12]
  hsai_BlockA1.Init.MonoStereoMode = SAI_STEREOMODE;
 8000444:	4b0a      	ldr	r3, [pc, #40]	@ (8000470 <MX_SAI1_Init+0x64>)
 8000446:	2200      	movs	r2, #0
 8000448:	625a      	str	r2, [r3, #36]	@ 0x24
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
 800044a:	4b09      	ldr	r3, [pc, #36]	@ (8000470 <MX_SAI1_Init+0x64>)
 800044c:	2200      	movs	r2, #0
 800044e:	629a      	str	r2, [r3, #40]	@ 0x28
  hsai_BlockA1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8000450:	4b07      	ldr	r3, [pc, #28]	@ (8000470 <MX_SAI1_Init+0x64>)
 8000452:	2200      	movs	r2, #0
 8000454:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SAI_InitProtocol(&hsai_BlockA1, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_16BIT, 2) != HAL_OK)
 8000456:	2302      	movs	r3, #2
 8000458:	2200      	movs	r2, #0
 800045a:	2100      	movs	r1, #0
 800045c:	4804      	ldr	r0, [pc, #16]	@ (8000470 <MX_SAI1_Init+0x64>)
 800045e:	f003 fbed 	bl	8003c3c <HAL_SAI_InitProtocol>
 8000462:	4603      	mov	r3, r0
 8000464:	2b00      	cmp	r3, #0
 8000466:	d001      	beq.n	800046c <MX_SAI1_Init+0x60>
  {
    Error_Handler();
 8000468:	f000 fa84 	bl	8000974 <Error_Handler>
  }
  /* USER CODE BEGIN SAI1_Init 2 */

  /* USER CODE END SAI1_Init 2 */

}
 800046c:	bf00      	nop
 800046e:	bd80      	pop	{r7, pc}
 8000470:	200000d8 	.word	0x200000d8
 8000474:	40015404 	.word	0x40015404

08000478 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8000478:	b480      	push	{r7}
 800047a:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 800047c:	4b0c      	ldr	r3, [pc, #48]	@ (80004b0 <MX_SDMMC1_SD_Init+0x38>)
 800047e:	4a0d      	ldr	r2, [pc, #52]	@ (80004b4 <MX_SDMMC1_SD_Init+0x3c>)
 8000480:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8000482:	4b0b      	ldr	r3, [pc, #44]	@ (80004b0 <MX_SDMMC1_SD_Init+0x38>)
 8000484:	2200      	movs	r2, #0
 8000486:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 8000488:	4b09      	ldr	r3, [pc, #36]	@ (80004b0 <MX_SDMMC1_SD_Init+0x38>)
 800048a:	2200      	movs	r2, #0
 800048c:	609a      	str	r2, [r3, #8]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800048e:	4b08      	ldr	r3, [pc, #32]	@ (80004b0 <MX_SDMMC1_SD_Init+0x38>)
 8000490:	2200      	movs	r2, #0
 8000492:	60da      	str	r2, [r3, #12]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 8000494:	4b06      	ldr	r3, [pc, #24]	@ (80004b0 <MX_SDMMC1_SD_Init+0x38>)
 8000496:	2200      	movs	r2, #0
 8000498:	611a      	str	r2, [r3, #16]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800049a:	4b05      	ldr	r3, [pc, #20]	@ (80004b0 <MX_SDMMC1_SD_Init+0x38>)
 800049c:	2200      	movs	r2, #0
 800049e:	615a      	str	r2, [r3, #20]
  hsd1.Init.ClockDiv = 5;
 80004a0:	4b03      	ldr	r3, [pc, #12]	@ (80004b0 <MX_SDMMC1_SD_Init+0x38>)
 80004a2:	2205      	movs	r2, #5
 80004a4:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 80004a6:	bf00      	nop
 80004a8:	46bd      	mov	sp, r7
 80004aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ae:	4770      	bx	lr
 80004b0:	200001a4 	.word	0x200001a4
 80004b4:	40012800 	.word	0x40012800

080004b8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	b09a      	sub	sp, #104	@ 0x68
 80004bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80004be:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80004c2:	2200      	movs	r2, #0
 80004c4:	601a      	str	r2, [r3, #0]
 80004c6:	605a      	str	r2, [r3, #4]
 80004c8:	609a      	str	r2, [r3, #8]
 80004ca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80004cc:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80004d0:	2200      	movs	r2, #0
 80004d2:	601a      	str	r2, [r3, #0]
 80004d4:	605a      	str	r2, [r3, #4]
 80004d6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80004d8:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80004dc:	2200      	movs	r2, #0
 80004de:	601a      	str	r2, [r3, #0]
 80004e0:	605a      	str	r2, [r3, #4]
 80004e2:	609a      	str	r2, [r3, #8]
 80004e4:	60da      	str	r2, [r3, #12]
 80004e6:	611a      	str	r2, [r3, #16]
 80004e8:	615a      	str	r2, [r3, #20]
 80004ea:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80004ec:	1d3b      	adds	r3, r7, #4
 80004ee:	222c      	movs	r2, #44	@ 0x2c
 80004f0:	2100      	movs	r1, #0
 80004f2:	4618      	mov	r0, r3
 80004f4:	f00a f81c 	bl	800a530 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80004f8:	4b43      	ldr	r3, [pc, #268]	@ (8000608 <MX_TIM1_Init+0x150>)
 80004fa:	4a44      	ldr	r2, [pc, #272]	@ (800060c <MX_TIM1_Init+0x154>)
 80004fc:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80004fe:	4b42      	ldr	r3, [pc, #264]	@ (8000608 <MX_TIM1_Init+0x150>)
 8000500:	2200      	movs	r2, #0
 8000502:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000504:	4b40      	ldr	r3, [pc, #256]	@ (8000608 <MX_TIM1_Init+0x150>)
 8000506:	2200      	movs	r2, #0
 8000508:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 99;
 800050a:	4b3f      	ldr	r3, [pc, #252]	@ (8000608 <MX_TIM1_Init+0x150>)
 800050c:	2263      	movs	r2, #99	@ 0x63
 800050e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000510:	4b3d      	ldr	r3, [pc, #244]	@ (8000608 <MX_TIM1_Init+0x150>)
 8000512:	2200      	movs	r2, #0
 8000514:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000516:	4b3c      	ldr	r3, [pc, #240]	@ (8000608 <MX_TIM1_Init+0x150>)
 8000518:	2200      	movs	r2, #0
 800051a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800051c:	4b3a      	ldr	r3, [pc, #232]	@ (8000608 <MX_TIM1_Init+0x150>)
 800051e:	2200      	movs	r2, #0
 8000520:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000522:	4839      	ldr	r0, [pc, #228]	@ (8000608 <MX_TIM1_Init+0x150>)
 8000524:	f005 f904 	bl	8005730 <HAL_TIM_Base_Init>
 8000528:	4603      	mov	r3, r0
 800052a:	2b00      	cmp	r3, #0
 800052c:	d001      	beq.n	8000532 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 800052e:	f000 fa21 	bl	8000974 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000532:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000536:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000538:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800053c:	4619      	mov	r1, r3
 800053e:	4832      	ldr	r0, [pc, #200]	@ (8000608 <MX_TIM1_Init+0x150>)
 8000540:	f005 fa28 	bl	8005994 <HAL_TIM_ConfigClockSource>
 8000544:	4603      	mov	r3, r0
 8000546:	2b00      	cmp	r3, #0
 8000548:	d001      	beq.n	800054e <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800054a:	f000 fa13 	bl	8000974 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 800054e:	482e      	ldr	r0, [pc, #184]	@ (8000608 <MX_TIM1_Init+0x150>)
 8000550:	f005 f945 	bl	80057de <HAL_TIM_OC_Init>
 8000554:	4603      	mov	r3, r0
 8000556:	2b00      	cmp	r3, #0
 8000558:	d001      	beq.n	800055e <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 800055a:	f000 fa0b 	bl	8000974 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800055e:	2300      	movs	r3, #0
 8000560:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000562:	2300      	movs	r3, #0
 8000564:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000566:	2300      	movs	r3, #0
 8000568:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800056a:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800056e:	4619      	mov	r1, r3
 8000570:	4825      	ldr	r0, [pc, #148]	@ (8000608 <MX_TIM1_Init+0x150>)
 8000572:	f005 fe55 	bl	8006220 <HAL_TIMEx_MasterConfigSynchronization>
 8000576:	4603      	mov	r3, r0
 8000578:	2b00      	cmp	r3, #0
 800057a:	d001      	beq.n	8000580 <MX_TIM1_Init+0xc8>
  {
    Error_Handler();
 800057c:	f000 f9fa 	bl	8000974 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8000580:	2300      	movs	r3, #0
 8000582:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 8000584:	2300      	movs	r3, #0
 8000586:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000588:	2300      	movs	r3, #0
 800058a:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800058c:	2300      	movs	r3, #0
 800058e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000590:	2300      	movs	r3, #0
 8000592:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000594:	2300      	movs	r3, #0
 8000596:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000598:	2300      	movs	r3, #0
 800059a:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800059c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80005a0:	2204      	movs	r2, #4
 80005a2:	4619      	mov	r1, r3
 80005a4:	4818      	ldr	r0, [pc, #96]	@ (8000608 <MX_TIM1_Init+0x150>)
 80005a6:	f005 f97b 	bl	80058a0 <HAL_TIM_OC_ConfigChannel>
 80005aa:	4603      	mov	r3, r0
 80005ac:	2b00      	cmp	r3, #0
 80005ae:	d001      	beq.n	80005b4 <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 80005b0:	f000 f9e0 	bl	8000974 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80005b4:	2300      	movs	r3, #0
 80005b6:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80005b8:	2300      	movs	r3, #0
 80005ba:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80005bc:	2300      	movs	r3, #0
 80005be:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80005c0:	2300      	movs	r3, #0
 80005c2:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80005c4:	2300      	movs	r3, #0
 80005c6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80005c8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80005cc:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80005ce:	2300      	movs	r3, #0
 80005d0:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80005d2:	2300      	movs	r3, #0
 80005d4:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80005d6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80005da:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80005dc:	2300      	movs	r3, #0
 80005de:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80005e0:	2300      	movs	r3, #0
 80005e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80005e4:	1d3b      	adds	r3, r7, #4
 80005e6:	4619      	mov	r1, r3
 80005e8:	4807      	ldr	r0, [pc, #28]	@ (8000608 <MX_TIM1_Init+0x150>)
 80005ea:	f005 fe7f 	bl	80062ec <HAL_TIMEx_ConfigBreakDeadTime>
 80005ee:	4603      	mov	r3, r0
 80005f0:	2b00      	cmp	r3, #0
 80005f2:	d001      	beq.n	80005f8 <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 80005f4:	f000 f9be 	bl	8000974 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80005f8:	4803      	ldr	r0, [pc, #12]	@ (8000608 <MX_TIM1_Init+0x150>)
 80005fa:	f000 fb37 	bl	8000c6c <HAL_TIM_MspPostInit>

}
 80005fe:	bf00      	nop
 8000600:	3768      	adds	r7, #104	@ 0x68
 8000602:	46bd      	mov	sp, r7
 8000604:	bd80      	pop	{r7, pc}
 8000606:	bf00      	nop
 8000608:	20000270 	.word	0x20000270
 800060c:	40012c00 	.word	0x40012c00

08000610 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	b082      	sub	sp, #8
 8000614:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000616:	4b10      	ldr	r3, [pc, #64]	@ (8000658 <MX_DMA_Init+0x48>)
 8000618:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800061a:	4a0f      	ldr	r2, [pc, #60]	@ (8000658 <MX_DMA_Init+0x48>)
 800061c:	f043 0302 	orr.w	r3, r3, #2
 8000620:	6493      	str	r3, [r2, #72]	@ 0x48
 8000622:	4b0d      	ldr	r3, [pc, #52]	@ (8000658 <MX_DMA_Init+0x48>)
 8000624:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000626:	f003 0302 	and.w	r3, r3, #2
 800062a:	607b      	str	r3, [r7, #4]
 800062c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel1_IRQn, 0, 0);
 800062e:	2200      	movs	r2, #0
 8000630:	2100      	movs	r1, #0
 8000632:	2038      	movs	r0, #56	@ 0x38
 8000634:	f000 fe81 	bl	800133a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel1_IRQn);
 8000638:	2038      	movs	r0, #56	@ 0x38
 800063a:	f000 fe9a 	bl	8001372 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel4_IRQn, 0, 0);
 800063e:	2200      	movs	r2, #0
 8000640:	2100      	movs	r1, #0
 8000642:	203b      	movs	r0, #59	@ 0x3b
 8000644:	f000 fe79 	bl	800133a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel4_IRQn);
 8000648:	203b      	movs	r0, #59	@ 0x3b
 800064a:	f000 fe92 	bl	8001372 <HAL_NVIC_EnableIRQ>

}
 800064e:	bf00      	nop
 8000650:	3708      	adds	r7, #8
 8000652:	46bd      	mov	sp, r7
 8000654:	bd80      	pop	{r7, pc}
 8000656:	bf00      	nop
 8000658:	40021000 	.word	0x40021000

0800065c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	b08a      	sub	sp, #40	@ 0x28
 8000660:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000662:	f107 0314 	add.w	r3, r7, #20
 8000666:	2200      	movs	r2, #0
 8000668:	601a      	str	r2, [r3, #0]
 800066a:	605a      	str	r2, [r3, #4]
 800066c:	609a      	str	r2, [r3, #8]
 800066e:	60da      	str	r2, [r3, #12]
 8000670:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000672:	4b37      	ldr	r3, [pc, #220]	@ (8000750 <MX_GPIO_Init+0xf4>)
 8000674:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000676:	4a36      	ldr	r2, [pc, #216]	@ (8000750 <MX_GPIO_Init+0xf4>)
 8000678:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800067c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800067e:	4b34      	ldr	r3, [pc, #208]	@ (8000750 <MX_GPIO_Init+0xf4>)
 8000680:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000682:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000686:	613b      	str	r3, [r7, #16]
 8000688:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800068a:	4b31      	ldr	r3, [pc, #196]	@ (8000750 <MX_GPIO_Init+0xf4>)
 800068c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800068e:	4a30      	ldr	r2, [pc, #192]	@ (8000750 <MX_GPIO_Init+0xf4>)
 8000690:	f043 0304 	orr.w	r3, r3, #4
 8000694:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000696:	4b2e      	ldr	r3, [pc, #184]	@ (8000750 <MX_GPIO_Init+0xf4>)
 8000698:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800069a:	f003 0304 	and.w	r3, r3, #4
 800069e:	60fb      	str	r3, [r7, #12]
 80006a0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006a2:	4b2b      	ldr	r3, [pc, #172]	@ (8000750 <MX_GPIO_Init+0xf4>)
 80006a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006a6:	4a2a      	ldr	r2, [pc, #168]	@ (8000750 <MX_GPIO_Init+0xf4>)
 80006a8:	f043 0301 	orr.w	r3, r3, #1
 80006ac:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80006ae:	4b28      	ldr	r3, [pc, #160]	@ (8000750 <MX_GPIO_Init+0xf4>)
 80006b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006b2:	f003 0301 	and.w	r3, r3, #1
 80006b6:	60bb      	str	r3, [r7, #8]
 80006b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006ba:	4b25      	ldr	r3, [pc, #148]	@ (8000750 <MX_GPIO_Init+0xf4>)
 80006bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006be:	4a24      	ldr	r2, [pc, #144]	@ (8000750 <MX_GPIO_Init+0xf4>)
 80006c0:	f043 0302 	orr.w	r3, r3, #2
 80006c4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80006c6:	4b22      	ldr	r3, [pc, #136]	@ (8000750 <MX_GPIO_Init+0xf4>)
 80006c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006ca:	f003 0302 	and.w	r3, r3, #2
 80006ce:	607b      	str	r3, [r7, #4]
 80006d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80006d2:	4b1f      	ldr	r3, [pc, #124]	@ (8000750 <MX_GPIO_Init+0xf4>)
 80006d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006d6:	4a1e      	ldr	r2, [pc, #120]	@ (8000750 <MX_GPIO_Init+0xf4>)
 80006d8:	f043 0308 	orr.w	r3, r3, #8
 80006dc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80006de:	4b1c      	ldr	r3, [pc, #112]	@ (8000750 <MX_GPIO_Init+0xf4>)
 80006e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006e2:	f003 0308 	and.w	r3, r3, #8
 80006e6:	603b      	str	r3, [r7, #0]
 80006e8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(AMP_ENABLE_GPIO_Port, AMP_ENABLE_Pin, GPIO_PIN_SET);
 80006ea:	2201      	movs	r2, #1
 80006ec:	2108      	movs	r1, #8
 80006ee:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80006f2:	f001 fa61 	bl	8001bb8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BUTTON_Pin */
  GPIO_InitStruct.Pin = BUTTON_Pin;
 80006f6:	2304      	movs	r3, #4
 80006f8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006fa:	2300      	movs	r3, #0
 80006fc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006fe:	2300      	movs	r3, #0
 8000700:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 8000702:	f107 0314 	add.w	r3, r7, #20
 8000706:	4619      	mov	r1, r3
 8000708:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800070c:	f001 f8c2 	bl	8001894 <HAL_GPIO_Init>

  /*Configure GPIO pin : AMP_ENABLE_Pin */
  GPIO_InitStruct.Pin = AMP_ENABLE_Pin;
 8000710:	2308      	movs	r3, #8
 8000712:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000714:	2301      	movs	r3, #1
 8000716:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000718:	2301      	movs	r3, #1
 800071a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800071c:	2300      	movs	r3, #0
 800071e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(AMP_ENABLE_GPIO_Port, &GPIO_InitStruct);
 8000720:	f107 0314 	add.w	r3, r7, #20
 8000724:	4619      	mov	r1, r3
 8000726:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800072a:	f001 f8b3 	bl	8001894 <HAL_GPIO_Init>

  /*Configure GPIO pin : SD_DETECT_Pin */
  GPIO_InitStruct.Pin = SD_DETECT_Pin;
 800072e:	2380      	movs	r3, #128	@ 0x80
 8000730:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000732:	2300      	movs	r3, #0
 8000734:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000736:	2300      	movs	r3, #0
 8000738:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SD_DETECT_GPIO_Port, &GPIO_InitStruct);
 800073a:	f107 0314 	add.w	r3, r7, #20
 800073e:	4619      	mov	r1, r3
 8000740:	4804      	ldr	r0, [pc, #16]	@ (8000754 <MX_GPIO_Init+0xf8>)
 8000742:	f001 f8a7 	bl	8001894 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000746:	bf00      	nop
 8000748:	3728      	adds	r7, #40	@ 0x28
 800074a:	46bd      	mov	sp, r7
 800074c:	bd80      	pop	{r7, pc}
 800074e:	bf00      	nop
 8000750:	40021000 	.word	0x40021000
 8000754:	48000400 	.word	0x48000400

08000758 <FillBuffer>:

/* USER CODE BEGIN 4 */

void FillBuffer(FIL *audioFileP, uint16_t *buffer, uint32_t size)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	b086      	sub	sp, #24
 800075c:	af00      	add	r7, sp, #0
 800075e:	60f8      	str	r0, [r7, #12]
 8000760:	60b9      	str	r1, [r7, #8]
 8000762:	607a      	str	r2, [r7, #4]
    UINT bytesRead = 0;
 8000764:	2300      	movs	r3, #0
 8000766:	613b      	str	r3, [r7, #16]
    while(hdma_sdmmc1.State != HAL_DMA_STATE_READY){}
 8000768:	bf00      	nop
 800076a:	4b14      	ldr	r3, [pc, #80]	@ (80007bc <FillBuffer+0x64>)
 800076c:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8000770:	b2db      	uxtb	r3, r3
 8000772:	2b01      	cmp	r3, #1
 8000774:	d1f9      	bne.n	800076a <FillBuffer+0x12>
    FRESULT res = f_read(audioFileP, buffer, size, &bytesRead);
 8000776:	f107 0310 	add.w	r3, r7, #16
 800077a:	687a      	ldr	r2, [r7, #4]
 800077c:	68b9      	ldr	r1, [r7, #8]
 800077e:	68f8      	ldr	r0, [r7, #12]
 8000780:	f009 f9c5 	bl	8009b0e <f_read>
 8000784:	4603      	mov	r3, r0
 8000786:	75fb      	strb	r3, [r7, #23]
    if (res != FR_OK || bytesRead < size)
 8000788:	7dfb      	ldrb	r3, [r7, #23]
 800078a:	2b00      	cmp	r3, #0
 800078c:	d103      	bne.n	8000796 <FillBuffer+0x3e>
 800078e:	693b      	ldr	r3, [r7, #16]
 8000790:	687a      	ldr	r2, [r7, #4]
 8000792:	429a      	cmp	r2, r3
 8000794:	d90d      	bls.n	80007b2 <FillBuffer+0x5a>
    {
        // Handle end of file or read error
        HAL_SAI_DMAStop(&hsai_BlockA1);
 8000796:	480a      	ldr	r0, [pc, #40]	@ (80007c0 <FillBuffer+0x68>)
 8000798:	f003 fba4 	bl	8003ee4 <HAL_SAI_DMAStop>
        f_close(audioFileP);
 800079c:	68f8      	ldr	r0, [r7, #12]
 800079e:	f009 fb73 	bl	8009e88 <f_close>
        fillBuffer = 0;
 80007a2:	4b08      	ldr	r3, [pc, #32]	@ (80007c4 <FillBuffer+0x6c>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	701a      	strb	r2, [r3, #0]
        if (res != FR_OK)Error_Handler();
 80007a8:	7dfb      	ldrb	r3, [r7, #23]
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	d001      	beq.n	80007b2 <FillBuffer+0x5a>
 80007ae:	f000 f8e1 	bl	8000974 <Error_Handler>
    }

    //AdjustVolume(buffer, size, 20);
}
 80007b2:	bf00      	nop
 80007b4:	3718      	adds	r7, #24
 80007b6:	46bd      	mov	sp, r7
 80007b8:	bd80      	pop	{r7, pc}
 80007ba:	bf00      	nop
 80007bc:	20000228 	.word	0x20000228
 80007c0:	200000d8 	.word	0x200000d8
 80007c4:	20000f4d 	.word	0x20000f4d

080007c8 <ReadWavHeader>:

FRESULT ReadWavHeader(FIL *audioFile, WAV_HeaderTypeDef *wavHeader) {
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b084      	sub	sp, #16
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	6078      	str	r0, [r7, #4]
 80007d0:	6039      	str	r1, [r7, #0]
    UINT bytesRead;
    FRESULT res;

    // Read the WAV header
    res = f_read(audioFile, wavHeader, sizeof(WAV_HeaderTypeDef), &bytesRead);
 80007d2:	f107 0308 	add.w	r3, r7, #8
 80007d6:	222c      	movs	r2, #44	@ 0x2c
 80007d8:	6839      	ldr	r1, [r7, #0]
 80007da:	6878      	ldr	r0, [r7, #4]
 80007dc:	f009 f997 	bl	8009b0e <f_read>
 80007e0:	4603      	mov	r3, r0
 80007e2:	73fb      	strb	r3, [r7, #15]
    if (res != FR_OK || bytesRead != sizeof(WAV_HeaderTypeDef)) {
 80007e4:	7bfb      	ldrb	r3, [r7, #15]
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d102      	bne.n	80007f0 <ReadWavHeader+0x28>
 80007ea:	68bb      	ldr	r3, [r7, #8]
 80007ec:	2b2c      	cmp	r3, #44	@ 0x2c
 80007ee:	d001      	beq.n	80007f4 <ReadWavHeader+0x2c>
        return FR_DISK_ERR;
 80007f0:	2301      	movs	r3, #1
 80007f2:	e015      	b.n	8000820 <ReadWavHeader+0x58>
    }

    // Check if the file is a valid WAV file
    if (memcmp(wavHeader->ChunkID, "RIFF", 4) != 0 ||
 80007f4:	683b      	ldr	r3, [r7, #0]
 80007f6:	2204      	movs	r2, #4
 80007f8:	490b      	ldr	r1, [pc, #44]	@ (8000828 <ReadWavHeader+0x60>)
 80007fa:	4618      	mov	r0, r3
 80007fc:	f009 fe88 	bl	800a510 <memcmp>
 8000800:	4603      	mov	r3, r0
 8000802:	2b00      	cmp	r3, #0
 8000804:	d109      	bne.n	800081a <ReadWavHeader+0x52>
        memcmp(wavHeader->Format, "WAVE", 4) != 0) {
 8000806:	683b      	ldr	r3, [r7, #0]
 8000808:	3308      	adds	r3, #8
 800080a:	2204      	movs	r2, #4
 800080c:	4907      	ldr	r1, [pc, #28]	@ (800082c <ReadWavHeader+0x64>)
 800080e:	4618      	mov	r0, r3
 8000810:	f009 fe7e 	bl	800a510 <memcmp>
 8000814:	4603      	mov	r3, r0
    if (memcmp(wavHeader->ChunkID, "RIFF", 4) != 0 ||
 8000816:	2b00      	cmp	r3, #0
 8000818:	d001      	beq.n	800081e <ReadWavHeader+0x56>
        return FR_INVALID_OBJECT;
 800081a:	2309      	movs	r3, #9
 800081c:	e000      	b.n	8000820 <ReadWavHeader+0x58>
    }

    return FR_OK;
 800081e:	2300      	movs	r3, #0
}
 8000820:	4618      	mov	r0, r3
 8000822:	3710      	adds	r7, #16
 8000824:	46bd      	mov	sp, r7
 8000826:	bd80      	pop	{r7, pc}
 8000828:	0800aad8 	.word	0x0800aad8
 800082c:	0800aae0 	.word	0x0800aae0

08000830 <MountFile>:

int8_t MountFile(int force)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	b082      	sub	sp, #8
 8000834:	af00      	add	r7, sp, #0
 8000836:	6078      	str	r0, [r7, #4]
	if(f_mount(&fs, "", force) != FR_OK) return 0;
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	b2db      	uxtb	r3, r3
 800083c:	461a      	mov	r2, r3
 800083e:	4908      	ldr	r1, [pc, #32]	@ (8000860 <MountFile+0x30>)
 8000840:	4808      	ldr	r0, [pc, #32]	@ (8000864 <MountFile+0x34>)
 8000842:	f008 fe6b 	bl	800951c <f_mount>
 8000846:	4603      	mov	r3, r0
 8000848:	2b00      	cmp	r3, #0
 800084a:	d001      	beq.n	8000850 <MountFile+0x20>
 800084c:	2300      	movs	r3, #0
 800084e:	e003      	b.n	8000858 <MountFile+0x28>
	printf("File Mounted\n");
 8000850:	4805      	ldr	r0, [pc, #20]	@ (8000868 <MountFile+0x38>)
 8000852:	f009 fd7d 	bl	800a350 <puts>
	return 1;
 8000856:	2301      	movs	r3, #1
}
 8000858:	4618      	mov	r0, r3
 800085a:	3708      	adds	r7, #8
 800085c:	46bd      	mov	sp, r7
 800085e:	bd80      	pop	{r7, pc}
 8000860:	0800aae8 	.word	0x0800aae8
 8000864:	200002bc 	.word	0x200002bc
 8000868:	0800aaec 	.word	0x0800aaec

0800086c <SDInit>:

MAXRESULT SDInit(char* fileName)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	b084      	sub	sp, #16
 8000870:	af00      	add	r7, sp, #0
 8000872:	6078      	str	r0, [r7, #4]
	FRESULT res;
	if (MountFile(1)!= 1) return MAX_MOUNTERR;
 8000874:	2001      	movs	r0, #1
 8000876:	f7ff ffdb 	bl	8000830 <MountFile>
 800087a:	4603      	mov	r3, r0
 800087c:	2b01      	cmp	r3, #1
 800087e:	d001      	beq.n	8000884 <SDInit+0x18>
 8000880:	2302      	movs	r3, #2
 8000882:	e01b      	b.n	80008bc <SDInit+0x50>
	//Open WAV file

	res = f_open(&audioFile, fileName, FA_READ | FA_OPEN_EXISTING);
 8000884:	2201      	movs	r2, #1
 8000886:	6879      	ldr	r1, [r7, #4]
 8000888:	480e      	ldr	r0, [pc, #56]	@ (80008c4 <SDInit+0x58>)
 800088a:	f008 fe8d 	bl	80095a8 <f_open>
 800088e:	4603      	mov	r3, r0
 8000890:	73fb      	strb	r3, [r7, #15]
	if(res != FR_OK) return MAX_OPENERR;
 8000892:	7bfb      	ldrb	r3, [r7, #15]
 8000894:	2b00      	cmp	r3, #0
 8000896:	d001      	beq.n	800089c <SDInit+0x30>
 8000898:	2303      	movs	r3, #3
 800089a:	e00f      	b.n	80008bc <SDInit+0x50>
	printf("File Open!\n");
 800089c:	480a      	ldr	r0, [pc, #40]	@ (80008c8 <SDInit+0x5c>)
 800089e:	f009 fd57 	bl	800a350 <puts>

	if(ReadWavHeader(&audioFile, &wavHeader)!= FR_OK)
 80008a2:	490a      	ldr	r1, [pc, #40]	@ (80008cc <SDInit+0x60>)
 80008a4:	4807      	ldr	r0, [pc, #28]	@ (80008c4 <SDInit+0x58>)
 80008a6:	f7ff ff8f 	bl	80007c8 <ReadWavHeader>
 80008aa:	4603      	mov	r3, r0
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	d004      	beq.n	80008ba <SDInit+0x4e>
	{
		f_close(&audioFile);
 80008b0:	4804      	ldr	r0, [pc, #16]	@ (80008c4 <SDInit+0x58>)
 80008b2:	f009 fae9 	bl	8009e88 <f_close>
		Error_Handler();
 80008b6:	f000 f85d 	bl	8000974 <Error_Handler>
	}

	return MAX_SUCCESS;
 80008ba:	2301      	movs	r3, #1

}
 80008bc:	4618      	mov	r0, r3
 80008be:	3710      	adds	r7, #16
 80008c0:	46bd      	mov	sp, r7
 80008c2:	bd80      	pop	{r7, pc}
 80008c4:	200004f0 	.word	0x200004f0
 80008c8:	0800aafc 	.word	0x0800aafc
 80008cc:	20000720 	.word	0x20000720

080008d0 <StartAudioPlayback>:
      *s = *s * vol;
      s++;
    }
}
void StartAudioPlayback(void)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b082      	sub	sp, #8
 80008d4:	af00      	add	r7, sp, #0
	if(SDInit("ON.WAV")!= MAX_SUCCESS) Error_Handler();
 80008d6:	4812      	ldr	r0, [pc, #72]	@ (8000920 <StartAudioPlayback+0x50>)
 80008d8:	f7ff ffc8 	bl	800086c <SDInit>
 80008dc:	4603      	mov	r3, r0
 80008de:	2b01      	cmp	r3, #1
 80008e0:	d001      	beq.n	80008e6 <StartAudioPlayback+0x16>
 80008e2:	f000 f847 	bl	8000974 <Error_Handler>
	FillBuffer(&audioFile, bufferA, BUFFER_SIZE);
 80008e6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80008ea:	490e      	ldr	r1, [pc, #56]	@ (8000924 <StartAudioPlayback+0x54>)
 80008ec:	480e      	ldr	r0, [pc, #56]	@ (8000928 <StartAudioPlayback+0x58>)
 80008ee:	f7ff ff33 	bl	8000758 <FillBuffer>
	FillBuffer(&audioFile, bufferB, BUFFER_SIZE);
 80008f2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80008f6:	490d      	ldr	r1, [pc, #52]	@ (800092c <StartAudioPlayback+0x5c>)
 80008f8:	480b      	ldr	r0, [pc, #44]	@ (8000928 <StartAudioPlayback+0x58>)
 80008fa:	f7ff ff2d 	bl	8000758 <FillBuffer>
	HAL_StatusTypeDef dmaStatus = HAL_SAI_Transmit_DMA(&hsai_BlockA1, (uint8_t*) bufferA, BUFFER_SIZE);
 80008fe:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000902:	4908      	ldr	r1, [pc, #32]	@ (8000924 <StartAudioPlayback+0x54>)
 8000904:	480a      	ldr	r0, [pc, #40]	@ (8000930 <StartAudioPlayback+0x60>)
 8000906:	f003 fb41 	bl	8003f8c <HAL_SAI_Transmit_DMA>
 800090a:	4603      	mov	r3, r0
 800090c:	71fb      	strb	r3, [r7, #7]
	if (dmaStatus != HAL_OK) Error_Handler();
 800090e:	79fb      	ldrb	r3, [r7, #7]
 8000910:	2b00      	cmp	r3, #0
 8000912:	d001      	beq.n	8000918 <StartAudioPlayback+0x48>
 8000914:	f000 f82e 	bl	8000974 <Error_Handler>
}
 8000918:	bf00      	nop
 800091a:	3708      	adds	r7, #8
 800091c:	46bd      	mov	sp, r7
 800091e:	bd80      	pop	{r7, pc}
 8000920:	0800ab08 	.word	0x0800ab08
 8000924:	2000074c 	.word	0x2000074c
 8000928:	200004f0 	.word	0x200004f0
 800092c:	20000b4c 	.word	0x20000b4c
 8000930:	200000d8 	.word	0x200000d8

08000934 <HAL_SAI_TxCpltCallback>:

void HAL_SAI_TxCpltCallback(SAI_HandleTypeDef *hsai_BlockA1)
{
 8000934:	b480      	push	{r7}
 8000936:	b083      	sub	sp, #12
 8000938:	af00      	add	r7, sp, #0
 800093a:	6078      	str	r0, [r7, #4]
	//printf("Transfer Complete!\n");
	fillBuffer = 1;
 800093c:	4b04      	ldr	r3, [pc, #16]	@ (8000950 <HAL_SAI_TxCpltCallback+0x1c>)
 800093e:	2201      	movs	r2, #1
 8000940:	701a      	strb	r2, [r3, #0]
}
 8000942:	bf00      	nop
 8000944:	370c      	adds	r7, #12
 8000946:	46bd      	mov	sp, r7
 8000948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800094c:	4770      	bx	lr
 800094e:	bf00      	nop
 8000950:	20000f4d 	.word	0x20000f4d

08000954 <HAL_SAI_TxHalfCpltCallback>:

void HAL_SAI_TxHalfCpltCallback(SAI_HandleTypeDef *hsai_BlockA1)
{
 8000954:	b480      	push	{r7}
 8000956:	b083      	sub	sp, #12
 8000958:	af00      	add	r7, sp, #0
 800095a:	6078      	str	r0, [r7, #4]
	//printf("Transfer Half Complete!\n");
	fillBuffer = 1;
 800095c:	4b04      	ldr	r3, [pc, #16]	@ (8000970 <HAL_SAI_TxHalfCpltCallback+0x1c>)
 800095e:	2201      	movs	r2, #1
 8000960:	701a      	strb	r2, [r3, #0]
}
 8000962:	bf00      	nop
 8000964:	370c      	adds	r7, #12
 8000966:	46bd      	mov	sp, r7
 8000968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800096c:	4770      	bx	lr
 800096e:	bf00      	nop
 8000970:	20000f4d 	.word	0x20000f4d

08000974 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000978:	b672      	cpsid	i
}
 800097a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  f_mount(NULL, "/", 1);
 800097c:	2201      	movs	r2, #1
 800097e:	4903      	ldr	r1, [pc, #12]	@ (800098c <Error_Handler+0x18>)
 8000980:	2000      	movs	r0, #0
 8000982:	f008 fdcb 	bl	800951c <f_mount>
  while (1)
 8000986:	bf00      	nop
 8000988:	e7fd      	b.n	8000986 <Error_Handler+0x12>
 800098a:	bf00      	nop
 800098c:	0800ab10 	.word	0x0800ab10

08000990 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000990:	b480      	push	{r7}
 8000992:	b083      	sub	sp, #12
 8000994:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000996:	4b0f      	ldr	r3, [pc, #60]	@ (80009d4 <HAL_MspInit+0x44>)
 8000998:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800099a:	4a0e      	ldr	r2, [pc, #56]	@ (80009d4 <HAL_MspInit+0x44>)
 800099c:	f043 0301 	orr.w	r3, r3, #1
 80009a0:	6613      	str	r3, [r2, #96]	@ 0x60
 80009a2:	4b0c      	ldr	r3, [pc, #48]	@ (80009d4 <HAL_MspInit+0x44>)
 80009a4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80009a6:	f003 0301 	and.w	r3, r3, #1
 80009aa:	607b      	str	r3, [r7, #4]
 80009ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009ae:	4b09      	ldr	r3, [pc, #36]	@ (80009d4 <HAL_MspInit+0x44>)
 80009b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80009b2:	4a08      	ldr	r2, [pc, #32]	@ (80009d4 <HAL_MspInit+0x44>)
 80009b4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80009b8:	6593      	str	r3, [r2, #88]	@ 0x58
 80009ba:	4b06      	ldr	r3, [pc, #24]	@ (80009d4 <HAL_MspInit+0x44>)
 80009bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80009be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80009c2:	603b      	str	r3, [r7, #0]
 80009c4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009c6:	bf00      	nop
 80009c8:	370c      	adds	r7, #12
 80009ca:	46bd      	mov	sp, r7
 80009cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d0:	4770      	bx	lr
 80009d2:	bf00      	nop
 80009d4:	40021000 	.word	0x40021000

080009d8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	b0a0      	sub	sp, #128	@ 0x80
 80009dc:	af00      	add	r7, sp, #0
 80009de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009e0:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80009e4:	2200      	movs	r2, #0
 80009e6:	601a      	str	r2, [r3, #0]
 80009e8:	605a      	str	r2, [r3, #4]
 80009ea:	609a      	str	r2, [r3, #8]
 80009ec:	60da      	str	r2, [r3, #12]
 80009ee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80009f0:	f107 0310 	add.w	r3, r7, #16
 80009f4:	225c      	movs	r2, #92	@ 0x5c
 80009f6:	2100      	movs	r1, #0
 80009f8:	4618      	mov	r0, r3
 80009fa:	f009 fd99 	bl	800a530 <memset>
  if(hi2c->Instance==I2C2)
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	681b      	ldr	r3, [r3, #0]
 8000a02:	4a1f      	ldr	r2, [pc, #124]	@ (8000a80 <HAL_I2C_MspInit+0xa8>)
 8000a04:	4293      	cmp	r3, r2
 8000a06:	d136      	bne.n	8000a76 <HAL_I2C_MspInit+0x9e>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8000a08:	2380      	movs	r3, #128	@ 0x80
 8000a0a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	647b      	str	r3, [r7, #68]	@ 0x44
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a10:	f107 0310 	add.w	r3, r7, #16
 8000a14:	4618      	mov	r0, r3
 8000a16:	f002 f8b5 	bl	8002b84 <HAL_RCCEx_PeriphCLKConfig>
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d001      	beq.n	8000a24 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000a20:	f7ff ffa8 	bl	8000974 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a24:	4b17      	ldr	r3, [pc, #92]	@ (8000a84 <HAL_I2C_MspInit+0xac>)
 8000a26:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a28:	4a16      	ldr	r2, [pc, #88]	@ (8000a84 <HAL_I2C_MspInit+0xac>)
 8000a2a:	f043 0302 	orr.w	r3, r3, #2
 8000a2e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a30:	4b14      	ldr	r3, [pc, #80]	@ (8000a84 <HAL_I2C_MspInit+0xac>)
 8000a32:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a34:	f003 0302 	and.w	r3, r3, #2
 8000a38:	60fb      	str	r3, [r7, #12]
 8000a3a:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB11     ------> I2C2_SDA
    PB13     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8000a3c:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8000a40:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a42:	2312      	movs	r3, #18
 8000a44:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a46:	2300      	movs	r3, #0
 8000a48:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a4a:	2303      	movs	r3, #3
 8000a4c:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000a4e:	2304      	movs	r3, #4
 8000a50:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a52:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8000a56:	4619      	mov	r1, r3
 8000a58:	480b      	ldr	r0, [pc, #44]	@ (8000a88 <HAL_I2C_MspInit+0xb0>)
 8000a5a:	f000 ff1b 	bl	8001894 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000a5e:	4b09      	ldr	r3, [pc, #36]	@ (8000a84 <HAL_I2C_MspInit+0xac>)
 8000a60:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000a62:	4a08      	ldr	r2, [pc, #32]	@ (8000a84 <HAL_I2C_MspInit+0xac>)
 8000a64:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000a68:	6593      	str	r3, [r2, #88]	@ 0x58
 8000a6a:	4b06      	ldr	r3, [pc, #24]	@ (8000a84 <HAL_I2C_MspInit+0xac>)
 8000a6c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000a6e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000a72:	60bb      	str	r3, [r7, #8]
 8000a74:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8000a76:	bf00      	nop
 8000a78:	3780      	adds	r7, #128	@ 0x80
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	bd80      	pop	{r7, pc}
 8000a7e:	bf00      	nop
 8000a80:	40005800 	.word	0x40005800
 8000a84:	40021000 	.word	0x40021000
 8000a88:	48000400 	.word	0x48000400

08000a8c <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b0a2      	sub	sp, #136	@ 0x88
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a94:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8000a98:	2200      	movs	r2, #0
 8000a9a:	601a      	str	r2, [r3, #0]
 8000a9c:	605a      	str	r2, [r3, #4]
 8000a9e:	609a      	str	r2, [r3, #8]
 8000aa0:	60da      	str	r2, [r3, #12]
 8000aa2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000aa4:	f107 0318 	add.w	r3, r7, #24
 8000aa8:	225c      	movs	r2, #92	@ 0x5c
 8000aaa:	2100      	movs	r1, #0
 8000aac:	4618      	mov	r0, r3
 8000aae:	f009 fd3f 	bl	800a530 <memset>
  if(hsd->Instance==SDMMC1)
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	681b      	ldr	r3, [r3, #0]
 8000ab6:	4a57      	ldr	r2, [pc, #348]	@ (8000c14 <HAL_SD_MspInit+0x188>)
 8000ab8:	4293      	cmp	r3, r2
 8000aba:	f040 80a6 	bne.w	8000c0a <HAL_SD_MspInit+0x17e>

  /* USER CODE END SDMMC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SDMMC1;
 8000abe:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8000ac2:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_PLL;
 8000ac4:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000ac8:	663b      	str	r3, [r7, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000aca:	f107 0318 	add.w	r3, r7, #24
 8000ace:	4618      	mov	r0, r3
 8000ad0:	f002 f858 	bl	8002b84 <HAL_RCCEx_PeriphCLKConfig>
 8000ad4:	4603      	mov	r3, r0
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d001      	beq.n	8000ade <HAL_SD_MspInit+0x52>
    {
      Error_Handler();
 8000ada:	f7ff ff4b 	bl	8000974 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8000ade:	4b4e      	ldr	r3, [pc, #312]	@ (8000c18 <HAL_SD_MspInit+0x18c>)
 8000ae0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000ae2:	4a4d      	ldr	r2, [pc, #308]	@ (8000c18 <HAL_SD_MspInit+0x18c>)
 8000ae4:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000ae8:	6613      	str	r3, [r2, #96]	@ 0x60
 8000aea:	4b4b      	ldr	r3, [pc, #300]	@ (8000c18 <HAL_SD_MspInit+0x18c>)
 8000aec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000aee:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000af2:	617b      	str	r3, [r7, #20]
 8000af4:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000af6:	4b48      	ldr	r3, [pc, #288]	@ (8000c18 <HAL_SD_MspInit+0x18c>)
 8000af8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000afa:	4a47      	ldr	r2, [pc, #284]	@ (8000c18 <HAL_SD_MspInit+0x18c>)
 8000afc:	f043 0304 	orr.w	r3, r3, #4
 8000b00:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b02:	4b45      	ldr	r3, [pc, #276]	@ (8000c18 <HAL_SD_MspInit+0x18c>)
 8000b04:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b06:	f003 0304 	and.w	r3, r3, #4
 8000b0a:	613b      	str	r3, [r7, #16]
 8000b0c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b0e:	4b42      	ldr	r3, [pc, #264]	@ (8000c18 <HAL_SD_MspInit+0x18c>)
 8000b10:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b12:	4a41      	ldr	r2, [pc, #260]	@ (8000c18 <HAL_SD_MspInit+0x18c>)
 8000b14:	f043 0308 	orr.w	r3, r3, #8
 8000b18:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b1a:	4b3f      	ldr	r3, [pc, #252]	@ (8000c18 <HAL_SD_MspInit+0x18c>)
 8000b1c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b1e:	f003 0308 	and.w	r3, r3, #8
 8000b22:	60fb      	str	r3, [r7, #12]
 8000b24:	68fb      	ldr	r3, [r7, #12]
    /**SDMMC1 GPIO Configuration
    PC8     ------> SDMMC1_D0
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000b26:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000b2a:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b2c:	2302      	movs	r3, #2
 8000b2e:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b30:	2301      	movs	r3, #1
 8000b32:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b34:	2303      	movs	r3, #3
 8000b36:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8000b3a:	230c      	movs	r3, #12
 8000b3c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b40:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8000b44:	4619      	mov	r1, r3
 8000b46:	4835      	ldr	r0, [pc, #212]	@ (8000c1c <HAL_SD_MspInit+0x190>)
 8000b48:	f000 fea4 	bl	8001894 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000b4c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000b50:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b52:	2302      	movs	r3, #2
 8000b54:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b56:	2300      	movs	r3, #0
 8000b58:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b5a:	2303      	movs	r3, #3
 8000b5c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8000b60:	230c      	movs	r3, #12
 8000b62:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b66:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8000b6a:	4619      	mov	r1, r3
 8000b6c:	482b      	ldr	r0, [pc, #172]	@ (8000c1c <HAL_SD_MspInit+0x190>)
 8000b6e:	f000 fe91 	bl	8001894 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000b72:	2304      	movs	r3, #4
 8000b74:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b76:	2302      	movs	r3, #2
 8000b78:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b7a:	2301      	movs	r3, #1
 8000b7c:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b7e:	2303      	movs	r3, #3
 8000b80:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8000b84:	230c      	movs	r3, #12
 8000b86:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b8a:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8000b8e:	4619      	mov	r1, r3
 8000b90:	4823      	ldr	r0, [pc, #140]	@ (8000c20 <HAL_SD_MspInit+0x194>)
 8000b92:	f000 fe7f 	bl	8001894 <HAL_GPIO_Init>

    /* SDMMC1 DMA Init */
    /* SDMMC1 Init */
    hdma_sdmmc1.Instance = DMA2_Channel4;
 8000b96:	4b23      	ldr	r3, [pc, #140]	@ (8000c24 <HAL_SD_MspInit+0x198>)
 8000b98:	4a23      	ldr	r2, [pc, #140]	@ (8000c28 <HAL_SD_MspInit+0x19c>)
 8000b9a:	601a      	str	r2, [r3, #0]
    hdma_sdmmc1.Init.Request = DMA_REQUEST_7;
 8000b9c:	4b21      	ldr	r3, [pc, #132]	@ (8000c24 <HAL_SD_MspInit+0x198>)
 8000b9e:	2207      	movs	r2, #7
 8000ba0:	605a      	str	r2, [r3, #4]
    hdma_sdmmc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000ba2:	4b20      	ldr	r3, [pc, #128]	@ (8000c24 <HAL_SD_MspInit+0x198>)
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	609a      	str	r2, [r3, #8]
    hdma_sdmmc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000ba8:	4b1e      	ldr	r3, [pc, #120]	@ (8000c24 <HAL_SD_MspInit+0x198>)
 8000baa:	2200      	movs	r2, #0
 8000bac:	60da      	str	r2, [r3, #12]
    hdma_sdmmc1.Init.MemInc = DMA_MINC_ENABLE;
 8000bae:	4b1d      	ldr	r3, [pc, #116]	@ (8000c24 <HAL_SD_MspInit+0x198>)
 8000bb0:	2280      	movs	r2, #128	@ 0x80
 8000bb2:	611a      	str	r2, [r3, #16]
    hdma_sdmmc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000bb4:	4b1b      	ldr	r3, [pc, #108]	@ (8000c24 <HAL_SD_MspInit+0x198>)
 8000bb6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000bba:	615a      	str	r2, [r3, #20]
    hdma_sdmmc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000bbc:	4b19      	ldr	r3, [pc, #100]	@ (8000c24 <HAL_SD_MspInit+0x198>)
 8000bbe:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000bc2:	619a      	str	r2, [r3, #24]
    hdma_sdmmc1.Init.Mode = DMA_NORMAL;
 8000bc4:	4b17      	ldr	r3, [pc, #92]	@ (8000c24 <HAL_SD_MspInit+0x198>)
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	61da      	str	r2, [r3, #28]
    hdma_sdmmc1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8000bca:	4b16      	ldr	r3, [pc, #88]	@ (8000c24 <HAL_SD_MspInit+0x198>)
 8000bcc:	f44f 5240 	mov.w	r2, #12288	@ 0x3000
 8000bd0:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_sdmmc1) != HAL_OK)
 8000bd2:	4814      	ldr	r0, [pc, #80]	@ (8000c24 <HAL_SD_MspInit+0x198>)
 8000bd4:	f000 fbe8 	bl	80013a8 <HAL_DMA_Init>
 8000bd8:	4603      	mov	r3, r0
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d001      	beq.n	8000be2 <HAL_SD_MspInit+0x156>
    {
      Error_Handler();
 8000bde:	f7ff fec9 	bl	8000974 <Error_Handler>

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    /* Be sure to change transfer direction before calling
     HAL_SD_ReadBlocks_DMA or HAL_SD_WriteBlocks_DMA. */
    __HAL_LINKDMA(hsd,hdmarx,hdma_sdmmc1);
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	4a0f      	ldr	r2, [pc, #60]	@ (8000c24 <HAL_SD_MspInit+0x198>)
 8000be6:	641a      	str	r2, [r3, #64]	@ 0x40
 8000be8:	4a0e      	ldr	r2, [pc, #56]	@ (8000c24 <HAL_SD_MspInit+0x198>)
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	6293      	str	r3, [r2, #40]	@ 0x28
    __HAL_LINKDMA(hsd,hdmatx,hdma_sdmmc1);
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	4a0c      	ldr	r2, [pc, #48]	@ (8000c24 <HAL_SD_MspInit+0x198>)
 8000bf2:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000bf4:	4a0b      	ldr	r2, [pc, #44]	@ (8000c24 <HAL_SD_MspInit+0x198>)
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	6293      	str	r3, [r2, #40]	@ 0x28

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 0, 0);
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	2100      	movs	r1, #0
 8000bfe:	2031      	movs	r0, #49	@ 0x31
 8000c00:	f000 fb9b 	bl	800133a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 8000c04:	2031      	movs	r0, #49	@ 0x31
 8000c06:	f000 fbb4 	bl	8001372 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 8000c0a:	bf00      	nop
 8000c0c:	3788      	adds	r7, #136	@ 0x88
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	bd80      	pop	{r7, pc}
 8000c12:	bf00      	nop
 8000c14:	40012800 	.word	0x40012800
 8000c18:	40021000 	.word	0x40021000
 8000c1c:	48000800 	.word	0x48000800
 8000c20:	48000c00 	.word	0x48000c00
 8000c24:	20000228 	.word	0x20000228
 8000c28:	40020444 	.word	0x40020444

08000c2c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	b085      	sub	sp, #20
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	4a0a      	ldr	r2, [pc, #40]	@ (8000c64 <HAL_TIM_Base_MspInit+0x38>)
 8000c3a:	4293      	cmp	r3, r2
 8000c3c:	d10b      	bne.n	8000c56 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000c3e:	4b0a      	ldr	r3, [pc, #40]	@ (8000c68 <HAL_TIM_Base_MspInit+0x3c>)
 8000c40:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000c42:	4a09      	ldr	r2, [pc, #36]	@ (8000c68 <HAL_TIM_Base_MspInit+0x3c>)
 8000c44:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000c48:	6613      	str	r3, [r2, #96]	@ 0x60
 8000c4a:	4b07      	ldr	r3, [pc, #28]	@ (8000c68 <HAL_TIM_Base_MspInit+0x3c>)
 8000c4c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000c4e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000c52:	60fb      	str	r3, [r7, #12]
 8000c54:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000c56:	bf00      	nop
 8000c58:	3714      	adds	r7, #20
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c60:	4770      	bx	lr
 8000c62:	bf00      	nop
 8000c64:	40012c00 	.word	0x40012c00
 8000c68:	40021000 	.word	0x40021000

08000c6c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b088      	sub	sp, #32
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c74:	f107 030c 	add.w	r3, r7, #12
 8000c78:	2200      	movs	r2, #0
 8000c7a:	601a      	str	r2, [r3, #0]
 8000c7c:	605a      	str	r2, [r3, #4]
 8000c7e:	609a      	str	r2, [r3, #8]
 8000c80:	60da      	str	r2, [r3, #12]
 8000c82:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	4a11      	ldr	r2, [pc, #68]	@ (8000cd0 <HAL_TIM_MspPostInit+0x64>)
 8000c8a:	4293      	cmp	r3, r2
 8000c8c:	d11b      	bne.n	8000cc6 <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c8e:	4b11      	ldr	r3, [pc, #68]	@ (8000cd4 <HAL_TIM_MspPostInit+0x68>)
 8000c90:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c92:	4a10      	ldr	r2, [pc, #64]	@ (8000cd4 <HAL_TIM_MspPostInit+0x68>)
 8000c94:	f043 0302 	orr.w	r3, r3, #2
 8000c98:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000c9a:	4b0e      	ldr	r3, [pc, #56]	@ (8000cd4 <HAL_TIM_MspPostInit+0x68>)
 8000c9c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c9e:	f003 0302 	and.w	r3, r3, #2
 8000ca2:	60bb      	str	r3, [r7, #8]
 8000ca4:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PB0     ------> TIM1_CH2N
    */
    GPIO_InitStruct.Pin = NEO_Pin;
 8000ca6:	2301      	movs	r3, #1
 8000ca8:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000caa:	2302      	movs	r3, #2
 8000cac:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cae:	2300      	movs	r3, #0
 8000cb0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000cb6:	2301      	movs	r3, #1
 8000cb8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(NEO_GPIO_Port, &GPIO_InitStruct);
 8000cba:	f107 030c 	add.w	r3, r7, #12
 8000cbe:	4619      	mov	r1, r3
 8000cc0:	4805      	ldr	r0, [pc, #20]	@ (8000cd8 <HAL_TIM_MspPostInit+0x6c>)
 8000cc2:	f000 fde7 	bl	8001894 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000cc6:	bf00      	nop
 8000cc8:	3720      	adds	r7, #32
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	bd80      	pop	{r7, pc}
 8000cce:	bf00      	nop
 8000cd0:	40012c00 	.word	0x40012c00
 8000cd4:	40021000 	.word	0x40021000
 8000cd8:	48000400 	.word	0x48000400

08000cdc <HAL_SAI_MspInit>:
extern DMA_HandleTypeDef hdma_sai1_a;

static uint32_t SAI1_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b0a0      	sub	sp, #128	@ 0x80
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ce4:	f107 0310 	add.w	r3, r7, #16
 8000ce8:	225c      	movs	r2, #92	@ 0x5c
 8000cea:	2100      	movs	r1, #0
 8000cec:	4618      	mov	r0, r3
 8000cee:	f009 fc1f 	bl	800a530 <memset>
/* SAI1 */
    if(hsai->Instance==SAI1_Block_A)
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	4a47      	ldr	r2, [pc, #284]	@ (8000e14 <HAL_SAI_MspInit+0x138>)
 8000cf8:	4293      	cmp	r3, r2
 8000cfa:	f040 8086 	bne.w	8000e0a <HAL_SAI_MspInit+0x12e>
    {
    /* Peripheral clock enable */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SAI1;
 8000cfe:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000d02:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLLSAI1;
 8000d04:	2300      	movs	r3, #0
 8000d06:	657b      	str	r3, [r7, #84]	@ 0x54
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSE;
 8000d08:	2303      	movs	r3, #3
 8000d0a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000d0c:	2301      	movs	r3, #1
 8000d0e:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 37;
 8000d10:	2325      	movs	r3, #37	@ 0x25
 8000d12:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV6;
 8000d14:	2306      	movs	r3, #6
 8000d16:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV8;
 8000d18:	2308      	movs	r3, #8
 8000d1a:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000d1c:	2302      	movs	r3, #2
 8000d1e:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_SAI1CLK;
 8000d20:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000d24:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d26:	f107 0310 	add.w	r3, r7, #16
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	f001 ff2a 	bl	8002b84 <HAL_RCCEx_PeriphCLKConfig>
 8000d30:	4603      	mov	r3, r0
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d001      	beq.n	8000d3a <HAL_SAI_MspInit+0x5e>
    {
      Error_Handler();
 8000d36:	f7ff fe1d 	bl	8000974 <Error_Handler>
    }

    if (SAI1_client == 0)
 8000d3a:	4b37      	ldr	r3, [pc, #220]	@ (8000e18 <HAL_SAI_MspInit+0x13c>)
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d10b      	bne.n	8000d5a <HAL_SAI_MspInit+0x7e>
    {
       __HAL_RCC_SAI1_CLK_ENABLE();
 8000d42:	4b36      	ldr	r3, [pc, #216]	@ (8000e1c <HAL_SAI_MspInit+0x140>)
 8000d44:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000d46:	4a35      	ldr	r2, [pc, #212]	@ (8000e1c <HAL_SAI_MspInit+0x140>)
 8000d48:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000d4c:	6613      	str	r3, [r2, #96]	@ 0x60
 8000d4e:	4b33      	ldr	r3, [pc, #204]	@ (8000e1c <HAL_SAI_MspInit+0x140>)
 8000d50:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000d52:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000d56:	60fb      	str	r3, [r7, #12]
 8000d58:	68fb      	ldr	r3, [r7, #12]
    }
    SAI1_client ++;
 8000d5a:	4b2f      	ldr	r3, [pc, #188]	@ (8000e18 <HAL_SAI_MspInit+0x13c>)
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	3301      	adds	r3, #1
 8000d60:	4a2d      	ldr	r2, [pc, #180]	@ (8000e18 <HAL_SAI_MspInit+0x13c>)
 8000d62:	6013      	str	r3, [r2, #0]
    /**SAI1_A_Block_A GPIO Configuration
    PC3     ------> SAI1_SD_A
    PB10     ------> SAI1_SCK_A
    PB12     ------> SAI1_FS_A
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000d64:	2308      	movs	r3, #8
 8000d66:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d68:	2302      	movs	r3, #2
 8000d6a:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d70:	2300      	movs	r3, #0
 8000d72:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8000d74:	230d      	movs	r3, #13
 8000d76:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d78:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8000d7c:	4619      	mov	r1, r3
 8000d7e:	4828      	ldr	r0, [pc, #160]	@ (8000e20 <HAL_SAI_MspInit+0x144>)
 8000d80:	f000 fd88 	bl	8001894 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 8000d84:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000d88:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d8a:	2302      	movs	r3, #2
 8000d8c:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d92:	2300      	movs	r3, #0
 8000d94:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8000d96:	230d      	movs	r3, #13
 8000d98:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d9a:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8000d9e:	4619      	mov	r1, r3
 8000da0:	4820      	ldr	r0, [pc, #128]	@ (8000e24 <HAL_SAI_MspInit+0x148>)
 8000da2:	f000 fd77 	bl	8001894 <HAL_GPIO_Init>

      /* Peripheral DMA init*/

    hdma_sai1_a.Instance = DMA2_Channel1;
 8000da6:	4b20      	ldr	r3, [pc, #128]	@ (8000e28 <HAL_SAI_MspInit+0x14c>)
 8000da8:	4a20      	ldr	r2, [pc, #128]	@ (8000e2c <HAL_SAI_MspInit+0x150>)
 8000daa:	601a      	str	r2, [r3, #0]
    hdma_sai1_a.Init.Request = DMA_REQUEST_1;
 8000dac:	4b1e      	ldr	r3, [pc, #120]	@ (8000e28 <HAL_SAI_MspInit+0x14c>)
 8000dae:	2201      	movs	r2, #1
 8000db0:	605a      	str	r2, [r3, #4]
    hdma_sai1_a.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000db2:	4b1d      	ldr	r3, [pc, #116]	@ (8000e28 <HAL_SAI_MspInit+0x14c>)
 8000db4:	2210      	movs	r2, #16
 8000db6:	609a      	str	r2, [r3, #8]
    hdma_sai1_a.Init.PeriphInc = DMA_PINC_DISABLE;
 8000db8:	4b1b      	ldr	r3, [pc, #108]	@ (8000e28 <HAL_SAI_MspInit+0x14c>)
 8000dba:	2200      	movs	r2, #0
 8000dbc:	60da      	str	r2, [r3, #12]
    hdma_sai1_a.Init.MemInc = DMA_MINC_ENABLE;
 8000dbe:	4b1a      	ldr	r3, [pc, #104]	@ (8000e28 <HAL_SAI_MspInit+0x14c>)
 8000dc0:	2280      	movs	r2, #128	@ 0x80
 8000dc2:	611a      	str	r2, [r3, #16]
    hdma_sai1_a.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000dc4:	4b18      	ldr	r3, [pc, #96]	@ (8000e28 <HAL_SAI_MspInit+0x14c>)
 8000dc6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000dca:	615a      	str	r2, [r3, #20]
    hdma_sai1_a.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000dcc:	4b16      	ldr	r3, [pc, #88]	@ (8000e28 <HAL_SAI_MspInit+0x14c>)
 8000dce:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000dd2:	619a      	str	r2, [r3, #24]
    hdma_sai1_a.Init.Mode = DMA_CIRCULAR;
 8000dd4:	4b14      	ldr	r3, [pc, #80]	@ (8000e28 <HAL_SAI_MspInit+0x14c>)
 8000dd6:	2220      	movs	r2, #32
 8000dd8:	61da      	str	r2, [r3, #28]
    hdma_sai1_a.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8000dda:	4b13      	ldr	r3, [pc, #76]	@ (8000e28 <HAL_SAI_MspInit+0x14c>)
 8000ddc:	f44f 5240 	mov.w	r2, #12288	@ 0x3000
 8000de0:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_sai1_a) != HAL_OK)
 8000de2:	4811      	ldr	r0, [pc, #68]	@ (8000e28 <HAL_SAI_MspInit+0x14c>)
 8000de4:	f000 fae0 	bl	80013a8 <HAL_DMA_Init>
 8000de8:	4603      	mov	r3, r0
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d001      	beq.n	8000df2 <HAL_SAI_MspInit+0x116>
    {
      Error_Handler();
 8000dee:	f7ff fdc1 	bl	8000974 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(hsai,hdmarx,hdma_sai1_a);
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	4a0c      	ldr	r2, [pc, #48]	@ (8000e28 <HAL_SAI_MspInit+0x14c>)
 8000df6:	671a      	str	r2, [r3, #112]	@ 0x70
 8000df8:	4a0b      	ldr	r2, [pc, #44]	@ (8000e28 <HAL_SAI_MspInit+0x14c>)
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	6293      	str	r3, [r2, #40]	@ 0x28

    __HAL_LINKDMA(hsai,hdmatx,hdma_sai1_a);
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	4a09      	ldr	r2, [pc, #36]	@ (8000e28 <HAL_SAI_MspInit+0x14c>)
 8000e02:	66da      	str	r2, [r3, #108]	@ 0x6c
 8000e04:	4a08      	ldr	r2, [pc, #32]	@ (8000e28 <HAL_SAI_MspInit+0x14c>)
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	6293      	str	r3, [r2, #40]	@ 0x28

    }
}
 8000e0a:	bf00      	nop
 8000e0c:	3780      	adds	r7, #128	@ 0x80
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	bd80      	pop	{r7, pc}
 8000e12:	bf00      	nop
 8000e14:	40015404 	.word	0x40015404
 8000e18:	20000f50 	.word	0x20000f50
 8000e1c:	40021000 	.word	0x40021000
 8000e20:	48000800 	.word	0x48000800
 8000e24:	48000400 	.word	0x48000400
 8000e28:	2000015c 	.word	0x2000015c
 8000e2c:	40020408 	.word	0x40020408

08000e30 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e30:	b480      	push	{r7}
 8000e32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e34:	bf00      	nop
 8000e36:	e7fd      	b.n	8000e34 <NMI_Handler+0x4>

08000e38 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e3c:	bf00      	nop
 8000e3e:	e7fd      	b.n	8000e3c <HardFault_Handler+0x4>

08000e40 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e40:	b480      	push	{r7}
 8000e42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e44:	bf00      	nop
 8000e46:	e7fd      	b.n	8000e44 <MemManage_Handler+0x4>

08000e48 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e48:	b480      	push	{r7}
 8000e4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e4c:	bf00      	nop
 8000e4e:	e7fd      	b.n	8000e4c <BusFault_Handler+0x4>

08000e50 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e50:	b480      	push	{r7}
 8000e52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e54:	bf00      	nop
 8000e56:	e7fd      	b.n	8000e54 <UsageFault_Handler+0x4>

08000e58 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e5c:	bf00      	nop
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e64:	4770      	bx	lr

08000e66 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e66:	b480      	push	{r7}
 8000e68:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e6a:	bf00      	nop
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e72:	4770      	bx	lr

08000e74 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e74:	b480      	push	{r7}
 8000e76:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e78:	bf00      	nop
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e80:	4770      	bx	lr

08000e82 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e82:	b580      	push	{r7, lr}
 8000e84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e86:	f000 f939 	bl	80010fc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e8a:	bf00      	nop
 8000e8c:	bd80      	pop	{r7, pc}
	...

08000e90 <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 8000e94:	4802      	ldr	r0, [pc, #8]	@ (8000ea0 <SDMMC1_IRQHandler+0x10>)
 8000e96:	f003 fda9 	bl	80049ec <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 8000e9a:	bf00      	nop
 8000e9c:	bd80      	pop	{r7, pc}
 8000e9e:	bf00      	nop
 8000ea0:	200001a4 	.word	0x200001a4

08000ea4 <DMA2_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA2 channel1 global interrupt.
  */
void DMA2_Channel1_IRQHandler(void)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel1_IRQn 0 */

  /* USER CODE END DMA2_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai1_a);
 8000ea8:	4802      	ldr	r0, [pc, #8]	@ (8000eb4 <DMA2_Channel1_IRQHandler+0x10>)
 8000eaa:	f000 fc14 	bl	80016d6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel1_IRQn 1 */

  /* USER CODE END DMA2_Channel1_IRQn 1 */
}
 8000eae:	bf00      	nop
 8000eb0:	bd80      	pop	{r7, pc}
 8000eb2:	bf00      	nop
 8000eb4:	2000015c 	.word	0x2000015c

08000eb8 <DMA2_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA2 channel4 global interrupt.
  */
void DMA2_Channel4_IRQHandler(void)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel4_IRQn 0 */

  /* USER CODE END DMA2_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdmmc1);
 8000ebc:	4802      	ldr	r0, [pc, #8]	@ (8000ec8 <DMA2_Channel4_IRQHandler+0x10>)
 8000ebe:	f000 fc0a 	bl	80016d6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel4_IRQn 1 */

  /* USER CODE END DMA2_Channel4_IRQn 1 */
}
 8000ec2:	bf00      	nop
 8000ec4:	bd80      	pop	{r7, pc}
 8000ec6:	bf00      	nop
 8000ec8:	20000228 	.word	0x20000228

08000ecc <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b086      	sub	sp, #24
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	60f8      	str	r0, [r7, #12]
 8000ed4:	60b9      	str	r1, [r7, #8]
 8000ed6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ed8:	2300      	movs	r3, #0
 8000eda:	617b      	str	r3, [r7, #20]
 8000edc:	e00a      	b.n	8000ef4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000ede:	f3af 8000 	nop.w
 8000ee2:	4601      	mov	r1, r0
 8000ee4:	68bb      	ldr	r3, [r7, #8]
 8000ee6:	1c5a      	adds	r2, r3, #1
 8000ee8:	60ba      	str	r2, [r7, #8]
 8000eea:	b2ca      	uxtb	r2, r1
 8000eec:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000eee:	697b      	ldr	r3, [r7, #20]
 8000ef0:	3301      	adds	r3, #1
 8000ef2:	617b      	str	r3, [r7, #20]
 8000ef4:	697a      	ldr	r2, [r7, #20]
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	429a      	cmp	r2, r3
 8000efa:	dbf0      	blt.n	8000ede <_read+0x12>
  }

  return len;
 8000efc:	687b      	ldr	r3, [r7, #4]
}
 8000efe:	4618      	mov	r0, r3
 8000f00:	3718      	adds	r7, #24
 8000f02:	46bd      	mov	sp, r7
 8000f04:	bd80      	pop	{r7, pc}

08000f06 <_close>:
  }
  return len;
}

int _close(int file)
{
 8000f06:	b480      	push	{r7}
 8000f08:	b083      	sub	sp, #12
 8000f0a:	af00      	add	r7, sp, #0
 8000f0c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000f0e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000f12:	4618      	mov	r0, r3
 8000f14:	370c      	adds	r7, #12
 8000f16:	46bd      	mov	sp, r7
 8000f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1c:	4770      	bx	lr

08000f1e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000f1e:	b480      	push	{r7}
 8000f20:	b083      	sub	sp, #12
 8000f22:	af00      	add	r7, sp, #0
 8000f24:	6078      	str	r0, [r7, #4]
 8000f26:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000f28:	683b      	ldr	r3, [r7, #0]
 8000f2a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000f2e:	605a      	str	r2, [r3, #4]
  return 0;
 8000f30:	2300      	movs	r3, #0
}
 8000f32:	4618      	mov	r0, r3
 8000f34:	370c      	adds	r7, #12
 8000f36:	46bd      	mov	sp, r7
 8000f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3c:	4770      	bx	lr

08000f3e <_isatty>:

int _isatty(int file)
{
 8000f3e:	b480      	push	{r7}
 8000f40:	b083      	sub	sp, #12
 8000f42:	af00      	add	r7, sp, #0
 8000f44:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000f46:	2301      	movs	r3, #1
}
 8000f48:	4618      	mov	r0, r3
 8000f4a:	370c      	adds	r7, #12
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f52:	4770      	bx	lr

08000f54 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000f54:	b480      	push	{r7}
 8000f56:	b085      	sub	sp, #20
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	60f8      	str	r0, [r7, #12]
 8000f5c:	60b9      	str	r1, [r7, #8]
 8000f5e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000f60:	2300      	movs	r3, #0
}
 8000f62:	4618      	mov	r0, r3
 8000f64:	3714      	adds	r7, #20
 8000f66:	46bd      	mov	sp, r7
 8000f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6c:	4770      	bx	lr
	...

08000f70 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b086      	sub	sp, #24
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f78:	4a14      	ldr	r2, [pc, #80]	@ (8000fcc <_sbrk+0x5c>)
 8000f7a:	4b15      	ldr	r3, [pc, #84]	@ (8000fd0 <_sbrk+0x60>)
 8000f7c:	1ad3      	subs	r3, r2, r3
 8000f7e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f80:	697b      	ldr	r3, [r7, #20]
 8000f82:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f84:	4b13      	ldr	r3, [pc, #76]	@ (8000fd4 <_sbrk+0x64>)
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d102      	bne.n	8000f92 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f8c:	4b11      	ldr	r3, [pc, #68]	@ (8000fd4 <_sbrk+0x64>)
 8000f8e:	4a12      	ldr	r2, [pc, #72]	@ (8000fd8 <_sbrk+0x68>)
 8000f90:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f92:	4b10      	ldr	r3, [pc, #64]	@ (8000fd4 <_sbrk+0x64>)
 8000f94:	681a      	ldr	r2, [r3, #0]
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	4413      	add	r3, r2
 8000f9a:	693a      	ldr	r2, [r7, #16]
 8000f9c:	429a      	cmp	r2, r3
 8000f9e:	d207      	bcs.n	8000fb0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000fa0:	f009 fb14 	bl	800a5cc <__errno>
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	220c      	movs	r2, #12
 8000fa8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000faa:	f04f 33ff 	mov.w	r3, #4294967295
 8000fae:	e009      	b.n	8000fc4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000fb0:	4b08      	ldr	r3, [pc, #32]	@ (8000fd4 <_sbrk+0x64>)
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000fb6:	4b07      	ldr	r3, [pc, #28]	@ (8000fd4 <_sbrk+0x64>)
 8000fb8:	681a      	ldr	r2, [r3, #0]
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	4413      	add	r3, r2
 8000fbe:	4a05      	ldr	r2, [pc, #20]	@ (8000fd4 <_sbrk+0x64>)
 8000fc0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000fc2:	68fb      	ldr	r3, [r7, #12]
}
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	3718      	adds	r7, #24
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	bd80      	pop	{r7, pc}
 8000fcc:	20010000 	.word	0x20010000
 8000fd0:	00000400 	.word	0x00000400
 8000fd4:	20000f54 	.word	0x20000f54
 8000fd8:	20001100 	.word	0x20001100

08000fdc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000fe0:	4b06      	ldr	r3, [pc, #24]	@ (8000ffc <SystemInit+0x20>)
 8000fe2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000fe6:	4a05      	ldr	r2, [pc, #20]	@ (8000ffc <SystemInit+0x20>)
 8000fe8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000fec:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000ff0:	bf00      	nop
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff8:	4770      	bx	lr
 8000ffa:	bf00      	nop
 8000ffc:	e000ed00 	.word	0xe000ed00

08001000 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001000:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001038 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001004:	f7ff ffea 	bl	8000fdc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001008:	480c      	ldr	r0, [pc, #48]	@ (800103c <LoopForever+0x6>)
  ldr r1, =_edata
 800100a:	490d      	ldr	r1, [pc, #52]	@ (8001040 <LoopForever+0xa>)
  ldr r2, =_sidata
 800100c:	4a0d      	ldr	r2, [pc, #52]	@ (8001044 <LoopForever+0xe>)
  movs r3, #0
 800100e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001010:	e002      	b.n	8001018 <LoopCopyDataInit>

08001012 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001012:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001014:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001016:	3304      	adds	r3, #4

08001018 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001018:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800101a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800101c:	d3f9      	bcc.n	8001012 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800101e:	4a0a      	ldr	r2, [pc, #40]	@ (8001048 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001020:	4c0a      	ldr	r4, [pc, #40]	@ (800104c <LoopForever+0x16>)
  movs r3, #0
 8001022:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001024:	e001      	b.n	800102a <LoopFillZerobss>

08001026 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001026:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001028:	3204      	adds	r2, #4

0800102a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800102a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800102c:	d3fb      	bcc.n	8001026 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800102e:	f009 fad3 	bl	800a5d8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001032:	f7ff f911 	bl	8000258 <main>

08001036 <LoopForever>:

LoopForever:
    b LoopForever
 8001036:	e7fe      	b.n	8001036 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001038:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 800103c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001040:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8001044:	0800b000 	.word	0x0800b000
  ldr r2, =_sbss
 8001048:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 800104c:	200010fc 	.word	0x200010fc

08001050 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001050:	e7fe      	b.n	8001050 <ADC1_IRQHandler>

08001052 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001052:	b580      	push	{r7, lr}
 8001054:	b082      	sub	sp, #8
 8001056:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001058:	2300      	movs	r3, #0
 800105a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800105c:	2003      	movs	r0, #3
 800105e:	f000 f961 	bl	8001324 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001062:	200f      	movs	r0, #15
 8001064:	f000 f80e 	bl	8001084 <HAL_InitTick>
 8001068:	4603      	mov	r3, r0
 800106a:	2b00      	cmp	r3, #0
 800106c:	d002      	beq.n	8001074 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800106e:	2301      	movs	r3, #1
 8001070:	71fb      	strb	r3, [r7, #7]
 8001072:	e001      	b.n	8001078 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001074:	f7ff fc8c 	bl	8000990 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001078:	79fb      	ldrb	r3, [r7, #7]
}
 800107a:	4618      	mov	r0, r3
 800107c:	3708      	adds	r7, #8
 800107e:	46bd      	mov	sp, r7
 8001080:	bd80      	pop	{r7, pc}
	...

08001084 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b084      	sub	sp, #16
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800108c:	2300      	movs	r3, #0
 800108e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001090:	4b17      	ldr	r3, [pc, #92]	@ (80010f0 <HAL_InitTick+0x6c>)
 8001092:	781b      	ldrb	r3, [r3, #0]
 8001094:	2b00      	cmp	r3, #0
 8001096:	d023      	beq.n	80010e0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001098:	4b16      	ldr	r3, [pc, #88]	@ (80010f4 <HAL_InitTick+0x70>)
 800109a:	681a      	ldr	r2, [r3, #0]
 800109c:	4b14      	ldr	r3, [pc, #80]	@ (80010f0 <HAL_InitTick+0x6c>)
 800109e:	781b      	ldrb	r3, [r3, #0]
 80010a0:	4619      	mov	r1, r3
 80010a2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80010a6:	fbb3 f3f1 	udiv	r3, r3, r1
 80010aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80010ae:	4618      	mov	r0, r3
 80010b0:	f000 f96d 	bl	800138e <HAL_SYSTICK_Config>
 80010b4:	4603      	mov	r3, r0
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d10f      	bne.n	80010da <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	2b0f      	cmp	r3, #15
 80010be:	d809      	bhi.n	80010d4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010c0:	2200      	movs	r2, #0
 80010c2:	6879      	ldr	r1, [r7, #4]
 80010c4:	f04f 30ff 	mov.w	r0, #4294967295
 80010c8:	f000 f937 	bl	800133a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80010cc:	4a0a      	ldr	r2, [pc, #40]	@ (80010f8 <HAL_InitTick+0x74>)
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	6013      	str	r3, [r2, #0]
 80010d2:	e007      	b.n	80010e4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80010d4:	2301      	movs	r3, #1
 80010d6:	73fb      	strb	r3, [r7, #15]
 80010d8:	e004      	b.n	80010e4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80010da:	2301      	movs	r3, #1
 80010dc:	73fb      	strb	r3, [r7, #15]
 80010de:	e001      	b.n	80010e4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80010e0:	2301      	movs	r3, #1
 80010e2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80010e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80010e6:	4618      	mov	r0, r3
 80010e8:	3710      	adds	r7, #16
 80010ea:	46bd      	mov	sp, r7
 80010ec:	bd80      	pop	{r7, pc}
 80010ee:	bf00      	nop
 80010f0:	20000008 	.word	0x20000008
 80010f4:	20000000 	.word	0x20000000
 80010f8:	20000004 	.word	0x20000004

080010fc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010fc:	b480      	push	{r7}
 80010fe:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001100:	4b06      	ldr	r3, [pc, #24]	@ (800111c <HAL_IncTick+0x20>)
 8001102:	781b      	ldrb	r3, [r3, #0]
 8001104:	461a      	mov	r2, r3
 8001106:	4b06      	ldr	r3, [pc, #24]	@ (8001120 <HAL_IncTick+0x24>)
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	4413      	add	r3, r2
 800110c:	4a04      	ldr	r2, [pc, #16]	@ (8001120 <HAL_IncTick+0x24>)
 800110e:	6013      	str	r3, [r2, #0]
}
 8001110:	bf00      	nop
 8001112:	46bd      	mov	sp, r7
 8001114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001118:	4770      	bx	lr
 800111a:	bf00      	nop
 800111c:	20000008 	.word	0x20000008
 8001120:	20000f58 	.word	0x20000f58

08001124 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001124:	b480      	push	{r7}
 8001126:	af00      	add	r7, sp, #0
  return uwTick;
 8001128:	4b03      	ldr	r3, [pc, #12]	@ (8001138 <HAL_GetTick+0x14>)
 800112a:	681b      	ldr	r3, [r3, #0]
}
 800112c:	4618      	mov	r0, r3
 800112e:	46bd      	mov	sp, r7
 8001130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001134:	4770      	bx	lr
 8001136:	bf00      	nop
 8001138:	20000f58 	.word	0x20000f58

0800113c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b084      	sub	sp, #16
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001144:	f7ff ffee 	bl	8001124 <HAL_GetTick>
 8001148:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800114e:	68fb      	ldr	r3, [r7, #12]
 8001150:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001154:	d005      	beq.n	8001162 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001156:	4b0a      	ldr	r3, [pc, #40]	@ (8001180 <HAL_Delay+0x44>)
 8001158:	781b      	ldrb	r3, [r3, #0]
 800115a:	461a      	mov	r2, r3
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	4413      	add	r3, r2
 8001160:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001162:	bf00      	nop
 8001164:	f7ff ffde 	bl	8001124 <HAL_GetTick>
 8001168:	4602      	mov	r2, r0
 800116a:	68bb      	ldr	r3, [r7, #8]
 800116c:	1ad3      	subs	r3, r2, r3
 800116e:	68fa      	ldr	r2, [r7, #12]
 8001170:	429a      	cmp	r2, r3
 8001172:	d8f7      	bhi.n	8001164 <HAL_Delay+0x28>
  {
  }
}
 8001174:	bf00      	nop
 8001176:	bf00      	nop
 8001178:	3710      	adds	r7, #16
 800117a:	46bd      	mov	sp, r7
 800117c:	bd80      	pop	{r7, pc}
 800117e:	bf00      	nop
 8001180:	20000008 	.word	0x20000008

08001184 <__NVIC_SetPriorityGrouping>:
{
 8001184:	b480      	push	{r7}
 8001186:	b085      	sub	sp, #20
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	f003 0307 	and.w	r3, r3, #7
 8001192:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001194:	4b0c      	ldr	r3, [pc, #48]	@ (80011c8 <__NVIC_SetPriorityGrouping+0x44>)
 8001196:	68db      	ldr	r3, [r3, #12]
 8001198:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800119a:	68ba      	ldr	r2, [r7, #8]
 800119c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80011a0:	4013      	ands	r3, r2
 80011a2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011a8:	68bb      	ldr	r3, [r7, #8]
 80011aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80011ac:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80011b0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80011b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011b6:	4a04      	ldr	r2, [pc, #16]	@ (80011c8 <__NVIC_SetPriorityGrouping+0x44>)
 80011b8:	68bb      	ldr	r3, [r7, #8]
 80011ba:	60d3      	str	r3, [r2, #12]
}
 80011bc:	bf00      	nop
 80011be:	3714      	adds	r7, #20
 80011c0:	46bd      	mov	sp, r7
 80011c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c6:	4770      	bx	lr
 80011c8:	e000ed00 	.word	0xe000ed00

080011cc <__NVIC_GetPriorityGrouping>:
{
 80011cc:	b480      	push	{r7}
 80011ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011d0:	4b04      	ldr	r3, [pc, #16]	@ (80011e4 <__NVIC_GetPriorityGrouping+0x18>)
 80011d2:	68db      	ldr	r3, [r3, #12]
 80011d4:	0a1b      	lsrs	r3, r3, #8
 80011d6:	f003 0307 	and.w	r3, r3, #7
}
 80011da:	4618      	mov	r0, r3
 80011dc:	46bd      	mov	sp, r7
 80011de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e2:	4770      	bx	lr
 80011e4:	e000ed00 	.word	0xe000ed00

080011e8 <__NVIC_EnableIRQ>:
{
 80011e8:	b480      	push	{r7}
 80011ea:	b083      	sub	sp, #12
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	4603      	mov	r3, r0
 80011f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	db0b      	blt.n	8001212 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011fa:	79fb      	ldrb	r3, [r7, #7]
 80011fc:	f003 021f 	and.w	r2, r3, #31
 8001200:	4907      	ldr	r1, [pc, #28]	@ (8001220 <__NVIC_EnableIRQ+0x38>)
 8001202:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001206:	095b      	lsrs	r3, r3, #5
 8001208:	2001      	movs	r0, #1
 800120a:	fa00 f202 	lsl.w	r2, r0, r2
 800120e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001212:	bf00      	nop
 8001214:	370c      	adds	r7, #12
 8001216:	46bd      	mov	sp, r7
 8001218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121c:	4770      	bx	lr
 800121e:	bf00      	nop
 8001220:	e000e100 	.word	0xe000e100

08001224 <__NVIC_SetPriority>:
{
 8001224:	b480      	push	{r7}
 8001226:	b083      	sub	sp, #12
 8001228:	af00      	add	r7, sp, #0
 800122a:	4603      	mov	r3, r0
 800122c:	6039      	str	r1, [r7, #0]
 800122e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001230:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001234:	2b00      	cmp	r3, #0
 8001236:	db0a      	blt.n	800124e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001238:	683b      	ldr	r3, [r7, #0]
 800123a:	b2da      	uxtb	r2, r3
 800123c:	490c      	ldr	r1, [pc, #48]	@ (8001270 <__NVIC_SetPriority+0x4c>)
 800123e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001242:	0112      	lsls	r2, r2, #4
 8001244:	b2d2      	uxtb	r2, r2
 8001246:	440b      	add	r3, r1
 8001248:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800124c:	e00a      	b.n	8001264 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800124e:	683b      	ldr	r3, [r7, #0]
 8001250:	b2da      	uxtb	r2, r3
 8001252:	4908      	ldr	r1, [pc, #32]	@ (8001274 <__NVIC_SetPriority+0x50>)
 8001254:	79fb      	ldrb	r3, [r7, #7]
 8001256:	f003 030f 	and.w	r3, r3, #15
 800125a:	3b04      	subs	r3, #4
 800125c:	0112      	lsls	r2, r2, #4
 800125e:	b2d2      	uxtb	r2, r2
 8001260:	440b      	add	r3, r1
 8001262:	761a      	strb	r2, [r3, #24]
}
 8001264:	bf00      	nop
 8001266:	370c      	adds	r7, #12
 8001268:	46bd      	mov	sp, r7
 800126a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126e:	4770      	bx	lr
 8001270:	e000e100 	.word	0xe000e100
 8001274:	e000ed00 	.word	0xe000ed00

08001278 <NVIC_EncodePriority>:
{
 8001278:	b480      	push	{r7}
 800127a:	b089      	sub	sp, #36	@ 0x24
 800127c:	af00      	add	r7, sp, #0
 800127e:	60f8      	str	r0, [r7, #12]
 8001280:	60b9      	str	r1, [r7, #8]
 8001282:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	f003 0307 	and.w	r3, r3, #7
 800128a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800128c:	69fb      	ldr	r3, [r7, #28]
 800128e:	f1c3 0307 	rsb	r3, r3, #7
 8001292:	2b04      	cmp	r3, #4
 8001294:	bf28      	it	cs
 8001296:	2304      	movcs	r3, #4
 8001298:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800129a:	69fb      	ldr	r3, [r7, #28]
 800129c:	3304      	adds	r3, #4
 800129e:	2b06      	cmp	r3, #6
 80012a0:	d902      	bls.n	80012a8 <NVIC_EncodePriority+0x30>
 80012a2:	69fb      	ldr	r3, [r7, #28]
 80012a4:	3b03      	subs	r3, #3
 80012a6:	e000      	b.n	80012aa <NVIC_EncodePriority+0x32>
 80012a8:	2300      	movs	r3, #0
 80012aa:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012ac:	f04f 32ff 	mov.w	r2, #4294967295
 80012b0:	69bb      	ldr	r3, [r7, #24]
 80012b2:	fa02 f303 	lsl.w	r3, r2, r3
 80012b6:	43da      	mvns	r2, r3
 80012b8:	68bb      	ldr	r3, [r7, #8]
 80012ba:	401a      	ands	r2, r3
 80012bc:	697b      	ldr	r3, [r7, #20]
 80012be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012c0:	f04f 31ff 	mov.w	r1, #4294967295
 80012c4:	697b      	ldr	r3, [r7, #20]
 80012c6:	fa01 f303 	lsl.w	r3, r1, r3
 80012ca:	43d9      	mvns	r1, r3
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012d0:	4313      	orrs	r3, r2
}
 80012d2:	4618      	mov	r0, r3
 80012d4:	3724      	adds	r7, #36	@ 0x24
 80012d6:	46bd      	mov	sp, r7
 80012d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012dc:	4770      	bx	lr
	...

080012e0 <SysTick_Config>:
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b082      	sub	sp, #8
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	3b01      	subs	r3, #1
 80012ec:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80012f0:	d301      	bcc.n	80012f6 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 80012f2:	2301      	movs	r3, #1
 80012f4:	e00f      	b.n	8001316 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012f6:	4a0a      	ldr	r2, [pc, #40]	@ (8001320 <SysTick_Config+0x40>)
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	3b01      	subs	r3, #1
 80012fc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012fe:	210f      	movs	r1, #15
 8001300:	f04f 30ff 	mov.w	r0, #4294967295
 8001304:	f7ff ff8e 	bl	8001224 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001308:	4b05      	ldr	r3, [pc, #20]	@ (8001320 <SysTick_Config+0x40>)
 800130a:	2200      	movs	r2, #0
 800130c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800130e:	4b04      	ldr	r3, [pc, #16]	@ (8001320 <SysTick_Config+0x40>)
 8001310:	2207      	movs	r2, #7
 8001312:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8001314:	2300      	movs	r3, #0
}
 8001316:	4618      	mov	r0, r3
 8001318:	3708      	adds	r7, #8
 800131a:	46bd      	mov	sp, r7
 800131c:	bd80      	pop	{r7, pc}
 800131e:	bf00      	nop
 8001320:	e000e010 	.word	0xe000e010

08001324 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b082      	sub	sp, #8
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800132c:	6878      	ldr	r0, [r7, #4]
 800132e:	f7ff ff29 	bl	8001184 <__NVIC_SetPriorityGrouping>
}
 8001332:	bf00      	nop
 8001334:	3708      	adds	r7, #8
 8001336:	46bd      	mov	sp, r7
 8001338:	bd80      	pop	{r7, pc}

0800133a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800133a:	b580      	push	{r7, lr}
 800133c:	b086      	sub	sp, #24
 800133e:	af00      	add	r7, sp, #0
 8001340:	4603      	mov	r3, r0
 8001342:	60b9      	str	r1, [r7, #8]
 8001344:	607a      	str	r2, [r7, #4]
 8001346:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001348:	2300      	movs	r3, #0
 800134a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800134c:	f7ff ff3e 	bl	80011cc <__NVIC_GetPriorityGrouping>
 8001350:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001352:	687a      	ldr	r2, [r7, #4]
 8001354:	68b9      	ldr	r1, [r7, #8]
 8001356:	6978      	ldr	r0, [r7, #20]
 8001358:	f7ff ff8e 	bl	8001278 <NVIC_EncodePriority>
 800135c:	4602      	mov	r2, r0
 800135e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001362:	4611      	mov	r1, r2
 8001364:	4618      	mov	r0, r3
 8001366:	f7ff ff5d 	bl	8001224 <__NVIC_SetPriority>
}
 800136a:	bf00      	nop
 800136c:	3718      	adds	r7, #24
 800136e:	46bd      	mov	sp, r7
 8001370:	bd80      	pop	{r7, pc}

08001372 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001372:	b580      	push	{r7, lr}
 8001374:	b082      	sub	sp, #8
 8001376:	af00      	add	r7, sp, #0
 8001378:	4603      	mov	r3, r0
 800137a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800137c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001380:	4618      	mov	r0, r3
 8001382:	f7ff ff31 	bl	80011e8 <__NVIC_EnableIRQ>
}
 8001386:	bf00      	nop
 8001388:	3708      	adds	r7, #8
 800138a:	46bd      	mov	sp, r7
 800138c:	bd80      	pop	{r7, pc}

0800138e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800138e:	b580      	push	{r7, lr}
 8001390:	b082      	sub	sp, #8
 8001392:	af00      	add	r7, sp, #0
 8001394:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001396:	6878      	ldr	r0, [r7, #4]
 8001398:	f7ff ffa2 	bl	80012e0 <SysTick_Config>
 800139c:	4603      	mov	r3, r0
}
 800139e:	4618      	mov	r0, r3
 80013a0:	3708      	adds	r7, #8
 80013a2:	46bd      	mov	sp, r7
 80013a4:	bd80      	pop	{r7, pc}
	...

080013a8 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80013a8:	b480      	push	{r7}
 80013aa:	b085      	sub	sp, #20
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d101      	bne.n	80013ba <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80013b6:	2301      	movs	r3, #1
 80013b8:	e098      	b.n	80014ec <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	461a      	mov	r2, r3
 80013c0:	4b4d      	ldr	r3, [pc, #308]	@ (80014f8 <HAL_DMA_Init+0x150>)
 80013c2:	429a      	cmp	r2, r3
 80013c4:	d80f      	bhi.n	80013e6 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	461a      	mov	r2, r3
 80013cc:	4b4b      	ldr	r3, [pc, #300]	@ (80014fc <HAL_DMA_Init+0x154>)
 80013ce:	4413      	add	r3, r2
 80013d0:	4a4b      	ldr	r2, [pc, #300]	@ (8001500 <HAL_DMA_Init+0x158>)
 80013d2:	fba2 2303 	umull	r2, r3, r2, r3
 80013d6:	091b      	lsrs	r3, r3, #4
 80013d8:	009a      	lsls	r2, r3, #2
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	4a48      	ldr	r2, [pc, #288]	@ (8001504 <HAL_DMA_Init+0x15c>)
 80013e2:	641a      	str	r2, [r3, #64]	@ 0x40
 80013e4:	e00e      	b.n	8001404 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	461a      	mov	r2, r3
 80013ec:	4b46      	ldr	r3, [pc, #280]	@ (8001508 <HAL_DMA_Init+0x160>)
 80013ee:	4413      	add	r3, r2
 80013f0:	4a43      	ldr	r2, [pc, #268]	@ (8001500 <HAL_DMA_Init+0x158>)
 80013f2:	fba2 2303 	umull	r2, r3, r2, r3
 80013f6:	091b      	lsrs	r3, r3, #4
 80013f8:	009a      	lsls	r2, r3, #2
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	4a42      	ldr	r2, [pc, #264]	@ (800150c <HAL_DMA_Init+0x164>)
 8001402:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	2202      	movs	r2, #2
 8001408:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 800141a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800141e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8001428:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	691b      	ldr	r3, [r3, #16]
 800142e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001434:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	699b      	ldr	r3, [r3, #24]
 800143a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001440:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	6a1b      	ldr	r3, [r3, #32]
 8001446:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001448:	68fa      	ldr	r2, [r7, #12]
 800144a:	4313      	orrs	r3, r2
 800144c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	68fa      	ldr	r2, [r7, #12]
 8001454:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	689b      	ldr	r3, [r3, #8]
 800145a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800145e:	d039      	beq.n	80014d4 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001464:	4a27      	ldr	r2, [pc, #156]	@ (8001504 <HAL_DMA_Init+0x15c>)
 8001466:	4293      	cmp	r3, r2
 8001468:	d11a      	bne.n	80014a0 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800146a:	4b29      	ldr	r3, [pc, #164]	@ (8001510 <HAL_DMA_Init+0x168>)
 800146c:	681a      	ldr	r2, [r3, #0]
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001472:	f003 031c 	and.w	r3, r3, #28
 8001476:	210f      	movs	r1, #15
 8001478:	fa01 f303 	lsl.w	r3, r1, r3
 800147c:	43db      	mvns	r3, r3
 800147e:	4924      	ldr	r1, [pc, #144]	@ (8001510 <HAL_DMA_Init+0x168>)
 8001480:	4013      	ands	r3, r2
 8001482:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8001484:	4b22      	ldr	r3, [pc, #136]	@ (8001510 <HAL_DMA_Init+0x168>)
 8001486:	681a      	ldr	r2, [r3, #0]
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	6859      	ldr	r1, [r3, #4]
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001490:	f003 031c 	and.w	r3, r3, #28
 8001494:	fa01 f303 	lsl.w	r3, r1, r3
 8001498:	491d      	ldr	r1, [pc, #116]	@ (8001510 <HAL_DMA_Init+0x168>)
 800149a:	4313      	orrs	r3, r2
 800149c:	600b      	str	r3, [r1, #0]
 800149e:	e019      	b.n	80014d4 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80014a0:	4b1c      	ldr	r3, [pc, #112]	@ (8001514 <HAL_DMA_Init+0x16c>)
 80014a2:	681a      	ldr	r2, [r3, #0]
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014a8:	f003 031c 	and.w	r3, r3, #28
 80014ac:	210f      	movs	r1, #15
 80014ae:	fa01 f303 	lsl.w	r3, r1, r3
 80014b2:	43db      	mvns	r3, r3
 80014b4:	4917      	ldr	r1, [pc, #92]	@ (8001514 <HAL_DMA_Init+0x16c>)
 80014b6:	4013      	ands	r3, r2
 80014b8:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80014ba:	4b16      	ldr	r3, [pc, #88]	@ (8001514 <HAL_DMA_Init+0x16c>)
 80014bc:	681a      	ldr	r2, [r3, #0]
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	6859      	ldr	r1, [r3, #4]
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014c6:	f003 031c 	and.w	r3, r3, #28
 80014ca:	fa01 f303 	lsl.w	r3, r1, r3
 80014ce:	4911      	ldr	r1, [pc, #68]	@ (8001514 <HAL_DMA_Init+0x16c>)
 80014d0:	4313      	orrs	r3, r2
 80014d2:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	2200      	movs	r2, #0
 80014d8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	2201      	movs	r2, #1
 80014de:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	2200      	movs	r2, #0
 80014e6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80014ea:	2300      	movs	r3, #0
}
 80014ec:	4618      	mov	r0, r3
 80014ee:	3714      	adds	r7, #20
 80014f0:	46bd      	mov	sp, r7
 80014f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f6:	4770      	bx	lr
 80014f8:	40020407 	.word	0x40020407
 80014fc:	bffdfff8 	.word	0xbffdfff8
 8001500:	cccccccd 	.word	0xcccccccd
 8001504:	40020000 	.word	0x40020000
 8001508:	bffdfbf8 	.word	0xbffdfbf8
 800150c:	40020400 	.word	0x40020400
 8001510:	400200a8 	.word	0x400200a8
 8001514:	400204a8 	.word	0x400204a8

08001518 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	b086      	sub	sp, #24
 800151c:	af00      	add	r7, sp, #0
 800151e:	60f8      	str	r0, [r7, #12]
 8001520:	60b9      	str	r1, [r7, #8]
 8001522:	607a      	str	r2, [r7, #4]
 8001524:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001526:	2300      	movs	r3, #0
 8001528:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001530:	2b01      	cmp	r3, #1
 8001532:	d101      	bne.n	8001538 <HAL_DMA_Start_IT+0x20>
 8001534:	2302      	movs	r3, #2
 8001536:	e04b      	b.n	80015d0 <HAL_DMA_Start_IT+0xb8>
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	2201      	movs	r2, #1
 800153c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001546:	b2db      	uxtb	r3, r3
 8001548:	2b01      	cmp	r3, #1
 800154a:	d13a      	bne.n	80015c2 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	2202      	movs	r2, #2
 8001550:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	2200      	movs	r2, #0
 8001558:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	681a      	ldr	r2, [r3, #0]
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	f022 0201 	bic.w	r2, r2, #1
 8001568:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800156a:	683b      	ldr	r3, [r7, #0]
 800156c:	687a      	ldr	r2, [r7, #4]
 800156e:	68b9      	ldr	r1, [r7, #8]
 8001570:	68f8      	ldr	r0, [r7, #12]
 8001572:	f000 f95f 	bl	8001834 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800157a:	2b00      	cmp	r3, #0
 800157c:	d008      	beq.n	8001590 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	681a      	ldr	r2, [r3, #0]
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	f042 020e 	orr.w	r2, r2, #14
 800158c:	601a      	str	r2, [r3, #0]
 800158e:	e00f      	b.n	80015b0 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	681a      	ldr	r2, [r3, #0]
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	f022 0204 	bic.w	r2, r2, #4
 800159e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	681a      	ldr	r2, [r3, #0]
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	f042 020a 	orr.w	r2, r2, #10
 80015ae:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	681a      	ldr	r2, [r3, #0]
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	f042 0201 	orr.w	r2, r2, #1
 80015be:	601a      	str	r2, [r3, #0]
 80015c0:	e005      	b.n	80015ce <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	2200      	movs	r2, #0
 80015c6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80015ca:	2302      	movs	r3, #2
 80015cc:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80015ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80015d0:	4618      	mov	r0, r3
 80015d2:	3718      	adds	r7, #24
 80015d4:	46bd      	mov	sp, r7
 80015d6:	bd80      	pop	{r7, pc}

080015d8 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80015d8:	b480      	push	{r7}
 80015da:	b085      	sub	sp, #20
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80015e0:	2300      	movs	r3, #0
 80015e2:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80015ea:	b2db      	uxtb	r3, r3
 80015ec:	2b02      	cmp	r3, #2
 80015ee:	d008      	beq.n	8001602 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	2204      	movs	r2, #4
 80015f4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	2200      	movs	r2, #0
 80015fa:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80015fe:	2301      	movs	r3, #1
 8001600:	e022      	b.n	8001648 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	681a      	ldr	r2, [r3, #0]
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	f022 020e 	bic.w	r2, r2, #14
 8001610:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	681a      	ldr	r2, [r3, #0]
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	f022 0201 	bic.w	r2, r2, #1
 8001620:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001626:	f003 021c 	and.w	r2, r3, #28
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800162e:	2101      	movs	r1, #1
 8001630:	fa01 f202 	lsl.w	r2, r1, r2
 8001634:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	2201      	movs	r2, #1
 800163a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	2200      	movs	r2, #0
 8001642:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 8001646:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8001648:	4618      	mov	r0, r3
 800164a:	3714      	adds	r7, #20
 800164c:	46bd      	mov	sp, r7
 800164e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001652:	4770      	bx	lr

08001654 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b084      	sub	sp, #16
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800165c:	2300      	movs	r3, #0
 800165e:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001666:	b2db      	uxtb	r3, r3
 8001668:	2b02      	cmp	r3, #2
 800166a:	d005      	beq.n	8001678 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	2204      	movs	r2, #4
 8001670:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8001672:	2301      	movs	r3, #1
 8001674:	73fb      	strb	r3, [r7, #15]
 8001676:	e029      	b.n	80016cc <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	681a      	ldr	r2, [r3, #0]
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	f022 020e 	bic.w	r2, r2, #14
 8001686:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	681a      	ldr	r2, [r3, #0]
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	f022 0201 	bic.w	r2, r2, #1
 8001696:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800169c:	f003 021c 	and.w	r2, r3, #28
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016a4:	2101      	movs	r1, #1
 80016a6:	fa01 f202 	lsl.w	r2, r1, r2
 80016aa:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	2201      	movs	r2, #1
 80016b0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	2200      	movs	r2, #0
 80016b8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d003      	beq.n	80016cc <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80016c8:	6878      	ldr	r0, [r7, #4]
 80016ca:	4798      	blx	r3
    }
  }
  return status;
 80016cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80016ce:	4618      	mov	r0, r3
 80016d0:	3710      	adds	r7, #16
 80016d2:	46bd      	mov	sp, r7
 80016d4:	bd80      	pop	{r7, pc}

080016d6 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80016d6:	b580      	push	{r7, lr}
 80016d8:	b084      	sub	sp, #16
 80016da:	af00      	add	r7, sp, #0
 80016dc:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016f2:	f003 031c 	and.w	r3, r3, #28
 80016f6:	2204      	movs	r2, #4
 80016f8:	409a      	lsls	r2, r3
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	4013      	ands	r3, r2
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d026      	beq.n	8001750 <HAL_DMA_IRQHandler+0x7a>
 8001702:	68bb      	ldr	r3, [r7, #8]
 8001704:	f003 0304 	and.w	r3, r3, #4
 8001708:	2b00      	cmp	r3, #0
 800170a:	d021      	beq.n	8001750 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	f003 0320 	and.w	r3, r3, #32
 8001716:	2b00      	cmp	r3, #0
 8001718:	d107      	bne.n	800172a <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	681a      	ldr	r2, [r3, #0]
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	f022 0204 	bic.w	r2, r2, #4
 8001728:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800172e:	f003 021c 	and.w	r2, r3, #28
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001736:	2104      	movs	r1, #4
 8001738:	fa01 f202 	lsl.w	r2, r1, r2
 800173c:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001742:	2b00      	cmp	r3, #0
 8001744:	d071      	beq.n	800182a <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800174a:	6878      	ldr	r0, [r7, #4]
 800174c:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800174e:	e06c      	b.n	800182a <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001754:	f003 031c 	and.w	r3, r3, #28
 8001758:	2202      	movs	r2, #2
 800175a:	409a      	lsls	r2, r3
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	4013      	ands	r3, r2
 8001760:	2b00      	cmp	r3, #0
 8001762:	d02e      	beq.n	80017c2 <HAL_DMA_IRQHandler+0xec>
 8001764:	68bb      	ldr	r3, [r7, #8]
 8001766:	f003 0302 	and.w	r3, r3, #2
 800176a:	2b00      	cmp	r3, #0
 800176c:	d029      	beq.n	80017c2 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	f003 0320 	and.w	r3, r3, #32
 8001778:	2b00      	cmp	r3, #0
 800177a:	d10b      	bne.n	8001794 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	681a      	ldr	r2, [r3, #0]
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	f022 020a 	bic.w	r2, r2, #10
 800178a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	2201      	movs	r2, #1
 8001790:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001798:	f003 021c 	and.w	r2, r3, #28
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017a0:	2102      	movs	r1, #2
 80017a2:	fa01 f202 	lsl.w	r2, r1, r2
 80017a6:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	2200      	movs	r2, #0
 80017ac:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d038      	beq.n	800182a <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80017bc:	6878      	ldr	r0, [r7, #4]
 80017be:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80017c0:	e033      	b.n	800182a <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017c6:	f003 031c 	and.w	r3, r3, #28
 80017ca:	2208      	movs	r2, #8
 80017cc:	409a      	lsls	r2, r3
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	4013      	ands	r3, r2
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d02a      	beq.n	800182c <HAL_DMA_IRQHandler+0x156>
 80017d6:	68bb      	ldr	r3, [r7, #8]
 80017d8:	f003 0308 	and.w	r3, r3, #8
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d025      	beq.n	800182c <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	681a      	ldr	r2, [r3, #0]
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	f022 020e 	bic.w	r2, r2, #14
 80017ee:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017f4:	f003 021c 	and.w	r2, r3, #28
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017fc:	2101      	movs	r1, #1
 80017fe:	fa01 f202 	lsl.w	r2, r1, r2
 8001802:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	2201      	movs	r2, #1
 8001808:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	2201      	movs	r2, #1
 800180e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	2200      	movs	r2, #0
 8001816:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800181e:	2b00      	cmp	r3, #0
 8001820:	d004      	beq.n	800182c <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001826:	6878      	ldr	r0, [r7, #4]
 8001828:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800182a:	bf00      	nop
 800182c:	bf00      	nop
}
 800182e:	3710      	adds	r7, #16
 8001830:	46bd      	mov	sp, r7
 8001832:	bd80      	pop	{r7, pc}

08001834 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001834:	b480      	push	{r7}
 8001836:	b085      	sub	sp, #20
 8001838:	af00      	add	r7, sp, #0
 800183a:	60f8      	str	r0, [r7, #12]
 800183c:	60b9      	str	r1, [r7, #8]
 800183e:	607a      	str	r2, [r7, #4]
 8001840:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001846:	f003 021c 	and.w	r2, r3, #28
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800184e:	2101      	movs	r1, #1
 8001850:	fa01 f202 	lsl.w	r2, r1, r2
 8001854:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	683a      	ldr	r2, [r7, #0]
 800185c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	689b      	ldr	r3, [r3, #8]
 8001862:	2b10      	cmp	r3, #16
 8001864:	d108      	bne.n	8001878 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	687a      	ldr	r2, [r7, #4]
 800186c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	68ba      	ldr	r2, [r7, #8]
 8001874:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001876:	e007      	b.n	8001888 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	68ba      	ldr	r2, [r7, #8]
 800187e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	687a      	ldr	r2, [r7, #4]
 8001886:	60da      	str	r2, [r3, #12]
}
 8001888:	bf00      	nop
 800188a:	3714      	adds	r7, #20
 800188c:	46bd      	mov	sp, r7
 800188e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001892:	4770      	bx	lr

08001894 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001894:	b480      	push	{r7}
 8001896:	b087      	sub	sp, #28
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
 800189c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800189e:	2300      	movs	r3, #0
 80018a0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80018a2:	e154      	b.n	8001b4e <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80018a4:	683b      	ldr	r3, [r7, #0]
 80018a6:	681a      	ldr	r2, [r3, #0]
 80018a8:	2101      	movs	r1, #1
 80018aa:	697b      	ldr	r3, [r7, #20]
 80018ac:	fa01 f303 	lsl.w	r3, r1, r3
 80018b0:	4013      	ands	r3, r2
 80018b2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	f000 8146 	beq.w	8001b48 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80018bc:	683b      	ldr	r3, [r7, #0]
 80018be:	685b      	ldr	r3, [r3, #4]
 80018c0:	f003 0303 	and.w	r3, r3, #3
 80018c4:	2b01      	cmp	r3, #1
 80018c6:	d005      	beq.n	80018d4 <HAL_GPIO_Init+0x40>
 80018c8:	683b      	ldr	r3, [r7, #0]
 80018ca:	685b      	ldr	r3, [r3, #4]
 80018cc:	f003 0303 	and.w	r3, r3, #3
 80018d0:	2b02      	cmp	r3, #2
 80018d2:	d130      	bne.n	8001936 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	689b      	ldr	r3, [r3, #8]
 80018d8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80018da:	697b      	ldr	r3, [r7, #20]
 80018dc:	005b      	lsls	r3, r3, #1
 80018de:	2203      	movs	r2, #3
 80018e0:	fa02 f303 	lsl.w	r3, r2, r3
 80018e4:	43db      	mvns	r3, r3
 80018e6:	693a      	ldr	r2, [r7, #16]
 80018e8:	4013      	ands	r3, r2
 80018ea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80018ec:	683b      	ldr	r3, [r7, #0]
 80018ee:	68da      	ldr	r2, [r3, #12]
 80018f0:	697b      	ldr	r3, [r7, #20]
 80018f2:	005b      	lsls	r3, r3, #1
 80018f4:	fa02 f303 	lsl.w	r3, r2, r3
 80018f8:	693a      	ldr	r2, [r7, #16]
 80018fa:	4313      	orrs	r3, r2
 80018fc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	693a      	ldr	r2, [r7, #16]
 8001902:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	685b      	ldr	r3, [r3, #4]
 8001908:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800190a:	2201      	movs	r2, #1
 800190c:	697b      	ldr	r3, [r7, #20]
 800190e:	fa02 f303 	lsl.w	r3, r2, r3
 8001912:	43db      	mvns	r3, r3
 8001914:	693a      	ldr	r2, [r7, #16]
 8001916:	4013      	ands	r3, r2
 8001918:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800191a:	683b      	ldr	r3, [r7, #0]
 800191c:	685b      	ldr	r3, [r3, #4]
 800191e:	091b      	lsrs	r3, r3, #4
 8001920:	f003 0201 	and.w	r2, r3, #1
 8001924:	697b      	ldr	r3, [r7, #20]
 8001926:	fa02 f303 	lsl.w	r3, r2, r3
 800192a:	693a      	ldr	r2, [r7, #16]
 800192c:	4313      	orrs	r3, r2
 800192e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	693a      	ldr	r2, [r7, #16]
 8001934:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001936:	683b      	ldr	r3, [r7, #0]
 8001938:	685b      	ldr	r3, [r3, #4]
 800193a:	f003 0303 	and.w	r3, r3, #3
 800193e:	2b03      	cmp	r3, #3
 8001940:	d017      	beq.n	8001972 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	68db      	ldr	r3, [r3, #12]
 8001946:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001948:	697b      	ldr	r3, [r7, #20]
 800194a:	005b      	lsls	r3, r3, #1
 800194c:	2203      	movs	r2, #3
 800194e:	fa02 f303 	lsl.w	r3, r2, r3
 8001952:	43db      	mvns	r3, r3
 8001954:	693a      	ldr	r2, [r7, #16]
 8001956:	4013      	ands	r3, r2
 8001958:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800195a:	683b      	ldr	r3, [r7, #0]
 800195c:	689a      	ldr	r2, [r3, #8]
 800195e:	697b      	ldr	r3, [r7, #20]
 8001960:	005b      	lsls	r3, r3, #1
 8001962:	fa02 f303 	lsl.w	r3, r2, r3
 8001966:	693a      	ldr	r2, [r7, #16]
 8001968:	4313      	orrs	r3, r2
 800196a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	693a      	ldr	r2, [r7, #16]
 8001970:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001972:	683b      	ldr	r3, [r7, #0]
 8001974:	685b      	ldr	r3, [r3, #4]
 8001976:	f003 0303 	and.w	r3, r3, #3
 800197a:	2b02      	cmp	r3, #2
 800197c:	d123      	bne.n	80019c6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800197e:	697b      	ldr	r3, [r7, #20]
 8001980:	08da      	lsrs	r2, r3, #3
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	3208      	adds	r2, #8
 8001986:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800198a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800198c:	697b      	ldr	r3, [r7, #20]
 800198e:	f003 0307 	and.w	r3, r3, #7
 8001992:	009b      	lsls	r3, r3, #2
 8001994:	220f      	movs	r2, #15
 8001996:	fa02 f303 	lsl.w	r3, r2, r3
 800199a:	43db      	mvns	r3, r3
 800199c:	693a      	ldr	r2, [r7, #16]
 800199e:	4013      	ands	r3, r2
 80019a0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80019a2:	683b      	ldr	r3, [r7, #0]
 80019a4:	691a      	ldr	r2, [r3, #16]
 80019a6:	697b      	ldr	r3, [r7, #20]
 80019a8:	f003 0307 	and.w	r3, r3, #7
 80019ac:	009b      	lsls	r3, r3, #2
 80019ae:	fa02 f303 	lsl.w	r3, r2, r3
 80019b2:	693a      	ldr	r2, [r7, #16]
 80019b4:	4313      	orrs	r3, r2
 80019b6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80019b8:	697b      	ldr	r3, [r7, #20]
 80019ba:	08da      	lsrs	r2, r3, #3
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	3208      	adds	r2, #8
 80019c0:	6939      	ldr	r1, [r7, #16]
 80019c2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80019cc:	697b      	ldr	r3, [r7, #20]
 80019ce:	005b      	lsls	r3, r3, #1
 80019d0:	2203      	movs	r2, #3
 80019d2:	fa02 f303 	lsl.w	r3, r2, r3
 80019d6:	43db      	mvns	r3, r3
 80019d8:	693a      	ldr	r2, [r7, #16]
 80019da:	4013      	ands	r3, r2
 80019dc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80019de:	683b      	ldr	r3, [r7, #0]
 80019e0:	685b      	ldr	r3, [r3, #4]
 80019e2:	f003 0203 	and.w	r2, r3, #3
 80019e6:	697b      	ldr	r3, [r7, #20]
 80019e8:	005b      	lsls	r3, r3, #1
 80019ea:	fa02 f303 	lsl.w	r3, r2, r3
 80019ee:	693a      	ldr	r2, [r7, #16]
 80019f0:	4313      	orrs	r3, r2
 80019f2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	693a      	ldr	r2, [r7, #16]
 80019f8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80019fa:	683b      	ldr	r3, [r7, #0]
 80019fc:	685b      	ldr	r3, [r3, #4]
 80019fe:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	f000 80a0 	beq.w	8001b48 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a08:	4b58      	ldr	r3, [pc, #352]	@ (8001b6c <HAL_GPIO_Init+0x2d8>)
 8001a0a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001a0c:	4a57      	ldr	r2, [pc, #348]	@ (8001b6c <HAL_GPIO_Init+0x2d8>)
 8001a0e:	f043 0301 	orr.w	r3, r3, #1
 8001a12:	6613      	str	r3, [r2, #96]	@ 0x60
 8001a14:	4b55      	ldr	r3, [pc, #340]	@ (8001b6c <HAL_GPIO_Init+0x2d8>)
 8001a16:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001a18:	f003 0301 	and.w	r3, r3, #1
 8001a1c:	60bb      	str	r3, [r7, #8]
 8001a1e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001a20:	4a53      	ldr	r2, [pc, #332]	@ (8001b70 <HAL_GPIO_Init+0x2dc>)
 8001a22:	697b      	ldr	r3, [r7, #20]
 8001a24:	089b      	lsrs	r3, r3, #2
 8001a26:	3302      	adds	r3, #2
 8001a28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a2c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001a2e:	697b      	ldr	r3, [r7, #20]
 8001a30:	f003 0303 	and.w	r3, r3, #3
 8001a34:	009b      	lsls	r3, r3, #2
 8001a36:	220f      	movs	r2, #15
 8001a38:	fa02 f303 	lsl.w	r3, r2, r3
 8001a3c:	43db      	mvns	r3, r3
 8001a3e:	693a      	ldr	r2, [r7, #16]
 8001a40:	4013      	ands	r3, r2
 8001a42:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001a4a:	d019      	beq.n	8001a80 <HAL_GPIO_Init+0x1ec>
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	4a49      	ldr	r2, [pc, #292]	@ (8001b74 <HAL_GPIO_Init+0x2e0>)
 8001a50:	4293      	cmp	r3, r2
 8001a52:	d013      	beq.n	8001a7c <HAL_GPIO_Init+0x1e8>
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	4a48      	ldr	r2, [pc, #288]	@ (8001b78 <HAL_GPIO_Init+0x2e4>)
 8001a58:	4293      	cmp	r3, r2
 8001a5a:	d00d      	beq.n	8001a78 <HAL_GPIO_Init+0x1e4>
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	4a47      	ldr	r2, [pc, #284]	@ (8001b7c <HAL_GPIO_Init+0x2e8>)
 8001a60:	4293      	cmp	r3, r2
 8001a62:	d007      	beq.n	8001a74 <HAL_GPIO_Init+0x1e0>
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	4a46      	ldr	r2, [pc, #280]	@ (8001b80 <HAL_GPIO_Init+0x2ec>)
 8001a68:	4293      	cmp	r3, r2
 8001a6a:	d101      	bne.n	8001a70 <HAL_GPIO_Init+0x1dc>
 8001a6c:	2304      	movs	r3, #4
 8001a6e:	e008      	b.n	8001a82 <HAL_GPIO_Init+0x1ee>
 8001a70:	2307      	movs	r3, #7
 8001a72:	e006      	b.n	8001a82 <HAL_GPIO_Init+0x1ee>
 8001a74:	2303      	movs	r3, #3
 8001a76:	e004      	b.n	8001a82 <HAL_GPIO_Init+0x1ee>
 8001a78:	2302      	movs	r3, #2
 8001a7a:	e002      	b.n	8001a82 <HAL_GPIO_Init+0x1ee>
 8001a7c:	2301      	movs	r3, #1
 8001a7e:	e000      	b.n	8001a82 <HAL_GPIO_Init+0x1ee>
 8001a80:	2300      	movs	r3, #0
 8001a82:	697a      	ldr	r2, [r7, #20]
 8001a84:	f002 0203 	and.w	r2, r2, #3
 8001a88:	0092      	lsls	r2, r2, #2
 8001a8a:	4093      	lsls	r3, r2
 8001a8c:	693a      	ldr	r2, [r7, #16]
 8001a8e:	4313      	orrs	r3, r2
 8001a90:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001a92:	4937      	ldr	r1, [pc, #220]	@ (8001b70 <HAL_GPIO_Init+0x2dc>)
 8001a94:	697b      	ldr	r3, [r7, #20]
 8001a96:	089b      	lsrs	r3, r3, #2
 8001a98:	3302      	adds	r3, #2
 8001a9a:	693a      	ldr	r2, [r7, #16]
 8001a9c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001aa0:	4b38      	ldr	r3, [pc, #224]	@ (8001b84 <HAL_GPIO_Init+0x2f0>)
 8001aa2:	689b      	ldr	r3, [r3, #8]
 8001aa4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	43db      	mvns	r3, r3
 8001aaa:	693a      	ldr	r2, [r7, #16]
 8001aac:	4013      	ands	r3, r2
 8001aae:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001ab0:	683b      	ldr	r3, [r7, #0]
 8001ab2:	685b      	ldr	r3, [r3, #4]
 8001ab4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d003      	beq.n	8001ac4 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8001abc:	693a      	ldr	r2, [r7, #16]
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	4313      	orrs	r3, r2
 8001ac2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001ac4:	4a2f      	ldr	r2, [pc, #188]	@ (8001b84 <HAL_GPIO_Init+0x2f0>)
 8001ac6:	693b      	ldr	r3, [r7, #16]
 8001ac8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001aca:	4b2e      	ldr	r3, [pc, #184]	@ (8001b84 <HAL_GPIO_Init+0x2f0>)
 8001acc:	68db      	ldr	r3, [r3, #12]
 8001ace:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	43db      	mvns	r3, r3
 8001ad4:	693a      	ldr	r2, [r7, #16]
 8001ad6:	4013      	ands	r3, r2
 8001ad8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001ada:	683b      	ldr	r3, [r7, #0]
 8001adc:	685b      	ldr	r3, [r3, #4]
 8001ade:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d003      	beq.n	8001aee <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8001ae6:	693a      	ldr	r2, [r7, #16]
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	4313      	orrs	r3, r2
 8001aec:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001aee:	4a25      	ldr	r2, [pc, #148]	@ (8001b84 <HAL_GPIO_Init+0x2f0>)
 8001af0:	693b      	ldr	r3, [r7, #16]
 8001af2:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001af4:	4b23      	ldr	r3, [pc, #140]	@ (8001b84 <HAL_GPIO_Init+0x2f0>)
 8001af6:	685b      	ldr	r3, [r3, #4]
 8001af8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	43db      	mvns	r3, r3
 8001afe:	693a      	ldr	r2, [r7, #16]
 8001b00:	4013      	ands	r3, r2
 8001b02:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001b04:	683b      	ldr	r3, [r7, #0]
 8001b06:	685b      	ldr	r3, [r3, #4]
 8001b08:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d003      	beq.n	8001b18 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8001b10:	693a      	ldr	r2, [r7, #16]
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	4313      	orrs	r3, r2
 8001b16:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001b18:	4a1a      	ldr	r2, [pc, #104]	@ (8001b84 <HAL_GPIO_Init+0x2f0>)
 8001b1a:	693b      	ldr	r3, [r7, #16]
 8001b1c:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001b1e:	4b19      	ldr	r3, [pc, #100]	@ (8001b84 <HAL_GPIO_Init+0x2f0>)
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	43db      	mvns	r3, r3
 8001b28:	693a      	ldr	r2, [r7, #16]
 8001b2a:	4013      	ands	r3, r2
 8001b2c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001b2e:	683b      	ldr	r3, [r7, #0]
 8001b30:	685b      	ldr	r3, [r3, #4]
 8001b32:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d003      	beq.n	8001b42 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001b3a:	693a      	ldr	r2, [r7, #16]
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	4313      	orrs	r3, r2
 8001b40:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001b42:	4a10      	ldr	r2, [pc, #64]	@ (8001b84 <HAL_GPIO_Init+0x2f0>)
 8001b44:	693b      	ldr	r3, [r7, #16]
 8001b46:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001b48:	697b      	ldr	r3, [r7, #20]
 8001b4a:	3301      	adds	r3, #1
 8001b4c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b4e:	683b      	ldr	r3, [r7, #0]
 8001b50:	681a      	ldr	r2, [r3, #0]
 8001b52:	697b      	ldr	r3, [r7, #20]
 8001b54:	fa22 f303 	lsr.w	r3, r2, r3
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	f47f aea3 	bne.w	80018a4 <HAL_GPIO_Init+0x10>
  }
}
 8001b5e:	bf00      	nop
 8001b60:	bf00      	nop
 8001b62:	371c      	adds	r7, #28
 8001b64:	46bd      	mov	sp, r7
 8001b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6a:	4770      	bx	lr
 8001b6c:	40021000 	.word	0x40021000
 8001b70:	40010000 	.word	0x40010000
 8001b74:	48000400 	.word	0x48000400
 8001b78:	48000800 	.word	0x48000800
 8001b7c:	48000c00 	.word	0x48000c00
 8001b80:	48001000 	.word	0x48001000
 8001b84:	40010400 	.word	0x40010400

08001b88 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001b88:	b480      	push	{r7}
 8001b8a:	b085      	sub	sp, #20
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
 8001b90:	460b      	mov	r3, r1
 8001b92:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	691a      	ldr	r2, [r3, #16]
 8001b98:	887b      	ldrh	r3, [r7, #2]
 8001b9a:	4013      	ands	r3, r2
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d002      	beq.n	8001ba6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001ba0:	2301      	movs	r3, #1
 8001ba2:	73fb      	strb	r3, [r7, #15]
 8001ba4:	e001      	b.n	8001baa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001baa:	7bfb      	ldrb	r3, [r7, #15]
}
 8001bac:	4618      	mov	r0, r3
 8001bae:	3714      	adds	r7, #20
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb6:	4770      	bx	lr

08001bb8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001bb8:	b480      	push	{r7}
 8001bba:	b083      	sub	sp, #12
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
 8001bc0:	460b      	mov	r3, r1
 8001bc2:	807b      	strh	r3, [r7, #2]
 8001bc4:	4613      	mov	r3, r2
 8001bc6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001bc8:	787b      	ldrb	r3, [r7, #1]
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d003      	beq.n	8001bd6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001bce:	887a      	ldrh	r2, [r7, #2]
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001bd4:	e002      	b.n	8001bdc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001bd6:	887a      	ldrh	r2, [r7, #2]
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001bdc:	bf00      	nop
 8001bde:	370c      	adds	r7, #12
 8001be0:	46bd      	mov	sp, r7
 8001be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be6:	4770      	bx	lr

08001be8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b082      	sub	sp, #8
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d101      	bne.n	8001bfa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001bf6:	2301      	movs	r3, #1
 8001bf8:	e08d      	b.n	8001d16 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001c00:	b2db      	uxtb	r3, r3
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d106      	bne.n	8001c14 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	2200      	movs	r2, #0
 8001c0a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001c0e:	6878      	ldr	r0, [r7, #4]
 8001c10:	f7fe fee2 	bl	80009d8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	2224      	movs	r2, #36	@ 0x24
 8001c18:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	681a      	ldr	r2, [r3, #0]
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f022 0201 	bic.w	r2, r2, #1
 8001c2a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	685a      	ldr	r2, [r3, #4]
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001c38:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	689a      	ldr	r2, [r3, #8]
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001c48:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	68db      	ldr	r3, [r3, #12]
 8001c4e:	2b01      	cmp	r3, #1
 8001c50:	d107      	bne.n	8001c62 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	689a      	ldr	r2, [r3, #8]
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001c5e:	609a      	str	r2, [r3, #8]
 8001c60:	e006      	b.n	8001c70 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	689a      	ldr	r2, [r3, #8]
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8001c6e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	68db      	ldr	r3, [r3, #12]
 8001c74:	2b02      	cmp	r3, #2
 8001c76:	d108      	bne.n	8001c8a <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	685a      	ldr	r2, [r3, #4]
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001c86:	605a      	str	r2, [r3, #4]
 8001c88:	e007      	b.n	8001c9a <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	685a      	ldr	r2, [r3, #4]
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001c98:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	685b      	ldr	r3, [r3, #4]
 8001ca0:	687a      	ldr	r2, [r7, #4]
 8001ca2:	6812      	ldr	r2, [r2, #0]
 8001ca4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001ca8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001cac:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	68da      	ldr	r2, [r3, #12]
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001cbc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	691a      	ldr	r2, [r3, #16]
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	695b      	ldr	r3, [r3, #20]
 8001cc6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	699b      	ldr	r3, [r3, #24]
 8001cce:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	430a      	orrs	r2, r1
 8001cd6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	69d9      	ldr	r1, [r3, #28]
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	6a1a      	ldr	r2, [r3, #32]
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	430a      	orrs	r2, r1
 8001ce6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	681a      	ldr	r2, [r3, #0]
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f042 0201 	orr.w	r2, r2, #1
 8001cf6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	2220      	movs	r2, #32
 8001d02:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	2200      	movs	r2, #0
 8001d0a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	2200      	movs	r2, #0
 8001d10:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8001d14:	2300      	movs	r3, #0
}
 8001d16:	4618      	mov	r0, r3
 8001d18:	3708      	adds	r7, #8
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	bd80      	pop	{r7, pc}

08001d1e <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001d1e:	b480      	push	{r7}
 8001d20:	b083      	sub	sp, #12
 8001d22:	af00      	add	r7, sp, #0
 8001d24:	6078      	str	r0, [r7, #4]
 8001d26:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001d2e:	b2db      	uxtb	r3, r3
 8001d30:	2b20      	cmp	r3, #32
 8001d32:	d138      	bne.n	8001da6 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001d3a:	2b01      	cmp	r3, #1
 8001d3c:	d101      	bne.n	8001d42 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001d3e:	2302      	movs	r3, #2
 8001d40:	e032      	b.n	8001da8 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	2201      	movs	r2, #1
 8001d46:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	2224      	movs	r2, #36	@ 0x24
 8001d4e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	681a      	ldr	r2, [r3, #0]
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	f022 0201 	bic.w	r2, r2, #1
 8001d60:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	681a      	ldr	r2, [r3, #0]
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8001d70:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	6819      	ldr	r1, [r3, #0]
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	683a      	ldr	r2, [r7, #0]
 8001d7e:	430a      	orrs	r2, r1
 8001d80:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	681a      	ldr	r2, [r3, #0]
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f042 0201 	orr.w	r2, r2, #1
 8001d90:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	2220      	movs	r2, #32
 8001d96:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001da2:	2300      	movs	r3, #0
 8001da4:	e000      	b.n	8001da8 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001da6:	2302      	movs	r3, #2
  }
}
 8001da8:	4618      	mov	r0, r3
 8001daa:	370c      	adds	r7, #12
 8001dac:	46bd      	mov	sp, r7
 8001dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db2:	4770      	bx	lr

08001db4 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001db4:	b480      	push	{r7}
 8001db6:	b085      	sub	sp, #20
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
 8001dbc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001dc4:	b2db      	uxtb	r3, r3
 8001dc6:	2b20      	cmp	r3, #32
 8001dc8:	d139      	bne.n	8001e3e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001dd0:	2b01      	cmp	r3, #1
 8001dd2:	d101      	bne.n	8001dd8 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001dd4:	2302      	movs	r3, #2
 8001dd6:	e033      	b.n	8001e40 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	2201      	movs	r2, #1
 8001ddc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	2224      	movs	r2, #36	@ 0x24
 8001de4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	681a      	ldr	r2, [r3, #0]
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f022 0201 	bic.w	r2, r2, #1
 8001df6:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8001e06:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001e08:	683b      	ldr	r3, [r7, #0]
 8001e0a:	021b      	lsls	r3, r3, #8
 8001e0c:	68fa      	ldr	r2, [r7, #12]
 8001e0e:	4313      	orrs	r3, r2
 8001e10:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	68fa      	ldr	r2, [r7, #12]
 8001e18:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	681a      	ldr	r2, [r3, #0]
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f042 0201 	orr.w	r2, r2, #1
 8001e28:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	2220      	movs	r2, #32
 8001e2e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	2200      	movs	r2, #0
 8001e36:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	e000      	b.n	8001e40 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001e3e:	2302      	movs	r3, #2
  }
}
 8001e40:	4618      	mov	r0, r3
 8001e42:	3714      	adds	r7, #20
 8001e44:	46bd      	mov	sp, r7
 8001e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4a:	4770      	bx	lr

08001e4c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001e4c:	b480      	push	{r7}
 8001e4e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001e50:	4b04      	ldr	r3, [pc, #16]	@ (8001e64 <HAL_PWREx_GetVoltageRange+0x18>)
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8001e58:	4618      	mov	r0, r3
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e60:	4770      	bx	lr
 8001e62:	bf00      	nop
 8001e64:	40007000 	.word	0x40007000

08001e68 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001e68:	b480      	push	{r7}
 8001e6a:	b085      	sub	sp, #20
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001e76:	d130      	bne.n	8001eda <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001e78:	4b23      	ldr	r3, [pc, #140]	@ (8001f08 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001e80:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001e84:	d038      	beq.n	8001ef8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001e86:	4b20      	ldr	r3, [pc, #128]	@ (8001f08 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001e8e:	4a1e      	ldr	r2, [pc, #120]	@ (8001f08 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001e90:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001e94:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001e96:	4b1d      	ldr	r3, [pc, #116]	@ (8001f0c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	2232      	movs	r2, #50	@ 0x32
 8001e9c:	fb02 f303 	mul.w	r3, r2, r3
 8001ea0:	4a1b      	ldr	r2, [pc, #108]	@ (8001f10 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001ea2:	fba2 2303 	umull	r2, r3, r2, r3
 8001ea6:	0c9b      	lsrs	r3, r3, #18
 8001ea8:	3301      	adds	r3, #1
 8001eaa:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001eac:	e002      	b.n	8001eb4 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	3b01      	subs	r3, #1
 8001eb2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001eb4:	4b14      	ldr	r3, [pc, #80]	@ (8001f08 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001eb6:	695b      	ldr	r3, [r3, #20]
 8001eb8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001ebc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001ec0:	d102      	bne.n	8001ec8 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d1f2      	bne.n	8001eae <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001ec8:	4b0f      	ldr	r3, [pc, #60]	@ (8001f08 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001eca:	695b      	ldr	r3, [r3, #20]
 8001ecc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001ed0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001ed4:	d110      	bne.n	8001ef8 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001ed6:	2303      	movs	r3, #3
 8001ed8:	e00f      	b.n	8001efa <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001eda:	4b0b      	ldr	r3, [pc, #44]	@ (8001f08 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001ee2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001ee6:	d007      	beq.n	8001ef8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001ee8:	4b07      	ldr	r3, [pc, #28]	@ (8001f08 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001ef0:	4a05      	ldr	r2, [pc, #20]	@ (8001f08 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001ef2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001ef6:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001ef8:	2300      	movs	r3, #0
}
 8001efa:	4618      	mov	r0, r3
 8001efc:	3714      	adds	r7, #20
 8001efe:	46bd      	mov	sp, r7
 8001f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f04:	4770      	bx	lr
 8001f06:	bf00      	nop
 8001f08:	40007000 	.word	0x40007000
 8001f0c:	20000000 	.word	0x20000000
 8001f10:	431bde83 	.word	0x431bde83

08001f14 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b088      	sub	sp, #32
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d102      	bne.n	8001f28 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001f22:	2301      	movs	r3, #1
 8001f24:	f000 bc02 	b.w	800272c <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001f28:	4b96      	ldr	r3, [pc, #600]	@ (8002184 <HAL_RCC_OscConfig+0x270>)
 8001f2a:	689b      	ldr	r3, [r3, #8]
 8001f2c:	f003 030c 	and.w	r3, r3, #12
 8001f30:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001f32:	4b94      	ldr	r3, [pc, #592]	@ (8002184 <HAL_RCC_OscConfig+0x270>)
 8001f34:	68db      	ldr	r3, [r3, #12]
 8001f36:	f003 0303 	and.w	r3, r3, #3
 8001f3a:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f003 0310 	and.w	r3, r3, #16
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	f000 80e4 	beq.w	8002112 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001f4a:	69bb      	ldr	r3, [r7, #24]
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d007      	beq.n	8001f60 <HAL_RCC_OscConfig+0x4c>
 8001f50:	69bb      	ldr	r3, [r7, #24]
 8001f52:	2b0c      	cmp	r3, #12
 8001f54:	f040 808b 	bne.w	800206e <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001f58:	697b      	ldr	r3, [r7, #20]
 8001f5a:	2b01      	cmp	r3, #1
 8001f5c:	f040 8087 	bne.w	800206e <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001f60:	4b88      	ldr	r3, [pc, #544]	@ (8002184 <HAL_RCC_OscConfig+0x270>)
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f003 0302 	and.w	r3, r3, #2
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d005      	beq.n	8001f78 <HAL_RCC_OscConfig+0x64>
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	699b      	ldr	r3, [r3, #24]
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d101      	bne.n	8001f78 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8001f74:	2301      	movs	r3, #1
 8001f76:	e3d9      	b.n	800272c <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	6a1a      	ldr	r2, [r3, #32]
 8001f7c:	4b81      	ldr	r3, [pc, #516]	@ (8002184 <HAL_RCC_OscConfig+0x270>)
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f003 0308 	and.w	r3, r3, #8
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d004      	beq.n	8001f92 <HAL_RCC_OscConfig+0x7e>
 8001f88:	4b7e      	ldr	r3, [pc, #504]	@ (8002184 <HAL_RCC_OscConfig+0x270>)
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001f90:	e005      	b.n	8001f9e <HAL_RCC_OscConfig+0x8a>
 8001f92:	4b7c      	ldr	r3, [pc, #496]	@ (8002184 <HAL_RCC_OscConfig+0x270>)
 8001f94:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001f98:	091b      	lsrs	r3, r3, #4
 8001f9a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001f9e:	4293      	cmp	r3, r2
 8001fa0:	d223      	bcs.n	8001fea <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	6a1b      	ldr	r3, [r3, #32]
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	f000 fd8c 	bl	8002ac4 <RCC_SetFlashLatencyFromMSIRange>
 8001fac:	4603      	mov	r3, r0
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d001      	beq.n	8001fb6 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8001fb2:	2301      	movs	r3, #1
 8001fb4:	e3ba      	b.n	800272c <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001fb6:	4b73      	ldr	r3, [pc, #460]	@ (8002184 <HAL_RCC_OscConfig+0x270>)
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	4a72      	ldr	r2, [pc, #456]	@ (8002184 <HAL_RCC_OscConfig+0x270>)
 8001fbc:	f043 0308 	orr.w	r3, r3, #8
 8001fc0:	6013      	str	r3, [r2, #0]
 8001fc2:	4b70      	ldr	r3, [pc, #448]	@ (8002184 <HAL_RCC_OscConfig+0x270>)
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	6a1b      	ldr	r3, [r3, #32]
 8001fce:	496d      	ldr	r1, [pc, #436]	@ (8002184 <HAL_RCC_OscConfig+0x270>)
 8001fd0:	4313      	orrs	r3, r2
 8001fd2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001fd4:	4b6b      	ldr	r3, [pc, #428]	@ (8002184 <HAL_RCC_OscConfig+0x270>)
 8001fd6:	685b      	ldr	r3, [r3, #4]
 8001fd8:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	69db      	ldr	r3, [r3, #28]
 8001fe0:	021b      	lsls	r3, r3, #8
 8001fe2:	4968      	ldr	r1, [pc, #416]	@ (8002184 <HAL_RCC_OscConfig+0x270>)
 8001fe4:	4313      	orrs	r3, r2
 8001fe6:	604b      	str	r3, [r1, #4]
 8001fe8:	e025      	b.n	8002036 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001fea:	4b66      	ldr	r3, [pc, #408]	@ (8002184 <HAL_RCC_OscConfig+0x270>)
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	4a65      	ldr	r2, [pc, #404]	@ (8002184 <HAL_RCC_OscConfig+0x270>)
 8001ff0:	f043 0308 	orr.w	r3, r3, #8
 8001ff4:	6013      	str	r3, [r2, #0]
 8001ff6:	4b63      	ldr	r3, [pc, #396]	@ (8002184 <HAL_RCC_OscConfig+0x270>)
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	6a1b      	ldr	r3, [r3, #32]
 8002002:	4960      	ldr	r1, [pc, #384]	@ (8002184 <HAL_RCC_OscConfig+0x270>)
 8002004:	4313      	orrs	r3, r2
 8002006:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002008:	4b5e      	ldr	r3, [pc, #376]	@ (8002184 <HAL_RCC_OscConfig+0x270>)
 800200a:	685b      	ldr	r3, [r3, #4]
 800200c:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	69db      	ldr	r3, [r3, #28]
 8002014:	021b      	lsls	r3, r3, #8
 8002016:	495b      	ldr	r1, [pc, #364]	@ (8002184 <HAL_RCC_OscConfig+0x270>)
 8002018:	4313      	orrs	r3, r2
 800201a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800201c:	69bb      	ldr	r3, [r7, #24]
 800201e:	2b00      	cmp	r3, #0
 8002020:	d109      	bne.n	8002036 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	6a1b      	ldr	r3, [r3, #32]
 8002026:	4618      	mov	r0, r3
 8002028:	f000 fd4c 	bl	8002ac4 <RCC_SetFlashLatencyFromMSIRange>
 800202c:	4603      	mov	r3, r0
 800202e:	2b00      	cmp	r3, #0
 8002030:	d001      	beq.n	8002036 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8002032:	2301      	movs	r3, #1
 8002034:	e37a      	b.n	800272c <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002036:	f000 fc81 	bl	800293c <HAL_RCC_GetSysClockFreq>
 800203a:	4602      	mov	r2, r0
 800203c:	4b51      	ldr	r3, [pc, #324]	@ (8002184 <HAL_RCC_OscConfig+0x270>)
 800203e:	689b      	ldr	r3, [r3, #8]
 8002040:	091b      	lsrs	r3, r3, #4
 8002042:	f003 030f 	and.w	r3, r3, #15
 8002046:	4950      	ldr	r1, [pc, #320]	@ (8002188 <HAL_RCC_OscConfig+0x274>)
 8002048:	5ccb      	ldrb	r3, [r1, r3]
 800204a:	f003 031f 	and.w	r3, r3, #31
 800204e:	fa22 f303 	lsr.w	r3, r2, r3
 8002052:	4a4e      	ldr	r2, [pc, #312]	@ (800218c <HAL_RCC_OscConfig+0x278>)
 8002054:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002056:	4b4e      	ldr	r3, [pc, #312]	@ (8002190 <HAL_RCC_OscConfig+0x27c>)
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	4618      	mov	r0, r3
 800205c:	f7ff f812 	bl	8001084 <HAL_InitTick>
 8002060:	4603      	mov	r3, r0
 8002062:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002064:	7bfb      	ldrb	r3, [r7, #15]
 8002066:	2b00      	cmp	r3, #0
 8002068:	d052      	beq.n	8002110 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800206a:	7bfb      	ldrb	r3, [r7, #15]
 800206c:	e35e      	b.n	800272c <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	699b      	ldr	r3, [r3, #24]
 8002072:	2b00      	cmp	r3, #0
 8002074:	d032      	beq.n	80020dc <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002076:	4b43      	ldr	r3, [pc, #268]	@ (8002184 <HAL_RCC_OscConfig+0x270>)
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	4a42      	ldr	r2, [pc, #264]	@ (8002184 <HAL_RCC_OscConfig+0x270>)
 800207c:	f043 0301 	orr.w	r3, r3, #1
 8002080:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002082:	f7ff f84f 	bl	8001124 <HAL_GetTick>
 8002086:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002088:	e008      	b.n	800209c <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800208a:	f7ff f84b 	bl	8001124 <HAL_GetTick>
 800208e:	4602      	mov	r2, r0
 8002090:	693b      	ldr	r3, [r7, #16]
 8002092:	1ad3      	subs	r3, r2, r3
 8002094:	2b02      	cmp	r3, #2
 8002096:	d901      	bls.n	800209c <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8002098:	2303      	movs	r3, #3
 800209a:	e347      	b.n	800272c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800209c:	4b39      	ldr	r3, [pc, #228]	@ (8002184 <HAL_RCC_OscConfig+0x270>)
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f003 0302 	and.w	r3, r3, #2
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d0f0      	beq.n	800208a <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80020a8:	4b36      	ldr	r3, [pc, #216]	@ (8002184 <HAL_RCC_OscConfig+0x270>)
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	4a35      	ldr	r2, [pc, #212]	@ (8002184 <HAL_RCC_OscConfig+0x270>)
 80020ae:	f043 0308 	orr.w	r3, r3, #8
 80020b2:	6013      	str	r3, [r2, #0]
 80020b4:	4b33      	ldr	r3, [pc, #204]	@ (8002184 <HAL_RCC_OscConfig+0x270>)
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	6a1b      	ldr	r3, [r3, #32]
 80020c0:	4930      	ldr	r1, [pc, #192]	@ (8002184 <HAL_RCC_OscConfig+0x270>)
 80020c2:	4313      	orrs	r3, r2
 80020c4:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80020c6:	4b2f      	ldr	r3, [pc, #188]	@ (8002184 <HAL_RCC_OscConfig+0x270>)
 80020c8:	685b      	ldr	r3, [r3, #4]
 80020ca:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	69db      	ldr	r3, [r3, #28]
 80020d2:	021b      	lsls	r3, r3, #8
 80020d4:	492b      	ldr	r1, [pc, #172]	@ (8002184 <HAL_RCC_OscConfig+0x270>)
 80020d6:	4313      	orrs	r3, r2
 80020d8:	604b      	str	r3, [r1, #4]
 80020da:	e01a      	b.n	8002112 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80020dc:	4b29      	ldr	r3, [pc, #164]	@ (8002184 <HAL_RCC_OscConfig+0x270>)
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	4a28      	ldr	r2, [pc, #160]	@ (8002184 <HAL_RCC_OscConfig+0x270>)
 80020e2:	f023 0301 	bic.w	r3, r3, #1
 80020e6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80020e8:	f7ff f81c 	bl	8001124 <HAL_GetTick>
 80020ec:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80020ee:	e008      	b.n	8002102 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80020f0:	f7ff f818 	bl	8001124 <HAL_GetTick>
 80020f4:	4602      	mov	r2, r0
 80020f6:	693b      	ldr	r3, [r7, #16]
 80020f8:	1ad3      	subs	r3, r2, r3
 80020fa:	2b02      	cmp	r3, #2
 80020fc:	d901      	bls.n	8002102 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80020fe:	2303      	movs	r3, #3
 8002100:	e314      	b.n	800272c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002102:	4b20      	ldr	r3, [pc, #128]	@ (8002184 <HAL_RCC_OscConfig+0x270>)
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f003 0302 	and.w	r3, r3, #2
 800210a:	2b00      	cmp	r3, #0
 800210c:	d1f0      	bne.n	80020f0 <HAL_RCC_OscConfig+0x1dc>
 800210e:	e000      	b.n	8002112 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002110:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f003 0301 	and.w	r3, r3, #1
 800211a:	2b00      	cmp	r3, #0
 800211c:	d073      	beq.n	8002206 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800211e:	69bb      	ldr	r3, [r7, #24]
 8002120:	2b08      	cmp	r3, #8
 8002122:	d005      	beq.n	8002130 <HAL_RCC_OscConfig+0x21c>
 8002124:	69bb      	ldr	r3, [r7, #24]
 8002126:	2b0c      	cmp	r3, #12
 8002128:	d10e      	bne.n	8002148 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800212a:	697b      	ldr	r3, [r7, #20]
 800212c:	2b03      	cmp	r3, #3
 800212e:	d10b      	bne.n	8002148 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002130:	4b14      	ldr	r3, [pc, #80]	@ (8002184 <HAL_RCC_OscConfig+0x270>)
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002138:	2b00      	cmp	r3, #0
 800213a:	d063      	beq.n	8002204 <HAL_RCC_OscConfig+0x2f0>
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	685b      	ldr	r3, [r3, #4]
 8002140:	2b00      	cmp	r3, #0
 8002142:	d15f      	bne.n	8002204 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002144:	2301      	movs	r3, #1
 8002146:	e2f1      	b.n	800272c <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	685b      	ldr	r3, [r3, #4]
 800214c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002150:	d106      	bne.n	8002160 <HAL_RCC_OscConfig+0x24c>
 8002152:	4b0c      	ldr	r3, [pc, #48]	@ (8002184 <HAL_RCC_OscConfig+0x270>)
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	4a0b      	ldr	r2, [pc, #44]	@ (8002184 <HAL_RCC_OscConfig+0x270>)
 8002158:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800215c:	6013      	str	r3, [r2, #0]
 800215e:	e025      	b.n	80021ac <HAL_RCC_OscConfig+0x298>
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	685b      	ldr	r3, [r3, #4]
 8002164:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002168:	d114      	bne.n	8002194 <HAL_RCC_OscConfig+0x280>
 800216a:	4b06      	ldr	r3, [pc, #24]	@ (8002184 <HAL_RCC_OscConfig+0x270>)
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	4a05      	ldr	r2, [pc, #20]	@ (8002184 <HAL_RCC_OscConfig+0x270>)
 8002170:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002174:	6013      	str	r3, [r2, #0]
 8002176:	4b03      	ldr	r3, [pc, #12]	@ (8002184 <HAL_RCC_OscConfig+0x270>)
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	4a02      	ldr	r2, [pc, #8]	@ (8002184 <HAL_RCC_OscConfig+0x270>)
 800217c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002180:	6013      	str	r3, [r2, #0]
 8002182:	e013      	b.n	80021ac <HAL_RCC_OscConfig+0x298>
 8002184:	40021000 	.word	0x40021000
 8002188:	0800ab5c 	.word	0x0800ab5c
 800218c:	20000000 	.word	0x20000000
 8002190:	20000004 	.word	0x20000004
 8002194:	4ba0      	ldr	r3, [pc, #640]	@ (8002418 <HAL_RCC_OscConfig+0x504>)
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	4a9f      	ldr	r2, [pc, #636]	@ (8002418 <HAL_RCC_OscConfig+0x504>)
 800219a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800219e:	6013      	str	r3, [r2, #0]
 80021a0:	4b9d      	ldr	r3, [pc, #628]	@ (8002418 <HAL_RCC_OscConfig+0x504>)
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	4a9c      	ldr	r2, [pc, #624]	@ (8002418 <HAL_RCC_OscConfig+0x504>)
 80021a6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80021aa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	685b      	ldr	r3, [r3, #4]
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d013      	beq.n	80021dc <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021b4:	f7fe ffb6 	bl	8001124 <HAL_GetTick>
 80021b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80021ba:	e008      	b.n	80021ce <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80021bc:	f7fe ffb2 	bl	8001124 <HAL_GetTick>
 80021c0:	4602      	mov	r2, r0
 80021c2:	693b      	ldr	r3, [r7, #16]
 80021c4:	1ad3      	subs	r3, r2, r3
 80021c6:	2b64      	cmp	r3, #100	@ 0x64
 80021c8:	d901      	bls.n	80021ce <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80021ca:	2303      	movs	r3, #3
 80021cc:	e2ae      	b.n	800272c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80021ce:	4b92      	ldr	r3, [pc, #584]	@ (8002418 <HAL_RCC_OscConfig+0x504>)
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d0f0      	beq.n	80021bc <HAL_RCC_OscConfig+0x2a8>
 80021da:	e014      	b.n	8002206 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021dc:	f7fe ffa2 	bl	8001124 <HAL_GetTick>
 80021e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80021e2:	e008      	b.n	80021f6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80021e4:	f7fe ff9e 	bl	8001124 <HAL_GetTick>
 80021e8:	4602      	mov	r2, r0
 80021ea:	693b      	ldr	r3, [r7, #16]
 80021ec:	1ad3      	subs	r3, r2, r3
 80021ee:	2b64      	cmp	r3, #100	@ 0x64
 80021f0:	d901      	bls.n	80021f6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80021f2:	2303      	movs	r3, #3
 80021f4:	e29a      	b.n	800272c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80021f6:	4b88      	ldr	r3, [pc, #544]	@ (8002418 <HAL_RCC_OscConfig+0x504>)
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d1f0      	bne.n	80021e4 <HAL_RCC_OscConfig+0x2d0>
 8002202:	e000      	b.n	8002206 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002204:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f003 0302 	and.w	r3, r3, #2
 800220e:	2b00      	cmp	r3, #0
 8002210:	d060      	beq.n	80022d4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002212:	69bb      	ldr	r3, [r7, #24]
 8002214:	2b04      	cmp	r3, #4
 8002216:	d005      	beq.n	8002224 <HAL_RCC_OscConfig+0x310>
 8002218:	69bb      	ldr	r3, [r7, #24]
 800221a:	2b0c      	cmp	r3, #12
 800221c:	d119      	bne.n	8002252 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800221e:	697b      	ldr	r3, [r7, #20]
 8002220:	2b02      	cmp	r3, #2
 8002222:	d116      	bne.n	8002252 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002224:	4b7c      	ldr	r3, [pc, #496]	@ (8002418 <HAL_RCC_OscConfig+0x504>)
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800222c:	2b00      	cmp	r3, #0
 800222e:	d005      	beq.n	800223c <HAL_RCC_OscConfig+0x328>
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	68db      	ldr	r3, [r3, #12]
 8002234:	2b00      	cmp	r3, #0
 8002236:	d101      	bne.n	800223c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002238:	2301      	movs	r3, #1
 800223a:	e277      	b.n	800272c <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800223c:	4b76      	ldr	r3, [pc, #472]	@ (8002418 <HAL_RCC_OscConfig+0x504>)
 800223e:	685b      	ldr	r3, [r3, #4]
 8002240:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	691b      	ldr	r3, [r3, #16]
 8002248:	061b      	lsls	r3, r3, #24
 800224a:	4973      	ldr	r1, [pc, #460]	@ (8002418 <HAL_RCC_OscConfig+0x504>)
 800224c:	4313      	orrs	r3, r2
 800224e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002250:	e040      	b.n	80022d4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	68db      	ldr	r3, [r3, #12]
 8002256:	2b00      	cmp	r3, #0
 8002258:	d023      	beq.n	80022a2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800225a:	4b6f      	ldr	r3, [pc, #444]	@ (8002418 <HAL_RCC_OscConfig+0x504>)
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	4a6e      	ldr	r2, [pc, #440]	@ (8002418 <HAL_RCC_OscConfig+0x504>)
 8002260:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002264:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002266:	f7fe ff5d 	bl	8001124 <HAL_GetTick>
 800226a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800226c:	e008      	b.n	8002280 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800226e:	f7fe ff59 	bl	8001124 <HAL_GetTick>
 8002272:	4602      	mov	r2, r0
 8002274:	693b      	ldr	r3, [r7, #16]
 8002276:	1ad3      	subs	r3, r2, r3
 8002278:	2b02      	cmp	r3, #2
 800227a:	d901      	bls.n	8002280 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800227c:	2303      	movs	r3, #3
 800227e:	e255      	b.n	800272c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002280:	4b65      	ldr	r3, [pc, #404]	@ (8002418 <HAL_RCC_OscConfig+0x504>)
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002288:	2b00      	cmp	r3, #0
 800228a:	d0f0      	beq.n	800226e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800228c:	4b62      	ldr	r3, [pc, #392]	@ (8002418 <HAL_RCC_OscConfig+0x504>)
 800228e:	685b      	ldr	r3, [r3, #4]
 8002290:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	691b      	ldr	r3, [r3, #16]
 8002298:	061b      	lsls	r3, r3, #24
 800229a:	495f      	ldr	r1, [pc, #380]	@ (8002418 <HAL_RCC_OscConfig+0x504>)
 800229c:	4313      	orrs	r3, r2
 800229e:	604b      	str	r3, [r1, #4]
 80022a0:	e018      	b.n	80022d4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80022a2:	4b5d      	ldr	r3, [pc, #372]	@ (8002418 <HAL_RCC_OscConfig+0x504>)
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	4a5c      	ldr	r2, [pc, #368]	@ (8002418 <HAL_RCC_OscConfig+0x504>)
 80022a8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80022ac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022ae:	f7fe ff39 	bl	8001124 <HAL_GetTick>
 80022b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80022b4:	e008      	b.n	80022c8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80022b6:	f7fe ff35 	bl	8001124 <HAL_GetTick>
 80022ba:	4602      	mov	r2, r0
 80022bc:	693b      	ldr	r3, [r7, #16]
 80022be:	1ad3      	subs	r3, r2, r3
 80022c0:	2b02      	cmp	r3, #2
 80022c2:	d901      	bls.n	80022c8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80022c4:	2303      	movs	r3, #3
 80022c6:	e231      	b.n	800272c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80022c8:	4b53      	ldr	r3, [pc, #332]	@ (8002418 <HAL_RCC_OscConfig+0x504>)
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d1f0      	bne.n	80022b6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f003 0308 	and.w	r3, r3, #8
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d03c      	beq.n	800235a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	695b      	ldr	r3, [r3, #20]
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d01c      	beq.n	8002322 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80022e8:	4b4b      	ldr	r3, [pc, #300]	@ (8002418 <HAL_RCC_OscConfig+0x504>)
 80022ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80022ee:	4a4a      	ldr	r2, [pc, #296]	@ (8002418 <HAL_RCC_OscConfig+0x504>)
 80022f0:	f043 0301 	orr.w	r3, r3, #1
 80022f4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022f8:	f7fe ff14 	bl	8001124 <HAL_GetTick>
 80022fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80022fe:	e008      	b.n	8002312 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002300:	f7fe ff10 	bl	8001124 <HAL_GetTick>
 8002304:	4602      	mov	r2, r0
 8002306:	693b      	ldr	r3, [r7, #16]
 8002308:	1ad3      	subs	r3, r2, r3
 800230a:	2b02      	cmp	r3, #2
 800230c:	d901      	bls.n	8002312 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800230e:	2303      	movs	r3, #3
 8002310:	e20c      	b.n	800272c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002312:	4b41      	ldr	r3, [pc, #260]	@ (8002418 <HAL_RCC_OscConfig+0x504>)
 8002314:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002318:	f003 0302 	and.w	r3, r3, #2
 800231c:	2b00      	cmp	r3, #0
 800231e:	d0ef      	beq.n	8002300 <HAL_RCC_OscConfig+0x3ec>
 8002320:	e01b      	b.n	800235a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002322:	4b3d      	ldr	r3, [pc, #244]	@ (8002418 <HAL_RCC_OscConfig+0x504>)
 8002324:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002328:	4a3b      	ldr	r2, [pc, #236]	@ (8002418 <HAL_RCC_OscConfig+0x504>)
 800232a:	f023 0301 	bic.w	r3, r3, #1
 800232e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002332:	f7fe fef7 	bl	8001124 <HAL_GetTick>
 8002336:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002338:	e008      	b.n	800234c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800233a:	f7fe fef3 	bl	8001124 <HAL_GetTick>
 800233e:	4602      	mov	r2, r0
 8002340:	693b      	ldr	r3, [r7, #16]
 8002342:	1ad3      	subs	r3, r2, r3
 8002344:	2b02      	cmp	r3, #2
 8002346:	d901      	bls.n	800234c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002348:	2303      	movs	r3, #3
 800234a:	e1ef      	b.n	800272c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800234c:	4b32      	ldr	r3, [pc, #200]	@ (8002418 <HAL_RCC_OscConfig+0x504>)
 800234e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002352:	f003 0302 	and.w	r3, r3, #2
 8002356:	2b00      	cmp	r3, #0
 8002358:	d1ef      	bne.n	800233a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f003 0304 	and.w	r3, r3, #4
 8002362:	2b00      	cmp	r3, #0
 8002364:	f000 80a6 	beq.w	80024b4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002368:	2300      	movs	r3, #0
 800236a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800236c:	4b2a      	ldr	r3, [pc, #168]	@ (8002418 <HAL_RCC_OscConfig+0x504>)
 800236e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002370:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002374:	2b00      	cmp	r3, #0
 8002376:	d10d      	bne.n	8002394 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002378:	4b27      	ldr	r3, [pc, #156]	@ (8002418 <HAL_RCC_OscConfig+0x504>)
 800237a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800237c:	4a26      	ldr	r2, [pc, #152]	@ (8002418 <HAL_RCC_OscConfig+0x504>)
 800237e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002382:	6593      	str	r3, [r2, #88]	@ 0x58
 8002384:	4b24      	ldr	r3, [pc, #144]	@ (8002418 <HAL_RCC_OscConfig+0x504>)
 8002386:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002388:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800238c:	60bb      	str	r3, [r7, #8]
 800238e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002390:	2301      	movs	r3, #1
 8002392:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002394:	4b21      	ldr	r3, [pc, #132]	@ (800241c <HAL_RCC_OscConfig+0x508>)
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800239c:	2b00      	cmp	r3, #0
 800239e:	d118      	bne.n	80023d2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80023a0:	4b1e      	ldr	r3, [pc, #120]	@ (800241c <HAL_RCC_OscConfig+0x508>)
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	4a1d      	ldr	r2, [pc, #116]	@ (800241c <HAL_RCC_OscConfig+0x508>)
 80023a6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80023aa:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80023ac:	f7fe feba 	bl	8001124 <HAL_GetTick>
 80023b0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80023b2:	e008      	b.n	80023c6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80023b4:	f7fe feb6 	bl	8001124 <HAL_GetTick>
 80023b8:	4602      	mov	r2, r0
 80023ba:	693b      	ldr	r3, [r7, #16]
 80023bc:	1ad3      	subs	r3, r2, r3
 80023be:	2b02      	cmp	r3, #2
 80023c0:	d901      	bls.n	80023c6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80023c2:	2303      	movs	r3, #3
 80023c4:	e1b2      	b.n	800272c <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80023c6:	4b15      	ldr	r3, [pc, #84]	@ (800241c <HAL_RCC_OscConfig+0x508>)
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d0f0      	beq.n	80023b4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	689b      	ldr	r3, [r3, #8]
 80023d6:	2b01      	cmp	r3, #1
 80023d8:	d108      	bne.n	80023ec <HAL_RCC_OscConfig+0x4d8>
 80023da:	4b0f      	ldr	r3, [pc, #60]	@ (8002418 <HAL_RCC_OscConfig+0x504>)
 80023dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80023e0:	4a0d      	ldr	r2, [pc, #52]	@ (8002418 <HAL_RCC_OscConfig+0x504>)
 80023e2:	f043 0301 	orr.w	r3, r3, #1
 80023e6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80023ea:	e029      	b.n	8002440 <HAL_RCC_OscConfig+0x52c>
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	689b      	ldr	r3, [r3, #8]
 80023f0:	2b05      	cmp	r3, #5
 80023f2:	d115      	bne.n	8002420 <HAL_RCC_OscConfig+0x50c>
 80023f4:	4b08      	ldr	r3, [pc, #32]	@ (8002418 <HAL_RCC_OscConfig+0x504>)
 80023f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80023fa:	4a07      	ldr	r2, [pc, #28]	@ (8002418 <HAL_RCC_OscConfig+0x504>)
 80023fc:	f043 0304 	orr.w	r3, r3, #4
 8002400:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002404:	4b04      	ldr	r3, [pc, #16]	@ (8002418 <HAL_RCC_OscConfig+0x504>)
 8002406:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800240a:	4a03      	ldr	r2, [pc, #12]	@ (8002418 <HAL_RCC_OscConfig+0x504>)
 800240c:	f043 0301 	orr.w	r3, r3, #1
 8002410:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002414:	e014      	b.n	8002440 <HAL_RCC_OscConfig+0x52c>
 8002416:	bf00      	nop
 8002418:	40021000 	.word	0x40021000
 800241c:	40007000 	.word	0x40007000
 8002420:	4b9a      	ldr	r3, [pc, #616]	@ (800268c <HAL_RCC_OscConfig+0x778>)
 8002422:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002426:	4a99      	ldr	r2, [pc, #612]	@ (800268c <HAL_RCC_OscConfig+0x778>)
 8002428:	f023 0301 	bic.w	r3, r3, #1
 800242c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002430:	4b96      	ldr	r3, [pc, #600]	@ (800268c <HAL_RCC_OscConfig+0x778>)
 8002432:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002436:	4a95      	ldr	r2, [pc, #596]	@ (800268c <HAL_RCC_OscConfig+0x778>)
 8002438:	f023 0304 	bic.w	r3, r3, #4
 800243c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	689b      	ldr	r3, [r3, #8]
 8002444:	2b00      	cmp	r3, #0
 8002446:	d016      	beq.n	8002476 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002448:	f7fe fe6c 	bl	8001124 <HAL_GetTick>
 800244c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800244e:	e00a      	b.n	8002466 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002450:	f7fe fe68 	bl	8001124 <HAL_GetTick>
 8002454:	4602      	mov	r2, r0
 8002456:	693b      	ldr	r3, [r7, #16]
 8002458:	1ad3      	subs	r3, r2, r3
 800245a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800245e:	4293      	cmp	r3, r2
 8002460:	d901      	bls.n	8002466 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002462:	2303      	movs	r3, #3
 8002464:	e162      	b.n	800272c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002466:	4b89      	ldr	r3, [pc, #548]	@ (800268c <HAL_RCC_OscConfig+0x778>)
 8002468:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800246c:	f003 0302 	and.w	r3, r3, #2
 8002470:	2b00      	cmp	r3, #0
 8002472:	d0ed      	beq.n	8002450 <HAL_RCC_OscConfig+0x53c>
 8002474:	e015      	b.n	80024a2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002476:	f7fe fe55 	bl	8001124 <HAL_GetTick>
 800247a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800247c:	e00a      	b.n	8002494 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800247e:	f7fe fe51 	bl	8001124 <HAL_GetTick>
 8002482:	4602      	mov	r2, r0
 8002484:	693b      	ldr	r3, [r7, #16]
 8002486:	1ad3      	subs	r3, r2, r3
 8002488:	f241 3288 	movw	r2, #5000	@ 0x1388
 800248c:	4293      	cmp	r3, r2
 800248e:	d901      	bls.n	8002494 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002490:	2303      	movs	r3, #3
 8002492:	e14b      	b.n	800272c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002494:	4b7d      	ldr	r3, [pc, #500]	@ (800268c <HAL_RCC_OscConfig+0x778>)
 8002496:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800249a:	f003 0302 	and.w	r3, r3, #2
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d1ed      	bne.n	800247e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80024a2:	7ffb      	ldrb	r3, [r7, #31]
 80024a4:	2b01      	cmp	r3, #1
 80024a6:	d105      	bne.n	80024b4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80024a8:	4b78      	ldr	r3, [pc, #480]	@ (800268c <HAL_RCC_OscConfig+0x778>)
 80024aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024ac:	4a77      	ldr	r2, [pc, #476]	@ (800268c <HAL_RCC_OscConfig+0x778>)
 80024ae:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80024b2:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f003 0320 	and.w	r3, r3, #32
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d03c      	beq.n	800253a <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d01c      	beq.n	8002502 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80024c8:	4b70      	ldr	r3, [pc, #448]	@ (800268c <HAL_RCC_OscConfig+0x778>)
 80024ca:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80024ce:	4a6f      	ldr	r2, [pc, #444]	@ (800268c <HAL_RCC_OscConfig+0x778>)
 80024d0:	f043 0301 	orr.w	r3, r3, #1
 80024d4:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024d8:	f7fe fe24 	bl	8001124 <HAL_GetTick>
 80024dc:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80024de:	e008      	b.n	80024f2 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80024e0:	f7fe fe20 	bl	8001124 <HAL_GetTick>
 80024e4:	4602      	mov	r2, r0
 80024e6:	693b      	ldr	r3, [r7, #16]
 80024e8:	1ad3      	subs	r3, r2, r3
 80024ea:	2b02      	cmp	r3, #2
 80024ec:	d901      	bls.n	80024f2 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80024ee:	2303      	movs	r3, #3
 80024f0:	e11c      	b.n	800272c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80024f2:	4b66      	ldr	r3, [pc, #408]	@ (800268c <HAL_RCC_OscConfig+0x778>)
 80024f4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80024f8:	f003 0302 	and.w	r3, r3, #2
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d0ef      	beq.n	80024e0 <HAL_RCC_OscConfig+0x5cc>
 8002500:	e01b      	b.n	800253a <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002502:	4b62      	ldr	r3, [pc, #392]	@ (800268c <HAL_RCC_OscConfig+0x778>)
 8002504:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002508:	4a60      	ldr	r2, [pc, #384]	@ (800268c <HAL_RCC_OscConfig+0x778>)
 800250a:	f023 0301 	bic.w	r3, r3, #1
 800250e:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002512:	f7fe fe07 	bl	8001124 <HAL_GetTick>
 8002516:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002518:	e008      	b.n	800252c <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800251a:	f7fe fe03 	bl	8001124 <HAL_GetTick>
 800251e:	4602      	mov	r2, r0
 8002520:	693b      	ldr	r3, [r7, #16]
 8002522:	1ad3      	subs	r3, r2, r3
 8002524:	2b02      	cmp	r3, #2
 8002526:	d901      	bls.n	800252c <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8002528:	2303      	movs	r3, #3
 800252a:	e0ff      	b.n	800272c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800252c:	4b57      	ldr	r3, [pc, #348]	@ (800268c <HAL_RCC_OscConfig+0x778>)
 800252e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002532:	f003 0302 	and.w	r3, r3, #2
 8002536:	2b00      	cmp	r3, #0
 8002538:	d1ef      	bne.n	800251a <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800253e:	2b00      	cmp	r3, #0
 8002540:	f000 80f3 	beq.w	800272a <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002548:	2b02      	cmp	r3, #2
 800254a:	f040 80c9 	bne.w	80026e0 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800254e:	4b4f      	ldr	r3, [pc, #316]	@ (800268c <HAL_RCC_OscConfig+0x778>)
 8002550:	68db      	ldr	r3, [r3, #12]
 8002552:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002554:	697b      	ldr	r3, [r7, #20]
 8002556:	f003 0203 	and.w	r2, r3, #3
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800255e:	429a      	cmp	r2, r3
 8002560:	d12c      	bne.n	80025bc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002562:	697b      	ldr	r3, [r7, #20]
 8002564:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800256c:	3b01      	subs	r3, #1
 800256e:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002570:	429a      	cmp	r2, r3
 8002572:	d123      	bne.n	80025bc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002574:	697b      	ldr	r3, [r7, #20]
 8002576:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800257e:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002580:	429a      	cmp	r2, r3
 8002582:	d11b      	bne.n	80025bc <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002584:	697b      	ldr	r3, [r7, #20]
 8002586:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800258e:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002590:	429a      	cmp	r2, r3
 8002592:	d113      	bne.n	80025bc <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002594:	697b      	ldr	r3, [r7, #20]
 8002596:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800259e:	085b      	lsrs	r3, r3, #1
 80025a0:	3b01      	subs	r3, #1
 80025a2:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80025a4:	429a      	cmp	r2, r3
 80025a6:	d109      	bne.n	80025bc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80025a8:	697b      	ldr	r3, [r7, #20]
 80025aa:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025b2:	085b      	lsrs	r3, r3, #1
 80025b4:	3b01      	subs	r3, #1
 80025b6:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80025b8:	429a      	cmp	r2, r3
 80025ba:	d06b      	beq.n	8002694 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80025bc:	69bb      	ldr	r3, [r7, #24]
 80025be:	2b0c      	cmp	r3, #12
 80025c0:	d062      	beq.n	8002688 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80025c2:	4b32      	ldr	r3, [pc, #200]	@ (800268c <HAL_RCC_OscConfig+0x778>)
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d001      	beq.n	80025d2 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 80025ce:	2301      	movs	r3, #1
 80025d0:	e0ac      	b.n	800272c <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80025d2:	4b2e      	ldr	r3, [pc, #184]	@ (800268c <HAL_RCC_OscConfig+0x778>)
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	4a2d      	ldr	r2, [pc, #180]	@ (800268c <HAL_RCC_OscConfig+0x778>)
 80025d8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80025dc:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80025de:	f7fe fda1 	bl	8001124 <HAL_GetTick>
 80025e2:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80025e4:	e008      	b.n	80025f8 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025e6:	f7fe fd9d 	bl	8001124 <HAL_GetTick>
 80025ea:	4602      	mov	r2, r0
 80025ec:	693b      	ldr	r3, [r7, #16]
 80025ee:	1ad3      	subs	r3, r2, r3
 80025f0:	2b02      	cmp	r3, #2
 80025f2:	d901      	bls.n	80025f8 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 80025f4:	2303      	movs	r3, #3
 80025f6:	e099      	b.n	800272c <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80025f8:	4b24      	ldr	r3, [pc, #144]	@ (800268c <HAL_RCC_OscConfig+0x778>)
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002600:	2b00      	cmp	r3, #0
 8002602:	d1f0      	bne.n	80025e6 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002604:	4b21      	ldr	r3, [pc, #132]	@ (800268c <HAL_RCC_OscConfig+0x778>)
 8002606:	68da      	ldr	r2, [r3, #12]
 8002608:	4b21      	ldr	r3, [pc, #132]	@ (8002690 <HAL_RCC_OscConfig+0x77c>)
 800260a:	4013      	ands	r3, r2
 800260c:	687a      	ldr	r2, [r7, #4]
 800260e:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8002610:	687a      	ldr	r2, [r7, #4]
 8002612:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002614:	3a01      	subs	r2, #1
 8002616:	0112      	lsls	r2, r2, #4
 8002618:	4311      	orrs	r1, r2
 800261a:	687a      	ldr	r2, [r7, #4]
 800261c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800261e:	0212      	lsls	r2, r2, #8
 8002620:	4311      	orrs	r1, r2
 8002622:	687a      	ldr	r2, [r7, #4]
 8002624:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002626:	0852      	lsrs	r2, r2, #1
 8002628:	3a01      	subs	r2, #1
 800262a:	0552      	lsls	r2, r2, #21
 800262c:	4311      	orrs	r1, r2
 800262e:	687a      	ldr	r2, [r7, #4]
 8002630:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002632:	0852      	lsrs	r2, r2, #1
 8002634:	3a01      	subs	r2, #1
 8002636:	0652      	lsls	r2, r2, #25
 8002638:	4311      	orrs	r1, r2
 800263a:	687a      	ldr	r2, [r7, #4]
 800263c:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800263e:	06d2      	lsls	r2, r2, #27
 8002640:	430a      	orrs	r2, r1
 8002642:	4912      	ldr	r1, [pc, #72]	@ (800268c <HAL_RCC_OscConfig+0x778>)
 8002644:	4313      	orrs	r3, r2
 8002646:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002648:	4b10      	ldr	r3, [pc, #64]	@ (800268c <HAL_RCC_OscConfig+0x778>)
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	4a0f      	ldr	r2, [pc, #60]	@ (800268c <HAL_RCC_OscConfig+0x778>)
 800264e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002652:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002654:	4b0d      	ldr	r3, [pc, #52]	@ (800268c <HAL_RCC_OscConfig+0x778>)
 8002656:	68db      	ldr	r3, [r3, #12]
 8002658:	4a0c      	ldr	r2, [pc, #48]	@ (800268c <HAL_RCC_OscConfig+0x778>)
 800265a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800265e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002660:	f7fe fd60 	bl	8001124 <HAL_GetTick>
 8002664:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002666:	e008      	b.n	800267a <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002668:	f7fe fd5c 	bl	8001124 <HAL_GetTick>
 800266c:	4602      	mov	r2, r0
 800266e:	693b      	ldr	r3, [r7, #16]
 8002670:	1ad3      	subs	r3, r2, r3
 8002672:	2b02      	cmp	r3, #2
 8002674:	d901      	bls.n	800267a <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8002676:	2303      	movs	r3, #3
 8002678:	e058      	b.n	800272c <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800267a:	4b04      	ldr	r3, [pc, #16]	@ (800268c <HAL_RCC_OscConfig+0x778>)
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002682:	2b00      	cmp	r3, #0
 8002684:	d0f0      	beq.n	8002668 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002686:	e050      	b.n	800272a <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002688:	2301      	movs	r3, #1
 800268a:	e04f      	b.n	800272c <HAL_RCC_OscConfig+0x818>
 800268c:	40021000 	.word	0x40021000
 8002690:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002694:	4b27      	ldr	r3, [pc, #156]	@ (8002734 <HAL_RCC_OscConfig+0x820>)
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800269c:	2b00      	cmp	r3, #0
 800269e:	d144      	bne.n	800272a <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80026a0:	4b24      	ldr	r3, [pc, #144]	@ (8002734 <HAL_RCC_OscConfig+0x820>)
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	4a23      	ldr	r2, [pc, #140]	@ (8002734 <HAL_RCC_OscConfig+0x820>)
 80026a6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80026aa:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80026ac:	4b21      	ldr	r3, [pc, #132]	@ (8002734 <HAL_RCC_OscConfig+0x820>)
 80026ae:	68db      	ldr	r3, [r3, #12]
 80026b0:	4a20      	ldr	r2, [pc, #128]	@ (8002734 <HAL_RCC_OscConfig+0x820>)
 80026b2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80026b6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80026b8:	f7fe fd34 	bl	8001124 <HAL_GetTick>
 80026bc:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80026be:	e008      	b.n	80026d2 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026c0:	f7fe fd30 	bl	8001124 <HAL_GetTick>
 80026c4:	4602      	mov	r2, r0
 80026c6:	693b      	ldr	r3, [r7, #16]
 80026c8:	1ad3      	subs	r3, r2, r3
 80026ca:	2b02      	cmp	r3, #2
 80026cc:	d901      	bls.n	80026d2 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 80026ce:	2303      	movs	r3, #3
 80026d0:	e02c      	b.n	800272c <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80026d2:	4b18      	ldr	r3, [pc, #96]	@ (8002734 <HAL_RCC_OscConfig+0x820>)
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d0f0      	beq.n	80026c0 <HAL_RCC_OscConfig+0x7ac>
 80026de:	e024      	b.n	800272a <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80026e0:	69bb      	ldr	r3, [r7, #24]
 80026e2:	2b0c      	cmp	r3, #12
 80026e4:	d01f      	beq.n	8002726 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026e6:	4b13      	ldr	r3, [pc, #76]	@ (8002734 <HAL_RCC_OscConfig+0x820>)
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	4a12      	ldr	r2, [pc, #72]	@ (8002734 <HAL_RCC_OscConfig+0x820>)
 80026ec:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80026f0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026f2:	f7fe fd17 	bl	8001124 <HAL_GetTick>
 80026f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80026f8:	e008      	b.n	800270c <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026fa:	f7fe fd13 	bl	8001124 <HAL_GetTick>
 80026fe:	4602      	mov	r2, r0
 8002700:	693b      	ldr	r3, [r7, #16]
 8002702:	1ad3      	subs	r3, r2, r3
 8002704:	2b02      	cmp	r3, #2
 8002706:	d901      	bls.n	800270c <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8002708:	2303      	movs	r3, #3
 800270a:	e00f      	b.n	800272c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800270c:	4b09      	ldr	r3, [pc, #36]	@ (8002734 <HAL_RCC_OscConfig+0x820>)
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002714:	2b00      	cmp	r3, #0
 8002716:	d1f0      	bne.n	80026fa <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8002718:	4b06      	ldr	r3, [pc, #24]	@ (8002734 <HAL_RCC_OscConfig+0x820>)
 800271a:	68da      	ldr	r2, [r3, #12]
 800271c:	4905      	ldr	r1, [pc, #20]	@ (8002734 <HAL_RCC_OscConfig+0x820>)
 800271e:	4b06      	ldr	r3, [pc, #24]	@ (8002738 <HAL_RCC_OscConfig+0x824>)
 8002720:	4013      	ands	r3, r2
 8002722:	60cb      	str	r3, [r1, #12]
 8002724:	e001      	b.n	800272a <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002726:	2301      	movs	r3, #1
 8002728:	e000      	b.n	800272c <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 800272a:	2300      	movs	r3, #0
}
 800272c:	4618      	mov	r0, r3
 800272e:	3720      	adds	r7, #32
 8002730:	46bd      	mov	sp, r7
 8002732:	bd80      	pop	{r7, pc}
 8002734:	40021000 	.word	0x40021000
 8002738:	feeefffc 	.word	0xfeeefffc

0800273c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800273c:	b580      	push	{r7, lr}
 800273e:	b084      	sub	sp, #16
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
 8002744:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	2b00      	cmp	r3, #0
 800274a:	d101      	bne.n	8002750 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800274c:	2301      	movs	r3, #1
 800274e:	e0e7      	b.n	8002920 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002750:	4b75      	ldr	r3, [pc, #468]	@ (8002928 <HAL_RCC_ClockConfig+0x1ec>)
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f003 0307 	and.w	r3, r3, #7
 8002758:	683a      	ldr	r2, [r7, #0]
 800275a:	429a      	cmp	r2, r3
 800275c:	d910      	bls.n	8002780 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800275e:	4b72      	ldr	r3, [pc, #456]	@ (8002928 <HAL_RCC_ClockConfig+0x1ec>)
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f023 0207 	bic.w	r2, r3, #7
 8002766:	4970      	ldr	r1, [pc, #448]	@ (8002928 <HAL_RCC_ClockConfig+0x1ec>)
 8002768:	683b      	ldr	r3, [r7, #0]
 800276a:	4313      	orrs	r3, r2
 800276c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800276e:	4b6e      	ldr	r3, [pc, #440]	@ (8002928 <HAL_RCC_ClockConfig+0x1ec>)
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f003 0307 	and.w	r3, r3, #7
 8002776:	683a      	ldr	r2, [r7, #0]
 8002778:	429a      	cmp	r2, r3
 800277a:	d001      	beq.n	8002780 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800277c:	2301      	movs	r3, #1
 800277e:	e0cf      	b.n	8002920 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f003 0302 	and.w	r3, r3, #2
 8002788:	2b00      	cmp	r3, #0
 800278a:	d010      	beq.n	80027ae <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	689a      	ldr	r2, [r3, #8]
 8002790:	4b66      	ldr	r3, [pc, #408]	@ (800292c <HAL_RCC_ClockConfig+0x1f0>)
 8002792:	689b      	ldr	r3, [r3, #8]
 8002794:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002798:	429a      	cmp	r2, r3
 800279a:	d908      	bls.n	80027ae <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800279c:	4b63      	ldr	r3, [pc, #396]	@ (800292c <HAL_RCC_ClockConfig+0x1f0>)
 800279e:	689b      	ldr	r3, [r3, #8]
 80027a0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	689b      	ldr	r3, [r3, #8]
 80027a8:	4960      	ldr	r1, [pc, #384]	@ (800292c <HAL_RCC_ClockConfig+0x1f0>)
 80027aa:	4313      	orrs	r3, r2
 80027ac:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f003 0301 	and.w	r3, r3, #1
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d04c      	beq.n	8002854 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	685b      	ldr	r3, [r3, #4]
 80027be:	2b03      	cmp	r3, #3
 80027c0:	d107      	bne.n	80027d2 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80027c2:	4b5a      	ldr	r3, [pc, #360]	@ (800292c <HAL_RCC_ClockConfig+0x1f0>)
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d121      	bne.n	8002812 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80027ce:	2301      	movs	r3, #1
 80027d0:	e0a6      	b.n	8002920 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	685b      	ldr	r3, [r3, #4]
 80027d6:	2b02      	cmp	r3, #2
 80027d8:	d107      	bne.n	80027ea <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80027da:	4b54      	ldr	r3, [pc, #336]	@ (800292c <HAL_RCC_ClockConfig+0x1f0>)
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d115      	bne.n	8002812 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80027e6:	2301      	movs	r3, #1
 80027e8:	e09a      	b.n	8002920 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	685b      	ldr	r3, [r3, #4]
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d107      	bne.n	8002802 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80027f2:	4b4e      	ldr	r3, [pc, #312]	@ (800292c <HAL_RCC_ClockConfig+0x1f0>)
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f003 0302 	and.w	r3, r3, #2
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d109      	bne.n	8002812 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80027fe:	2301      	movs	r3, #1
 8002800:	e08e      	b.n	8002920 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002802:	4b4a      	ldr	r3, [pc, #296]	@ (800292c <HAL_RCC_ClockConfig+0x1f0>)
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800280a:	2b00      	cmp	r3, #0
 800280c:	d101      	bne.n	8002812 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800280e:	2301      	movs	r3, #1
 8002810:	e086      	b.n	8002920 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002812:	4b46      	ldr	r3, [pc, #280]	@ (800292c <HAL_RCC_ClockConfig+0x1f0>)
 8002814:	689b      	ldr	r3, [r3, #8]
 8002816:	f023 0203 	bic.w	r2, r3, #3
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	685b      	ldr	r3, [r3, #4]
 800281e:	4943      	ldr	r1, [pc, #268]	@ (800292c <HAL_RCC_ClockConfig+0x1f0>)
 8002820:	4313      	orrs	r3, r2
 8002822:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002824:	f7fe fc7e 	bl	8001124 <HAL_GetTick>
 8002828:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800282a:	e00a      	b.n	8002842 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800282c:	f7fe fc7a 	bl	8001124 <HAL_GetTick>
 8002830:	4602      	mov	r2, r0
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	1ad3      	subs	r3, r2, r3
 8002836:	f241 3288 	movw	r2, #5000	@ 0x1388
 800283a:	4293      	cmp	r3, r2
 800283c:	d901      	bls.n	8002842 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800283e:	2303      	movs	r3, #3
 8002840:	e06e      	b.n	8002920 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002842:	4b3a      	ldr	r3, [pc, #232]	@ (800292c <HAL_RCC_ClockConfig+0x1f0>)
 8002844:	689b      	ldr	r3, [r3, #8]
 8002846:	f003 020c 	and.w	r2, r3, #12
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	685b      	ldr	r3, [r3, #4]
 800284e:	009b      	lsls	r3, r3, #2
 8002850:	429a      	cmp	r2, r3
 8002852:	d1eb      	bne.n	800282c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f003 0302 	and.w	r3, r3, #2
 800285c:	2b00      	cmp	r3, #0
 800285e:	d010      	beq.n	8002882 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	689a      	ldr	r2, [r3, #8]
 8002864:	4b31      	ldr	r3, [pc, #196]	@ (800292c <HAL_RCC_ClockConfig+0x1f0>)
 8002866:	689b      	ldr	r3, [r3, #8]
 8002868:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800286c:	429a      	cmp	r2, r3
 800286e:	d208      	bcs.n	8002882 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002870:	4b2e      	ldr	r3, [pc, #184]	@ (800292c <HAL_RCC_ClockConfig+0x1f0>)
 8002872:	689b      	ldr	r3, [r3, #8]
 8002874:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	689b      	ldr	r3, [r3, #8]
 800287c:	492b      	ldr	r1, [pc, #172]	@ (800292c <HAL_RCC_ClockConfig+0x1f0>)
 800287e:	4313      	orrs	r3, r2
 8002880:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002882:	4b29      	ldr	r3, [pc, #164]	@ (8002928 <HAL_RCC_ClockConfig+0x1ec>)
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f003 0307 	and.w	r3, r3, #7
 800288a:	683a      	ldr	r2, [r7, #0]
 800288c:	429a      	cmp	r2, r3
 800288e:	d210      	bcs.n	80028b2 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002890:	4b25      	ldr	r3, [pc, #148]	@ (8002928 <HAL_RCC_ClockConfig+0x1ec>)
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f023 0207 	bic.w	r2, r3, #7
 8002898:	4923      	ldr	r1, [pc, #140]	@ (8002928 <HAL_RCC_ClockConfig+0x1ec>)
 800289a:	683b      	ldr	r3, [r7, #0]
 800289c:	4313      	orrs	r3, r2
 800289e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80028a0:	4b21      	ldr	r3, [pc, #132]	@ (8002928 <HAL_RCC_ClockConfig+0x1ec>)
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f003 0307 	and.w	r3, r3, #7
 80028a8:	683a      	ldr	r2, [r7, #0]
 80028aa:	429a      	cmp	r2, r3
 80028ac:	d001      	beq.n	80028b2 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80028ae:	2301      	movs	r3, #1
 80028b0:	e036      	b.n	8002920 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f003 0304 	and.w	r3, r3, #4
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d008      	beq.n	80028d0 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80028be:	4b1b      	ldr	r3, [pc, #108]	@ (800292c <HAL_RCC_ClockConfig+0x1f0>)
 80028c0:	689b      	ldr	r3, [r3, #8]
 80028c2:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	68db      	ldr	r3, [r3, #12]
 80028ca:	4918      	ldr	r1, [pc, #96]	@ (800292c <HAL_RCC_ClockConfig+0x1f0>)
 80028cc:	4313      	orrs	r3, r2
 80028ce:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f003 0308 	and.w	r3, r3, #8
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d009      	beq.n	80028f0 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80028dc:	4b13      	ldr	r3, [pc, #76]	@ (800292c <HAL_RCC_ClockConfig+0x1f0>)
 80028de:	689b      	ldr	r3, [r3, #8]
 80028e0:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	691b      	ldr	r3, [r3, #16]
 80028e8:	00db      	lsls	r3, r3, #3
 80028ea:	4910      	ldr	r1, [pc, #64]	@ (800292c <HAL_RCC_ClockConfig+0x1f0>)
 80028ec:	4313      	orrs	r3, r2
 80028ee:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80028f0:	f000 f824 	bl	800293c <HAL_RCC_GetSysClockFreq>
 80028f4:	4602      	mov	r2, r0
 80028f6:	4b0d      	ldr	r3, [pc, #52]	@ (800292c <HAL_RCC_ClockConfig+0x1f0>)
 80028f8:	689b      	ldr	r3, [r3, #8]
 80028fa:	091b      	lsrs	r3, r3, #4
 80028fc:	f003 030f 	and.w	r3, r3, #15
 8002900:	490b      	ldr	r1, [pc, #44]	@ (8002930 <HAL_RCC_ClockConfig+0x1f4>)
 8002902:	5ccb      	ldrb	r3, [r1, r3]
 8002904:	f003 031f 	and.w	r3, r3, #31
 8002908:	fa22 f303 	lsr.w	r3, r2, r3
 800290c:	4a09      	ldr	r2, [pc, #36]	@ (8002934 <HAL_RCC_ClockConfig+0x1f8>)
 800290e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002910:	4b09      	ldr	r3, [pc, #36]	@ (8002938 <HAL_RCC_ClockConfig+0x1fc>)
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	4618      	mov	r0, r3
 8002916:	f7fe fbb5 	bl	8001084 <HAL_InitTick>
 800291a:	4603      	mov	r3, r0
 800291c:	72fb      	strb	r3, [r7, #11]

  return status;
 800291e:	7afb      	ldrb	r3, [r7, #11]
}
 8002920:	4618      	mov	r0, r3
 8002922:	3710      	adds	r7, #16
 8002924:	46bd      	mov	sp, r7
 8002926:	bd80      	pop	{r7, pc}
 8002928:	40022000 	.word	0x40022000
 800292c:	40021000 	.word	0x40021000
 8002930:	0800ab5c 	.word	0x0800ab5c
 8002934:	20000000 	.word	0x20000000
 8002938:	20000004 	.word	0x20000004

0800293c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800293c:	b480      	push	{r7}
 800293e:	b089      	sub	sp, #36	@ 0x24
 8002940:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002942:	2300      	movs	r3, #0
 8002944:	61fb      	str	r3, [r7, #28]
 8002946:	2300      	movs	r3, #0
 8002948:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800294a:	4b3e      	ldr	r3, [pc, #248]	@ (8002a44 <HAL_RCC_GetSysClockFreq+0x108>)
 800294c:	689b      	ldr	r3, [r3, #8]
 800294e:	f003 030c 	and.w	r3, r3, #12
 8002952:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002954:	4b3b      	ldr	r3, [pc, #236]	@ (8002a44 <HAL_RCC_GetSysClockFreq+0x108>)
 8002956:	68db      	ldr	r3, [r3, #12]
 8002958:	f003 0303 	and.w	r3, r3, #3
 800295c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800295e:	693b      	ldr	r3, [r7, #16]
 8002960:	2b00      	cmp	r3, #0
 8002962:	d005      	beq.n	8002970 <HAL_RCC_GetSysClockFreq+0x34>
 8002964:	693b      	ldr	r3, [r7, #16]
 8002966:	2b0c      	cmp	r3, #12
 8002968:	d121      	bne.n	80029ae <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	2b01      	cmp	r3, #1
 800296e:	d11e      	bne.n	80029ae <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002970:	4b34      	ldr	r3, [pc, #208]	@ (8002a44 <HAL_RCC_GetSysClockFreq+0x108>)
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f003 0308 	and.w	r3, r3, #8
 8002978:	2b00      	cmp	r3, #0
 800297a:	d107      	bne.n	800298c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800297c:	4b31      	ldr	r3, [pc, #196]	@ (8002a44 <HAL_RCC_GetSysClockFreq+0x108>)
 800297e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002982:	0a1b      	lsrs	r3, r3, #8
 8002984:	f003 030f 	and.w	r3, r3, #15
 8002988:	61fb      	str	r3, [r7, #28]
 800298a:	e005      	b.n	8002998 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800298c:	4b2d      	ldr	r3, [pc, #180]	@ (8002a44 <HAL_RCC_GetSysClockFreq+0x108>)
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	091b      	lsrs	r3, r3, #4
 8002992:	f003 030f 	and.w	r3, r3, #15
 8002996:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002998:	4a2b      	ldr	r2, [pc, #172]	@ (8002a48 <HAL_RCC_GetSysClockFreq+0x10c>)
 800299a:	69fb      	ldr	r3, [r7, #28]
 800299c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029a0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80029a2:	693b      	ldr	r3, [r7, #16]
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d10d      	bne.n	80029c4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80029a8:	69fb      	ldr	r3, [r7, #28]
 80029aa:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80029ac:	e00a      	b.n	80029c4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80029ae:	693b      	ldr	r3, [r7, #16]
 80029b0:	2b04      	cmp	r3, #4
 80029b2:	d102      	bne.n	80029ba <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80029b4:	4b25      	ldr	r3, [pc, #148]	@ (8002a4c <HAL_RCC_GetSysClockFreq+0x110>)
 80029b6:	61bb      	str	r3, [r7, #24]
 80029b8:	e004      	b.n	80029c4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80029ba:	693b      	ldr	r3, [r7, #16]
 80029bc:	2b08      	cmp	r3, #8
 80029be:	d101      	bne.n	80029c4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80029c0:	4b23      	ldr	r3, [pc, #140]	@ (8002a50 <HAL_RCC_GetSysClockFreq+0x114>)
 80029c2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80029c4:	693b      	ldr	r3, [r7, #16]
 80029c6:	2b0c      	cmp	r3, #12
 80029c8:	d134      	bne.n	8002a34 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80029ca:	4b1e      	ldr	r3, [pc, #120]	@ (8002a44 <HAL_RCC_GetSysClockFreq+0x108>)
 80029cc:	68db      	ldr	r3, [r3, #12]
 80029ce:	f003 0303 	and.w	r3, r3, #3
 80029d2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80029d4:	68bb      	ldr	r3, [r7, #8]
 80029d6:	2b02      	cmp	r3, #2
 80029d8:	d003      	beq.n	80029e2 <HAL_RCC_GetSysClockFreq+0xa6>
 80029da:	68bb      	ldr	r3, [r7, #8]
 80029dc:	2b03      	cmp	r3, #3
 80029de:	d003      	beq.n	80029e8 <HAL_RCC_GetSysClockFreq+0xac>
 80029e0:	e005      	b.n	80029ee <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80029e2:	4b1a      	ldr	r3, [pc, #104]	@ (8002a4c <HAL_RCC_GetSysClockFreq+0x110>)
 80029e4:	617b      	str	r3, [r7, #20]
      break;
 80029e6:	e005      	b.n	80029f4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80029e8:	4b19      	ldr	r3, [pc, #100]	@ (8002a50 <HAL_RCC_GetSysClockFreq+0x114>)
 80029ea:	617b      	str	r3, [r7, #20]
      break;
 80029ec:	e002      	b.n	80029f4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80029ee:	69fb      	ldr	r3, [r7, #28]
 80029f0:	617b      	str	r3, [r7, #20]
      break;
 80029f2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80029f4:	4b13      	ldr	r3, [pc, #76]	@ (8002a44 <HAL_RCC_GetSysClockFreq+0x108>)
 80029f6:	68db      	ldr	r3, [r3, #12]
 80029f8:	091b      	lsrs	r3, r3, #4
 80029fa:	f003 0307 	and.w	r3, r3, #7
 80029fe:	3301      	adds	r3, #1
 8002a00:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002a02:	4b10      	ldr	r3, [pc, #64]	@ (8002a44 <HAL_RCC_GetSysClockFreq+0x108>)
 8002a04:	68db      	ldr	r3, [r3, #12]
 8002a06:	0a1b      	lsrs	r3, r3, #8
 8002a08:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002a0c:	697a      	ldr	r2, [r7, #20]
 8002a0e:	fb03 f202 	mul.w	r2, r3, r2
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a18:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002a1a:	4b0a      	ldr	r3, [pc, #40]	@ (8002a44 <HAL_RCC_GetSysClockFreq+0x108>)
 8002a1c:	68db      	ldr	r3, [r3, #12]
 8002a1e:	0e5b      	lsrs	r3, r3, #25
 8002a20:	f003 0303 	and.w	r3, r3, #3
 8002a24:	3301      	adds	r3, #1
 8002a26:	005b      	lsls	r3, r3, #1
 8002a28:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002a2a:	697a      	ldr	r2, [r7, #20]
 8002a2c:	683b      	ldr	r3, [r7, #0]
 8002a2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a32:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002a34:	69bb      	ldr	r3, [r7, #24]
}
 8002a36:	4618      	mov	r0, r3
 8002a38:	3724      	adds	r7, #36	@ 0x24
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a40:	4770      	bx	lr
 8002a42:	bf00      	nop
 8002a44:	40021000 	.word	0x40021000
 8002a48:	0800ab74 	.word	0x0800ab74
 8002a4c:	00f42400 	.word	0x00f42400
 8002a50:	007a1200 	.word	0x007a1200

08002a54 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002a54:	b480      	push	{r7}
 8002a56:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002a58:	4b03      	ldr	r3, [pc, #12]	@ (8002a68 <HAL_RCC_GetHCLKFreq+0x14>)
 8002a5a:	681b      	ldr	r3, [r3, #0]
}
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a64:	4770      	bx	lr
 8002a66:	bf00      	nop
 8002a68:	20000000 	.word	0x20000000

08002a6c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002a70:	f7ff fff0 	bl	8002a54 <HAL_RCC_GetHCLKFreq>
 8002a74:	4602      	mov	r2, r0
 8002a76:	4b06      	ldr	r3, [pc, #24]	@ (8002a90 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002a78:	689b      	ldr	r3, [r3, #8]
 8002a7a:	0a1b      	lsrs	r3, r3, #8
 8002a7c:	f003 0307 	and.w	r3, r3, #7
 8002a80:	4904      	ldr	r1, [pc, #16]	@ (8002a94 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002a82:	5ccb      	ldrb	r3, [r1, r3]
 8002a84:	f003 031f 	and.w	r3, r3, #31
 8002a88:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	bd80      	pop	{r7, pc}
 8002a90:	40021000 	.word	0x40021000
 8002a94:	0800ab6c 	.word	0x0800ab6c

08002a98 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002a9c:	f7ff ffda 	bl	8002a54 <HAL_RCC_GetHCLKFreq>
 8002aa0:	4602      	mov	r2, r0
 8002aa2:	4b06      	ldr	r3, [pc, #24]	@ (8002abc <HAL_RCC_GetPCLK2Freq+0x24>)
 8002aa4:	689b      	ldr	r3, [r3, #8]
 8002aa6:	0adb      	lsrs	r3, r3, #11
 8002aa8:	f003 0307 	and.w	r3, r3, #7
 8002aac:	4904      	ldr	r1, [pc, #16]	@ (8002ac0 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002aae:	5ccb      	ldrb	r3, [r1, r3]
 8002ab0:	f003 031f 	and.w	r3, r3, #31
 8002ab4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ab8:	4618      	mov	r0, r3
 8002aba:	bd80      	pop	{r7, pc}
 8002abc:	40021000 	.word	0x40021000
 8002ac0:	0800ab6c 	.word	0x0800ab6c

08002ac4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	b086      	sub	sp, #24
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002acc:	2300      	movs	r3, #0
 8002ace:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002ad0:	4b2a      	ldr	r3, [pc, #168]	@ (8002b7c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002ad2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ad4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d003      	beq.n	8002ae4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002adc:	f7ff f9b6 	bl	8001e4c <HAL_PWREx_GetVoltageRange>
 8002ae0:	6178      	str	r0, [r7, #20]
 8002ae2:	e014      	b.n	8002b0e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002ae4:	4b25      	ldr	r3, [pc, #148]	@ (8002b7c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002ae6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ae8:	4a24      	ldr	r2, [pc, #144]	@ (8002b7c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002aea:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002aee:	6593      	str	r3, [r2, #88]	@ 0x58
 8002af0:	4b22      	ldr	r3, [pc, #136]	@ (8002b7c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002af2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002af4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002af8:	60fb      	str	r3, [r7, #12]
 8002afa:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002afc:	f7ff f9a6 	bl	8001e4c <HAL_PWREx_GetVoltageRange>
 8002b00:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002b02:	4b1e      	ldr	r3, [pc, #120]	@ (8002b7c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002b04:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b06:	4a1d      	ldr	r2, [pc, #116]	@ (8002b7c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002b08:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002b0c:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002b0e:	697b      	ldr	r3, [r7, #20]
 8002b10:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002b14:	d10b      	bne.n	8002b2e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	2b80      	cmp	r3, #128	@ 0x80
 8002b1a:	d919      	bls.n	8002b50 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	2ba0      	cmp	r3, #160	@ 0xa0
 8002b20:	d902      	bls.n	8002b28 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002b22:	2302      	movs	r3, #2
 8002b24:	613b      	str	r3, [r7, #16]
 8002b26:	e013      	b.n	8002b50 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002b28:	2301      	movs	r3, #1
 8002b2a:	613b      	str	r3, [r7, #16]
 8002b2c:	e010      	b.n	8002b50 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	2b80      	cmp	r3, #128	@ 0x80
 8002b32:	d902      	bls.n	8002b3a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002b34:	2303      	movs	r3, #3
 8002b36:	613b      	str	r3, [r7, #16]
 8002b38:	e00a      	b.n	8002b50 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	2b80      	cmp	r3, #128	@ 0x80
 8002b3e:	d102      	bne.n	8002b46 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002b40:	2302      	movs	r3, #2
 8002b42:	613b      	str	r3, [r7, #16]
 8002b44:	e004      	b.n	8002b50 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	2b70      	cmp	r3, #112	@ 0x70
 8002b4a:	d101      	bne.n	8002b50 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002b4c:	2301      	movs	r3, #1
 8002b4e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002b50:	4b0b      	ldr	r3, [pc, #44]	@ (8002b80 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f023 0207 	bic.w	r2, r3, #7
 8002b58:	4909      	ldr	r1, [pc, #36]	@ (8002b80 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002b5a:	693b      	ldr	r3, [r7, #16]
 8002b5c:	4313      	orrs	r3, r2
 8002b5e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002b60:	4b07      	ldr	r3, [pc, #28]	@ (8002b80 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f003 0307 	and.w	r3, r3, #7
 8002b68:	693a      	ldr	r2, [r7, #16]
 8002b6a:	429a      	cmp	r2, r3
 8002b6c:	d001      	beq.n	8002b72 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002b6e:	2301      	movs	r3, #1
 8002b70:	e000      	b.n	8002b74 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002b72:	2300      	movs	r3, #0
}
 8002b74:	4618      	mov	r0, r3
 8002b76:	3718      	adds	r7, #24
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	bd80      	pop	{r7, pc}
 8002b7c:	40021000 	.word	0x40021000
 8002b80:	40022000 	.word	0x40022000

08002b84 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	b086      	sub	sp, #24
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002b8c:	2300      	movs	r3, #0
 8002b8e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002b90:	2300      	movs	r3, #0
 8002b92:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d031      	beq.n	8002c04 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ba4:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002ba8:	d01a      	beq.n	8002be0 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8002baa:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002bae:	d814      	bhi.n	8002bda <HAL_RCCEx_PeriphCLKConfig+0x56>
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d009      	beq.n	8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002bb4:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002bb8:	d10f      	bne.n	8002bda <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8002bba:	4b5d      	ldr	r3, [pc, #372]	@ (8002d30 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002bbc:	68db      	ldr	r3, [r3, #12]
 8002bbe:	4a5c      	ldr	r2, [pc, #368]	@ (8002d30 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002bc0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002bc4:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002bc6:	e00c      	b.n	8002be2 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	3304      	adds	r3, #4
 8002bcc:	2100      	movs	r1, #0
 8002bce:	4618      	mov	r0, r3
 8002bd0:	f000 fe86 	bl	80038e0 <RCCEx_PLLSAI1_Config>
 8002bd4:	4603      	mov	r3, r0
 8002bd6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002bd8:	e003      	b.n	8002be2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002bda:	2301      	movs	r3, #1
 8002bdc:	74fb      	strb	r3, [r7, #19]
      break;
 8002bde:	e000      	b.n	8002be2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8002be0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002be2:	7cfb      	ldrb	r3, [r7, #19]
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d10b      	bne.n	8002c00 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002be8:	4b51      	ldr	r3, [pc, #324]	@ (8002d30 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002bea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002bee:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002bf6:	494e      	ldr	r1, [pc, #312]	@ (8002d30 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002bf8:	4313      	orrs	r3, r2
 8002bfa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8002bfe:	e001      	b.n	8002c04 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c00:	7cfb      	ldrb	r3, [r7, #19]
 8002c02:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	f000 809e 	beq.w	8002d4e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c12:	2300      	movs	r3, #0
 8002c14:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002c16:	4b46      	ldr	r3, [pc, #280]	@ (8002d30 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002c18:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c1a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d101      	bne.n	8002c26 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8002c22:	2301      	movs	r3, #1
 8002c24:	e000      	b.n	8002c28 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8002c26:	2300      	movs	r3, #0
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d00d      	beq.n	8002c48 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c2c:	4b40      	ldr	r3, [pc, #256]	@ (8002d30 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002c2e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c30:	4a3f      	ldr	r2, [pc, #252]	@ (8002d30 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002c32:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002c36:	6593      	str	r3, [r2, #88]	@ 0x58
 8002c38:	4b3d      	ldr	r3, [pc, #244]	@ (8002d30 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002c3a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c3c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c40:	60bb      	str	r3, [r7, #8]
 8002c42:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c44:	2301      	movs	r3, #1
 8002c46:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002c48:	4b3a      	ldr	r3, [pc, #232]	@ (8002d34 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	4a39      	ldr	r2, [pc, #228]	@ (8002d34 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002c4e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002c52:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002c54:	f7fe fa66 	bl	8001124 <HAL_GetTick>
 8002c58:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002c5a:	e009      	b.n	8002c70 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c5c:	f7fe fa62 	bl	8001124 <HAL_GetTick>
 8002c60:	4602      	mov	r2, r0
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	1ad3      	subs	r3, r2, r3
 8002c66:	2b02      	cmp	r3, #2
 8002c68:	d902      	bls.n	8002c70 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8002c6a:	2303      	movs	r3, #3
 8002c6c:	74fb      	strb	r3, [r7, #19]
        break;
 8002c6e:	e005      	b.n	8002c7c <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002c70:	4b30      	ldr	r3, [pc, #192]	@ (8002d34 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d0ef      	beq.n	8002c5c <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8002c7c:	7cfb      	ldrb	r3, [r7, #19]
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d15a      	bne.n	8002d38 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002c82:	4b2b      	ldr	r3, [pc, #172]	@ (8002d30 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002c84:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c88:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002c8c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002c8e:	697b      	ldr	r3, [r7, #20]
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d01e      	beq.n	8002cd2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c98:	697a      	ldr	r2, [r7, #20]
 8002c9a:	429a      	cmp	r2, r3
 8002c9c:	d019      	beq.n	8002cd2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002c9e:	4b24      	ldr	r3, [pc, #144]	@ (8002d30 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002ca0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ca4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002ca8:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002caa:	4b21      	ldr	r3, [pc, #132]	@ (8002d30 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002cac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002cb0:	4a1f      	ldr	r2, [pc, #124]	@ (8002d30 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002cb2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002cb6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002cba:	4b1d      	ldr	r3, [pc, #116]	@ (8002d30 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002cbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002cc0:	4a1b      	ldr	r2, [pc, #108]	@ (8002d30 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002cc2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002cc6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002cca:	4a19      	ldr	r2, [pc, #100]	@ (8002d30 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002ccc:	697b      	ldr	r3, [r7, #20]
 8002cce:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002cd2:	697b      	ldr	r3, [r7, #20]
 8002cd4:	f003 0301 	and.w	r3, r3, #1
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d016      	beq.n	8002d0a <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cdc:	f7fe fa22 	bl	8001124 <HAL_GetTick>
 8002ce0:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002ce2:	e00b      	b.n	8002cfc <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ce4:	f7fe fa1e 	bl	8001124 <HAL_GetTick>
 8002ce8:	4602      	mov	r2, r0
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	1ad3      	subs	r3, r2, r3
 8002cee:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002cf2:	4293      	cmp	r3, r2
 8002cf4:	d902      	bls.n	8002cfc <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8002cf6:	2303      	movs	r3, #3
 8002cf8:	74fb      	strb	r3, [r7, #19]
            break;
 8002cfa:	e006      	b.n	8002d0a <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002cfc:	4b0c      	ldr	r3, [pc, #48]	@ (8002d30 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002cfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d02:	f003 0302 	and.w	r3, r3, #2
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d0ec      	beq.n	8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8002d0a:	7cfb      	ldrb	r3, [r7, #19]
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d10b      	bne.n	8002d28 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002d10:	4b07      	ldr	r3, [pc, #28]	@ (8002d30 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002d12:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d16:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d1e:	4904      	ldr	r1, [pc, #16]	@ (8002d30 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002d20:	4313      	orrs	r3, r2
 8002d22:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8002d26:	e009      	b.n	8002d3c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002d28:	7cfb      	ldrb	r3, [r7, #19]
 8002d2a:	74bb      	strb	r3, [r7, #18]
 8002d2c:	e006      	b.n	8002d3c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8002d2e:	bf00      	nop
 8002d30:	40021000 	.word	0x40021000
 8002d34:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d38:	7cfb      	ldrb	r3, [r7, #19]
 8002d3a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002d3c:	7c7b      	ldrb	r3, [r7, #17]
 8002d3e:	2b01      	cmp	r3, #1
 8002d40:	d105      	bne.n	8002d4e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d42:	4b9b      	ldr	r3, [pc, #620]	@ (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8002d44:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d46:	4a9a      	ldr	r2, [pc, #616]	@ (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8002d48:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002d4c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f003 0301 	and.w	r3, r3, #1
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d00a      	beq.n	8002d70 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002d5a:	4b95      	ldr	r3, [pc, #596]	@ (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8002d5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d60:	f023 0203 	bic.w	r2, r3, #3
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	6a1b      	ldr	r3, [r3, #32]
 8002d68:	4991      	ldr	r1, [pc, #580]	@ (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8002d6a:	4313      	orrs	r3, r2
 8002d6c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f003 0302 	and.w	r3, r3, #2
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d00a      	beq.n	8002d92 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002d7c:	4b8c      	ldr	r3, [pc, #560]	@ (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8002d7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d82:	f023 020c 	bic.w	r2, r3, #12
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d8a:	4989      	ldr	r1, [pc, #548]	@ (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8002d8c:	4313      	orrs	r3, r2
 8002d8e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f003 0304 	and.w	r3, r3, #4
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d00a      	beq.n	8002db4 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002d9e:	4b84      	ldr	r3, [pc, #528]	@ (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8002da0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002da4:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002dac:	4980      	ldr	r1, [pc, #512]	@ (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8002dae:	4313      	orrs	r3, r2
 8002db0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f003 0320 	and.w	r3, r3, #32
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d00a      	beq.n	8002dd6 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002dc0:	4b7b      	ldr	r3, [pc, #492]	@ (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8002dc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002dc6:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002dce:	4978      	ldr	r1, [pc, #480]	@ (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8002dd0:	4313      	orrs	r3, r2
 8002dd2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d00a      	beq.n	8002df8 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002de2:	4b73      	ldr	r3, [pc, #460]	@ (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8002de4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002de8:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002df0:	496f      	ldr	r1, [pc, #444]	@ (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8002df2:	4313      	orrs	r3, r2
 8002df4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d00a      	beq.n	8002e1a <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002e04:	4b6a      	ldr	r3, [pc, #424]	@ (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8002e06:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e0a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e12:	4967      	ldr	r1, [pc, #412]	@ (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8002e14:	4313      	orrs	r3, r2
 8002e16:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d00a      	beq.n	8002e3c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002e26:	4b62      	ldr	r3, [pc, #392]	@ (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8002e28:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e2c:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e34:	495e      	ldr	r1, [pc, #376]	@ (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8002e36:	4313      	orrs	r3, r2
 8002e38:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d00a      	beq.n	8002e5e <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002e48:	4b59      	ldr	r3, [pc, #356]	@ (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8002e4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e4e:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002e56:	4956      	ldr	r1, [pc, #344]	@ (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8002e58:	4313      	orrs	r3, r2
 8002e5a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d00a      	beq.n	8002e80 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002e6a:	4b51      	ldr	r3, [pc, #324]	@ (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8002e6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e70:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e78:	494d      	ldr	r1, [pc, #308]	@ (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8002e7a:	4313      	orrs	r3, r2
 8002e7c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d028      	beq.n	8002ede <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002e8c:	4b48      	ldr	r3, [pc, #288]	@ (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8002e8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e92:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002e9a:	4945      	ldr	r1, [pc, #276]	@ (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8002e9c:	4313      	orrs	r3, r2
 8002e9e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002ea6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002eaa:	d106      	bne.n	8002eba <HAL_RCCEx_PeriphCLKConfig+0x336>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002eac:	4b40      	ldr	r3, [pc, #256]	@ (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8002eae:	68db      	ldr	r3, [r3, #12]
 8002eb0:	4a3f      	ldr	r2, [pc, #252]	@ (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8002eb2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002eb6:	60d3      	str	r3, [r2, #12]
 8002eb8:	e011      	b.n	8002ede <HAL_RCCEx_PeriphCLKConfig+0x35a>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002ebe:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002ec2:	d10c      	bne.n	8002ede <HAL_RCCEx_PeriphCLKConfig+0x35a>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	3304      	adds	r3, #4
 8002ec8:	2101      	movs	r1, #1
 8002eca:	4618      	mov	r0, r3
 8002ecc:	f000 fd08 	bl	80038e0 <RCCEx_PLLSAI1_Config>
 8002ed0:	4603      	mov	r3, r0
 8002ed2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002ed4:	7cfb      	ldrb	r3, [r7, #19]
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d001      	beq.n	8002ede <HAL_RCCEx_PeriphCLKConfig+0x35a>
      {
        /* set overall return value */
        status = ret;
 8002eda:	7cfb      	ldrb	r3, [r7, #19]
 8002edc:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d028      	beq.n	8002f3c <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002eea:	4b31      	ldr	r3, [pc, #196]	@ (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8002eec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ef0:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ef8:	492d      	ldr	r1, [pc, #180]	@ (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8002efa:	4313      	orrs	r3, r2
 8002efc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f04:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002f08:	d106      	bne.n	8002f18 <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002f0a:	4b29      	ldr	r3, [pc, #164]	@ (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8002f0c:	68db      	ldr	r3, [r3, #12]
 8002f0e:	4a28      	ldr	r2, [pc, #160]	@ (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8002f10:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002f14:	60d3      	str	r3, [r2, #12]
 8002f16:	e011      	b.n	8002f3c <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f1c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002f20:	d10c      	bne.n	8002f3c <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	3304      	adds	r3, #4
 8002f26:	2101      	movs	r1, #1
 8002f28:	4618      	mov	r0, r3
 8002f2a:	f000 fcd9 	bl	80038e0 <RCCEx_PLLSAI1_Config>
 8002f2e:	4603      	mov	r3, r0
 8002f30:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002f32:	7cfb      	ldrb	r3, [r7, #19]
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d001      	beq.n	8002f3c <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      {
        /* set overall return value */
        status = ret;
 8002f38:	7cfb      	ldrb	r3, [r7, #19]
 8002f3a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d01c      	beq.n	8002f82 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002f48:	4b19      	ldr	r3, [pc, #100]	@ (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8002f4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f4e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002f56:	4916      	ldr	r1, [pc, #88]	@ (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8002f58:	4313      	orrs	r3, r2
 8002f5a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002f62:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002f66:	d10c      	bne.n	8002f82 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	3304      	adds	r3, #4
 8002f6c:	2102      	movs	r1, #2
 8002f6e:	4618      	mov	r0, r3
 8002f70:	f000 fcb6 	bl	80038e0 <RCCEx_PLLSAI1_Config>
 8002f74:	4603      	mov	r3, r0
 8002f76:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002f78:	7cfb      	ldrb	r3, [r7, #19]
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d001      	beq.n	8002f82 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
      {
        /* set overall return value */
        status = ret;
 8002f7e:	7cfb      	ldrb	r3, [r7, #19]
 8002f80:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d00a      	beq.n	8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002f8e:	4b08      	ldr	r3, [pc, #32]	@ (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8002f90:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f94:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f9c:	4904      	ldr	r1, [pc, #16]	@ (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8002f9e:	4313      	orrs	r3, r2
 8002fa0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002fa4:	7cbb      	ldrb	r3, [r7, #18]
}
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	3718      	adds	r7, #24
 8002faa:	46bd      	mov	sp, r7
 8002fac:	bd80      	pop	{r7, pc}
 8002fae:	bf00      	nop
 8002fb0:	40021000 	.word	0x40021000

08002fb4 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_OSPI  OctoSPI peripheral clock (only for devices with OctoSPI)
  @endif
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	b088      	sub	sp, #32
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;
 8002fbc:	2300      	movs	r3, #0
 8002fbe:	61fb      	str	r3, [r7, #28]
#endif

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if(PeriphClk == RCC_PERIPHCLK_RTC)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002fc6:	d13e      	bne.n	8003046 <HAL_RCCEx_GetPeriphCLKFreq+0x92>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8002fc8:	4bb0      	ldr	r3, [pc, #704]	@ (800328c <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 8002fca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002fce:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002fd2:	613b      	str	r3, [r7, #16]

    switch(srcclk)
 8002fd4:	693b      	ldr	r3, [r7, #16]
 8002fd6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002fda:	d028      	beq.n	800302e <HAL_RCCEx_GetPeriphCLKFreq+0x7a>
 8002fdc:	693b      	ldr	r3, [r7, #16]
 8002fde:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002fe2:	f200 846b 	bhi.w	80038bc <HAL_RCCEx_GetPeriphCLKFreq+0x908>
 8002fe6:	693b      	ldr	r3, [r7, #16]
 8002fe8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002fec:	d005      	beq.n	8002ffa <HAL_RCCEx_GetPeriphCLKFreq+0x46>
 8002fee:	693b      	ldr	r3, [r7, #16]
 8002ff0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002ff4:	d00e      	beq.n	8003014 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
        frequency = HSE_VALUE / 32U;
      }
      break;
    default:
      /* No clock source, frequency default init at 0 */
      break;
 8002ff6:	f000 bc61 	b.w	80038bc <HAL_RCCEx_GetPeriphCLKFreq+0x908>
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8002ffa:	4ba4      	ldr	r3, [pc, #656]	@ (800328c <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 8002ffc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003000:	f003 0302 	and.w	r3, r3, #2
 8003004:	2b02      	cmp	r3, #2
 8003006:	f040 845b 	bne.w	80038c0 <HAL_RCCEx_GetPeriphCLKFreq+0x90c>
        frequency = LSE_VALUE;
 800300a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800300e:	61fb      	str	r3, [r7, #28]
      break;
 8003010:	f000 bc56 	b.w	80038c0 <HAL_RCCEx_GetPeriphCLKFreq+0x90c>
      if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8003014:	4b9d      	ldr	r3, [pc, #628]	@ (800328c <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 8003016:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800301a:	f003 0302 	and.w	r3, r3, #2
 800301e:	2b02      	cmp	r3, #2
 8003020:	f040 8450 	bne.w	80038c4 <HAL_RCCEx_GetPeriphCLKFreq+0x910>
          frequency = LSI_VALUE;
 8003024:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8003028:	61fb      	str	r3, [r7, #28]
      break;
 800302a:	f000 bc4b 	b.w	80038c4 <HAL_RCCEx_GetPeriphCLKFreq+0x910>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800302e:	4b97      	ldr	r3, [pc, #604]	@ (800328c <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003036:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800303a:	f040 8445 	bne.w	80038c8 <HAL_RCCEx_GetPeriphCLKFreq+0x914>
        frequency = HSE_VALUE / 32U;
 800303e:	4b94      	ldr	r3, [pc, #592]	@ (8003290 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 8003040:	61fb      	str	r3, [r7, #28]
      break;
 8003042:	f000 bc41 	b.w	80038c8 <HAL_RCCEx_GetPeriphCLKFreq+0x914>
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003046:	4b91      	ldr	r3, [pc, #580]	@ (800328c <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 8003048:	68db      	ldr	r3, [r3, #12]
 800304a:	f003 0303 	and.w	r3, r3, #3
 800304e:	617b      	str	r3, [r7, #20]

    /* Compute PLL clock input */
    switch(pll_oscsource)
 8003050:	697b      	ldr	r3, [r7, #20]
 8003052:	2b03      	cmp	r3, #3
 8003054:	d036      	beq.n	80030c4 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 8003056:	697b      	ldr	r3, [r7, #20]
 8003058:	2b03      	cmp	r3, #3
 800305a:	d840      	bhi.n	80030de <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
 800305c:	697b      	ldr	r3, [r7, #20]
 800305e:	2b01      	cmp	r3, #1
 8003060:	d003      	beq.n	800306a <HAL_RCCEx_GetPeriphCLKFreq+0xb6>
 8003062:	697b      	ldr	r3, [r7, #20]
 8003064:	2b02      	cmp	r3, #2
 8003066:	d020      	beq.n	80030aa <HAL_RCCEx_GetPeriphCLKFreq+0xf6>
 8003068:	e039      	b.n	80030de <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
    {
    case RCC_PLLSOURCE_MSI:   /* MSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 800306a:	4b88      	ldr	r3, [pc, #544]	@ (800328c <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f003 0302 	and.w	r3, r3, #2
 8003072:	2b02      	cmp	r3, #2
 8003074:	d116      	bne.n	80030a4 <HAL_RCCEx_GetPeriphCLKFreq+0xf0>
      {
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8003076:	4b85      	ldr	r3, [pc, #532]	@ (800328c <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f003 0308 	and.w	r3, r3, #8
 800307e:	2b00      	cmp	r3, #0
 8003080:	d005      	beq.n	800308e <HAL_RCCEx_GetPeriphCLKFreq+0xda>
 8003082:	4b82      	ldr	r3, [pc, #520]	@ (800328c <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	091b      	lsrs	r3, r3, #4
 8003088:	f003 030f 	and.w	r3, r3, #15
 800308c:	e005      	b.n	800309a <HAL_RCCEx_GetPeriphCLKFreq+0xe6>
 800308e:	4b7f      	ldr	r3, [pc, #508]	@ (800328c <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 8003090:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003094:	0a1b      	lsrs	r3, r3, #8
 8003096:	f003 030f 	and.w	r3, r3, #15
 800309a:	4a7e      	ldr	r2, [pc, #504]	@ (8003294 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 800309c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80030a0:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 80030a2:	e01f      	b.n	80030e4 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 80030a4:	2300      	movs	r3, #0
 80030a6:	61bb      	str	r3, [r7, #24]
      break;
 80030a8:	e01c      	b.n	80030e4 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSI:   /* HSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80030aa:	4b78      	ldr	r3, [pc, #480]	@ (800328c <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80030b2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80030b6:	d102      	bne.n	80030be <HAL_RCCEx_GetPeriphCLKFreq+0x10a>
      {
        pllvco = HSI_VALUE;
 80030b8:	4b77      	ldr	r3, [pc, #476]	@ (8003298 <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>)
 80030ba:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 80030bc:	e012      	b.n	80030e4 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 80030be:	2300      	movs	r3, #0
 80030c0:	61bb      	str	r3, [r7, #24]
      break;
 80030c2:	e00f      	b.n	80030e4 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSE:   /* HSE ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80030c4:	4b71      	ldr	r3, [pc, #452]	@ (800328c <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80030cc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80030d0:	d102      	bne.n	80030d8 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
      {
        pllvco = HSE_VALUE;
 80030d2:	4b72      	ldr	r3, [pc, #456]	@ (800329c <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>)
 80030d4:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 80030d6:	e005      	b.n	80030e4 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 80030d8:	2300      	movs	r3, #0
 80030da:	61bb      	str	r3, [r7, #24]
      break;
 80030dc:	e002      	b.n	80030e4 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    default:
      /* No source */
      pllvco = 0U;
 80030de:	2300      	movs	r3, #0
 80030e0:	61bb      	str	r3, [r7, #24]
      break;
 80030e2:	bf00      	nop
    }

    switch(PeriphClk)
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80030ea:	f000 80ad 	beq.w	8003248 <HAL_RCCEx_GetPeriphCLKFreq+0x294>
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80030f4:	f200 83ea 	bhi.w	80038cc <HAL_RCCEx_GetPeriphCLKFreq+0x918>
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80030fe:	f000 80a3 	beq.w	8003248 <HAL_RCCEx_GetPeriphCLKFreq+0x294>
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003108:	f200 83e0 	bhi.w	80038cc <HAL_RCCEx_GetPeriphCLKFreq+0x918>
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003112:	f000 83b6 	beq.w	8003882 <HAL_RCCEx_GetPeriphCLKFreq+0x8ce>
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800311c:	f200 83d6 	bhi.w	80038cc <HAL_RCCEx_GetPeriphCLKFreq+0x918>
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003126:	f000 824e 	beq.w	80035c6 <HAL_RCCEx_GetPeriphCLKFreq+0x612>
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003130:	f200 83cc 	bhi.w	80038cc <HAL_RCCEx_GetPeriphCLKFreq+0x918>
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800313a:	d07e      	beq.n	800323a <HAL_RCCEx_GetPeriphCLKFreq+0x286>
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003142:	f200 83c3 	bhi.w	80038cc <HAL_RCCEx_GetPeriphCLKFreq+0x918>
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800314c:	f000 834f 	beq.w	80037ee <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003156:	f200 83b9 	bhi.w	80038cc <HAL_RCCEx_GetPeriphCLKFreq+0x918>
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003160:	f000 82f7 	beq.w	8003752 <HAL_RCCEx_GetPeriphCLKFreq+0x79e>
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800316a:	f200 83af 	bhi.w	80038cc <HAL_RCCEx_GetPeriphCLKFreq+0x918>
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003174:	f000 82c1 	beq.w	80036fa <HAL_RCCEx_GetPeriphCLKFreq+0x746>
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800317e:	f200 83a5 	bhi.w	80038cc <HAL_RCCEx_GetPeriphCLKFreq+0x918>
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	2b80      	cmp	r3, #128	@ 0x80
 8003186:	f000 828c 	beq.w	80036a2 <HAL_RCCEx_GetPeriphCLKFreq+0x6ee>
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	2b80      	cmp	r3, #128	@ 0x80
 800318e:	f200 839d 	bhi.w	80038cc <HAL_RCCEx_GetPeriphCLKFreq+0x918>
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	2b20      	cmp	r3, #32
 8003196:	d84b      	bhi.n	8003230 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	2b00      	cmp	r3, #0
 800319c:	f000 8396 	beq.w	80038cc <HAL_RCCEx_GetPeriphCLKFreq+0x918>
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	3b01      	subs	r3, #1
 80031a4:	2b1f      	cmp	r3, #31
 80031a6:	f200 8391 	bhi.w	80038cc <HAL_RCCEx_GetPeriphCLKFreq+0x918>
 80031aa:	a201      	add	r2, pc, #4	@ (adr r2, 80031b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>)
 80031ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031b0:	080033b7 	.word	0x080033b7
 80031b4:	08003427 	.word	0x08003427
 80031b8:	080038cd 	.word	0x080038cd
 80031bc:	080034bb 	.word	0x080034bb
 80031c0:	080038cd 	.word	0x080038cd
 80031c4:	080038cd 	.word	0x080038cd
 80031c8:	080038cd 	.word	0x080038cd
 80031cc:	080038cd 	.word	0x080038cd
 80031d0:	080038cd 	.word	0x080038cd
 80031d4:	080038cd 	.word	0x080038cd
 80031d8:	080038cd 	.word	0x080038cd
 80031dc:	080038cd 	.word	0x080038cd
 80031e0:	080038cd 	.word	0x080038cd
 80031e4:	080038cd 	.word	0x080038cd
 80031e8:	080038cd 	.word	0x080038cd
 80031ec:	080038cd 	.word	0x080038cd
 80031f0:	080038cd 	.word	0x080038cd
 80031f4:	080038cd 	.word	0x080038cd
 80031f8:	080038cd 	.word	0x080038cd
 80031fc:	080038cd 	.word	0x080038cd
 8003200:	080038cd 	.word	0x080038cd
 8003204:	080038cd 	.word	0x080038cd
 8003208:	080038cd 	.word	0x080038cd
 800320c:	080038cd 	.word	0x080038cd
 8003210:	080038cd 	.word	0x080038cd
 8003214:	080038cd 	.word	0x080038cd
 8003218:	080038cd 	.word	0x080038cd
 800321c:	080038cd 	.word	0x080038cd
 8003220:	080038cd 	.word	0x080038cd
 8003224:	080038cd 	.word	0x080038cd
 8003228:	080038cd 	.word	0x080038cd
 800322c:	08003545 	.word	0x08003545
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	2b40      	cmp	r3, #64	@ 0x40
 8003234:	f000 8209 	beq.w	800364a <HAL_RCCEx_GetPeriphCLKFreq+0x696>
      }

#endif /* OCTOSPI1 || OCTOSPI2 */

    default:
      break;
 8003238:	e348      	b.n	80038cc <HAL_RCCEx_GetPeriphCLKFreq+0x918>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 800323a:	69b9      	ldr	r1, [r7, #24]
 800323c:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8003240:	f000 fc40 	bl	8003ac4 <RCCEx_GetSAIxPeriphCLKFreq>
 8003244:	61f8      	str	r0, [r7, #28]
      break;
 8003246:	e342      	b.n	80038ce <HAL_RCCEx_GetPeriphCLKFreq+0x91a>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 8003248:	4b10      	ldr	r3, [pc, #64]	@ (800328c <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 800324a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800324e:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 8003252:	613b      	str	r3, [r7, #16]
 8003254:	693b      	ldr	r3, [r7, #16]
 8003256:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800325a:	d021      	beq.n	80032a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>
 800325c:	693b      	ldr	r3, [r7, #16]
 800325e:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8003262:	f200 809e 	bhi.w	80033a2 <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
 8003266:	693b      	ldr	r3, [r7, #16]
 8003268:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800326c:	d035      	beq.n	80032da <HAL_RCCEx_GetPeriphCLKFreq+0x326>
 800326e:	693b      	ldr	r3, [r7, #16]
 8003270:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003274:	f200 8095 	bhi.w	80033a2 <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
 8003278:	693b      	ldr	r3, [r7, #16]
 800327a:	2b00      	cmp	r3, #0
 800327c:	f000 8087 	beq.w	800338e <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 8003280:	693b      	ldr	r3, [r7, #16]
 8003282:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003286:	d055      	beq.n	8003334 <HAL_RCCEx_GetPeriphCLKFreq+0x380>
          break;
 8003288:	e08b      	b.n	80033a2 <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
 800328a:	bf00      	nop
 800328c:	40021000 	.word	0x40021000
 8003290:	0003d090 	.word	0x0003d090
 8003294:	0800ab74 	.word	0x0800ab74
 8003298:	00f42400 	.word	0x00f42400
 800329c:	007a1200 	.word	0x007a1200
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 80032a0:	4ba4      	ldr	r3, [pc, #656]	@ (8003534 <HAL_RCCEx_GetPeriphCLKFreq+0x580>)
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f003 0302 	and.w	r3, r3, #2
 80032a8:	2b02      	cmp	r3, #2
 80032aa:	d17c      	bne.n	80033a6 <HAL_RCCEx_GetPeriphCLKFreq+0x3f2>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 80032ac:	4ba1      	ldr	r3, [pc, #644]	@ (8003534 <HAL_RCCEx_GetPeriphCLKFreq+0x580>)
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f003 0308 	and.w	r3, r3, #8
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d005      	beq.n	80032c4 <HAL_RCCEx_GetPeriphCLKFreq+0x310>
 80032b8:	4b9e      	ldr	r3, [pc, #632]	@ (8003534 <HAL_RCCEx_GetPeriphCLKFreq+0x580>)
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	091b      	lsrs	r3, r3, #4
 80032be:	f003 030f 	and.w	r3, r3, #15
 80032c2:	e005      	b.n	80032d0 <HAL_RCCEx_GetPeriphCLKFreq+0x31c>
 80032c4:	4b9b      	ldr	r3, [pc, #620]	@ (8003534 <HAL_RCCEx_GetPeriphCLKFreq+0x580>)
 80032c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80032ca:	0a1b      	lsrs	r3, r3, #8
 80032cc:	f003 030f 	and.w	r3, r3, #15
 80032d0:	4a99      	ldr	r2, [pc, #612]	@ (8003538 <HAL_RCCEx_GetPeriphCLKFreq+0x584>)
 80032d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80032d6:	61fb      	str	r3, [r7, #28]
          break;
 80032d8:	e065      	b.n	80033a6 <HAL_RCCEx_GetPeriphCLKFreq+0x3f2>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 80032da:	4b96      	ldr	r3, [pc, #600]	@ (8003534 <HAL_RCCEx_GetPeriphCLKFreq+0x580>)
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80032e2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80032e6:	d160      	bne.n	80033aa <HAL_RCCEx_GetPeriphCLKFreq+0x3f6>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 80032e8:	4b92      	ldr	r3, [pc, #584]	@ (8003534 <HAL_RCCEx_GetPeriphCLKFreq+0x580>)
 80032ea:	68db      	ldr	r3, [r3, #12]
 80032ec:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80032f0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80032f4:	d159      	bne.n	80033aa <HAL_RCCEx_GetPeriphCLKFreq+0x3f6>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 80032f6:	4b8f      	ldr	r3, [pc, #572]	@ (8003534 <HAL_RCCEx_GetPeriphCLKFreq+0x580>)
 80032f8:	68db      	ldr	r3, [r3, #12]
 80032fa:	0a1b      	lsrs	r3, r3, #8
 80032fc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003300:	60fb      	str	r3, [r7, #12]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8003302:	69bb      	ldr	r3, [r7, #24]
 8003304:	68fa      	ldr	r2, [r7, #12]
 8003306:	fb03 f202 	mul.w	r2, r3, r2
 800330a:	4b8a      	ldr	r3, [pc, #552]	@ (8003534 <HAL_RCCEx_GetPeriphCLKFreq+0x580>)
 800330c:	68db      	ldr	r3, [r3, #12]
 800330e:	091b      	lsrs	r3, r3, #4
 8003310:	f003 0307 	and.w	r3, r3, #7
 8003314:	3301      	adds	r3, #1
 8003316:	fbb2 f3f3 	udiv	r3, r2, r3
 800331a:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 800331c:	4b85      	ldr	r3, [pc, #532]	@ (8003534 <HAL_RCCEx_GetPeriphCLKFreq+0x580>)
 800331e:	68db      	ldr	r3, [r3, #12]
 8003320:	0d5b      	lsrs	r3, r3, #21
 8003322:	f003 0303 	and.w	r3, r3, #3
 8003326:	3301      	adds	r3, #1
 8003328:	005b      	lsls	r3, r3, #1
 800332a:	69ba      	ldr	r2, [r7, #24]
 800332c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003330:	61fb      	str	r3, [r7, #28]
          break;
 8003332:	e03a      	b.n	80033aa <HAL_RCCEx_GetPeriphCLKFreq+0x3f6>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 8003334:	4b7f      	ldr	r3, [pc, #508]	@ (8003534 <HAL_RCCEx_GetPeriphCLKFreq+0x580>)
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800333c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003340:	d135      	bne.n	80033ae <HAL_RCCEx_GetPeriphCLKFreq+0x3fa>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 8003342:	4b7c      	ldr	r3, [pc, #496]	@ (8003534 <HAL_RCCEx_GetPeriphCLKFreq+0x580>)
 8003344:	691b      	ldr	r3, [r3, #16]
 8003346:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800334a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800334e:	d12e      	bne.n	80033ae <HAL_RCCEx_GetPeriphCLKFreq+0x3fa>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8003350:	4b78      	ldr	r3, [pc, #480]	@ (8003534 <HAL_RCCEx_GetPeriphCLKFreq+0x580>)
 8003352:	691b      	ldr	r3, [r3, #16]
 8003354:	0a1b      	lsrs	r3, r3, #8
 8003356:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800335a:	60fb      	str	r3, [r7, #12]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800335c:	69bb      	ldr	r3, [r7, #24]
 800335e:	68fa      	ldr	r2, [r7, #12]
 8003360:	fb03 f202 	mul.w	r2, r3, r2
 8003364:	4b73      	ldr	r3, [pc, #460]	@ (8003534 <HAL_RCCEx_GetPeriphCLKFreq+0x580>)
 8003366:	68db      	ldr	r3, [r3, #12]
 8003368:	091b      	lsrs	r3, r3, #4
 800336a:	f003 0307 	and.w	r3, r3, #7
 800336e:	3301      	adds	r3, #1
 8003370:	fbb2 f3f3 	udiv	r3, r2, r3
 8003374:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 8003376:	4b6f      	ldr	r3, [pc, #444]	@ (8003534 <HAL_RCCEx_GetPeriphCLKFreq+0x580>)
 8003378:	691b      	ldr	r3, [r3, #16]
 800337a:	0d5b      	lsrs	r3, r3, #21
 800337c:	f003 0303 	and.w	r3, r3, #3
 8003380:	3301      	adds	r3, #1
 8003382:	005b      	lsls	r3, r3, #1
 8003384:	69ba      	ldr	r2, [r7, #24]
 8003386:	fbb2 f3f3 	udiv	r3, r2, r3
 800338a:	61fb      	str	r3, [r7, #28]
          break;
 800338c:	e00f      	b.n	80033ae <HAL_RCCEx_GetPeriphCLKFreq+0x3fa>
          if(HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)) /* HSI48 ? */
 800338e:	4b69      	ldr	r3, [pc, #420]	@ (8003534 <HAL_RCCEx_GetPeriphCLKFreq+0x580>)
 8003390:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003394:	f003 0302 	and.w	r3, r3, #2
 8003398:	2b02      	cmp	r3, #2
 800339a:	d10a      	bne.n	80033b2 <HAL_RCCEx_GetPeriphCLKFreq+0x3fe>
            frequency = HSI48_VALUE;
 800339c:	4b67      	ldr	r3, [pc, #412]	@ (800353c <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800339e:	61fb      	str	r3, [r7, #28]
          break;
 80033a0:	e007      	b.n	80033b2 <HAL_RCCEx_GetPeriphCLKFreq+0x3fe>
          break;
 80033a2:	bf00      	nop
 80033a4:	e293      	b.n	80038ce <HAL_RCCEx_GetPeriphCLKFreq+0x91a>
          break;
 80033a6:	bf00      	nop
 80033a8:	e291      	b.n	80038ce <HAL_RCCEx_GetPeriphCLKFreq+0x91a>
          break;
 80033aa:	bf00      	nop
 80033ac:	e28f      	b.n	80038ce <HAL_RCCEx_GetPeriphCLKFreq+0x91a>
          break;
 80033ae:	bf00      	nop
 80033b0:	e28d      	b.n	80038ce <HAL_RCCEx_GetPeriphCLKFreq+0x91a>
          break;
 80033b2:	bf00      	nop
        break;
 80033b4:	e28b      	b.n	80038ce <HAL_RCCEx_GetPeriphCLKFreq+0x91a>
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 80033b6:	4b5f      	ldr	r3, [pc, #380]	@ (8003534 <HAL_RCCEx_GetPeriphCLKFreq+0x580>)
 80033b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80033bc:	f003 0303 	and.w	r3, r3, #3
 80033c0:	613b      	str	r3, [r7, #16]
 80033c2:	693b      	ldr	r3, [r7, #16]
 80033c4:	2b03      	cmp	r3, #3
 80033c6:	d828      	bhi.n	800341a <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 80033c8:	a201      	add	r2, pc, #4	@ (adr r2, 80033d0 <HAL_RCCEx_GetPeriphCLKFreq+0x41c>)
 80033ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033ce:	bf00      	nop
 80033d0:	080033e1 	.word	0x080033e1
 80033d4:	080033e9 	.word	0x080033e9
 80033d8:	080033f1 	.word	0x080033f1
 80033dc:	08003405 	.word	0x08003405
          frequency = HAL_RCC_GetPCLK2Freq();
 80033e0:	f7ff fb5a 	bl	8002a98 <HAL_RCC_GetPCLK2Freq>
 80033e4:	61f8      	str	r0, [r7, #28]
          break;
 80033e6:	e01d      	b.n	8003424 <HAL_RCCEx_GetPeriphCLKFreq+0x470>
          frequency = HAL_RCC_GetSysClockFreq();
 80033e8:	f7ff faa8 	bl	800293c <HAL_RCC_GetSysClockFreq>
 80033ec:	61f8      	str	r0, [r7, #28]
          break;
 80033ee:	e019      	b.n	8003424 <HAL_RCCEx_GetPeriphCLKFreq+0x470>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80033f0:	4b50      	ldr	r3, [pc, #320]	@ (8003534 <HAL_RCCEx_GetPeriphCLKFreq+0x580>)
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80033f8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80033fc:	d10f      	bne.n	800341e <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
            frequency = HSI_VALUE;
 80033fe:	4b50      	ldr	r3, [pc, #320]	@ (8003540 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8003400:	61fb      	str	r3, [r7, #28]
          break;
 8003402:	e00c      	b.n	800341e <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8003404:	4b4b      	ldr	r3, [pc, #300]	@ (8003534 <HAL_RCCEx_GetPeriphCLKFreq+0x580>)
 8003406:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800340a:	f003 0302 	and.w	r3, r3, #2
 800340e:	2b02      	cmp	r3, #2
 8003410:	d107      	bne.n	8003422 <HAL_RCCEx_GetPeriphCLKFreq+0x46e>
            frequency = LSE_VALUE;
 8003412:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003416:	61fb      	str	r3, [r7, #28]
          break;
 8003418:	e003      	b.n	8003422 <HAL_RCCEx_GetPeriphCLKFreq+0x46e>
          break;
 800341a:	bf00      	nop
 800341c:	e257      	b.n	80038ce <HAL_RCCEx_GetPeriphCLKFreq+0x91a>
          break;
 800341e:	bf00      	nop
 8003420:	e255      	b.n	80038ce <HAL_RCCEx_GetPeriphCLKFreq+0x91a>
          break;
 8003422:	bf00      	nop
        break;
 8003424:	e253      	b.n	80038ce <HAL_RCCEx_GetPeriphCLKFreq+0x91a>
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8003426:	4b43      	ldr	r3, [pc, #268]	@ (8003534 <HAL_RCCEx_GetPeriphCLKFreq+0x580>)
 8003428:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800342c:	f003 030c 	and.w	r3, r3, #12
 8003430:	613b      	str	r3, [r7, #16]
 8003432:	693b      	ldr	r3, [r7, #16]
 8003434:	2b0c      	cmp	r3, #12
 8003436:	d83a      	bhi.n	80034ae <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 8003438:	a201      	add	r2, pc, #4	@ (adr r2, 8003440 <HAL_RCCEx_GetPeriphCLKFreq+0x48c>)
 800343a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800343e:	bf00      	nop
 8003440:	08003475 	.word	0x08003475
 8003444:	080034af 	.word	0x080034af
 8003448:	080034af 	.word	0x080034af
 800344c:	080034af 	.word	0x080034af
 8003450:	0800347d 	.word	0x0800347d
 8003454:	080034af 	.word	0x080034af
 8003458:	080034af 	.word	0x080034af
 800345c:	080034af 	.word	0x080034af
 8003460:	08003485 	.word	0x08003485
 8003464:	080034af 	.word	0x080034af
 8003468:	080034af 	.word	0x080034af
 800346c:	080034af 	.word	0x080034af
 8003470:	08003499 	.word	0x08003499
          frequency = HAL_RCC_GetPCLK1Freq();
 8003474:	f7ff fafa 	bl	8002a6c <HAL_RCC_GetPCLK1Freq>
 8003478:	61f8      	str	r0, [r7, #28]
          break;
 800347a:	e01d      	b.n	80034b8 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
          frequency = HAL_RCC_GetSysClockFreq();
 800347c:	f7ff fa5e 	bl	800293c <HAL_RCC_GetSysClockFreq>
 8003480:	61f8      	str	r0, [r7, #28]
          break;
 8003482:	e019      	b.n	80034b8 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8003484:	4b2b      	ldr	r3, [pc, #172]	@ (8003534 <HAL_RCCEx_GetPeriphCLKFreq+0x580>)
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800348c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003490:	d10f      	bne.n	80034b2 <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
            frequency = HSI_VALUE;
 8003492:	4b2b      	ldr	r3, [pc, #172]	@ (8003540 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8003494:	61fb      	str	r3, [r7, #28]
          break;
 8003496:	e00c      	b.n	80034b2 <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8003498:	4b26      	ldr	r3, [pc, #152]	@ (8003534 <HAL_RCCEx_GetPeriphCLKFreq+0x580>)
 800349a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800349e:	f003 0302 	and.w	r3, r3, #2
 80034a2:	2b02      	cmp	r3, #2
 80034a4:	d107      	bne.n	80034b6 <HAL_RCCEx_GetPeriphCLKFreq+0x502>
            frequency = LSE_VALUE;
 80034a6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80034aa:	61fb      	str	r3, [r7, #28]
          break;
 80034ac:	e003      	b.n	80034b6 <HAL_RCCEx_GetPeriphCLKFreq+0x502>
          break;
 80034ae:	bf00      	nop
 80034b0:	e20d      	b.n	80038ce <HAL_RCCEx_GetPeriphCLKFreq+0x91a>
          break;
 80034b2:	bf00      	nop
 80034b4:	e20b      	b.n	80038ce <HAL_RCCEx_GetPeriphCLKFreq+0x91a>
          break;
 80034b6:	bf00      	nop
        break;
 80034b8:	e209      	b.n	80038ce <HAL_RCCEx_GetPeriphCLKFreq+0x91a>
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 80034ba:	4b1e      	ldr	r3, [pc, #120]	@ (8003534 <HAL_RCCEx_GetPeriphCLKFreq+0x580>)
 80034bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80034c0:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80034c4:	613b      	str	r3, [r7, #16]
 80034c6:	693b      	ldr	r3, [r7, #16]
 80034c8:	2b30      	cmp	r3, #48	@ 0x30
 80034ca:	d021      	beq.n	8003510 <HAL_RCCEx_GetPeriphCLKFreq+0x55c>
 80034cc:	693b      	ldr	r3, [r7, #16]
 80034ce:	2b30      	cmp	r3, #48	@ 0x30
 80034d0:	d829      	bhi.n	8003526 <HAL_RCCEx_GetPeriphCLKFreq+0x572>
 80034d2:	693b      	ldr	r3, [r7, #16]
 80034d4:	2b20      	cmp	r3, #32
 80034d6:	d011      	beq.n	80034fc <HAL_RCCEx_GetPeriphCLKFreq+0x548>
 80034d8:	693b      	ldr	r3, [r7, #16]
 80034da:	2b20      	cmp	r3, #32
 80034dc:	d823      	bhi.n	8003526 <HAL_RCCEx_GetPeriphCLKFreq+0x572>
 80034de:	693b      	ldr	r3, [r7, #16]
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d003      	beq.n	80034ec <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 80034e4:	693b      	ldr	r3, [r7, #16]
 80034e6:	2b10      	cmp	r3, #16
 80034e8:	d004      	beq.n	80034f4 <HAL_RCCEx_GetPeriphCLKFreq+0x540>
          break;
 80034ea:	e01c      	b.n	8003526 <HAL_RCCEx_GetPeriphCLKFreq+0x572>
          frequency = HAL_RCC_GetPCLK1Freq();
 80034ec:	f7ff fabe 	bl	8002a6c <HAL_RCC_GetPCLK1Freq>
 80034f0:	61f8      	str	r0, [r7, #28]
          break;
 80034f2:	e01d      	b.n	8003530 <HAL_RCCEx_GetPeriphCLKFreq+0x57c>
          frequency = HAL_RCC_GetSysClockFreq();
 80034f4:	f7ff fa22 	bl	800293c <HAL_RCC_GetSysClockFreq>
 80034f8:	61f8      	str	r0, [r7, #28]
          break;
 80034fa:	e019      	b.n	8003530 <HAL_RCCEx_GetPeriphCLKFreq+0x57c>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80034fc:	4b0d      	ldr	r3, [pc, #52]	@ (8003534 <HAL_RCCEx_GetPeriphCLKFreq+0x580>)
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003504:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003508:	d10f      	bne.n	800352a <HAL_RCCEx_GetPeriphCLKFreq+0x576>
            frequency = HSI_VALUE;
 800350a:	4b0d      	ldr	r3, [pc, #52]	@ (8003540 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800350c:	61fb      	str	r3, [r7, #28]
          break;
 800350e:	e00c      	b.n	800352a <HAL_RCCEx_GetPeriphCLKFreq+0x576>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8003510:	4b08      	ldr	r3, [pc, #32]	@ (8003534 <HAL_RCCEx_GetPeriphCLKFreq+0x580>)
 8003512:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003516:	f003 0302 	and.w	r3, r3, #2
 800351a:	2b02      	cmp	r3, #2
 800351c:	d107      	bne.n	800352e <HAL_RCCEx_GetPeriphCLKFreq+0x57a>
            frequency = LSE_VALUE;
 800351e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003522:	61fb      	str	r3, [r7, #28]
          break;
 8003524:	e003      	b.n	800352e <HAL_RCCEx_GetPeriphCLKFreq+0x57a>
          break;
 8003526:	bf00      	nop
 8003528:	e1d1      	b.n	80038ce <HAL_RCCEx_GetPeriphCLKFreq+0x91a>
          break;
 800352a:	bf00      	nop
 800352c:	e1cf      	b.n	80038ce <HAL_RCCEx_GetPeriphCLKFreq+0x91a>
          break;
 800352e:	bf00      	nop
        break;
 8003530:	e1cd      	b.n	80038ce <HAL_RCCEx_GetPeriphCLKFreq+0x91a>
 8003532:	bf00      	nop
 8003534:	40021000 	.word	0x40021000
 8003538:	0800ab74 	.word	0x0800ab74
 800353c:	02dc6c00 	.word	0x02dc6c00
 8003540:	00f42400 	.word	0x00f42400
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8003544:	4b99      	ldr	r3, [pc, #612]	@ (80037ac <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 8003546:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800354a:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800354e:	613b      	str	r3, [r7, #16]
 8003550:	693b      	ldr	r3, [r7, #16]
 8003552:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003556:	d025      	beq.n	80035a4 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 8003558:	693b      	ldr	r3, [r7, #16]
 800355a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800355e:	d82c      	bhi.n	80035ba <HAL_RCCEx_GetPeriphCLKFreq+0x606>
 8003560:	693b      	ldr	r3, [r7, #16]
 8003562:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003566:	d013      	beq.n	8003590 <HAL_RCCEx_GetPeriphCLKFreq+0x5dc>
 8003568:	693b      	ldr	r3, [r7, #16]
 800356a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800356e:	d824      	bhi.n	80035ba <HAL_RCCEx_GetPeriphCLKFreq+0x606>
 8003570:	693b      	ldr	r3, [r7, #16]
 8003572:	2b00      	cmp	r3, #0
 8003574:	d004      	beq.n	8003580 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 8003576:	693b      	ldr	r3, [r7, #16]
 8003578:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800357c:	d004      	beq.n	8003588 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>
          break;
 800357e:	e01c      	b.n	80035ba <HAL_RCCEx_GetPeriphCLKFreq+0x606>
          frequency = HAL_RCC_GetPCLK1Freq();
 8003580:	f7ff fa74 	bl	8002a6c <HAL_RCC_GetPCLK1Freq>
 8003584:	61f8      	str	r0, [r7, #28]
          break;
 8003586:	e01d      	b.n	80035c4 <HAL_RCCEx_GetPeriphCLKFreq+0x610>
          frequency = HAL_RCC_GetSysClockFreq();
 8003588:	f7ff f9d8 	bl	800293c <HAL_RCC_GetSysClockFreq>
 800358c:	61f8      	str	r0, [r7, #28]
          break;
 800358e:	e019      	b.n	80035c4 <HAL_RCCEx_GetPeriphCLKFreq+0x610>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8003590:	4b86      	ldr	r3, [pc, #536]	@ (80037ac <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003598:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800359c:	d10f      	bne.n	80035be <HAL_RCCEx_GetPeriphCLKFreq+0x60a>
            frequency = HSI_VALUE;
 800359e:	4b84      	ldr	r3, [pc, #528]	@ (80037b0 <HAL_RCCEx_GetPeriphCLKFreq+0x7fc>)
 80035a0:	61fb      	str	r3, [r7, #28]
          break;
 80035a2:	e00c      	b.n	80035be <HAL_RCCEx_GetPeriphCLKFreq+0x60a>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80035a4:	4b81      	ldr	r3, [pc, #516]	@ (80037ac <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 80035a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80035aa:	f003 0302 	and.w	r3, r3, #2
 80035ae:	2b02      	cmp	r3, #2
 80035b0:	d107      	bne.n	80035c2 <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
            frequency = LSE_VALUE;
 80035b2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80035b6:	61fb      	str	r3, [r7, #28]
          break;
 80035b8:	e003      	b.n	80035c2 <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
          break;
 80035ba:	bf00      	nop
 80035bc:	e187      	b.n	80038ce <HAL_RCCEx_GetPeriphCLKFreq+0x91a>
          break;
 80035be:	bf00      	nop
 80035c0:	e185      	b.n	80038ce <HAL_RCCEx_GetPeriphCLKFreq+0x91a>
          break;
 80035c2:	bf00      	nop
        break;
 80035c4:	e183      	b.n	80038ce <HAL_RCCEx_GetPeriphCLKFreq+0x91a>
        srcclk = __HAL_RCC_GET_ADC_SOURCE();
 80035c6:	4b79      	ldr	r3, [pc, #484]	@ (80037ac <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 80035c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80035cc:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80035d0:	613b      	str	r3, [r7, #16]
 80035d2:	693b      	ldr	r3, [r7, #16]
 80035d4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80035d8:	d007      	beq.n	80035ea <HAL_RCCEx_GetPeriphCLKFreq+0x636>
 80035da:	693b      	ldr	r3, [r7, #16]
 80035dc:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80035e0:	d12f      	bne.n	8003642 <HAL_RCCEx_GetPeriphCLKFreq+0x68e>
          frequency = HAL_RCC_GetSysClockFreq();
 80035e2:	f7ff f9ab 	bl	800293c <HAL_RCC_GetSysClockFreq>
 80035e6:	61f8      	str	r0, [r7, #28]
          break;
 80035e8:	e02e      	b.n	8003648 <HAL_RCCEx_GetPeriphCLKFreq+0x694>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_ADC1CLK) != 0U))
 80035ea:	4b70      	ldr	r3, [pc, #448]	@ (80037ac <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80035f2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80035f6:	d126      	bne.n	8003646 <HAL_RCCEx_GetPeriphCLKFreq+0x692>
 80035f8:	4b6c      	ldr	r3, [pc, #432]	@ (80037ac <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 80035fa:	691b      	ldr	r3, [r3, #16]
 80035fc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003600:	2b00      	cmp	r3, #0
 8003602:	d020      	beq.n	8003646 <HAL_RCCEx_GetPeriphCLKFreq+0x692>
            plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8003604:	4b69      	ldr	r3, [pc, #420]	@ (80037ac <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 8003606:	691b      	ldr	r3, [r3, #16]
 8003608:	0a1b      	lsrs	r3, r3, #8
 800360a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800360e:	60fb      	str	r3, [r7, #12]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8003610:	69bb      	ldr	r3, [r7, #24]
 8003612:	68fa      	ldr	r2, [r7, #12]
 8003614:	fb03 f202 	mul.w	r2, r3, r2
 8003618:	4b64      	ldr	r3, [pc, #400]	@ (80037ac <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 800361a:	68db      	ldr	r3, [r3, #12]
 800361c:	091b      	lsrs	r3, r3, #4
 800361e:	f003 0307 	and.w	r3, r3, #7
 8003622:	3301      	adds	r3, #1
 8003624:	fbb2 f3f3 	udiv	r3, r2, r3
 8003628:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1R) >> RCC_PLLSAI1CFGR_PLLSAI1R_Pos) + 1U) << 1U));
 800362a:	4b60      	ldr	r3, [pc, #384]	@ (80037ac <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 800362c:	691b      	ldr	r3, [r3, #16]
 800362e:	0e5b      	lsrs	r3, r3, #25
 8003630:	f003 0303 	and.w	r3, r3, #3
 8003634:	3301      	adds	r3, #1
 8003636:	005b      	lsls	r3, r3, #1
 8003638:	69ba      	ldr	r2, [r7, #24]
 800363a:	fbb2 f3f3 	udiv	r3, r2, r3
 800363e:	61fb      	str	r3, [r7, #28]
          break;
 8003640:	e001      	b.n	8003646 <HAL_RCCEx_GetPeriphCLKFreq+0x692>
          break;
 8003642:	bf00      	nop
 8003644:	e143      	b.n	80038ce <HAL_RCCEx_GetPeriphCLKFreq+0x91a>
          break;
 8003646:	bf00      	nop
        break;
 8003648:	e141      	b.n	80038ce <HAL_RCCEx_GetPeriphCLKFreq+0x91a>
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 800364a:	4b58      	ldr	r3, [pc, #352]	@ (80037ac <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 800364c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003650:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8003654:	613b      	str	r3, [r7, #16]
 8003656:	693b      	ldr	r3, [r7, #16]
 8003658:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800365c:	d013      	beq.n	8003686 <HAL_RCCEx_GetPeriphCLKFreq+0x6d2>
 800365e:	693b      	ldr	r3, [r7, #16]
 8003660:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003664:	d819      	bhi.n	800369a <HAL_RCCEx_GetPeriphCLKFreq+0x6e6>
 8003666:	693b      	ldr	r3, [r7, #16]
 8003668:	2b00      	cmp	r3, #0
 800366a:	d004      	beq.n	8003676 <HAL_RCCEx_GetPeriphCLKFreq+0x6c2>
 800366c:	693b      	ldr	r3, [r7, #16]
 800366e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003672:	d004      	beq.n	800367e <HAL_RCCEx_GetPeriphCLKFreq+0x6ca>
          break;
 8003674:	e011      	b.n	800369a <HAL_RCCEx_GetPeriphCLKFreq+0x6e6>
          frequency = HAL_RCC_GetPCLK1Freq();
 8003676:	f7ff f9f9 	bl	8002a6c <HAL_RCC_GetPCLK1Freq>
 800367a:	61f8      	str	r0, [r7, #28]
          break;
 800367c:	e010      	b.n	80036a0 <HAL_RCCEx_GetPeriphCLKFreq+0x6ec>
          frequency = HAL_RCC_GetSysClockFreq();
 800367e:	f7ff f95d 	bl	800293c <HAL_RCC_GetSysClockFreq>
 8003682:	61f8      	str	r0, [r7, #28]
          break;
 8003684:	e00c      	b.n	80036a0 <HAL_RCCEx_GetPeriphCLKFreq+0x6ec>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8003686:	4b49      	ldr	r3, [pc, #292]	@ (80037ac <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800368e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003692:	d104      	bne.n	800369e <HAL_RCCEx_GetPeriphCLKFreq+0x6ea>
            frequency = HSI_VALUE;
 8003694:	4b46      	ldr	r3, [pc, #280]	@ (80037b0 <HAL_RCCEx_GetPeriphCLKFreq+0x7fc>)
 8003696:	61fb      	str	r3, [r7, #28]
          break;
 8003698:	e001      	b.n	800369e <HAL_RCCEx_GetPeriphCLKFreq+0x6ea>
          break;
 800369a:	bf00      	nop
 800369c:	e117      	b.n	80038ce <HAL_RCCEx_GetPeriphCLKFreq+0x91a>
          break;
 800369e:	bf00      	nop
        break;
 80036a0:	e115      	b.n	80038ce <HAL_RCCEx_GetPeriphCLKFreq+0x91a>
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 80036a2:	4b42      	ldr	r3, [pc, #264]	@ (80037ac <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 80036a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80036a8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80036ac:	613b      	str	r3, [r7, #16]
 80036ae:	693b      	ldr	r3, [r7, #16]
 80036b0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80036b4:	d013      	beq.n	80036de <HAL_RCCEx_GetPeriphCLKFreq+0x72a>
 80036b6:	693b      	ldr	r3, [r7, #16]
 80036b8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80036bc:	d819      	bhi.n	80036f2 <HAL_RCCEx_GetPeriphCLKFreq+0x73e>
 80036be:	693b      	ldr	r3, [r7, #16]
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d004      	beq.n	80036ce <HAL_RCCEx_GetPeriphCLKFreq+0x71a>
 80036c4:	693b      	ldr	r3, [r7, #16]
 80036c6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80036ca:	d004      	beq.n	80036d6 <HAL_RCCEx_GetPeriphCLKFreq+0x722>
          break;
 80036cc:	e011      	b.n	80036f2 <HAL_RCCEx_GetPeriphCLKFreq+0x73e>
          frequency = HAL_RCC_GetPCLK1Freq();
 80036ce:	f7ff f9cd 	bl	8002a6c <HAL_RCC_GetPCLK1Freq>
 80036d2:	61f8      	str	r0, [r7, #28]
          break;
 80036d4:	e010      	b.n	80036f8 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
          frequency = HAL_RCC_GetSysClockFreq();
 80036d6:	f7ff f931 	bl	800293c <HAL_RCC_GetSysClockFreq>
 80036da:	61f8      	str	r0, [r7, #28]
          break;
 80036dc:	e00c      	b.n	80036f8 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80036de:	4b33      	ldr	r3, [pc, #204]	@ (80037ac <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80036e6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80036ea:	d104      	bne.n	80036f6 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
            frequency = HSI_VALUE;
 80036ec:	4b30      	ldr	r3, [pc, #192]	@ (80037b0 <HAL_RCCEx_GetPeriphCLKFreq+0x7fc>)
 80036ee:	61fb      	str	r3, [r7, #28]
          break;
 80036f0:	e001      	b.n	80036f6 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
          break;
 80036f2:	bf00      	nop
 80036f4:	e0eb      	b.n	80038ce <HAL_RCCEx_GetPeriphCLKFreq+0x91a>
          break;
 80036f6:	bf00      	nop
        break;
 80036f8:	e0e9      	b.n	80038ce <HAL_RCCEx_GetPeriphCLKFreq+0x91a>
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 80036fa:	4b2c      	ldr	r3, [pc, #176]	@ (80037ac <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 80036fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003700:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003704:	613b      	str	r3, [r7, #16]
 8003706:	693b      	ldr	r3, [r7, #16]
 8003708:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800370c:	d013      	beq.n	8003736 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
 800370e:	693b      	ldr	r3, [r7, #16]
 8003710:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003714:	d819      	bhi.n	800374a <HAL_RCCEx_GetPeriphCLKFreq+0x796>
 8003716:	693b      	ldr	r3, [r7, #16]
 8003718:	2b00      	cmp	r3, #0
 800371a:	d004      	beq.n	8003726 <HAL_RCCEx_GetPeriphCLKFreq+0x772>
 800371c:	693b      	ldr	r3, [r7, #16]
 800371e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003722:	d004      	beq.n	800372e <HAL_RCCEx_GetPeriphCLKFreq+0x77a>
          break;
 8003724:	e011      	b.n	800374a <HAL_RCCEx_GetPeriphCLKFreq+0x796>
          frequency = HAL_RCC_GetPCLK1Freq();
 8003726:	f7ff f9a1 	bl	8002a6c <HAL_RCC_GetPCLK1Freq>
 800372a:	61f8      	str	r0, [r7, #28]
          break;
 800372c:	e010      	b.n	8003750 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
          frequency = HAL_RCC_GetSysClockFreq();
 800372e:	f7ff f905 	bl	800293c <HAL_RCC_GetSysClockFreq>
 8003732:	61f8      	str	r0, [r7, #28]
          break;
 8003734:	e00c      	b.n	8003750 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8003736:	4b1d      	ldr	r3, [pc, #116]	@ (80037ac <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800373e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003742:	d104      	bne.n	800374e <HAL_RCCEx_GetPeriphCLKFreq+0x79a>
            frequency = HSI_VALUE;
 8003744:	4b1a      	ldr	r3, [pc, #104]	@ (80037b0 <HAL_RCCEx_GetPeriphCLKFreq+0x7fc>)
 8003746:	61fb      	str	r3, [r7, #28]
          break;
 8003748:	e001      	b.n	800374e <HAL_RCCEx_GetPeriphCLKFreq+0x79a>
          break;
 800374a:	bf00      	nop
 800374c:	e0bf      	b.n	80038ce <HAL_RCCEx_GetPeriphCLKFreq+0x91a>
          break;
 800374e:	bf00      	nop
        break;
 8003750:	e0bd      	b.n	80038ce <HAL_RCCEx_GetPeriphCLKFreq+0x91a>
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8003752:	4b16      	ldr	r3, [pc, #88]	@ (80037ac <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 8003754:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003758:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 800375c:	613b      	str	r3, [r7, #16]
 800375e:	693b      	ldr	r3, [r7, #16]
 8003760:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8003764:	d030      	beq.n	80037c8 <HAL_RCCEx_GetPeriphCLKFreq+0x814>
 8003766:	693b      	ldr	r3, [r7, #16]
 8003768:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800376c:	d837      	bhi.n	80037de <HAL_RCCEx_GetPeriphCLKFreq+0x82a>
 800376e:	693b      	ldr	r3, [r7, #16]
 8003770:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003774:	d01e      	beq.n	80037b4 <HAL_RCCEx_GetPeriphCLKFreq+0x800>
 8003776:	693b      	ldr	r3, [r7, #16]
 8003778:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800377c:	d82f      	bhi.n	80037de <HAL_RCCEx_GetPeriphCLKFreq+0x82a>
 800377e:	693b      	ldr	r3, [r7, #16]
 8003780:	2b00      	cmp	r3, #0
 8003782:	d004      	beq.n	800378e <HAL_RCCEx_GetPeriphCLKFreq+0x7da>
 8003784:	693b      	ldr	r3, [r7, #16]
 8003786:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800378a:	d004      	beq.n	8003796 <HAL_RCCEx_GetPeriphCLKFreq+0x7e2>
          break;
 800378c:	e027      	b.n	80037de <HAL_RCCEx_GetPeriphCLKFreq+0x82a>
          frequency = HAL_RCC_GetPCLK1Freq();
 800378e:	f7ff f96d 	bl	8002a6c <HAL_RCC_GetPCLK1Freq>
 8003792:	61f8      	str	r0, [r7, #28]
          break;
 8003794:	e02a      	b.n	80037ec <HAL_RCCEx_GetPeriphCLKFreq+0x838>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8003796:	4b05      	ldr	r3, [pc, #20]	@ (80037ac <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 8003798:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800379c:	f003 0302 	and.w	r3, r3, #2
 80037a0:	2b02      	cmp	r3, #2
 80037a2:	d11e      	bne.n	80037e2 <HAL_RCCEx_GetPeriphCLKFreq+0x82e>
              frequency = LSI_VALUE;
 80037a4:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80037a8:	61fb      	str	r3, [r7, #28]
          break;
 80037aa:	e01a      	b.n	80037e2 <HAL_RCCEx_GetPeriphCLKFreq+0x82e>
 80037ac:	40021000 	.word	0x40021000
 80037b0:	00f42400 	.word	0x00f42400
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80037b4:	4b48      	ldr	r3, [pc, #288]	@ (80038d8 <HAL_RCCEx_GetPeriphCLKFreq+0x924>)
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80037bc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80037c0:	d111      	bne.n	80037e6 <HAL_RCCEx_GetPeriphCLKFreq+0x832>
            frequency = HSI_VALUE;
 80037c2:	4b46      	ldr	r3, [pc, #280]	@ (80038dc <HAL_RCCEx_GetPeriphCLKFreq+0x928>)
 80037c4:	61fb      	str	r3, [r7, #28]
          break;
 80037c6:	e00e      	b.n	80037e6 <HAL_RCCEx_GetPeriphCLKFreq+0x832>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80037c8:	4b43      	ldr	r3, [pc, #268]	@ (80038d8 <HAL_RCCEx_GetPeriphCLKFreq+0x924>)
 80037ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80037ce:	f003 0302 	and.w	r3, r3, #2
 80037d2:	2b02      	cmp	r3, #2
 80037d4:	d109      	bne.n	80037ea <HAL_RCCEx_GetPeriphCLKFreq+0x836>
            frequency = LSE_VALUE;
 80037d6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80037da:	61fb      	str	r3, [r7, #28]
          break;
 80037dc:	e005      	b.n	80037ea <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          break;
 80037de:	bf00      	nop
 80037e0:	e075      	b.n	80038ce <HAL_RCCEx_GetPeriphCLKFreq+0x91a>
          break;
 80037e2:	bf00      	nop
 80037e4:	e073      	b.n	80038ce <HAL_RCCEx_GetPeriphCLKFreq+0x91a>
          break;
 80037e6:	bf00      	nop
 80037e8:	e071      	b.n	80038ce <HAL_RCCEx_GetPeriphCLKFreq+0x91a>
          break;
 80037ea:	bf00      	nop
        break;
 80037ec:	e06f      	b.n	80038ce <HAL_RCCEx_GetPeriphCLKFreq+0x91a>
       srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 80037ee:	4b3a      	ldr	r3, [pc, #232]	@ (80038d8 <HAL_RCCEx_GetPeriphCLKFreq+0x924>)
 80037f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80037f4:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 80037f8:	613b      	str	r3, [r7, #16]
 80037fa:	693b      	ldr	r3, [r7, #16]
 80037fc:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003800:	d02c      	beq.n	800385c <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
 8003802:	693b      	ldr	r3, [r7, #16]
 8003804:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003808:	d833      	bhi.n	8003872 <HAL_RCCEx_GetPeriphCLKFreq+0x8be>
 800380a:	693b      	ldr	r3, [r7, #16]
 800380c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003810:	d01a      	beq.n	8003848 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
 8003812:	693b      	ldr	r3, [r7, #16]
 8003814:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003818:	d82b      	bhi.n	8003872 <HAL_RCCEx_GetPeriphCLKFreq+0x8be>
 800381a:	693b      	ldr	r3, [r7, #16]
 800381c:	2b00      	cmp	r3, #0
 800381e:	d004      	beq.n	800382a <HAL_RCCEx_GetPeriphCLKFreq+0x876>
 8003820:	693b      	ldr	r3, [r7, #16]
 8003822:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003826:	d004      	beq.n	8003832 <HAL_RCCEx_GetPeriphCLKFreq+0x87e>
          break;
 8003828:	e023      	b.n	8003872 <HAL_RCCEx_GetPeriphCLKFreq+0x8be>
          frequency = HAL_RCC_GetPCLK1Freq();
 800382a:	f7ff f91f 	bl	8002a6c <HAL_RCC_GetPCLK1Freq>
 800382e:	61f8      	str	r0, [r7, #28]
          break;
 8003830:	e026      	b.n	8003880 <HAL_RCCEx_GetPeriphCLKFreq+0x8cc>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8003832:	4b29      	ldr	r3, [pc, #164]	@ (80038d8 <HAL_RCCEx_GetPeriphCLKFreq+0x924>)
 8003834:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003838:	f003 0302 	and.w	r3, r3, #2
 800383c:	2b02      	cmp	r3, #2
 800383e:	d11a      	bne.n	8003876 <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
              frequency = LSI_VALUE;
 8003840:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8003844:	61fb      	str	r3, [r7, #28]
          break;
 8003846:	e016      	b.n	8003876 <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8003848:	4b23      	ldr	r3, [pc, #140]	@ (80038d8 <HAL_RCCEx_GetPeriphCLKFreq+0x924>)
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003850:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003854:	d111      	bne.n	800387a <HAL_RCCEx_GetPeriphCLKFreq+0x8c6>
            frequency = HSI_VALUE;
 8003856:	4b21      	ldr	r3, [pc, #132]	@ (80038dc <HAL_RCCEx_GetPeriphCLKFreq+0x928>)
 8003858:	61fb      	str	r3, [r7, #28]
          break;
 800385a:	e00e      	b.n	800387a <HAL_RCCEx_GetPeriphCLKFreq+0x8c6>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800385c:	4b1e      	ldr	r3, [pc, #120]	@ (80038d8 <HAL_RCCEx_GetPeriphCLKFreq+0x924>)
 800385e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003862:	f003 0302 	and.w	r3, r3, #2
 8003866:	2b02      	cmp	r3, #2
 8003868:	d109      	bne.n	800387e <HAL_RCCEx_GetPeriphCLKFreq+0x8ca>
            frequency = LSE_VALUE;
 800386a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800386e:	61fb      	str	r3, [r7, #28]
          break;
 8003870:	e005      	b.n	800387e <HAL_RCCEx_GetPeriphCLKFreq+0x8ca>
          break;
 8003872:	bf00      	nop
 8003874:	e02b      	b.n	80038ce <HAL_RCCEx_GetPeriphCLKFreq+0x91a>
          break;
 8003876:	bf00      	nop
 8003878:	e029      	b.n	80038ce <HAL_RCCEx_GetPeriphCLKFreq+0x91a>
          break;
 800387a:	bf00      	nop
 800387c:	e027      	b.n	80038ce <HAL_RCCEx_GetPeriphCLKFreq+0x91a>
          break;
 800387e:	bf00      	nop
        break;
 8003880:	e025      	b.n	80038ce <HAL_RCCEx_GetPeriphCLKFreq+0x91a>
        srcclk = __HAL_RCC_GET_SWPMI1_SOURCE();
 8003882:	4b15      	ldr	r3, [pc, #84]	@ (80038d8 <HAL_RCCEx_GetPeriphCLKFreq+0x924>)
 8003884:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003888:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800388c:	613b      	str	r3, [r7, #16]
 800388e:	693b      	ldr	r3, [r7, #16]
 8003890:	2b00      	cmp	r3, #0
 8003892:	d004      	beq.n	800389e <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 8003894:	693b      	ldr	r3, [r7, #16]
 8003896:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800389a:	d004      	beq.n	80038a6 <HAL_RCCEx_GetPeriphCLKFreq+0x8f2>
          break;
 800389c:	e00d      	b.n	80038ba <HAL_RCCEx_GetPeriphCLKFreq+0x906>
          frequency = HAL_RCC_GetPCLK1Freq();
 800389e:	f7ff f8e5 	bl	8002a6c <HAL_RCC_GetPCLK1Freq>
 80038a2:	61f8      	str	r0, [r7, #28]
          break;
 80038a4:	e009      	b.n	80038ba <HAL_RCCEx_GetPeriphCLKFreq+0x906>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80038a6:	4b0c      	ldr	r3, [pc, #48]	@ (80038d8 <HAL_RCCEx_GetPeriphCLKFreq+0x924>)
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80038ae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80038b2:	d101      	bne.n	80038b8 <HAL_RCCEx_GetPeriphCLKFreq+0x904>
            frequency = HSI_VALUE;
 80038b4:	4b09      	ldr	r3, [pc, #36]	@ (80038dc <HAL_RCCEx_GetPeriphCLKFreq+0x928>)
 80038b6:	61fb      	str	r3, [r7, #28]
          break;
 80038b8:	bf00      	nop
        break;
 80038ba:	e008      	b.n	80038ce <HAL_RCCEx_GetPeriphCLKFreq+0x91a>
      break;
 80038bc:	bf00      	nop
 80038be:	e006      	b.n	80038ce <HAL_RCCEx_GetPeriphCLKFreq+0x91a>
      break;
 80038c0:	bf00      	nop
 80038c2:	e004      	b.n	80038ce <HAL_RCCEx_GetPeriphCLKFreq+0x91a>
      break;
 80038c4:	bf00      	nop
 80038c6:	e002      	b.n	80038ce <HAL_RCCEx_GetPeriphCLKFreq+0x91a>
      break;
 80038c8:	bf00      	nop
 80038ca:	e000      	b.n	80038ce <HAL_RCCEx_GetPeriphCLKFreq+0x91a>
      break;
 80038cc:	bf00      	nop
    }
  }

  return(frequency);
 80038ce:	69fb      	ldr	r3, [r7, #28]
}
 80038d0:	4618      	mov	r0, r3
 80038d2:	3720      	adds	r7, #32
 80038d4:	46bd      	mov	sp, r7
 80038d6:	bd80      	pop	{r7, pc}
 80038d8:	40021000 	.word	0x40021000
 80038dc:	00f42400 	.word	0x00f42400

080038e0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80038e0:	b580      	push	{r7, lr}
 80038e2:	b084      	sub	sp, #16
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	6078      	str	r0, [r7, #4]
 80038e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80038ea:	2300      	movs	r3, #0
 80038ec:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80038ee:	4b74      	ldr	r3, [pc, #464]	@ (8003ac0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80038f0:	68db      	ldr	r3, [r3, #12]
 80038f2:	f003 0303 	and.w	r3, r3, #3
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d018      	beq.n	800392c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80038fa:	4b71      	ldr	r3, [pc, #452]	@ (8003ac0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80038fc:	68db      	ldr	r3, [r3, #12]
 80038fe:	f003 0203 	and.w	r2, r3, #3
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	429a      	cmp	r2, r3
 8003908:	d10d      	bne.n	8003926 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
       ||
 800390e:	2b00      	cmp	r3, #0
 8003910:	d009      	beq.n	8003926 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003912:	4b6b      	ldr	r3, [pc, #428]	@ (8003ac0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003914:	68db      	ldr	r3, [r3, #12]
 8003916:	091b      	lsrs	r3, r3, #4
 8003918:	f003 0307 	and.w	r3, r3, #7
 800391c:	1c5a      	adds	r2, r3, #1
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	685b      	ldr	r3, [r3, #4]
       ||
 8003922:	429a      	cmp	r2, r3
 8003924:	d047      	beq.n	80039b6 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003926:	2301      	movs	r3, #1
 8003928:	73fb      	strb	r3, [r7, #15]
 800392a:	e044      	b.n	80039b6 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	2b03      	cmp	r3, #3
 8003932:	d018      	beq.n	8003966 <RCCEx_PLLSAI1_Config+0x86>
 8003934:	2b03      	cmp	r3, #3
 8003936:	d825      	bhi.n	8003984 <RCCEx_PLLSAI1_Config+0xa4>
 8003938:	2b01      	cmp	r3, #1
 800393a:	d002      	beq.n	8003942 <RCCEx_PLLSAI1_Config+0x62>
 800393c:	2b02      	cmp	r3, #2
 800393e:	d009      	beq.n	8003954 <RCCEx_PLLSAI1_Config+0x74>
 8003940:	e020      	b.n	8003984 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003942:	4b5f      	ldr	r3, [pc, #380]	@ (8003ac0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f003 0302 	and.w	r3, r3, #2
 800394a:	2b00      	cmp	r3, #0
 800394c:	d11d      	bne.n	800398a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800394e:	2301      	movs	r3, #1
 8003950:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003952:	e01a      	b.n	800398a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003954:	4b5a      	ldr	r3, [pc, #360]	@ (8003ac0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800395c:	2b00      	cmp	r3, #0
 800395e:	d116      	bne.n	800398e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003960:	2301      	movs	r3, #1
 8003962:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003964:	e013      	b.n	800398e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003966:	4b56      	ldr	r3, [pc, #344]	@ (8003ac0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800396e:	2b00      	cmp	r3, #0
 8003970:	d10f      	bne.n	8003992 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003972:	4b53      	ldr	r3, [pc, #332]	@ (8003ac0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800397a:	2b00      	cmp	r3, #0
 800397c:	d109      	bne.n	8003992 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800397e:	2301      	movs	r3, #1
 8003980:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003982:	e006      	b.n	8003992 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003984:	2301      	movs	r3, #1
 8003986:	73fb      	strb	r3, [r7, #15]
      break;
 8003988:	e004      	b.n	8003994 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800398a:	bf00      	nop
 800398c:	e002      	b.n	8003994 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800398e:	bf00      	nop
 8003990:	e000      	b.n	8003994 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003992:	bf00      	nop
    }

    if(status == HAL_OK)
 8003994:	7bfb      	ldrb	r3, [r7, #15]
 8003996:	2b00      	cmp	r3, #0
 8003998:	d10d      	bne.n	80039b6 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800399a:	4b49      	ldr	r3, [pc, #292]	@ (8003ac0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800399c:	68db      	ldr	r3, [r3, #12]
 800399e:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	6819      	ldr	r1, [r3, #0]
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	685b      	ldr	r3, [r3, #4]
 80039aa:	3b01      	subs	r3, #1
 80039ac:	011b      	lsls	r3, r3, #4
 80039ae:	430b      	orrs	r3, r1
 80039b0:	4943      	ldr	r1, [pc, #268]	@ (8003ac0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80039b2:	4313      	orrs	r3, r2
 80039b4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80039b6:	7bfb      	ldrb	r3, [r7, #15]
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d17c      	bne.n	8003ab6 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80039bc:	4b40      	ldr	r3, [pc, #256]	@ (8003ac0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	4a3f      	ldr	r2, [pc, #252]	@ (8003ac0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80039c2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80039c6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80039c8:	f7fd fbac 	bl	8001124 <HAL_GetTick>
 80039cc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80039ce:	e009      	b.n	80039e4 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80039d0:	f7fd fba8 	bl	8001124 <HAL_GetTick>
 80039d4:	4602      	mov	r2, r0
 80039d6:	68bb      	ldr	r3, [r7, #8]
 80039d8:	1ad3      	subs	r3, r2, r3
 80039da:	2b02      	cmp	r3, #2
 80039dc:	d902      	bls.n	80039e4 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80039de:	2303      	movs	r3, #3
 80039e0:	73fb      	strb	r3, [r7, #15]
        break;
 80039e2:	e005      	b.n	80039f0 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80039e4:	4b36      	ldr	r3, [pc, #216]	@ (8003ac0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d1ef      	bne.n	80039d0 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80039f0:	7bfb      	ldrb	r3, [r7, #15]
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d15f      	bne.n	8003ab6 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80039f6:	683b      	ldr	r3, [r7, #0]
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d110      	bne.n	8003a1e <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80039fc:	4b30      	ldr	r3, [pc, #192]	@ (8003ac0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80039fe:	691b      	ldr	r3, [r3, #16]
 8003a00:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 8003a04:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003a08:	687a      	ldr	r2, [r7, #4]
 8003a0a:	6892      	ldr	r2, [r2, #8]
 8003a0c:	0211      	lsls	r1, r2, #8
 8003a0e:	687a      	ldr	r2, [r7, #4]
 8003a10:	68d2      	ldr	r2, [r2, #12]
 8003a12:	06d2      	lsls	r2, r2, #27
 8003a14:	430a      	orrs	r2, r1
 8003a16:	492a      	ldr	r1, [pc, #168]	@ (8003ac0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003a18:	4313      	orrs	r3, r2
 8003a1a:	610b      	str	r3, [r1, #16]
 8003a1c:	e027      	b.n	8003a6e <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003a1e:	683b      	ldr	r3, [r7, #0]
 8003a20:	2b01      	cmp	r3, #1
 8003a22:	d112      	bne.n	8003a4a <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003a24:	4b26      	ldr	r3, [pc, #152]	@ (8003ac0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003a26:	691b      	ldr	r3, [r3, #16]
 8003a28:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8003a2c:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003a30:	687a      	ldr	r2, [r7, #4]
 8003a32:	6892      	ldr	r2, [r2, #8]
 8003a34:	0211      	lsls	r1, r2, #8
 8003a36:	687a      	ldr	r2, [r7, #4]
 8003a38:	6912      	ldr	r2, [r2, #16]
 8003a3a:	0852      	lsrs	r2, r2, #1
 8003a3c:	3a01      	subs	r2, #1
 8003a3e:	0552      	lsls	r2, r2, #21
 8003a40:	430a      	orrs	r2, r1
 8003a42:	491f      	ldr	r1, [pc, #124]	@ (8003ac0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003a44:	4313      	orrs	r3, r2
 8003a46:	610b      	str	r3, [r1, #16]
 8003a48:	e011      	b.n	8003a6e <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003a4a:	4b1d      	ldr	r3, [pc, #116]	@ (8003ac0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003a4c:	691b      	ldr	r3, [r3, #16]
 8003a4e:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8003a52:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003a56:	687a      	ldr	r2, [r7, #4]
 8003a58:	6892      	ldr	r2, [r2, #8]
 8003a5a:	0211      	lsls	r1, r2, #8
 8003a5c:	687a      	ldr	r2, [r7, #4]
 8003a5e:	6952      	ldr	r2, [r2, #20]
 8003a60:	0852      	lsrs	r2, r2, #1
 8003a62:	3a01      	subs	r2, #1
 8003a64:	0652      	lsls	r2, r2, #25
 8003a66:	430a      	orrs	r2, r1
 8003a68:	4915      	ldr	r1, [pc, #84]	@ (8003ac0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003a6a:	4313      	orrs	r3, r2
 8003a6c:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003a6e:	4b14      	ldr	r3, [pc, #80]	@ (8003ac0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	4a13      	ldr	r2, [pc, #76]	@ (8003ac0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003a74:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003a78:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a7a:	f7fd fb53 	bl	8001124 <HAL_GetTick>
 8003a7e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003a80:	e009      	b.n	8003a96 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003a82:	f7fd fb4f 	bl	8001124 <HAL_GetTick>
 8003a86:	4602      	mov	r2, r0
 8003a88:	68bb      	ldr	r3, [r7, #8]
 8003a8a:	1ad3      	subs	r3, r2, r3
 8003a8c:	2b02      	cmp	r3, #2
 8003a8e:	d902      	bls.n	8003a96 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8003a90:	2303      	movs	r3, #3
 8003a92:	73fb      	strb	r3, [r7, #15]
          break;
 8003a94:	e005      	b.n	8003aa2 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003a96:	4b0a      	ldr	r3, [pc, #40]	@ (8003ac0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d0ef      	beq.n	8003a82 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8003aa2:	7bfb      	ldrb	r3, [r7, #15]
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d106      	bne.n	8003ab6 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003aa8:	4b05      	ldr	r3, [pc, #20]	@ (8003ac0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003aaa:	691a      	ldr	r2, [r3, #16]
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	699b      	ldr	r3, [r3, #24]
 8003ab0:	4903      	ldr	r1, [pc, #12]	@ (8003ac0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003ab2:	4313      	orrs	r3, r2
 8003ab4:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003ab6:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ab8:	4618      	mov	r0, r3
 8003aba:	3710      	adds	r7, #16
 8003abc:	46bd      	mov	sp, r7
 8003abe:	bd80      	pop	{r7, pc}
 8003ac0:	40021000 	.word	0x40021000

08003ac4 <RCCEx_GetSAIxPeriphCLKFreq>:
#endif /* RCC_PLLSAI2_SUPPORT */

#if defined(SAI1)

static uint32_t RCCEx_GetSAIxPeriphCLKFreq(uint32_t PeriphClk, uint32_t InputFrequency)
{
 8003ac4:	b480      	push	{r7}
 8003ac6:	b089      	sub	sp, #36	@ 0x24
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	6078      	str	r0, [r7, #4]
 8003acc:	6039      	str	r1, [r7, #0]
  uint32_t frequency = 0U;
 8003ace:	2300      	movs	r3, #0
 8003ad0:	61fb      	str	r3, [r7, #28]
  uint32_t srcclk = 0U;
 8003ad2:	2300      	movs	r3, #0
 8003ad4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, plln;    /* no init needed */
#if defined(RCC_PLLP_SUPPORT)
  uint32_t pllp = 0U;
 8003ad6:	2300      	movs	r3, #0
 8003ad8:	617b      	str	r3, [r7, #20]
#endif /* RCC_PLLP_SUPPORT */

  /* Handle SAIs */
  if(PeriphClk == RCC_PERIPHCLK_SAI1)
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003ae0:	d10b      	bne.n	8003afa <RCCEx_GetSAIxPeriphCLKFreq+0x36>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 8003ae2:	4b53      	ldr	r3, [pc, #332]	@ (8003c30 <RCCEx_GetSAIxPeriphCLKFreq+0x16c>)
 8003ae4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ae8:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 8003aec:	61bb      	str	r3, [r7, #24]
    if(srcclk == RCC_SAI1CLKSOURCE_PIN)
 8003aee:	69bb      	ldr	r3, [r7, #24]
 8003af0:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003af4:	d101      	bne.n	8003afa <RCCEx_GetSAIxPeriphCLKFreq+0x36>
    {
      frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8003af6:	4b4f      	ldr	r3, [pc, #316]	@ (8003c34 <RCCEx_GetSAIxPeriphCLKFreq+0x170>)
 8003af8:	61fb      	str	r3, [r7, #28]
      /* Else, PLL clock output to check below */
    }
  }
#endif /* SAI2 */

  if(frequency == 0U)
 8003afa:	69fb      	ldr	r3, [r7, #28]
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	f040 8090 	bne.w	8003c22 <RCCEx_GetSAIxPeriphCLKFreq+0x15e>
  {
    pllvco = InputFrequency;
 8003b02:	683b      	ldr	r3, [r7, #0]
 8003b04:	613b      	str	r3, [r7, #16]
      }
    }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

#else
    if(srcclk == RCC_SAI1CLKSOURCE_PLL)
 8003b06:	69bb      	ldr	r3, [r7, #24]
 8003b08:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003b0c:	d143      	bne.n	8003b96 <RCCEx_GetSAIxPeriphCLKFreq+0xd2>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI2CLK) != 0U))
 8003b0e:	4b48      	ldr	r3, [pc, #288]	@ (8003c30 <RCCEx_GetSAIxPeriphCLKFreq+0x16c>)
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b16:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003b1a:	d132      	bne.n	8003b82 <RCCEx_GetSAIxPeriphCLKFreq+0xbe>
 8003b1c:	4b44      	ldr	r3, [pc, #272]	@ (8003c30 <RCCEx_GetSAIxPeriphCLKFreq+0x16c>)
 8003b1e:	68db      	ldr	r3, [r3, #12]
 8003b20:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d02c      	beq.n	8003b82 <RCCEx_GetSAIxPeriphCLKFreq+0xbe>
      {
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8003b28:	4b41      	ldr	r3, [pc, #260]	@ (8003c30 <RCCEx_GetSAIxPeriphCLKFreq+0x16c>)
 8003b2a:	68db      	ldr	r3, [r3, #12]
 8003b2c:	091b      	lsrs	r3, r3, #4
 8003b2e:	f003 0307 	and.w	r3, r3, #7
 8003b32:	3301      	adds	r3, #1
 8003b34:	693a      	ldr	r2, [r7, #16]
 8003b36:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b3a:	613b      	str	r3, [r7, #16]
        /* f(PLLSAI2CLK) = f(VCO input) * PLLN / PLLP */
        plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8003b3c:	4b3c      	ldr	r3, [pc, #240]	@ (8003c30 <RCCEx_GetSAIxPeriphCLKFreq+0x16c>)
 8003b3e:	68db      	ldr	r3, [r3, #12]
 8003b40:	0a1b      	lsrs	r3, r3, #8
 8003b42:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003b46:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
 8003b48:	4b39      	ldr	r3, [pc, #228]	@ (8003c30 <RCCEx_GetSAIxPeriphCLKFreq+0x16c>)
 8003b4a:	68db      	ldr	r3, [r3, #12]
 8003b4c:	0edb      	lsrs	r3, r3, #27
 8003b4e:	f003 031f 	and.w	r3, r3, #31
 8003b52:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 8003b54:	697b      	ldr	r3, [r7, #20]
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d10a      	bne.n	8003b70 <RCCEx_GetSAIxPeriphCLKFreq+0xac>
        {
          if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 8003b5a:	4b35      	ldr	r3, [pc, #212]	@ (8003c30 <RCCEx_GetSAIxPeriphCLKFreq+0x16c>)
 8003b5c:	68db      	ldr	r3, [r3, #12]
 8003b5e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d002      	beq.n	8003b6c <RCCEx_GetSAIxPeriphCLKFreq+0xa8>
          {
            pllp = 17U;
 8003b66:	2311      	movs	r3, #17
 8003b68:	617b      	str	r3, [r7, #20]
 8003b6a:	e001      	b.n	8003b70 <RCCEx_GetSAIxPeriphCLKFreq+0xac>
          }
          else
          {
            pllp = 7U;
 8003b6c:	2307      	movs	r3, #7
 8003b6e:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8003b70:	693b      	ldr	r3, [r7, #16]
 8003b72:	68fa      	ldr	r2, [r7, #12]
 8003b74:	fb03 f202 	mul.w	r2, r3, r2
 8003b78:	697b      	ldr	r3, [r7, #20]
 8003b7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b7e:	61fb      	str	r3, [r7, #28]
 8003b80:	e04f      	b.n	8003c22 <RCCEx_GetSAIxPeriphCLKFreq+0x15e>
      }
      else if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8003b82:	4b2b      	ldr	r3, [pc, #172]	@ (8003c30 <RCCEx_GetSAIxPeriphCLKFreq+0x16c>)
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003b8a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003b8e:	d148      	bne.n	8003c22 <RCCEx_GetSAIxPeriphCLKFreq+0x15e>
      {
        /* HSI automatically selected as clock source if PLLs not enabled */
        frequency = HSI_VALUE;
 8003b90:	4b29      	ldr	r3, [pc, #164]	@ (8003c38 <RCCEx_GetSAIxPeriphCLKFreq+0x174>)
 8003b92:	61fb      	str	r3, [r7, #28]
 8003b94:	e045      	b.n	8003c22 <RCCEx_GetSAIxPeriphCLKFreq+0x15e>
      else
      {
        /* No clock source, frequency default init at 0 */
      }
    }
    else if(srcclk == RCC_SAI1CLKSOURCE_PLLSAI1)
 8003b96:	69bb      	ldr	r3, [r7, #24]
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d142      	bne.n	8003c22 <RCCEx_GetSAIxPeriphCLKFreq+0x15e>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_SAI1CLK) != 0U))
 8003b9c:	4b24      	ldr	r3, [pc, #144]	@ (8003c30 <RCCEx_GetSAIxPeriphCLKFreq+0x16c>)
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003ba4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003ba8:	d132      	bne.n	8003c10 <RCCEx_GetSAIxPeriphCLKFreq+0x14c>
 8003baa:	4b21      	ldr	r3, [pc, #132]	@ (8003c30 <RCCEx_GetSAIxPeriphCLKFreq+0x16c>)
 8003bac:	691b      	ldr	r3, [r3, #16]
 8003bae:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d02c      	beq.n	8003c10 <RCCEx_GetSAIxPeriphCLKFreq+0x14c>
        /* PLLSAI1M exists: apply PLLSAI1M divider for PLLSAI1 output computation */
        /* f(PLLSAI1 Source) / PLLSAI1M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8003bb6:	4b1e      	ldr	r3, [pc, #120]	@ (8003c30 <RCCEx_GetSAIxPeriphCLKFreq+0x16c>)
 8003bb8:	68db      	ldr	r3, [r3, #12]
 8003bba:	091b      	lsrs	r3, r3, #4
 8003bbc:	f003 0307 	and.w	r3, r3, #7
 8003bc0:	3301      	adds	r3, #1
 8003bc2:	693a      	ldr	r2, [r7, #16]
 8003bc4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bc8:	613b      	str	r3, [r7, #16]
#endif
        /* f(PLLSAI1CLK) = f(VCOSAI1 input) * PLLSAI1N / PLLSAI1P */
        plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8003bca:	4b19      	ldr	r3, [pc, #100]	@ (8003c30 <RCCEx_GetSAIxPeriphCLKFreq+0x16c>)
 8003bcc:	691b      	ldr	r3, [r3, #16]
 8003bce:	0a1b      	lsrs	r3, r3, #8
 8003bd0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003bd4:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1PDIV) >> RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos;
 8003bd6:	4b16      	ldr	r3, [pc, #88]	@ (8003c30 <RCCEx_GetSAIxPeriphCLKFreq+0x16c>)
 8003bd8:	691b      	ldr	r3, [r3, #16]
 8003bda:	0edb      	lsrs	r3, r3, #27
 8003bdc:	f003 031f 	and.w	r3, r3, #31
 8003be0:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 8003be2:	697b      	ldr	r3, [r7, #20]
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d10a      	bne.n	8003bfe <RCCEx_GetSAIxPeriphCLKFreq+0x13a>
        {
          if(READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1P) != 0U)
 8003be8:	4b11      	ldr	r3, [pc, #68]	@ (8003c30 <RCCEx_GetSAIxPeriphCLKFreq+0x16c>)
 8003bea:	691b      	ldr	r3, [r3, #16]
 8003bec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d002      	beq.n	8003bfa <RCCEx_GetSAIxPeriphCLKFreq+0x136>
          {
            pllp = 17U;
 8003bf4:	2311      	movs	r3, #17
 8003bf6:	617b      	str	r3, [r7, #20]
 8003bf8:	e001      	b.n	8003bfe <RCCEx_GetSAIxPeriphCLKFreq+0x13a>
          }
          else
          {
            pllp = 7U;
 8003bfa:	2307      	movs	r3, #7
 8003bfc:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8003bfe:	693b      	ldr	r3, [r7, #16]
 8003c00:	68fa      	ldr	r2, [r7, #12]
 8003c02:	fb03 f202 	mul.w	r2, r3, r2
 8003c06:	697b      	ldr	r3, [r7, #20]
 8003c08:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c0c:	61fb      	str	r3, [r7, #28]
 8003c0e:	e008      	b.n	8003c22 <RCCEx_GetSAIxPeriphCLKFreq+0x15e>
      }
      else if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8003c10:	4b07      	ldr	r3, [pc, #28]	@ (8003c30 <RCCEx_GetSAIxPeriphCLKFreq+0x16c>)
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003c18:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003c1c:	d101      	bne.n	8003c22 <RCCEx_GetSAIxPeriphCLKFreq+0x15e>
      {
        /* HSI automatically selected as clock source if PLLs not enabled */
        frequency = HSI_VALUE;
 8003c1e:	4b06      	ldr	r3, [pc, #24]	@ (8003c38 <RCCEx_GetSAIxPeriphCLKFreq+0x174>)
 8003c20:	61fb      	str	r3, [r7, #28]
      /* No clock source, frequency default init at 0 */
    }
  }


  return frequency;
 8003c22:	69fb      	ldr	r3, [r7, #28]
}
 8003c24:	4618      	mov	r0, r3
 8003c26:	3724      	adds	r7, #36	@ 0x24
 8003c28:	46bd      	mov	sp, r7
 8003c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c2e:	4770      	bx	lr
 8003c30:	40021000 	.word	0x40021000
 8003c34:	001fff68 	.word	0x001fff68
 8003c38:	00f42400 	.word	0x00f42400

08003c3c <HAL_SAI_InitProtocol>:
  *                   the configuration information for SAI module.
  * @param  nbslot Number of slot.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_InitProtocol(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 8003c3c:	b580      	push	{r7, lr}
 8003c3e:	b086      	sub	sp, #24
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	60f8      	str	r0, [r7, #12]
 8003c44:	60b9      	str	r1, [r7, #8]
 8003c46:	607a      	str	r2, [r7, #4]
 8003c48:	603b      	str	r3, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SAI_SUPPORTED_PROTOCOL(protocol));
  assert_param(IS_SAI_PROTOCOL_DATASIZE(datasize));

  switch (protocol)
 8003c4a:	68bb      	ldr	r3, [r7, #8]
 8003c4c:	2b02      	cmp	r3, #2
 8003c4e:	d904      	bls.n	8003c5a <HAL_SAI_InitProtocol+0x1e>
 8003c50:	68bb      	ldr	r3, [r7, #8]
 8003c52:	3b03      	subs	r3, #3
 8003c54:	2b01      	cmp	r3, #1
 8003c56:	d812      	bhi.n	8003c7e <HAL_SAI_InitProtocol+0x42>
 8003c58:	e008      	b.n	8003c6c <HAL_SAI_InitProtocol+0x30>
  {
    case SAI_I2S_STANDARD :
    case SAI_I2S_MSBJUSTIFIED :
    case SAI_I2S_LSBJUSTIFIED :
      status = SAI_InitI2S(hsai, protocol, datasize, nbslot);
 8003c5a:	683b      	ldr	r3, [r7, #0]
 8003c5c:	687a      	ldr	r2, [r7, #4]
 8003c5e:	68b9      	ldr	r1, [r7, #8]
 8003c60:	68f8      	ldr	r0, [r7, #12]
 8003c62:	f000 fa4d 	bl	8004100 <SAI_InitI2S>
 8003c66:	4603      	mov	r3, r0
 8003c68:	75fb      	strb	r3, [r7, #23]
      break;
 8003c6a:	e00b      	b.n	8003c84 <HAL_SAI_InitProtocol+0x48>
    case SAI_PCM_LONG :
    case SAI_PCM_SHORT :
      status = SAI_InitPCM(hsai, protocol, datasize, nbslot);
 8003c6c:	683b      	ldr	r3, [r7, #0]
 8003c6e:	687a      	ldr	r2, [r7, #4]
 8003c70:	68b9      	ldr	r1, [r7, #8]
 8003c72:	68f8      	ldr	r0, [r7, #12]
 8003c74:	f000 faf6 	bl	8004264 <SAI_InitPCM>
 8003c78:	4603      	mov	r3, r0
 8003c7a:	75fb      	strb	r3, [r7, #23]
      break;
 8003c7c:	e002      	b.n	8003c84 <HAL_SAI_InitProtocol+0x48>
    default :
      status = HAL_ERROR;
 8003c7e:	2301      	movs	r3, #1
 8003c80:	75fb      	strb	r3, [r7, #23]
      break;
 8003c82:	bf00      	nop
  }

  if (status == HAL_OK)
 8003c84:	7dfb      	ldrb	r3, [r7, #23]
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d104      	bne.n	8003c94 <HAL_SAI_InitProtocol+0x58>
  {
    status = HAL_SAI_Init(hsai);
 8003c8a:	68f8      	ldr	r0, [r7, #12]
 8003c8c:	f000 f808 	bl	8003ca0 <HAL_SAI_Init>
 8003c90:	4603      	mov	r3, r0
 8003c92:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8003c94:	7dfb      	ldrb	r3, [r7, #23]
}
 8003c96:	4618      	mov	r0, r3
 8003c98:	3718      	adds	r7, #24
 8003c9a:	46bd      	mov	sp, r7
 8003c9c:	bd80      	pop	{r7, pc}
	...

08003ca0 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 8003ca0:	b580      	push	{r7, lr}
 8003ca2:	b086      	sub	sp, #24
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	6078      	str	r0, [r7, #4]
#endif /* SAI2 */
  uint32_t ckstr_bits;
  uint32_t syncen_bits;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d101      	bne.n	8003cb2 <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
 8003cae:	2301      	movs	r3, #1
 8003cb0:	e10c      	b.n	8003ecc <HAL_SAI_Init+0x22c>
    }
  }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  if (hsai->State == HAL_SAI_STATE_RESET)
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 8003cb8:	b2db      	uxtb	r3, r3
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d106      	bne.n	8003ccc <HAL_SAI_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	2200      	movs	r2, #0
 8003cc2:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 8003cc6:	6878      	ldr	r0, [r7, #4]
 8003cc8:	f7fd f808 	bl	8000cdc <HAL_SAI_MspInit>
#endif
  }

  /* Disable the selected SAI peripheral */
  if (SAI_Disable(hsai) != HAL_OK)
 8003ccc:	6878      	ldr	r0, [r7, #4]
 8003cce:	f000 fb83 	bl	80043d8 <SAI_Disable>
 8003cd2:	4603      	mov	r3, r0
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d001      	beq.n	8003cdc <HAL_SAI_Init+0x3c>
  {
    return HAL_ERROR;
 8003cd8:	2301      	movs	r3, #1
 8003cda:	e0f7      	b.n	8003ecc <HAL_SAI_Init+0x22c>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	2202      	movs	r2, #2
 8003ce0:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d
      tmpregisterGCR = 0;
      break;
  }
#endif /* SAI2 */

  switch (hsai->Init.Synchro)
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	689b      	ldr	r3, [r3, #8]
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d002      	beq.n	8003cf2 <HAL_SAI_Init+0x52>
 8003cec:	2b01      	cmp	r3, #1
 8003cee:	d003      	beq.n	8003cf8 <HAL_SAI_Init+0x58>
 8003cf0:	e006      	b.n	8003d00 <HAL_SAI_Init+0x60>
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
 8003cf2:	2300      	movs	r3, #0
 8003cf4:	613b      	str	r3, [r7, #16]
      break;
 8003cf6:	e006      	b.n	8003d06 <HAL_SAI_Init+0x66>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
 8003cf8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003cfc:	613b      	str	r3, [r7, #16]
      break;
 8003cfe:	e002      	b.n	8003d06 <HAL_SAI_Init+0x66>
      syncen_bits = SAI_xCR1_SYNCEN_1;
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
      break;
#endif /* SAI2 */
    default :
      syncen_bits = 0;
 8003d00:	2300      	movs	r3, #0
 8003d02:	613b      	str	r3, [r7, #16]
      break;
 8003d04:	bf00      	nop
  else
  {
    SAI2->GCR = tmpregisterGCR;
  }
#else
  SAI1->GCR = 0;
 8003d06:	4b73      	ldr	r3, [pc, #460]	@ (8003ed4 <HAL_SAI_Init+0x234>)
 8003d08:	2200      	movs	r2, #0
 8003d0a:	601a      	str	r2, [r3, #0]
#endif /* SAI2 */

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	69db      	ldr	r3, [r3, #28]
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d031      	beq.n	8003d78 <HAL_SAI_Init+0xd8>
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
    }

#else

    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 8003d14:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8003d18:	f7ff f94c 	bl	8002fb4 <HAL_RCCEx_GetPeriphCLKFreq>
 8003d1c:	60f8      	str	r0, [r7, #12]
    /* Configure Master Clock using the following formula :
       MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
       FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
       MCKDIV[3:0] = SAI_CK_x / FS * 512 */
    /* (freq x 10) to keep Significant digits */
    tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * 2U * 256U);
 8003d1e:	68fa      	ldr	r2, [r7, #12]
 8003d20:	4613      	mov	r3, r2
 8003d22:	009b      	lsls	r3, r3, #2
 8003d24:	4413      	add	r3, r2
 8003d26:	005b      	lsls	r3, r3, #1
 8003d28:	461a      	mov	r2, r3
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	69db      	ldr	r3, [r3, #28]
 8003d2e:	025b      	lsls	r3, r3, #9
 8003d30:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d34:	60bb      	str	r3, [r7, #8]
    hsai->Init.Mckdiv = tmpval / 10U;
 8003d36:	68bb      	ldr	r3, [r7, #8]
 8003d38:	4a67      	ldr	r2, [pc, #412]	@ (8003ed8 <HAL_SAI_Init+0x238>)
 8003d3a:	fba2 2303 	umull	r2, r3, r2, r3
 8003d3e:	08da      	lsrs	r2, r3, #3
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
 8003d44:	68b9      	ldr	r1, [r7, #8]
 8003d46:	4b64      	ldr	r3, [pc, #400]	@ (8003ed8 <HAL_SAI_Init+0x238>)
 8003d48:	fba3 2301 	umull	r2, r3, r3, r1
 8003d4c:	08da      	lsrs	r2, r3, #3
 8003d4e:	4613      	mov	r3, r2
 8003d50:	009b      	lsls	r3, r3, #2
 8003d52:	4413      	add	r3, r2
 8003d54:	005b      	lsls	r3, r3, #1
 8003d56:	1aca      	subs	r2, r1, r3
 8003d58:	2a08      	cmp	r2, #8
 8003d5a:	d904      	bls.n	8003d66 <HAL_SAI_Init+0xc6>
    {
      hsai->Init.Mckdiv += 1U;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	6a1b      	ldr	r3, [r3, #32]
 8003d60:	1c5a      	adds	r2, r3, #1
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	621a      	str	r2, [r3, #32]
    }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
    /* STM32L4P5xx || STM32L4Q5xx */

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d6a:	2b04      	cmp	r3, #4
 8003d6c:	d104      	bne.n	8003d78 <HAL_SAI_Init+0xd8>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	6a1b      	ldr	r3, [r3, #32]
 8003d72:	085a      	lsrs	r2, r3, #1
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	621a      	str	r2, [r3, #32]
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	685b      	ldr	r3, [r3, #4]
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d003      	beq.n	8003d88 <HAL_SAI_Init+0xe8>
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	685b      	ldr	r3, [r3, #4]
 8003d84:	2b02      	cmp	r3, #2
 8003d86:	d109      	bne.n	8003d9c <HAL_SAI_Init+0xfc>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d8c:	2b01      	cmp	r3, #1
 8003d8e:	d101      	bne.n	8003d94 <HAL_SAI_Init+0xf4>
 8003d90:	2300      	movs	r3, #0
 8003d92:	e001      	b.n	8003d98 <HAL_SAI_Init+0xf8>
 8003d94:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003d98:	617b      	str	r3, [r7, #20]
 8003d9a:	e008      	b.n	8003dae <HAL_SAI_Init+0x10e>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003da0:	2b01      	cmp	r3, #1
 8003da2:	d102      	bne.n	8003daa <HAL_SAI_Init+0x10a>
 8003da4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003da8:	e000      	b.n	8003dac <HAL_SAI_Init+0x10c>
 8003daa:	2300      	movs	r3, #0
 8003dac:	617b      	str	r3, [r7, #20]
                          ckstr_bits | syncen_bits |                             \
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
                          hsai->Init.MckOverSampling);
#else
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	6819      	ldr	r1, [r3, #0]
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681a      	ldr	r2, [r3, #0]
 8003db8:	4b48      	ldr	r3, [pc, #288]	@ (8003edc <HAL_SAI_Init+0x23c>)
 8003dba:	400b      	ands	r3, r1
 8003dbc:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	6819      	ldr	r1, [r3, #0]
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	685a      	ldr	r2, [r3, #4]
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003dcc:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8003dd2:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003dd8:	431a      	orrs	r2, r3
 8003dda:	697b      	ldr	r3, [r7, #20]
 8003ddc:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                             \
 8003dde:	693b      	ldr	r3, [r7, #16]
 8003de0:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                          ckstr_bits | syncen_bits |                             \
 8003de6:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	691b      	ldr	r3, [r3, #16]
 8003dec:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	695b      	ldr	r3, [r3, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8003df2:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	6a1b      	ldr	r3, [r3, #32]
 8003df8:	051b      	lsls	r3, r3, #20
 8003dfa:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	430a      	orrs	r2, r1
 8003e02:	601a      	str	r2, [r3, #0]
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	685b      	ldr	r3, [r3, #4]
 8003e0a:	687a      	ldr	r2, [r7, #4]
 8003e0c:	6812      	ldr	r2, [r2, #0]
 8003e0e:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 8003e12:	f023 030f 	bic.w	r3, r3, #15
 8003e16:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	6859      	ldr	r1, [r3, #4]
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	699a      	ldr	r2, [r3, #24]
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e26:	431a      	orrs	r2, r3
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e2c:	431a      	orrs	r2, r3
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	430a      	orrs	r2, r1
 8003e34:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	6899      	ldr	r1, [r3, #8]
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681a      	ldr	r2, [r3, #0]
 8003e40:	4b27      	ldr	r3, [pc, #156]	@ (8003ee0 <HAL_SAI_Init+0x240>)
 8003e42:	400b      	ands	r3, r1
 8003e44:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	6899      	ldr	r1, [r3, #8]
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e50:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8003e56:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                           hsai->FrameInit.FSOffset |
 8003e5c:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
                           hsai->FrameInit.FSDefinition |
 8003e62:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e68:	3b01      	subs	r3, #1
 8003e6a:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 8003e6c:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	430a      	orrs	r2, r1
 8003e74:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	68d9      	ldr	r1, [r3, #12]
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681a      	ldr	r2, [r3, #0]
 8003e80:	f24f 0320 	movw	r3, #61472	@ 0xf020
 8003e84:	400b      	ands	r3, r1
 8003e86:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	68d9      	ldr	r1, [r3, #12]
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e96:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003e9c:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8003e9e:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ea4:	3b01      	subs	r3, #1
 8003ea6:	021b      	lsls	r3, r3, #8
 8003ea8:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	430a      	orrs	r2, r1
 8003eb0:	60da      	str	r2, [r3, #12]
  }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	2200      	movs	r2, #0
 8003eb6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	2201      	movs	r2, #1
 8003ebe:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	2200      	movs	r2, #0
 8003ec6:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

  return HAL_OK;
 8003eca:	2300      	movs	r3, #0
}
 8003ecc:	4618      	mov	r0, r3
 8003ece:	3718      	adds	r7, #24
 8003ed0:	46bd      	mov	sp, r7
 8003ed2:	bd80      	pop	{r7, pc}
 8003ed4:	40015400 	.word	0x40015400
 8003ed8:	cccccccd 	.word	0xcccccccd
 8003edc:	ff05c010 	.word	0xff05c010
 8003ee0:	fff88000 	.word	0xfff88000

08003ee4 <HAL_SAI_DMAStop>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_DMAStop(SAI_HandleTypeDef *hsai)
{
 8003ee4:	b580      	push	{r7, lr}
 8003ee6:	b084      	sub	sp, #16
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003eec:	2300      	movs	r3, #0
 8003eee:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hsai);
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 8003ef6:	2b01      	cmp	r3, #1
 8003ef8:	d101      	bne.n	8003efe <HAL_SAI_DMAStop+0x1a>
 8003efa:	2302      	movs	r3, #2
 8003efc:	e042      	b.n	8003f84 <HAL_SAI_DMAStop+0xa0>
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	2201      	movs	r2, #1
 8003f02:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

  /* Disable the SAI DMA request */
  hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	681a      	ldr	r2, [r3, #0]
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 8003f14:	601a      	str	r2, [r3, #0]

  /* Abort the SAI Tx DMA Stream */
  if ((hsai->State == HAL_SAI_STATE_BUSY_TX) && (hsai->hdmatx != NULL))
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 8003f1c:	b2db      	uxtb	r3, r3
 8003f1e:	2b12      	cmp	r3, #18
 8003f20:	d108      	bne.n	8003f34 <HAL_SAI_DMAStop+0x50>
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d004      	beq.n	8003f34 <HAL_SAI_DMAStop+0x50>
  {
    /* No need to check the returned value of HAL_DMA_Abort. */
    /* Only HAL_DMA_ERROR_NO_XFER can be returned in case of error and it's not an error for SAI. */
    (void) HAL_DMA_Abort(hsai->hdmatx);
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003f2e:	4618      	mov	r0, r3
 8003f30:	f7fd fb52 	bl	80015d8 <HAL_DMA_Abort>
  }

  /* Abort the SAI Rx DMA Stream */
  if ((hsai->State == HAL_SAI_STATE_BUSY_RX) && (hsai->hdmarx != NULL))
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 8003f3a:	b2db      	uxtb	r3, r3
 8003f3c:	2b22      	cmp	r3, #34	@ 0x22
 8003f3e:	d108      	bne.n	8003f52 <HAL_SAI_DMAStop+0x6e>
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d004      	beq.n	8003f52 <HAL_SAI_DMAStop+0x6e>
  {
    /* No need to check the returned value of HAL_DMA_Abort. */
    /* Only HAL_DMA_ERROR_NO_XFER can be returned in case of error and it's not an error for SAI. */
    (void) HAL_DMA_Abort(hsai->hdmarx);
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f4c:	4618      	mov	r0, r3
 8003f4e:	f7fd fb43 	bl	80015d8 <HAL_DMA_Abort>
  }

  /* Disable SAI peripheral */
  if (SAI_Disable(hsai) != HAL_OK)
 8003f52:	6878      	ldr	r0, [r7, #4]
 8003f54:	f000 fa40 	bl	80043d8 <SAI_Disable>
 8003f58:	4603      	mov	r3, r0
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d001      	beq.n	8003f62 <HAL_SAI_DMAStop+0x7e>
  {
    status = HAL_ERROR;
 8003f5e:	2301      	movs	r3, #1
 8003f60:	73fb      	strb	r3, [r7, #15]
  }

  /* Flush the fifo */
  SET_BIT(hsai->Instance->CR2, SAI_xCR2_FFLUSH);
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	685a      	ldr	r2, [r3, #4]
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f042 0208 	orr.w	r2, r2, #8
 8003f70:	605a      	str	r2, [r3, #4]

  /* Set hsai state to ready */
  hsai->State = HAL_SAI_STATE_READY;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	2201      	movs	r2, #1
 8003f76:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

  /* Process Unlocked */
  __HAL_UNLOCK(hsai);
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	2200      	movs	r2, #0
 8003f7e:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

  return status;
 8003f82:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f84:	4618      	mov	r0, r3
 8003f86:	3710      	adds	r7, #16
 8003f88:	46bd      	mov	sp, r7
 8003f8a:	bd80      	pop	{r7, pc}

08003f8c <HAL_SAI_Transmit_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Transmit_DMA(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size)
{
 8003f8c:	b580      	push	{r7, lr}
 8003f8e:	b086      	sub	sp, #24
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	60f8      	str	r0, [r7, #12]
 8003f94:	60b9      	str	r1, [r7, #8]
 8003f96:	4613      	mov	r3, r2
 8003f98:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart = HAL_GetTick();
 8003f9a:	f7fd f8c3 	bl	8001124 <HAL_GetTick>
 8003f9e:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 8003fa0:	68bb      	ldr	r3, [r7, #8]
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d002      	beq.n	8003fac <HAL_SAI_Transmit_DMA+0x20>
 8003fa6:	88fb      	ldrh	r3, [r7, #6]
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d101      	bne.n	8003fb0 <HAL_SAI_Transmit_DMA+0x24>
  {
    return  HAL_ERROR;
 8003fac:	2301      	movs	r3, #1
 8003fae:	e093      	b.n	80040d8 <HAL_SAI_Transmit_DMA+0x14c>
  }

  if (hsai->State == HAL_SAI_STATE_READY)
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 8003fb6:	b2db      	uxtb	r3, r3
 8003fb8:	2b01      	cmp	r3, #1
 8003fba:	f040 808c 	bne.w	80040d6 <HAL_SAI_Transmit_DMA+0x14a>
  {
    /* Process Locked */
    __HAL_LOCK(hsai);
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 8003fc4:	2b01      	cmp	r3, #1
 8003fc6:	d101      	bne.n	8003fcc <HAL_SAI_Transmit_DMA+0x40>
 8003fc8:	2302      	movs	r3, #2
 8003fca:	e085      	b.n	80040d8 <HAL_SAI_Transmit_DMA+0x14c>
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	2201      	movs	r2, #1
 8003fd0:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

    hsai->pBuffPtr = pData;
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	68ba      	ldr	r2, [r7, #8]
 8003fd8:	665a      	str	r2, [r3, #100]	@ 0x64
    hsai->XferSize = Size;
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	88fa      	ldrh	r2, [r7, #6]
 8003fde:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    hsai->XferCount = Size;
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	88fa      	ldrh	r2, [r7, #6]
 8003fe6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	2200      	movs	r2, #0
 8003fee:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    hsai->State = HAL_SAI_STATE_BUSY_TX;
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	2212      	movs	r2, #18
 8003ff6:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

    /* Set the SAI Tx DMA Half transfer complete callback */
    hsai->hdmatx->XferHalfCpltCallback = SAI_DMATxHalfCplt;
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003ffe:	4a38      	ldr	r2, [pc, #224]	@ (80040e0 <HAL_SAI_Transmit_DMA+0x154>)
 8004000:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SAI TxDMA transfer complete callback */
    hsai->hdmatx->XferCpltCallback = SAI_DMATxCplt;
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004006:	4a37      	ldr	r2, [pc, #220]	@ (80040e4 <HAL_SAI_Transmit_DMA+0x158>)
 8004008:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the DMA error callback */
    hsai->hdmatx->XferErrorCallback = SAI_DMAError;
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800400e:	4a36      	ldr	r2, [pc, #216]	@ (80040e8 <HAL_SAI_Transmit_DMA+0x15c>)
 8004010:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA Tx abort callback */
    hsai->hdmatx->XferAbortCallback = NULL;
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004016:	2200      	movs	r2, #0
 8004018:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the Tx DMA Stream */
    if (HAL_DMA_Start_IT(hsai->hdmatx, (uint32_t)hsai->pBuffPtr, (uint32_t)&hsai->Instance->DR, hsai->XferSize) != HAL_OK)
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004022:	4619      	mov	r1, r3
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	331c      	adds	r3, #28
 800402a:	461a      	mov	r2, r3
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8004032:	f7fd fa71 	bl	8001518 <HAL_DMA_Start_IT>
 8004036:	4603      	mov	r3, r0
 8004038:	2b00      	cmp	r3, #0
 800403a:	d005      	beq.n	8004048 <HAL_SAI_Transmit_DMA+0xbc>
    {
      __HAL_UNLOCK(hsai);
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	2200      	movs	r2, #0
 8004040:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
      return  HAL_ERROR;
 8004044:	2301      	movs	r3, #1
 8004046:	e047      	b.n	80040d8 <HAL_SAI_Transmit_DMA+0x14c>
    }

    /* Enable the interrupts for error handling */
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8004048:	2100      	movs	r1, #0
 800404a:	68f8      	ldr	r0, [r7, #12]
 800404c:	f000 f98c 	bl	8004368 <SAI_InterruptFlag>
 8004050:	4601      	mov	r1, r0
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	691a      	ldr	r2, [r3, #16]
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	430a      	orrs	r2, r1
 800405e:	611a      	str	r2, [r3, #16]

    /* Enable SAI Tx DMA Request */
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	681a      	ldr	r2, [r3, #0]
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 800406e:	601a      	str	r2, [r3, #0]

    /* Wait until FIFO is not empty */
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
 8004070:	e015      	b.n	800409e <HAL_SAI_Transmit_DMA+0x112>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > SAI_LONG_TIMEOUT)
 8004072:	f7fd f857 	bl	8001124 <HAL_GetTick>
 8004076:	4602      	mov	r2, r0
 8004078:	697b      	ldr	r3, [r7, #20]
 800407a:	1ad3      	subs	r3, r2, r3
 800407c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004080:	d90d      	bls.n	800409e <HAL_SAI_Transmit_DMA+0x112>
      {
        /* Update error code */
        hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004088:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

        /* Process Unlocked */
        __HAL_UNLOCK(hsai);
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	2200      	movs	r2, #0
 8004096:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800409a:	2303      	movs	r3, #3
 800409c:	e01c      	b.n	80040d8 <HAL_SAI_Transmit_DMA+0x14c>
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	695b      	ldr	r3, [r3, #20]
 80040a4:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d0e2      	beq.n	8004072 <HAL_SAI_Transmit_DMA+0xe6>
      }
    }

    /* Check if the SAI is already enabled */
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == 0U)
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d107      	bne.n	80040ca <HAL_SAI_Transmit_DMA+0x13e>
    {
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	681a      	ldr	r2, [r3, #0]
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 80040c8:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	2200      	movs	r2, #0
 80040ce:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 80040d2:	2300      	movs	r3, #0
 80040d4:	e000      	b.n	80040d8 <HAL_SAI_Transmit_DMA+0x14c>
  }
  else
  {
    return HAL_BUSY;
 80040d6:	2302      	movs	r3, #2
  }
}
 80040d8:	4618      	mov	r0, r3
 80040da:	3718      	adds	r7, #24
 80040dc:	46bd      	mov	sp, r7
 80040de:	bd80      	pop	{r7, pc}
 80040e0:	080044ab 	.word	0x080044ab
 80040e4:	0800444d 	.word	0x0800444d
 80040e8:	080044c7 	.word	0x080044c7

080040ec <HAL_SAI_ErrorCallback>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
__weak void HAL_SAI_ErrorCallback(SAI_HandleTypeDef *hsai)
{
 80040ec:	b480      	push	{r7}
 80040ee:	b083      	sub	sp, #12
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	6078      	str	r0, [r7, #4]
  UNUSED(hsai);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_ErrorCallback could be implemented in the user file
   */
}
 80040f4:	bf00      	nop
 80040f6:	370c      	adds	r7, #12
 80040f8:	46bd      	mov	sp, r7
 80040fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040fe:	4770      	bx	lr

08004100 <SAI_InitI2S>:
  * @param  nbslot number of slot minimum value is 2 and max is 16.
  *         the value must be a multiple of 2.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitI2S(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 8004100:	b480      	push	{r7}
 8004102:	b087      	sub	sp, #28
 8004104:	af00      	add	r7, sp, #0
 8004106:	60f8      	str	r0, [r7, #12]
 8004108:	60b9      	str	r1, [r7, #8]
 800410a:	607a      	str	r2, [r7, #4]
 800410c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800410e:	2300      	movs	r3, #0
 8004110:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	2200      	movs	r2, #0
 8004116:	631a      	str	r2, [r3, #48]	@ 0x30
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	2200      	movs	r2, #0
 800411c:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	685b      	ldr	r3, [r3, #4]
 8004122:	2b00      	cmp	r3, #0
 8004124:	d003      	beq.n	800412e <SAI_InitI2S+0x2e>
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	685b      	ldr	r3, [r3, #4]
 800412a:	2b02      	cmp	r3, #2
 800412c:	d103      	bne.n	8004136 <SAI_InitI2S+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	2200      	movs	r2, #0
 8004132:	63da      	str	r2, [r3, #60]	@ 0x3c
 8004134:	e002      	b.n	800413c <SAI_InitI2S+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	2201      	movs	r2, #1
 800413a:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_CHANNEL_IDENTIFICATION;
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8004142:	649a      	str	r2, [r3, #72]	@ 0x48
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800414a:	661a      	str	r2, [r3, #96]	@ 0x60
  hsai->SlotInit.FirstBitOffset  = 0;
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	2200      	movs	r2, #0
 8004150:	655a      	str	r2, [r3, #84]	@ 0x54
  hsai->SlotInit.SlotNumber      = nbslot;
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	683a      	ldr	r2, [r7, #0]
 8004156:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* in IS2 the number of slot must be even */
  if ((nbslot & 0x1U) != 0U)
 8004158:	683b      	ldr	r3, [r7, #0]
 800415a:	f003 0301 	and.w	r3, r3, #1
 800415e:	2b00      	cmp	r3, #0
 8004160:	d001      	beq.n	8004166 <SAI_InitI2S+0x66>
  {
    return HAL_ERROR;
 8004162:	2301      	movs	r3, #1
 8004164:	e077      	b.n	8004256 <SAI_InitI2S+0x156>
  }

  if (protocol == SAI_I2S_STANDARD)
 8004166:	68bb      	ldr	r3, [r7, #8]
 8004168:	2b00      	cmp	r3, #0
 800416a:	d107      	bne.n	800417c <SAI_InitI2S+0x7c>
  {
    hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	2200      	movs	r2, #0
 8004170:	64da      	str	r2, [r3, #76]	@ 0x4c
    hsai->FrameInit.FSOffset   = SAI_FS_BEFOREFIRSTBIT;
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8004178:	651a      	str	r2, [r3, #80]	@ 0x50
 800417a:	e006      	b.n	800418a <SAI_InitI2S+0x8a>
  }
  else
  {
     /* SAI_I2S_MSBJUSTIFIED or SAI_I2S_LSBJUSTIFIED */
    hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_HIGH;
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8004182:	64da      	str	r2, [r3, #76]	@ 0x4c
    hsai->FrameInit.FSOffset   = SAI_FS_FIRSTBIT;
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	2200      	movs	r2, #0
 8004188:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  /* Frame definition */
  switch (datasize)
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	2b03      	cmp	r3, #3
 800418e:	d84f      	bhi.n	8004230 <SAI_InitI2S+0x130>
 8004190:	a201      	add	r2, pc, #4	@ (adr r2, 8004198 <SAI_InitI2S+0x98>)
 8004192:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004196:	bf00      	nop
 8004198:	080041a9 	.word	0x080041a9
 800419c:	080041cb 	.word	0x080041cb
 80041a0:	080041ed 	.word	0x080041ed
 80041a4:	0800420f 	.word	0x0800420f
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	2280      	movs	r2, #128	@ 0x80
 80041ac:	635a      	str	r2, [r3, #52]	@ 0x34
      hsai->FrameInit.FrameLength = 32U * (nbslot / 2U);
 80041ae:	683b      	ldr	r3, [r7, #0]
 80041b0:	085b      	lsrs	r3, r3, #1
 80041b2:	015a      	lsls	r2, r3, #5
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	641a      	str	r2, [r3, #64]	@ 0x40
      hsai->FrameInit.ActiveFrameLength = 16U * (nbslot / 2U);
 80041b8:	683b      	ldr	r3, [r7, #0]
 80041ba:	085b      	lsrs	r3, r3, #1
 80041bc:	011a      	lsls	r2, r3, #4
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	645a      	str	r2, [r3, #68]	@ 0x44
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	2240      	movs	r2, #64	@ 0x40
 80041c6:	659a      	str	r2, [r3, #88]	@ 0x58
      break;
 80041c8:	e035      	b.n	8004236 <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	2280      	movs	r2, #128	@ 0x80
 80041ce:	635a      	str	r2, [r3, #52]	@ 0x34
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 80041d0:	683b      	ldr	r3, [r7, #0]
 80041d2:	085b      	lsrs	r3, r3, #1
 80041d4:	019a      	lsls	r2, r3, #6
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	641a      	str	r2, [r3, #64]	@ 0x40
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 80041da:	683b      	ldr	r3, [r7, #0]
 80041dc:	085b      	lsrs	r3, r3, #1
 80041de:	015a      	lsls	r2, r3, #5
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	645a      	str	r2, [r3, #68]	@ 0x44
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	2280      	movs	r2, #128	@ 0x80
 80041e8:	659a      	str	r2, [r3, #88]	@ 0x58
      break;
 80041ea:	e024      	b.n	8004236 <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_24BIT:
      hsai->Init.DataSize = SAI_DATASIZE_24;
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	22c0      	movs	r2, #192	@ 0xc0
 80041f0:	635a      	str	r2, [r3, #52]	@ 0x34
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 80041f2:	683b      	ldr	r3, [r7, #0]
 80041f4:	085b      	lsrs	r3, r3, #1
 80041f6:	019a      	lsls	r2, r3, #6
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	641a      	str	r2, [r3, #64]	@ 0x40
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 80041fc:	683b      	ldr	r3, [r7, #0]
 80041fe:	085b      	lsrs	r3, r3, #1
 8004200:	015a      	lsls	r2, r3, #5
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	645a      	str	r2, [r3, #68]	@ 0x44
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	2280      	movs	r2, #128	@ 0x80
 800420a:	659a      	str	r2, [r3, #88]	@ 0x58
      break;
 800420c:	e013      	b.n	8004236 <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	22e0      	movs	r2, #224	@ 0xe0
 8004212:	635a      	str	r2, [r3, #52]	@ 0x34
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 8004214:	683b      	ldr	r3, [r7, #0]
 8004216:	085b      	lsrs	r3, r3, #1
 8004218:	019a      	lsls	r2, r3, #6
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	641a      	str	r2, [r3, #64]	@ 0x40
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 800421e:	683b      	ldr	r3, [r7, #0]
 8004220:	085b      	lsrs	r3, r3, #1
 8004222:	015a      	lsls	r2, r3, #5
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	645a      	str	r2, [r3, #68]	@ 0x44
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	2280      	movs	r2, #128	@ 0x80
 800422c:	659a      	str	r2, [r3, #88]	@ 0x58
      break;
 800422e:	e002      	b.n	8004236 <SAI_InitI2S+0x136>
    default :
      status = HAL_ERROR;
 8004230:	2301      	movs	r3, #1
 8004232:	75fb      	strb	r3, [r7, #23]
      break;
 8004234:	bf00      	nop
  }
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 8004236:	68bb      	ldr	r3, [r7, #8]
 8004238:	2b02      	cmp	r3, #2
 800423a:	d10b      	bne.n	8004254 <SAI_InitI2S+0x154>
  {
    if (datasize == SAI_PROTOCOL_DATASIZE_16BITEXTENDED)
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	2b01      	cmp	r3, #1
 8004240:	d102      	bne.n	8004248 <SAI_InitI2S+0x148>
    {
      hsai->SlotInit.FirstBitOffset = 16;
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	2210      	movs	r2, #16
 8004246:	655a      	str	r2, [r3, #84]	@ 0x54
    }
    if (datasize == SAI_PROTOCOL_DATASIZE_24BIT)
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	2b02      	cmp	r3, #2
 800424c:	d102      	bne.n	8004254 <SAI_InitI2S+0x154>
    {
      hsai->SlotInit.FirstBitOffset = 8;
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	2208      	movs	r2, #8
 8004252:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  return status;
 8004254:	7dfb      	ldrb	r3, [r7, #23]
}
 8004256:	4618      	mov	r0, r3
 8004258:	371c      	adds	r7, #28
 800425a:	46bd      	mov	sp, r7
 800425c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004260:	4770      	bx	lr
 8004262:	bf00      	nop

08004264 <SAI_InitPCM>:
  * @param  datasize one of the supported datasize @ref SAI_Protocol_DataSize
  * @param  nbslot number of slot minimum value is 1 and the max is 16.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitPCM(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 8004264:	b480      	push	{r7}
 8004266:	b087      	sub	sp, #28
 8004268:	af00      	add	r7, sp, #0
 800426a:	60f8      	str	r0, [r7, #12]
 800426c:	60b9      	str	r1, [r7, #8]
 800426e:	607a      	str	r2, [r7, #4]
 8004270:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004272:	2300      	movs	r3, #0
 8004274:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	2200      	movs	r2, #0
 800427a:	631a      	str	r2, [r3, #48]	@ 0x30
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	2200      	movs	r2, #0
 8004280:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	685b      	ldr	r3, [r3, #4]
 8004286:	2b00      	cmp	r3, #0
 8004288:	d003      	beq.n	8004292 <SAI_InitPCM+0x2e>
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	685b      	ldr	r3, [r3, #4]
 800428e:	2b02      	cmp	r3, #2
 8004290:	d103      	bne.n	800429a <SAI_InitPCM+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	2201      	movs	r2, #1
 8004296:	63da      	str	r2, [r3, #60]	@ 0x3c
 8004298:	e002      	b.n	80042a0 <SAI_InitPCM+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	2200      	movs	r2, #0
 800429e:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_STARTFRAME;
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	2200      	movs	r2, #0
 80042a4:	649a      	str	r2, [r3, #72]	@ 0x48
  hsai->FrameInit.FSPolarity     = SAI_FS_ACTIVE_HIGH;
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80042ac:	64da      	str	r2, [r3, #76]	@ 0x4c
  hsai->FrameInit.FSOffset       = SAI_FS_BEFOREFIRSTBIT;
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80042b4:	651a      	str	r2, [r3, #80]	@ 0x50
  hsai->SlotInit.FirstBitOffset  = 0;
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	2200      	movs	r2, #0
 80042ba:	655a      	str	r2, [r3, #84]	@ 0x54
  hsai->SlotInit.SlotNumber      = nbslot;
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	683a      	ldr	r2, [r7, #0]
 80042c0:	65da      	str	r2, [r3, #92]	@ 0x5c
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80042c8:	661a      	str	r2, [r3, #96]	@ 0x60

  if (protocol == SAI_PCM_SHORT)
 80042ca:	68bb      	ldr	r3, [r7, #8]
 80042cc:	2b04      	cmp	r3, #4
 80042ce:	d103      	bne.n	80042d8 <SAI_InitPCM+0x74>
  {
    hsai->FrameInit.ActiveFrameLength = 1;
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	2201      	movs	r2, #1
 80042d4:	645a      	str	r2, [r3, #68]	@ 0x44
 80042d6:	e002      	b.n	80042de <SAI_InitPCM+0x7a>
  }
  else
  {
    /* SAI_PCM_LONG */
    hsai->FrameInit.ActiveFrameLength = 13;
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	220d      	movs	r2, #13
 80042dc:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  switch (datasize)
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	2b03      	cmp	r3, #3
 80042e2:	d837      	bhi.n	8004354 <SAI_InitPCM+0xf0>
 80042e4:	a201      	add	r2, pc, #4	@ (adr r2, 80042ec <SAI_InitPCM+0x88>)
 80042e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042ea:	bf00      	nop
 80042ec:	080042fd 	.word	0x080042fd
 80042f0:	08004313 	.word	0x08004313
 80042f4:	08004329 	.word	0x08004329
 80042f8:	0800433f 	.word	0x0800433f
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	2280      	movs	r2, #128	@ 0x80
 8004300:	635a      	str	r2, [r3, #52]	@ 0x34
      hsai->FrameInit.FrameLength = 16U * nbslot;
 8004302:	683b      	ldr	r3, [r7, #0]
 8004304:	011a      	lsls	r2, r3, #4
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	641a      	str	r2, [r3, #64]	@ 0x40
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	2240      	movs	r2, #64	@ 0x40
 800430e:	659a      	str	r2, [r3, #88]	@ 0x58
      break;
 8004310:	e023      	b.n	800435a <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	2280      	movs	r2, #128	@ 0x80
 8004316:	635a      	str	r2, [r3, #52]	@ 0x34
      hsai->FrameInit.FrameLength = 32U * nbslot;
 8004318:	683b      	ldr	r3, [r7, #0]
 800431a:	015a      	lsls	r2, r3, #5
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	641a      	str	r2, [r3, #64]	@ 0x40
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	2280      	movs	r2, #128	@ 0x80
 8004324:	659a      	str	r2, [r3, #88]	@ 0x58
      break;
 8004326:	e018      	b.n	800435a <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_24BIT :
      hsai->Init.DataSize = SAI_DATASIZE_24;
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	22c0      	movs	r2, #192	@ 0xc0
 800432c:	635a      	str	r2, [r3, #52]	@ 0x34
      hsai->FrameInit.FrameLength = 32U * nbslot;
 800432e:	683b      	ldr	r3, [r7, #0]
 8004330:	015a      	lsls	r2, r3, #5
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	641a      	str	r2, [r3, #64]	@ 0x40
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	2280      	movs	r2, #128	@ 0x80
 800433a:	659a      	str	r2, [r3, #88]	@ 0x58
      break;
 800433c:	e00d      	b.n	800435a <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	22e0      	movs	r2, #224	@ 0xe0
 8004342:	635a      	str	r2, [r3, #52]	@ 0x34
      hsai->FrameInit.FrameLength = 32U * nbslot;
 8004344:	683b      	ldr	r3, [r7, #0]
 8004346:	015a      	lsls	r2, r3, #5
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	641a      	str	r2, [r3, #64]	@ 0x40
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	2280      	movs	r2, #128	@ 0x80
 8004350:	659a      	str	r2, [r3, #88]	@ 0x58
      break;
 8004352:	e002      	b.n	800435a <SAI_InitPCM+0xf6>
    default :
      status = HAL_ERROR;
 8004354:	2301      	movs	r3, #1
 8004356:	75fb      	strb	r3, [r7, #23]
      break;
 8004358:	bf00      	nop
  }

  return status;
 800435a:	7dfb      	ldrb	r3, [r7, #23]
}
 800435c:	4618      	mov	r0, r3
 800435e:	371c      	adds	r7, #28
 8004360:	46bd      	mov	sp, r7
 8004362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004366:	4770      	bx	lr

08004368 <SAI_InterruptFlag>:
  *              the configuration information for SAI module.
  * @param  mode SAI_MODE_DMA or SAI_MODE_IT
  * @retval the list of the IT flag to enable
  */
static uint32_t SAI_InterruptFlag(const SAI_HandleTypeDef *hsai, SAI_ModeTypedef mode)
{
 8004368:	b480      	push	{r7}
 800436a:	b085      	sub	sp, #20
 800436c:	af00      	add	r7, sp, #0
 800436e:	6078      	str	r0, [r7, #4]
 8004370:	460b      	mov	r3, r1
 8004372:	70fb      	strb	r3, [r7, #3]
  uint32_t tmpIT = SAI_IT_OVRUDR;
 8004374:	2301      	movs	r3, #1
 8004376:	60fb      	str	r3, [r7, #12]

  if (mode == SAI_MODE_IT)
 8004378:	78fb      	ldrb	r3, [r7, #3]
 800437a:	2b01      	cmp	r3, #1
 800437c:	d103      	bne.n	8004386 <SAI_InterruptFlag+0x1e>
  {
    tmpIT |= SAI_IT_FREQ;
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	f043 0308 	orr.w	r3, r3, #8
 8004384:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800438a:	2b08      	cmp	r3, #8
 800438c:	d10b      	bne.n	80043a6 <SAI_InterruptFlag+0x3e>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	685b      	ldr	r3, [r3, #4]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 8004392:	2b03      	cmp	r3, #3
 8004394:	d003      	beq.n	800439e <SAI_InterruptFlag+0x36>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	685b      	ldr	r3, [r3, #4]
 800439a:	2b01      	cmp	r3, #1
 800439c:	d103      	bne.n	80043a6 <SAI_InterruptFlag+0x3e>
  {
    tmpIT |= SAI_IT_CNRDY;
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	f043 0310 	orr.w	r3, r3, #16
 80043a4:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	685b      	ldr	r3, [r3, #4]
 80043aa:	2b03      	cmp	r3, #3
 80043ac:	d003      	beq.n	80043b6 <SAI_InterruptFlag+0x4e>
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	685b      	ldr	r3, [r3, #4]
 80043b2:	2b02      	cmp	r3, #2
 80043b4:	d104      	bne.n	80043c0 <SAI_InterruptFlag+0x58>
  {
    tmpIT |= SAI_IT_AFSDET | SAI_IT_LFSDET;
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80043bc:	60fb      	str	r3, [r7, #12]
 80043be:	e003      	b.n	80043c8 <SAI_InterruptFlag+0x60>
  }
  else
  {
    /* hsai has been configured in master mode */
    tmpIT |= SAI_IT_WCKCFG;
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	f043 0304 	orr.w	r3, r3, #4
 80043c6:	60fb      	str	r3, [r7, #12]
  }
  return tmpIT;
 80043c8:	68fb      	ldr	r3, [r7, #12]
}
 80043ca:	4618      	mov	r0, r3
 80043cc:	3714      	adds	r7, #20
 80043ce:	46bd      	mov	sp, r7
 80043d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d4:	4770      	bx	lr
	...

080043d8 <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 80043d8:	b480      	push	{r7}
 80043da:	b085      	sub	sp, #20
 80043dc:	af00      	add	r7, sp, #0
 80043de:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 80043e0:	4b18      	ldr	r3, [pc, #96]	@ (8004444 <SAI_Disable+0x6c>)
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	4a18      	ldr	r2, [pc, #96]	@ (8004448 <SAI_Disable+0x70>)
 80043e6:	fba2 2303 	umull	r2, r3, r2, r3
 80043ea:	0b1b      	lsrs	r3, r3, #12
 80043ec:	009b      	lsls	r3, r3, #2
 80043ee:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 80043f0:	2300      	movs	r3, #0
 80043f2:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	681a      	ldr	r2, [r3, #0]
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8004402:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	2b00      	cmp	r3, #0
 8004408:	d10a      	bne.n	8004420 <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004410:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      status = HAL_TIMEOUT;
 800441a:	2303      	movs	r3, #3
 800441c:	72fb      	strb	r3, [r7, #11]
      break;
 800441e:	e009      	b.n	8004434 <SAI_Disable+0x5c>
    }
    count--;
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	3b01      	subs	r3, #1
 8004424:	60fb      	str	r3, [r7, #12]
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004430:	2b00      	cmp	r3, #0
 8004432:	d1e7      	bne.n	8004404 <SAI_Disable+0x2c>

  return status;
 8004434:	7afb      	ldrb	r3, [r7, #11]
}
 8004436:	4618      	mov	r0, r3
 8004438:	3714      	adds	r7, #20
 800443a:	46bd      	mov	sp, r7
 800443c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004440:	4770      	bx	lr
 8004442:	bf00      	nop
 8004444:	20000000 	.word	0x20000000
 8004448:	95cbec1b 	.word	0x95cbec1b

0800444c <SAI_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 800444c:	b580      	push	{r7, lr}
 800444e:	b084      	sub	sp, #16
 8004450:	af00      	add	r7, sp, #0
 8004452:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004458:	60fb      	str	r3, [r7, #12]

  if (hdma->Init.Mode != DMA_CIRCULAR)
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	69db      	ldr	r3, [r3, #28]
 800445e:	2b20      	cmp	r3, #32
 8004460:	d01c      	beq.n	800449c <SAI_DMATxCplt+0x50>
  {
    hsai->XferCount = 0;
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	2200      	movs	r2, #0
 8004466:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

    /* Disable SAI Tx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	681a      	ldr	r2, [r3, #0]
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 8004478:	601a      	str	r2, [r3, #0]

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800447a:	2100      	movs	r1, #0
 800447c:	68f8      	ldr	r0, [r7, #12]
 800447e:	f7ff ff73 	bl	8004368 <SAI_InterruptFlag>
 8004482:	4603      	mov	r3, r0
 8004484:	43d9      	mvns	r1, r3
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	691a      	ldr	r2, [r3, #16]
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	400a      	ands	r2, r1
 8004492:	611a      	str	r2, [r3, #16]

    hsai->State = HAL_SAI_STATE_READY;
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	2201      	movs	r2, #1
 8004498:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxCpltCallback(hsai);
#else
  HAL_SAI_TxCpltCallback(hsai);
 800449c:	68f8      	ldr	r0, [r7, #12]
 800449e:	f7fc fa49 	bl	8000934 <HAL_SAI_TxCpltCallback>
#endif
}
 80044a2:	bf00      	nop
 80044a4:	3710      	adds	r7, #16
 80044a6:	46bd      	mov	sp, r7
 80044a8:	bd80      	pop	{r7, pc}

080044aa <SAI_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80044aa:	b580      	push	{r7, lr}
 80044ac:	b084      	sub	sp, #16
 80044ae:	af00      	add	r7, sp, #0
 80044b0:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044b6:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxHalfCpltCallback(hsai);
#else
  HAL_SAI_TxHalfCpltCallback(hsai);
 80044b8:	68f8      	ldr	r0, [r7, #12]
 80044ba:	f7fc fa4b 	bl	8000954 <HAL_SAI_TxHalfCpltCallback>
#endif
}
 80044be:	bf00      	nop
 80044c0:	3710      	adds	r7, #16
 80044c2:	46bd      	mov	sp, r7
 80044c4:	bd80      	pop	{r7, pc}

080044c6 <SAI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAError(DMA_HandleTypeDef *hdma)
{
 80044c6:	b580      	push	{r7, lr}
 80044c8:	b084      	sub	sp, #16
 80044ca:	af00      	add	r7, sp, #0
 80044cc:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044d2:	60fb      	str	r3, [r7, #12]

  /* Set SAI error code */
  hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80044da:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Disable the SAI DMA request */
  hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	681a      	ldr	r2, [r3, #0]
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 80044f2:	601a      	str	r2, [r3, #0]

  /* Disable SAI peripheral */
  /* No need to check return value because state will be updated and HAL_SAI_ErrorCallback will be called later */
  (void) SAI_Disable(hsai);
 80044f4:	68f8      	ldr	r0, [r7, #12]
 80044f6:	f7ff ff6f 	bl	80043d8 <SAI_Disable>

  /* Set the SAI state ready to be able to start again the process */
  hsai->State = HAL_SAI_STATE_READY;
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	2201      	movs	r2, #1
 80044fe:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

  /* Initialize XferCount */
  hsai->XferCount = 0U;
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	2200      	movs	r2, #0
 8004506:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->ErrorCallback(hsai);
#else
  HAL_SAI_ErrorCallback(hsai);
 800450a:	68f8      	ldr	r0, [r7, #12]
 800450c:	f7ff fdee 	bl	80040ec <HAL_SAI_ErrorCallback>
#endif
}
 8004510:	bf00      	nop
 8004512:	3710      	adds	r7, #16
 8004514:	46bd      	mov	sp, r7
 8004516:	bd80      	pop	{r7, pc}

08004518 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8004518:	b580      	push	{r7, lr}
 800451a:	b082      	sub	sp, #8
 800451c:	af00      	add	r7, sp, #0
 800451e:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade, unitsize;
  uint32_t tickstart;
#endif

  /* Check the SD handle allocation */
  if(hsd == NULL)
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	2b00      	cmp	r3, #0
 8004524:	d101      	bne.n	800452a <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8004526:	2301      	movs	r3, #1
 8004528:	e022      	b.n	8004570 <HAL_SD_Init+0x58>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8004530:	b2db      	uxtb	r3, r3
 8004532:	2b00      	cmp	r3, #0
 8004534:	d105      	bne.n	8004542 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	2200      	movs	r2, #0
 800453a:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800453c:	6878      	ldr	r0, [r7, #4]
 800453e:	f7fc faa5 	bl	8000a8c <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	2203      	movs	r2, #3
 8004546:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800454a:	6878      	ldr	r0, [r7, #4]
 800454c:	f000 f814 	bl	8004578 <HAL_SD_InitCard>
 8004550:	4603      	mov	r3, r0
 8004552:	2b00      	cmp	r3, #0
 8004554:	d001      	beq.n	800455a <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8004556:	2301      	movs	r3, #1
 8004558:	e00a      	b.n	8004570 <HAL_SD_Init+0x58>
    }
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	2200      	movs	r2, #0
 800455e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	2200      	movs	r2, #0
 8004564:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	2201      	movs	r2, #1
 800456a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800456e:	2300      	movs	r3, #0
}
 8004570:	4618      	mov	r0, r3
 8004572:	3708      	adds	r7, #8
 8004574:	46bd      	mov	sp, r7
 8004576:	bd80      	pop	{r7, pc}

08004578 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8004578:	b5b0      	push	{r4, r5, r7, lr}
 800457a:	b08e      	sub	sp, #56	@ 0x38
 800457c:	af04      	add	r7, sp, #16
 800457e:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8004580:	2300      	movs	r3, #0
 8004582:	60bb      	str	r3, [r7, #8]
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 8004584:	2300      	movs	r3, #0
 8004586:	60fb      	str	r3, [r7, #12]
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8004588:	2300      	movs	r3, #0
 800458a:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 800458c:	2300      	movs	r3, #0
 800458e:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8004590:	2300      	movs	r3, #0
 8004592:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC1);
 8004594:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8004598:	f7fe fd0c 	bl	8002fb4 <HAL_RCCEx_GetPeriphCLKFreq>
 800459c:	6278      	str	r0, [r7, #36]	@ 0x24
  if (sdmmc_clk == 0U)
 800459e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d109      	bne.n	80045b8 <HAL_SD_InitCard+0x40>
  {
      hsd->State = HAL_SD_STATE_READY;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	2201      	movs	r2, #1
 80045a8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80045b2:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 80045b4:	2301      	movs	r3, #1
 80045b6:	e07b      	b.n	80046b0 <HAL_SD_InitCard+0x138>
  }
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  Init.ClockDiv = ((sdmmc_clk / SD_INIT_FREQ) - 2U);
 80045b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045ba:	09db      	lsrs	r3, r3, #7
 80045bc:	4a3e      	ldr	r2, [pc, #248]	@ (80046b8 <HAL_SD_InitCard+0x140>)
 80045be:	fba2 2303 	umull	r2, r3, r2, r3
 80045c2:	091b      	lsrs	r3, r3, #4
 80045c4:	3b02      	subs	r3, #2
 80045c6:	61fb      	str	r3, [r7, #28]
    hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681d      	ldr	r5, [r3, #0]
 80045cc:	466c      	mov	r4, sp
 80045ce:	f107 0314 	add.w	r3, r7, #20
 80045d2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80045d6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80045da:	f107 0308 	add.w	r3, r7, #8
 80045de:	cb0e      	ldmia	r3, {r1, r2, r3}
 80045e0:	4628      	mov	r0, r5
 80045e2:	f001 fefb 	bl	80063dc <SDMMC_Init>

#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	685a      	ldr	r2, [r3, #4]
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80045f4:	605a      	str	r2, [r3, #4]
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	4618      	mov	r0, r3
 80045fc:	f001 ff39 	bl	8006472 <SDMMC_PowerState_ON>

#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	685a      	ldr	r2, [r3, #4]
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800460e:	605a      	str	r2, [r3, #4]
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  sdmmc_clk = sdmmc_clk/(Init.ClockDiv + 2U);
 8004610:	69fb      	ldr	r3, [r7, #28]
 8004612:	3302      	adds	r3, #2
 8004614:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004616:	fbb2 f3f3 	udiv	r3, r2, r3
 800461a:	627b      	str	r3, [r7, #36]	@ 0x24
#else
  sdmmc_clk = sdmmc_clk/(2U*Init.ClockDiv);
#endif
  HAL_Delay(1U+ (74U*1000U/(sdmmc_clk)));
 800461c:	4a27      	ldr	r2, [pc, #156]	@ (80046bc <HAL_SD_InitCard+0x144>)
 800461e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004620:	fbb2 f3f3 	udiv	r3, r2, r3
 8004624:	3301      	adds	r3, #1
 8004626:	4618      	mov	r0, r3
 8004628:	f7fc fd88 	bl	800113c <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800462c:	6878      	ldr	r0, [r7, #4]
 800462e:	f000 ff23 	bl	8005478 <SD_PowerON>
 8004632:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004634:	6a3b      	ldr	r3, [r7, #32]
 8004636:	2b00      	cmp	r3, #0
 8004638:	d00b      	beq.n	8004652 <HAL_SD_InitCard+0xda>
  {
    hsd->State = HAL_SD_STATE_READY;
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	2201      	movs	r2, #1
 800463e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004646:	6a3b      	ldr	r3, [r7, #32]
 8004648:	431a      	orrs	r2, r3
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800464e:	2301      	movs	r3, #1
 8004650:	e02e      	b.n	80046b0 <HAL_SD_InitCard+0x138>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8004652:	6878      	ldr	r0, [r7, #4]
 8004654:	f000 fe42 	bl	80052dc <SD_InitCard>
 8004658:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800465a:	6a3b      	ldr	r3, [r7, #32]
 800465c:	2b00      	cmp	r3, #0
 800465e:	d00b      	beq.n	8004678 <HAL_SD_InitCard+0x100>
  {
    hsd->State = HAL_SD_STATE_READY;
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	2201      	movs	r2, #1
 8004664:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800466c:	6a3b      	ldr	r3, [r7, #32]
 800466e:	431a      	orrs	r2, r3
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8004674:	2301      	movs	r3, #1
 8004676:	e01b      	b.n	80046b0 <HAL_SD_InitCard+0x138>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8004680:	4618      	mov	r0, r3
 8004682:	f001 ff89 	bl	8006598 <SDMMC_CmdBlockLength>
 8004686:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004688:	6a3b      	ldr	r3, [r7, #32]
 800468a:	2b00      	cmp	r3, #0
 800468c:	d00f      	beq.n	80046ae <HAL_SD_InitCard+0x136>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	4a0b      	ldr	r2, [pc, #44]	@ (80046c0 <HAL_SD_InitCard+0x148>)
 8004694:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800469a:	6a3b      	ldr	r3, [r7, #32]
 800469c:	431a      	orrs	r2, r3
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	2201      	movs	r2, #1
 80046a6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 80046aa:	2301      	movs	r3, #1
 80046ac:	e000      	b.n	80046b0 <HAL_SD_InitCard+0x138>
  }

  return HAL_OK;
 80046ae:	2300      	movs	r3, #0
}
 80046b0:	4618      	mov	r0, r3
 80046b2:	3728      	adds	r7, #40	@ 0x28
 80046b4:	46bd      	mov	sp, r7
 80046b6:	bdb0      	pop	{r4, r5, r7, pc}
 80046b8:	014f8b59 	.word	0x014f8b59
 80046bc:	00012110 	.word	0x00012110
 80046c0:	004005ff 	.word	0x004005ff

080046c4 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd Block Address from where data is to be read
  * @param  NumberOfBlocks Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 80046c4:	b580      	push	{r7, lr}
 80046c6:	b08c      	sub	sp, #48	@ 0x30
 80046c8:	af00      	add	r7, sp, #0
 80046ca:	60f8      	str	r0, [r7, #12]
 80046cc:	60b9      	str	r1, [r7, #8]
 80046ce:	607a      	str	r2, [r7, #4]
 80046d0:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	62bb      	str	r3, [r7, #40]	@ 0x28

  if(NULL == pData)
 80046d6:	68bb      	ldr	r3, [r7, #8]
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d107      	bne.n	80046ec <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046e0:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 80046e8:	2301      	movs	r3, #1
 80046ea:	e0a9      	b.n	8004840 <HAL_SD_ReadBlocks_DMA+0x17c>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80046f2:	b2db      	uxtb	r3, r3
 80046f4:	2b01      	cmp	r3, #1
 80046f6:	f040 80a2 	bne.w	800483e <HAL_SD_ReadBlocks_DMA+0x17a>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	2200      	movs	r2, #0
 80046fe:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8004700:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004702:	683b      	ldr	r3, [r7, #0]
 8004704:	441a      	add	r2, r3
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800470a:	429a      	cmp	r2, r3
 800470c:	d907      	bls.n	800471e <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004712:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 800471a:	2301      	movs	r3, #1
 800471c:	e090      	b.n	8004840 <HAL_SD_ReadBlocks_DMA+0x17c>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	2203      	movs	r2, #3
 8004722:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	2200      	movs	r2, #0
 800472c:	62da      	str	r2, [r3, #44]	@ 0x2c

#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004732:	4a45      	ldr	r2, [pc, #276]	@ (8004848 <HAL_SD_ReadBlocks_DMA+0x184>)
 8004734:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800473a:	4a44      	ldr	r2, [pc, #272]	@ (800484c <HAL_SD_ReadBlocks_DMA+0x188>)
 800473c:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004742:	2200      	movs	r2, #0
 8004744:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	3380      	adds	r3, #128	@ 0x80
 8004750:	4619      	mov	r1, r3
 8004752:	68ba      	ldr	r2, [r7, #8]
 8004754:	683b      	ldr	r3, [r7, #0]
 8004756:	025b      	lsls	r3, r3, #9
 8004758:	089b      	lsrs	r3, r3, #2
 800475a:	f7fc fedd 	bl	8001518 <HAL_DMA_Start_IT>
 800475e:	4603      	mov	r3, r0
 8004760:	2b00      	cmp	r3, #0
 8004762:	d00f      	beq.n	8004784 <HAL_SD_ReadBlocks_DMA+0xc0>
    {
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	4a39      	ldr	r2, [pc, #228]	@ (8004850 <HAL_SD_ReadBlocks_DMA+0x18c>)
 800476a:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004770:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	2201      	movs	r2, #1
 800477c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 8004780:	2301      	movs	r3, #1
 8004782:	e05d      	b.n	8004840 <HAL_SD_ReadBlocks_DMA+0x17c>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	f042 0208 	orr.w	r2, r2, #8
 8004792:	62da      	str	r2, [r3, #44]	@ 0x2c
#else
      hsd->pRxBuffPtr = pData;
      hsd->RxXferSize = BLOCKSIZE * NumberOfBlocks;
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004798:	2b01      	cmp	r3, #1
 800479a:	d002      	beq.n	80047a2 <HAL_SD_ReadBlocks_DMA+0xde>
      {
        add *= 512U;
 800479c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800479e:	025b      	lsls	r3, r3, #9
 80047a0:	62bb      	str	r3, [r7, #40]	@ 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80047a2:	f04f 33ff 	mov.w	r3, #4294967295
 80047a6:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 80047a8:	683b      	ldr	r3, [r7, #0]
 80047aa:	025b      	lsls	r3, r3, #9
 80047ac:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 80047ae:	2390      	movs	r3, #144	@ 0x90
 80047b0:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 80047b2:	2302      	movs	r3, #2
 80047b4:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80047b6:	2300      	movs	r3, #0
 80047b8:	623b      	str	r3, [r7, #32]
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      config.DPSM          = SDMMC_DPSM_DISABLE;
#else
      config.DPSM          = SDMMC_DPSM_ENABLE;
 80047ba:	2301      	movs	r3, #1
 80047bc:	627b      	str	r3, [r7, #36]	@ 0x24
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	f107 0210 	add.w	r2, r7, #16
 80047c6:	4611      	mov	r1, r2
 80047c8:	4618      	mov	r0, r3
 80047ca:	f001 feb9 	bl	8006540 <SDMMC_ConfigData>
      hsd->Instance->IDMABASE0 = (uint32_t) pData ;
      hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 80047ce:	683b      	ldr	r3, [r7, #0]
 80047d0:	2b01      	cmp	r3, #1
 80047d2:	d90a      	bls.n	80047ea <HAL_SD_ReadBlocks_DMA+0x126>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	2282      	movs	r2, #130	@ 0x82
 80047d8:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80047e0:	4618      	mov	r0, r3
 80047e2:	f001 ff1d 	bl	8006620 <SDMMC_CmdReadMultiBlock>
 80047e6:	62f8      	str	r0, [r7, #44]	@ 0x2c
 80047e8:	e009      	b.n	80047fe <HAL_SD_ReadBlocks_DMA+0x13a>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	2281      	movs	r2, #129	@ 0x81
 80047ee:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80047f6:	4618      	mov	r0, r3
 80047f8:	f001 fef0 	bl	80065dc <SDMMC_CmdReadSingleBlock>
 80047fc:	62f8      	str	r0, [r7, #44]	@ 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 80047fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004800:	2b00      	cmp	r3, #0
 8004802:	d012      	beq.n	800482a <HAL_SD_ReadBlocks_DMA+0x166>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	4a11      	ldr	r2, [pc, #68]	@ (8004850 <HAL_SD_ReadBlocks_DMA+0x18c>)
 800480a:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= errorstate;
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004810:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004812:	431a      	orrs	r2, r3
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State = HAL_SD_STATE_READY;
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	2201      	movs	r2, #1
 800481c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	2200      	movs	r2, #0
 8004824:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_ERROR;
 8004826:	2301      	movs	r3, #1
 8004828:	e00a      	b.n	8004840 <HAL_SD_ReadBlocks_DMA+0x17c>
      }

      /* Enable transfer interrupts */
      __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	f442 7295 	orr.w	r2, r2, #298	@ 0x12a
 8004838:	63da      	str	r2, [r3, #60]	@ 0x3c

      return HAL_OK;
 800483a:	2300      	movs	r3, #0
 800483c:	e000      	b.n	8004840 <HAL_SD_ReadBlocks_DMA+0x17c>
    }
#endif
  }
  else
  {
    return HAL_BUSY;
 800483e:	2302      	movs	r3, #2
  }
}
 8004840:	4618      	mov	r0, r3
 8004842:	3730      	adds	r7, #48	@ 0x30
 8004844:	46bd      	mov	sp, r7
 8004846:	bd80      	pop	{r7, pc}
 8004848:	080050f7 	.word	0x080050f7
 800484c:	08005169 	.word	0x08005169
 8004850:	004005ff 	.word	0x004005ff

08004854 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd Block Address where data will be written
  * @param  NumberOfBlocks Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8004854:	b580      	push	{r7, lr}
 8004856:	b08c      	sub	sp, #48	@ 0x30
 8004858:	af00      	add	r7, sp, #0
 800485a:	60f8      	str	r0, [r7, #12]
 800485c:	60b9      	str	r1, [r7, #8]
 800485e:	607a      	str	r2, [r7, #4]
 8004860:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	62bb      	str	r3, [r7, #40]	@ 0x28

  if(NULL == pData)
 8004866:	68bb      	ldr	r3, [r7, #8]
 8004868:	2b00      	cmp	r3, #0
 800486a:	d107      	bne.n	800487c <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004870:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8004878:	2301      	movs	r3, #1
 800487a:	e0ac      	b.n	80049d6 <HAL_SD_WriteBlocks_DMA+0x182>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8004882:	b2db      	uxtb	r3, r3
 8004884:	2b01      	cmp	r3, #1
 8004886:	f040 80a5 	bne.w	80049d4 <HAL_SD_WriteBlocks_DMA+0x180>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	2200      	movs	r2, #0
 800488e:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8004890:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004892:	683b      	ldr	r3, [r7, #0]
 8004894:	441a      	add	r2, r3
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800489a:	429a      	cmp	r2, r3
 800489c:	d907      	bls.n	80048ae <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048a2:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 80048aa:	2301      	movs	r3, #1
 80048ac:	e093      	b.n	80049d6 <HAL_SD_WriteBlocks_DMA+0x182>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	2203      	movs	r2, #3
 80048b2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	2200      	movs	r2, #0
 80048bc:	62da      	str	r2, [r3, #44]	@ 0x2c
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    hsd->pTxBuffPtr = pData;
    hsd->TxXferSize = BLOCKSIZE * NumberOfBlocks;
#else
    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80048c2:	4a47      	ldr	r2, [pc, #284]	@ (80049e0 <HAL_SD_WriteBlocks_DMA+0x18c>)
 80048c4:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80048ca:	4a46      	ldr	r2, [pc, #280]	@ (80049e4 <HAL_SD_WriteBlocks_DMA+0x190>)
 80048cc:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80048d2:	2200      	movs	r2, #0
 80048d4:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80048da:	2b01      	cmp	r3, #1
 80048dc:	d002      	beq.n	80048e4 <HAL_SD_WriteBlocks_DMA+0x90>
    {
      add *= 512U;
 80048de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048e0:	025b      	lsls	r3, r3, #9
 80048e2:	62bb      	str	r3, [r7, #40]	@ 0x28
    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 80048e4:	683b      	ldr	r3, [r7, #0]
 80048e6:	2b01      	cmp	r3, #1
 80048e8:	d90a      	bls.n	8004900 <HAL_SD_WriteBlocks_DMA+0xac>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	22a0      	movs	r2, #160	@ 0xa0
 80048ee:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80048f6:	4618      	mov	r0, r3
 80048f8:	f001 fed6 	bl	80066a8 <SDMMC_CmdWriteMultiBlock>
 80048fc:	62f8      	str	r0, [r7, #44]	@ 0x2c
 80048fe:	e009      	b.n	8004914 <HAL_SD_WriteBlocks_DMA+0xc0>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	2290      	movs	r2, #144	@ 0x90
 8004904:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800490c:	4618      	mov	r0, r3
 800490e:	f001 fea9 	bl	8006664 <SDMMC_CmdWriteSingleBlock>
 8004912:	62f8      	str	r0, [r7, #44]	@ 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8004914:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004916:	2b00      	cmp	r3, #0
 8004918:	d012      	beq.n	8004940 <HAL_SD_WriteBlocks_DMA+0xec>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	4a32      	ldr	r2, [pc, #200]	@ (80049e8 <HAL_SD_WriteBlocks_DMA+0x194>)
 8004920:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004926:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004928:	431a      	orrs	r2, r3
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	2201      	movs	r2, #1
 8004932:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	2200      	movs	r2, #0
 800493a:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800493c:	2301      	movs	r3, #1
 800493e:	e04a      	b.n	80049d6 <HAL_SD_WriteBlocks_DMA+0x182>
    }

#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
    /* Enable SDMMC DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	f042 0208 	orr.w	r2, r2, #8
 800494e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8004954:	68b9      	ldr	r1, [r7, #8]
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	3380      	adds	r3, #128	@ 0x80
 800495c:	461a      	mov	r2, r3
 800495e:	683b      	ldr	r3, [r7, #0]
 8004960:	025b      	lsls	r3, r3, #9
 8004962:	089b      	lsrs	r3, r3, #2
 8004964:	f7fc fdd8 	bl	8001518 <HAL_DMA_Start_IT>
 8004968:	4603      	mov	r3, r0
 800496a:	2b00      	cmp	r3, #0
 800496c:	d012      	beq.n	8004994 <HAL_SD_WriteBlocks_DMA+0x140>
    {
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	4a1d      	ldr	r2, [pc, #116]	@ (80049e8 <HAL_SD_WriteBlocks_DMA+0x194>)
 8004974:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800497a:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	2201      	movs	r2, #1
 8004986:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	2200      	movs	r2, #0
 800498e:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8004990:	2301      	movs	r3, #1
 8004992:	e020      	b.n	80049d6 <HAL_SD_WriteBlocks_DMA+0x182>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8004994:	f04f 33ff 	mov.w	r3, #4294967295
 8004998:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800499a:	683b      	ldr	r3, [r7, #0]
 800499c:	025b      	lsls	r3, r3, #9
 800499e:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 80049a0:	2390      	movs	r3, #144	@ 0x90
 80049a2:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 80049a4:	2300      	movs	r3, #0
 80049a6:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80049a8:	2300      	movs	r3, #0
 80049aa:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 80049ac:	2301      	movs	r3, #1
 80049ae:	627b      	str	r3, [r7, #36]	@ 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	f107 0210 	add.w	r2, r7, #16
 80049b8:	4611      	mov	r1, r2
 80049ba:	4618      	mov	r0, r3
 80049bc:	f001 fdc0 	bl	8006540 <SDMMC_ConfigData>

      /* Enable SD Error interrupts */
      __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	f042 021a 	orr.w	r2, r2, #26
 80049ce:	63da      	str	r2, [r3, #60]	@ 0x3c
#else
      /* Enable transfer interrupts */
      __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR | SDMMC_IT_DATAEND));
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

      return HAL_OK;
 80049d0:	2300      	movs	r3, #0
 80049d2:	e000      	b.n	80049d6 <HAL_SD_WriteBlocks_DMA+0x182>
    }
#endif
  }
  else
  {
    return HAL_BUSY;
 80049d4:	2302      	movs	r3, #2
  }
}
 80049d6:	4618      	mov	r0, r3
 80049d8:	3730      	adds	r7, #48	@ 0x30
 80049da:	46bd      	mov	sp, r7
 80049dc:	bd80      	pop	{r7, pc}
 80049de:	bf00      	nop
 80049e0:	080050cd 	.word	0x080050cd
 80049e4:	08005169 	.word	0x08005169
 80049e8:	004005ff 	.word	0x004005ff

080049ec <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 80049ec:	b580      	push	{r7, lr}
 80049ee:	b084      	sub	sp, #16
 80049f0:	af00      	add	r7, sp, #0
 80049f2:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80049f8:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004a00:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d008      	beq.n	8004a1a <HAL_SD_IRQHandler+0x2e>
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	f003 0308 	and.w	r3, r3, #8
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d003      	beq.n	8004a1a <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 8004a12:	6878      	ldr	r0, [r7, #4]
 8004a14:	f000 fde6 	bl	80055e4 <SD_Read_IT>
 8004a18:	e155      	b.n	8004cc6 <HAL_SD_IRQHandler+0x2da>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004a20:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	f000 808f 	beq.w	8004b48 <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004a32:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT |\
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a3a:	687a      	ldr	r2, [r7, #4]
 8004a3c:	6812      	ldr	r2, [r2, #0]
 8004a3e:	f423 4341 	bic.w	r3, r3, #49408	@ 0xc100
 8004a42:	f023 033a 	bic.w	r3, r3, #58	@ 0x3a
 8004a46:	63d3      	str	r3, [r2, #60]	@ 0x3c

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
#else
    hsd->Instance->DCTRL &= ~(SDMMC_DCTRL_DTEN);
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	f022 0201 	bic.w	r2, r2, #1
 8004a56:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    if((context & SD_CONTEXT_IT) != 0U)
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	f003 0308 	and.w	r3, r3, #8
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d039      	beq.n	8004ad6 <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	f003 0302 	and.w	r3, r3, #2
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d104      	bne.n	8004a76 <HAL_SD_IRQHandler+0x8a>
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	f003 0320 	and.w	r3, r3, #32
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d011      	beq.n	8004a9a <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	4618      	mov	r0, r3
 8004a7c:	f001 fe36 	bl	80066ec <SDMMC_CmdStopTransfer>
 8004a80:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8004a82:	68bb      	ldr	r3, [r7, #8]
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d008      	beq.n	8004a9a <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004a8c:	68bb      	ldr	r3, [r7, #8]
 8004a8e:	431a      	orrs	r2, r3
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	639a      	str	r2, [r3, #56]	@ 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 8004a94:	6878      	ldr	r0, [r7, #4]
 8004a96:	f000 f91f 	bl	8004cd8 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	f240 523a 	movw	r2, #1338	@ 0x53a
 8004aa2:	639a      	str	r2, [r3, #56]	@ 0x38

      hsd->State = HAL_SD_STATE_READY;
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	2201      	movs	r2, #1
 8004aa8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	2200      	movs	r2, #0
 8004ab0:	631a      	str	r2, [r3, #48]	@ 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	f003 0301 	and.w	r3, r3, #1
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d104      	bne.n	8004ac6 <HAL_SD_IRQHandler+0xda>
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	f003 0302 	and.w	r3, r3, #2
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d003      	beq.n	8004ace <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 8004ac6:	6878      	ldr	r0, [r7, #4]
 8004ac8:	f002 fa54 	bl	8006f74 <HAL_SD_RxCpltCallback>
 8004acc:	e0fb      	b.n	8004cc6 <HAL_SD_IRQHandler+0x2da>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 8004ace:	6878      	ldr	r0, [r7, #4]
 8004ad0:	f002 fa46 	bl	8006f60 <HAL_SD_TxCpltCallback>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else
  {
    /* Nothing to do */
  }
}
 8004ad4:	e0f7      	b.n	8004cc6 <HAL_SD_IRQHandler+0x2da>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	f000 80f2 	beq.w	8004cc6 <HAL_SD_IRQHandler+0x2da>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	f003 0320 	and.w	r3, r3, #32
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d011      	beq.n	8004b10 <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	4618      	mov	r0, r3
 8004af2:	f001 fdfb 	bl	80066ec <SDMMC_CmdStopTransfer>
 8004af6:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8004af8:	68bb      	ldr	r3, [r7, #8]
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d008      	beq.n	8004b10 <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004b02:	68bb      	ldr	r3, [r7, #8]
 8004b04:	431a      	orrs	r2, r3
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	639a      	str	r2, [r3, #56]	@ 0x38
          HAL_SD_ErrorCallback(hsd);
 8004b0a:	6878      	ldr	r0, [r7, #4]
 8004b0c:	f000 f8e4 	bl	8004cd8 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	f003 0301 	and.w	r3, r3, #1
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	f040 80d5 	bne.w	8004cc6 <HAL_SD_IRQHandler+0x2da>
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	f003 0302 	and.w	r3, r3, #2
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	f040 80cf 	bne.w	8004cc6 <HAL_SD_IRQHandler+0x2da>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	f022 0208 	bic.w	r2, r2, #8
 8004b36:	62da      	str	r2, [r3, #44]	@ 0x2c
        hsd->State = HAL_SD_STATE_READY;
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	2201      	movs	r2, #1
 8004b3c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        HAL_SD_TxCpltCallback(hsd);
 8004b40:	6878      	ldr	r0, [r7, #4]
 8004b42:	f002 fa0d 	bl	8006f60 <HAL_SD_TxCpltCallback>
}
 8004b46:	e0be      	b.n	8004cc6 <HAL_SD_IRQHandler+0x2da>
  else if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004b4e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d008      	beq.n	8004b68 <HAL_SD_IRQHandler+0x17c>
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	f003 0308 	and.w	r3, r3, #8
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d003      	beq.n	8004b68 <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 8004b60:	6878      	ldr	r0, [r7, #4]
 8004b62:	f000 fd90 	bl	8005686 <SD_Write_IT>
 8004b66:	e0ae      	b.n	8004cc6 <HAL_SD_IRQHandler+0x2da>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR | SDMMC_FLAG_TXUNDERR) != RESET)
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004b6e:	f003 033a 	and.w	r3, r3, #58	@ 0x3a
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	f000 80a7 	beq.w	8004cc6 <HAL_SD_IRQHandler+0x2da>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004b7e:	f003 0302 	and.w	r3, r3, #2
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d005      	beq.n	8004b92 <HAL_SD_IRQHandler+0x1a6>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b8a:	f043 0202 	orr.w	r2, r3, #2
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	639a      	str	r2, [r3, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT) != RESET)
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004b98:	f003 0308 	and.w	r3, r3, #8
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d005      	beq.n	8004bac <HAL_SD_IRQHandler+0x1c0>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ba4:	f043 0208 	orr.w	r2, r3, #8
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	639a      	str	r2, [r3, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXOVERR) != RESET)
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004bb2:	f003 0320 	and.w	r3, r3, #32
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d005      	beq.n	8004bc6 <HAL_SD_IRQHandler+0x1da>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004bbe:	f043 0220 	orr.w	r2, r3, #32
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	639a      	str	r2, [r3, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXUNDERR) != RESET)
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004bcc:	f003 0310 	and.w	r3, r3, #16
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d005      	beq.n	8004be0 <HAL_SD_IRQHandler+0x1f4>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004bd8:	f043 0210 	orr.w	r2, r3, #16
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	f240 523a 	movw	r2, #1338	@ 0x53a
 8004be8:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	f422 729d 	bic.w	r2, r2, #314	@ 0x13a
 8004bf8:	63da      	str	r2, [r3, #60]	@ 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	4618      	mov	r0, r3
 8004c00:	f001 fd74 	bl	80066ec <SDMMC_CmdStopTransfer>
 8004c04:	4602      	mov	r2, r0
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c0a:	431a      	orrs	r2, r3
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	639a      	str	r2, [r3, #56]	@ 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	f003 0308 	and.w	r3, r3, #8
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d00a      	beq.n	8004c30 <HAL_SD_IRQHandler+0x244>
      hsd->State = HAL_SD_STATE_READY;
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	2201      	movs	r2, #1
 8004c1e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	2200      	movs	r2, #0
 8004c26:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_SD_ErrorCallback(hsd);
 8004c28:	6878      	ldr	r0, [r7, #4]
 8004c2a:	f000 f855 	bl	8004cd8 <HAL_SD_ErrorCallback>
}
 8004c2e:	e04a      	b.n	8004cc6 <HAL_SD_IRQHandler+0x2da>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d045      	beq.n	8004cc6 <HAL_SD_IRQHandler+0x2da>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	f003 0310 	and.w	r3, r3, #16
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d104      	bne.n	8004c4e <HAL_SD_IRQHandler+0x262>
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	f003 0320 	and.w	r3, r3, #32
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d011      	beq.n	8004c72 <HAL_SD_IRQHandler+0x286>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c52:	4a1f      	ldr	r2, [pc, #124]	@ (8004cd0 <HAL_SD_IRQHandler+0x2e4>)
 8004c54:	639a      	str	r2, [r3, #56]	@ 0x38
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c5a:	4618      	mov	r0, r3
 8004c5c:	f7fc fcfa 	bl	8001654 <HAL_DMA_Abort_IT>
 8004c60:	4603      	mov	r3, r0
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d02f      	beq.n	8004cc6 <HAL_SD_IRQHandler+0x2da>
          SD_DMATxAbort(hsd->hdmatx);
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c6a:	4618      	mov	r0, r3
 8004c6c:	f000 fac8 	bl	8005200 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8004c70:	e029      	b.n	8004cc6 <HAL_SD_IRQHandler+0x2da>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	f003 0301 	and.w	r3, r3, #1
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d104      	bne.n	8004c86 <HAL_SD_IRQHandler+0x29a>
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	f003 0302 	and.w	r3, r3, #2
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d011      	beq.n	8004caa <HAL_SD_IRQHandler+0x2be>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c8a:	4a12      	ldr	r2, [pc, #72]	@ (8004cd4 <HAL_SD_IRQHandler+0x2e8>)
 8004c8c:	639a      	str	r2, [r3, #56]	@ 0x38
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c92:	4618      	mov	r0, r3
 8004c94:	f7fc fcde 	bl	8001654 <HAL_DMA_Abort_IT>
 8004c98:	4603      	mov	r3, r0
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d013      	beq.n	8004cc6 <HAL_SD_IRQHandler+0x2da>
          SD_DMARxAbort(hsd->hdmarx);
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ca2:	4618      	mov	r0, r3
 8004ca4:	f000 fae3 	bl	800526e <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8004ca8:	e00d      	b.n	8004cc6 <HAL_SD_IRQHandler+0x2da>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	2200      	movs	r2, #0
 8004cae:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State = HAL_SD_STATE_READY;
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	2201      	movs	r2, #1
 8004cb4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	2200      	movs	r2, #0
 8004cbc:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_SD_AbortCallback(hsd);
 8004cbe:	6878      	ldr	r0, [r7, #4]
 8004cc0:	f002 f944 	bl	8006f4c <HAL_SD_AbortCallback>
}
 8004cc4:	e7ff      	b.n	8004cc6 <HAL_SD_IRQHandler+0x2da>
 8004cc6:	bf00      	nop
 8004cc8:	3710      	adds	r7, #16
 8004cca:	46bd      	mov	sp, r7
 8004ccc:	bd80      	pop	{r7, pc}
 8004cce:	bf00      	nop
 8004cd0:	08005201 	.word	0x08005201
 8004cd4:	0800526f 	.word	0x0800526f

08004cd8 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8004cd8:	b480      	push	{r7}
 8004cda:	b083      	sub	sp, #12
 8004cdc:	af00      	add	r7, sp, #0
 8004cde:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8004ce0:	bf00      	nop
 8004ce2:	370c      	adds	r7, #12
 8004ce4:	46bd      	mov	sp, r7
 8004ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cea:	4770      	bx	lr

08004cec <HAL_SD_GetCardCSD>:
  * @param  pCSD Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8004cec:	b480      	push	{r7}
 8004cee:	b083      	sub	sp, #12
 8004cf0:	af00      	add	r7, sp, #0
 8004cf2:	6078      	str	r0, [r7, #4]
 8004cf4:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004cfa:	0f9b      	lsrs	r3, r3, #30
 8004cfc:	b2da      	uxtb	r2, r3
 8004cfe:	683b      	ldr	r3, [r7, #0]
 8004d00:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004d06:	0e9b      	lsrs	r3, r3, #26
 8004d08:	b2db      	uxtb	r3, r3
 8004d0a:	f003 030f 	and.w	r3, r3, #15
 8004d0e:	b2da      	uxtb	r2, r3
 8004d10:	683b      	ldr	r3, [r7, #0]
 8004d12:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004d18:	0e1b      	lsrs	r3, r3, #24
 8004d1a:	b2db      	uxtb	r3, r3
 8004d1c:	f003 0303 	and.w	r3, r3, #3
 8004d20:	b2da      	uxtb	r2, r3
 8004d22:	683b      	ldr	r3, [r7, #0]
 8004d24:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004d2a:	0c1b      	lsrs	r3, r3, #16
 8004d2c:	b2da      	uxtb	r2, r3
 8004d2e:	683b      	ldr	r3, [r7, #0]
 8004d30:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004d36:	0a1b      	lsrs	r3, r3, #8
 8004d38:	b2da      	uxtb	r2, r3
 8004d3a:	683b      	ldr	r3, [r7, #0]
 8004d3c:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004d42:	b2da      	uxtb	r2, r3
 8004d44:	683b      	ldr	r3, [r7, #0]
 8004d46:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004d4c:	0d1b      	lsrs	r3, r3, #20
 8004d4e:	b29a      	uxth	r2, r3
 8004d50:	683b      	ldr	r3, [r7, #0]
 8004d52:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004d58:	0c1b      	lsrs	r3, r3, #16
 8004d5a:	b2db      	uxtb	r3, r3
 8004d5c:	f003 030f 	and.w	r3, r3, #15
 8004d60:	b2da      	uxtb	r2, r3
 8004d62:	683b      	ldr	r3, [r7, #0]
 8004d64:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004d6a:	0bdb      	lsrs	r3, r3, #15
 8004d6c:	b2db      	uxtb	r3, r3
 8004d6e:	f003 0301 	and.w	r3, r3, #1
 8004d72:	b2da      	uxtb	r2, r3
 8004d74:	683b      	ldr	r3, [r7, #0]
 8004d76:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004d7c:	0b9b      	lsrs	r3, r3, #14
 8004d7e:	b2db      	uxtb	r3, r3
 8004d80:	f003 0301 	and.w	r3, r3, #1
 8004d84:	b2da      	uxtb	r2, r3
 8004d86:	683b      	ldr	r3, [r7, #0]
 8004d88:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004d8e:	0b5b      	lsrs	r3, r3, #13
 8004d90:	b2db      	uxtb	r3, r3
 8004d92:	f003 0301 	and.w	r3, r3, #1
 8004d96:	b2da      	uxtb	r2, r3
 8004d98:	683b      	ldr	r3, [r7, #0]
 8004d9a:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004da0:	0b1b      	lsrs	r3, r3, #12
 8004da2:	b2db      	uxtb	r3, r3
 8004da4:	f003 0301 	and.w	r3, r3, #1
 8004da8:	b2da      	uxtb	r2, r3
 8004daa:	683b      	ldr	r3, [r7, #0]
 8004dac:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8004dae:	683b      	ldr	r3, [r7, #0]
 8004db0:	2200      	movs	r2, #0
 8004db2:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d163      	bne.n	8004e84 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004dc0:	009a      	lsls	r2, r3, #2
 8004dc2:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8004dc6:	4013      	ands	r3, r2
 8004dc8:	687a      	ldr	r2, [r7, #4]
 8004dca:	6ed2      	ldr	r2, [r2, #108]	@ 0x6c
 8004dcc:	0f92      	lsrs	r2, r2, #30
 8004dce:	431a      	orrs	r2, r3
 8004dd0:	683b      	ldr	r3, [r7, #0]
 8004dd2:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004dd8:	0edb      	lsrs	r3, r3, #27
 8004dda:	b2db      	uxtb	r3, r3
 8004ddc:	f003 0307 	and.w	r3, r3, #7
 8004de0:	b2da      	uxtb	r2, r3
 8004de2:	683b      	ldr	r3, [r7, #0]
 8004de4:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004dea:	0e1b      	lsrs	r3, r3, #24
 8004dec:	b2db      	uxtb	r3, r3
 8004dee:	f003 0307 	and.w	r3, r3, #7
 8004df2:	b2da      	uxtb	r2, r3
 8004df4:	683b      	ldr	r3, [r7, #0]
 8004df6:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004dfc:	0d5b      	lsrs	r3, r3, #21
 8004dfe:	b2db      	uxtb	r3, r3
 8004e00:	f003 0307 	and.w	r3, r3, #7
 8004e04:	b2da      	uxtb	r2, r3
 8004e06:	683b      	ldr	r3, [r7, #0]
 8004e08:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004e0e:	0c9b      	lsrs	r3, r3, #18
 8004e10:	b2db      	uxtb	r3, r3
 8004e12:	f003 0307 	and.w	r3, r3, #7
 8004e16:	b2da      	uxtb	r2, r3
 8004e18:	683b      	ldr	r3, [r7, #0]
 8004e1a:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004e20:	0bdb      	lsrs	r3, r3, #15
 8004e22:	b2db      	uxtb	r3, r3
 8004e24:	f003 0307 	and.w	r3, r3, #7
 8004e28:	b2da      	uxtb	r2, r3
 8004e2a:	683b      	ldr	r3, [r7, #0]
 8004e2c:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8004e2e:	683b      	ldr	r3, [r7, #0]
 8004e30:	691b      	ldr	r3, [r3, #16]
 8004e32:	1c5a      	adds	r2, r3, #1
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8004e38:	683b      	ldr	r3, [r7, #0]
 8004e3a:	7e1b      	ldrb	r3, [r3, #24]
 8004e3c:	b2db      	uxtb	r3, r3
 8004e3e:	f003 0307 	and.w	r3, r3, #7
 8004e42:	3302      	adds	r3, #2
 8004e44:	2201      	movs	r2, #1
 8004e46:	fa02 f303 	lsl.w	r3, r2, r3
 8004e4a:	687a      	ldr	r2, [r7, #4]
 8004e4c:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8004e4e:	fb03 f202 	mul.w	r2, r3, r2
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8004e56:	683b      	ldr	r3, [r7, #0]
 8004e58:	7a1b      	ldrb	r3, [r3, #8]
 8004e5a:	b2db      	uxtb	r3, r3
 8004e5c:	f003 030f 	and.w	r3, r3, #15
 8004e60:	2201      	movs	r2, #1
 8004e62:	409a      	lsls	r2, r3
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	659a      	str	r2, [r3, #88]	@ 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004e6c:	687a      	ldr	r2, [r7, #4]
 8004e6e:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8004e70:	0a52      	lsrs	r2, r2, #9
 8004e72:	fb03 f202 	mul.w	r2, r3, r2
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004e80:	661a      	str	r2, [r3, #96]	@ 0x60
 8004e82:	e031      	b.n	8004ee8 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e88:	2b01      	cmp	r3, #1
 8004e8a:	d11d      	bne.n	8004ec8 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004e90:	041b      	lsls	r3, r3, #16
 8004e92:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004e9a:	0c1b      	lsrs	r3, r3, #16
 8004e9c:	431a      	orrs	r2, r3
 8004e9e:	683b      	ldr	r3, [r7, #0]
 8004ea0:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8004ea2:	683b      	ldr	r3, [r7, #0]
 8004ea4:	691b      	ldr	r3, [r3, #16]
 8004ea6:	3301      	adds	r3, #1
 8004ea8:	029a      	lsls	r2, r3, #10
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.BlockSize = 512U;
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004ebc:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	661a      	str	r2, [r3, #96]	@ 0x60
 8004ec6:	e00f      	b.n	8004ee8 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	4a58      	ldr	r2, [pc, #352]	@ (8005030 <HAL_SD_GetCardCSD+0x344>)
 8004ece:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ed4:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	2201      	movs	r2, #1
 8004ee0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8004ee4:	2301      	movs	r3, #1
 8004ee6:	e09d      	b.n	8005024 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004eec:	0b9b      	lsrs	r3, r3, #14
 8004eee:	b2db      	uxtb	r3, r3
 8004ef0:	f003 0301 	and.w	r3, r3, #1
 8004ef4:	b2da      	uxtb	r2, r3
 8004ef6:	683b      	ldr	r3, [r7, #0]
 8004ef8:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004efe:	09db      	lsrs	r3, r3, #7
 8004f00:	b2db      	uxtb	r3, r3
 8004f02:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004f06:	b2da      	uxtb	r2, r3
 8004f08:	683b      	ldr	r3, [r7, #0]
 8004f0a:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004f10:	b2db      	uxtb	r3, r3
 8004f12:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004f16:	b2da      	uxtb	r2, r3
 8004f18:	683b      	ldr	r3, [r7, #0]
 8004f1a:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f20:	0fdb      	lsrs	r3, r3, #31
 8004f22:	b2da      	uxtb	r2, r3
 8004f24:	683b      	ldr	r3, [r7, #0]
 8004f26:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f2c:	0f5b      	lsrs	r3, r3, #29
 8004f2e:	b2db      	uxtb	r3, r3
 8004f30:	f003 0303 	and.w	r3, r3, #3
 8004f34:	b2da      	uxtb	r2, r3
 8004f36:	683b      	ldr	r3, [r7, #0]
 8004f38:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f3e:	0e9b      	lsrs	r3, r3, #26
 8004f40:	b2db      	uxtb	r3, r3
 8004f42:	f003 0307 	and.w	r3, r3, #7
 8004f46:	b2da      	uxtb	r2, r3
 8004f48:	683b      	ldr	r3, [r7, #0]
 8004f4a:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f50:	0d9b      	lsrs	r3, r3, #22
 8004f52:	b2db      	uxtb	r3, r3
 8004f54:	f003 030f 	and.w	r3, r3, #15
 8004f58:	b2da      	uxtb	r2, r3
 8004f5a:	683b      	ldr	r3, [r7, #0]
 8004f5c:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f62:	0d5b      	lsrs	r3, r3, #21
 8004f64:	b2db      	uxtb	r3, r3
 8004f66:	f003 0301 	and.w	r3, r3, #1
 8004f6a:	b2da      	uxtb	r2, r3
 8004f6c:	683b      	ldr	r3, [r7, #0]
 8004f6e:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8004f72:	683b      	ldr	r3, [r7, #0]
 8004f74:	2200      	movs	r2, #0
 8004f76:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f7e:	0c1b      	lsrs	r3, r3, #16
 8004f80:	b2db      	uxtb	r3, r3
 8004f82:	f003 0301 	and.w	r3, r3, #1
 8004f86:	b2da      	uxtb	r2, r3
 8004f88:	683b      	ldr	r3, [r7, #0]
 8004f8a:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f92:	0bdb      	lsrs	r3, r3, #15
 8004f94:	b2db      	uxtb	r3, r3
 8004f96:	f003 0301 	and.w	r3, r3, #1
 8004f9a:	b2da      	uxtb	r2, r3
 8004f9c:	683b      	ldr	r3, [r7, #0]
 8004f9e:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004fa6:	0b9b      	lsrs	r3, r3, #14
 8004fa8:	b2db      	uxtb	r3, r3
 8004faa:	f003 0301 	and.w	r3, r3, #1
 8004fae:	b2da      	uxtb	r2, r3
 8004fb0:	683b      	ldr	r3, [r7, #0]
 8004fb2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004fba:	0b5b      	lsrs	r3, r3, #13
 8004fbc:	b2db      	uxtb	r3, r3
 8004fbe:	f003 0301 	and.w	r3, r3, #1
 8004fc2:	b2da      	uxtb	r2, r3
 8004fc4:	683b      	ldr	r3, [r7, #0]
 8004fc6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004fce:	0b1b      	lsrs	r3, r3, #12
 8004fd0:	b2db      	uxtb	r3, r3
 8004fd2:	f003 0301 	and.w	r3, r3, #1
 8004fd6:	b2da      	uxtb	r2, r3
 8004fd8:	683b      	ldr	r3, [r7, #0]
 8004fda:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004fe2:	0a9b      	lsrs	r3, r3, #10
 8004fe4:	b2db      	uxtb	r3, r3
 8004fe6:	f003 0303 	and.w	r3, r3, #3
 8004fea:	b2da      	uxtb	r2, r3
 8004fec:	683b      	ldr	r3, [r7, #0]
 8004fee:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ff6:	0a1b      	lsrs	r3, r3, #8
 8004ff8:	b2db      	uxtb	r3, r3
 8004ffa:	f003 0303 	and.w	r3, r3, #3
 8004ffe:	b2da      	uxtb	r2, r3
 8005000:	683b      	ldr	r3, [r7, #0]
 8005002:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800500a:	085b      	lsrs	r3, r3, #1
 800500c:	b2db      	uxtb	r3, r3
 800500e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005012:	b2da      	uxtb	r2, r3
 8005014:	683b      	ldr	r3, [r7, #0]
 8005016:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 800501a:	683b      	ldr	r3, [r7, #0]
 800501c:	2201      	movs	r2, #1
 800501e:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 8005022:	2300      	movs	r3, #0
}
 8005024:	4618      	mov	r0, r3
 8005026:	370c      	adds	r7, #12
 8005028:	46bd      	mov	sp, r7
 800502a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800502e:	4770      	bx	lr
 8005030:	004005ff 	.word	0x004005ff

08005034 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8005034:	b480      	push	{r7}
 8005036:	b083      	sub	sp, #12
 8005038:	af00      	add	r7, sp, #0
 800503a:	6078      	str	r0, [r7, #4]
 800503c:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005042:	683b      	ldr	r3, [r7, #0]
 8005044:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800504a:	683b      	ldr	r3, [r7, #0]
 800504c:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005052:	683b      	ldr	r3, [r7, #0]
 8005054:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800505a:	683b      	ldr	r3, [r7, #0]
 800505c:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005062:	683b      	ldr	r3, [r7, #0]
 8005064:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800506a:	683b      	ldr	r3, [r7, #0]
 800506c:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005072:	683b      	ldr	r3, [r7, #0]
 8005074:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800507a:	683b      	ldr	r3, [r7, #0]
 800507c:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800507e:	2300      	movs	r3, #0
}
 8005080:	4618      	mov	r0, r3
 8005082:	370c      	adds	r7, #12
 8005084:	46bd      	mov	sp, r7
 8005086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800508a:	4770      	bx	lr

0800508c <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800508c:	b580      	push	{r7, lr}
 800508e:	b086      	sub	sp, #24
 8005090:	af00      	add	r7, sp, #0
 8005092:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8005094:	2300      	movs	r3, #0
 8005096:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8005098:	f107 030c 	add.w	r3, r7, #12
 800509c:	4619      	mov	r1, r3
 800509e:	6878      	ldr	r0, [r7, #4]
 80050a0:	f000 fa78 	bl	8005594 <SD_SendStatus>
 80050a4:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80050a6:	697b      	ldr	r3, [r7, #20]
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d005      	beq.n	80050b8 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80050b0:	697b      	ldr	r3, [r7, #20]
 80050b2:	431a      	orrs	r2, r3
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	0a5b      	lsrs	r3, r3, #9
 80050bc:	f003 030f 	and.w	r3, r3, #15
 80050c0:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 80050c2:	693b      	ldr	r3, [r7, #16]
}
 80050c4:	4618      	mov	r0, r3
 80050c6:	3718      	adds	r7, #24
 80050c8:	46bd      	mov	sp, r7
 80050ca:	bd80      	pop	{r7, pc}

080050cc <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80050cc:	b480      	push	{r7}
 80050ce:	b085      	sub	sp, #20
 80050d0:	af00      	add	r7, sp, #0
 80050d2:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050d8:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DATAEND));
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80050e8:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 80050ea:	bf00      	nop
 80050ec:	3714      	adds	r7, #20
 80050ee:	46bd      	mov	sp, r7
 80050f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f4:	4770      	bx	lr

080050f6 <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80050f6:	b580      	push	{r7, lr}
 80050f8:	b084      	sub	sp, #16
 80050fa:	af00      	add	r7, sp, #0
 80050fc:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005102:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005108:	2b82      	cmp	r3, #130	@ 0x82
 800510a:	d111      	bne.n	8005130 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	4618      	mov	r0, r3
 8005112:	f001 faeb 	bl	80066ec <SDMMC_CmdStopTransfer>
 8005116:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005118:	68bb      	ldr	r3, [r7, #8]
 800511a:	2b00      	cmp	r3, #0
 800511c:	d008      	beq.n	8005130 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005122:	68bb      	ldr	r3, [r7, #8]
 8005124:	431a      	orrs	r2, r3
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	639a      	str	r2, [r3, #56]	@ 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 800512a:	68f8      	ldr	r0, [r7, #12]
 800512c:	f7ff fdd4 	bl	8004cd8 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	f022 0208 	bic.w	r2, r2, #8
 800513e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	f240 523a 	movw	r2, #1338	@ 0x53a
 8005148:	639a      	str	r2, [r3, #56]	@ 0x38

  hsd->State = HAL_SD_STATE_READY;
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	2201      	movs	r2, #1
 800514e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	2200      	movs	r2, #0
 8005156:	631a      	str	r2, [r3, #48]	@ 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 8005158:	68f8      	ldr	r0, [r7, #12]
 800515a:	f001 ff0b 	bl	8006f74 <HAL_SD_RxCpltCallback>
#endif
}
 800515e:	bf00      	nop
 8005160:	3710      	adds	r7, #16
 8005162:	46bd      	mov	sp, r7
 8005164:	bd80      	pop	{r7, pc}
	...

08005168 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 8005168:	b580      	push	{r7, lr}
 800516a:	b086      	sub	sp, #24
 800516c:	af00      	add	r7, sp, #0
 800516e:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005174:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  RxErrorCode = hsd->hdmarx->ErrorCode;
 8005176:	697b      	ldr	r3, [r7, #20]
 8005178:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800517a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800517c:	613b      	str	r3, [r7, #16]
  TxErrorCode = hsd->hdmatx->ErrorCode;
 800517e:	697b      	ldr	r3, [r7, #20]
 8005180:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005182:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005184:	60fb      	str	r3, [r7, #12]
  if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 8005186:	693b      	ldr	r3, [r7, #16]
 8005188:	2b01      	cmp	r3, #1
 800518a:	d002      	beq.n	8005192 <SD_DMAError+0x2a>
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	2b01      	cmp	r3, #1
 8005190:	d12d      	bne.n	80051ee <SD_DMAError+0x86>
  {
    /* Clear All flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005192:	697b      	ldr	r3, [r7, #20]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	4a19      	ldr	r2, [pc, #100]	@ (80051fc <SD_DMAError+0x94>)
 8005198:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Disable All interrupts */
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 800519a:	697b      	ldr	r3, [r7, #20]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80051a0:	697b      	ldr	r3, [r7, #20]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	f422 729d 	bic.w	r2, r2, #314	@ 0x13a
 80051a8:	63da      	str	r2, [r3, #60]	@ 0x3c
      SDMMC_IT_TXUNDERR| SDMMC_IT_RXOVERR);

    hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 80051aa:	697b      	ldr	r3, [r7, #20]
 80051ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80051ae:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80051b2:	697b      	ldr	r3, [r7, #20]
 80051b4:	639a      	str	r2, [r3, #56]	@ 0x38
    CardState = HAL_SD_GetCardState(hsd);
 80051b6:	6978      	ldr	r0, [r7, #20]
 80051b8:	f7ff ff68 	bl	800508c <HAL_SD_GetCardState>
 80051bc:	60b8      	str	r0, [r7, #8]
    if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 80051be:	68bb      	ldr	r3, [r7, #8]
 80051c0:	2b06      	cmp	r3, #6
 80051c2:	d002      	beq.n	80051ca <SD_DMAError+0x62>
 80051c4:	68bb      	ldr	r3, [r7, #8]
 80051c6:	2b05      	cmp	r3, #5
 80051c8:	d10a      	bne.n	80051e0 <SD_DMAError+0x78>
    {
      hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80051ca:	697b      	ldr	r3, [r7, #20]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	4618      	mov	r0, r3
 80051d0:	f001 fa8c 	bl	80066ec <SDMMC_CmdStopTransfer>
 80051d4:	4602      	mov	r2, r0
 80051d6:	697b      	ldr	r3, [r7, #20]
 80051d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80051da:	431a      	orrs	r2, r3
 80051dc:	697b      	ldr	r3, [r7, #20]
 80051de:	639a      	str	r2, [r3, #56]	@ 0x38
    }

    hsd->State= HAL_SD_STATE_READY;
 80051e0:	697b      	ldr	r3, [r7, #20]
 80051e2:	2201      	movs	r2, #1
 80051e4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->Context = SD_CONTEXT_NONE;
 80051e8:	697b      	ldr	r3, [r7, #20]
 80051ea:	2200      	movs	r2, #0
 80051ec:	631a      	str	r2, [r3, #48]	@ 0x30
  }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->ErrorCallback(hsd);
#else
  HAL_SD_ErrorCallback(hsd);
 80051ee:	6978      	ldr	r0, [r7, #20]
 80051f0:	f7ff fd72 	bl	8004cd8 <HAL_SD_ErrorCallback>
#endif
}
 80051f4:	bf00      	nop
 80051f6:	3718      	adds	r7, #24
 80051f8:	46bd      	mov	sp, r7
 80051fa:	bd80      	pop	{r7, pc}
 80051fc:	004005ff 	.word	0x004005ff

08005200 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 8005200:	b580      	push	{r7, lr}
 8005202:	b084      	sub	sp, #16
 8005204:	af00      	add	r7, sp, #0
 8005206:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800520c:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	f240 523a 	movw	r2, #1338	@ 0x53a
 8005216:	639a      	str	r2, [r3, #56]	@ 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8005218:	68f8      	ldr	r0, [r7, #12]
 800521a:	f7ff ff37 	bl	800508c <HAL_SD_GetCardState>
 800521e:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	2201      	movs	r2, #1
 8005224:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	2200      	movs	r2, #0
 800522c:	631a      	str	r2, [r3, #48]	@ 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800522e:	68bb      	ldr	r3, [r7, #8]
 8005230:	2b06      	cmp	r3, #6
 8005232:	d002      	beq.n	800523a <SD_DMATxAbort+0x3a>
 8005234:	68bb      	ldr	r3, [r7, #8]
 8005236:	2b05      	cmp	r3, #5
 8005238:	d10a      	bne.n	8005250 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	4618      	mov	r0, r3
 8005240:	f001 fa54 	bl	80066ec <SDMMC_CmdStopTransfer>
 8005244:	4602      	mov	r2, r0
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800524a:	431a      	orrs	r2, r3
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005254:	2b00      	cmp	r3, #0
 8005256:	d103      	bne.n	8005260 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8005258:	68f8      	ldr	r0, [r7, #12]
 800525a:	f001 fe77 	bl	8006f4c <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 800525e:	e002      	b.n	8005266 <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8005260:	68f8      	ldr	r0, [r7, #12]
 8005262:	f7ff fd39 	bl	8004cd8 <HAL_SD_ErrorCallback>
}
 8005266:	bf00      	nop
 8005268:	3710      	adds	r7, #16
 800526a:	46bd      	mov	sp, r7
 800526c:	bd80      	pop	{r7, pc}

0800526e <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 800526e:	b580      	push	{r7, lr}
 8005270:	b084      	sub	sp, #16
 8005272:	af00      	add	r7, sp, #0
 8005274:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800527a:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	f240 523a 	movw	r2, #1338	@ 0x53a
 8005284:	639a      	str	r2, [r3, #56]	@ 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8005286:	68f8      	ldr	r0, [r7, #12]
 8005288:	f7ff ff00 	bl	800508c <HAL_SD_GetCardState>
 800528c:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	2201      	movs	r2, #1
 8005292:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	2200      	movs	r2, #0
 800529a:	631a      	str	r2, [r3, #48]	@ 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800529c:	68bb      	ldr	r3, [r7, #8]
 800529e:	2b06      	cmp	r3, #6
 80052a0:	d002      	beq.n	80052a8 <SD_DMARxAbort+0x3a>
 80052a2:	68bb      	ldr	r3, [r7, #8]
 80052a4:	2b05      	cmp	r3, #5
 80052a6:	d10a      	bne.n	80052be <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	4618      	mov	r0, r3
 80052ae:	f001 fa1d 	bl	80066ec <SDMMC_CmdStopTransfer>
 80052b2:	4602      	mov	r2, r0
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80052b8:	431a      	orrs	r2, r3
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d103      	bne.n	80052ce <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 80052c6:	68f8      	ldr	r0, [r7, #12]
 80052c8:	f001 fe40 	bl	8006f4c <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 80052cc:	e002      	b.n	80052d4 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 80052ce:	68f8      	ldr	r0, [r7, #12]
 80052d0:	f7ff fd02 	bl	8004cd8 <HAL_SD_ErrorCallback>
}
 80052d4:	bf00      	nop
 80052d6:	3710      	adds	r7, #16
 80052d8:	46bd      	mov	sp, r7
 80052da:	bd80      	pop	{r7, pc}

080052dc <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 80052dc:	b5b0      	push	{r4, r5, r7, lr}
 80052de:	b094      	sub	sp, #80	@ 0x50
 80052e0:	af04      	add	r7, sp, #16
 80052e2:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 80052e4:	2301      	movs	r3, #1
 80052e6:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	4618      	mov	r0, r3
 80052ee:	f001 f8cf 	bl	8006490 <SDMMC_GetPowerState>
 80052f2:	4603      	mov	r3, r0
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d102      	bne.n	80052fe <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80052f8:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 80052fc:	e0b8      	b.n	8005470 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005302:	2b03      	cmp	r3, #3
 8005304:	d02f      	beq.n	8005366 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	4618      	mov	r0, r3
 800530c:	f001 fab5 	bl	800687a <SDMMC_CmdSendCID>
 8005310:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8005312:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005314:	2b00      	cmp	r3, #0
 8005316:	d001      	beq.n	800531c <SD_InitCard+0x40>
    {
      return errorstate;
 8005318:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800531a:	e0a9      	b.n	8005470 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	2100      	movs	r1, #0
 8005322:	4618      	mov	r0, r3
 8005324:	f001 f8f9 	bl	800651a <SDMMC_GetResponse>
 8005328:	4602      	mov	r2, r0
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	2104      	movs	r1, #4
 8005334:	4618      	mov	r0, r3
 8005336:	f001 f8f0 	bl	800651a <SDMMC_GetResponse>
 800533a:	4602      	mov	r2, r0
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	679a      	str	r2, [r3, #120]	@ 0x78
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	2108      	movs	r1, #8
 8005346:	4618      	mov	r0, r3
 8005348:	f001 f8e7 	bl	800651a <SDMMC_GetResponse>
 800534c:	4602      	mov	r2, r0
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	67da      	str	r2, [r3, #124]	@ 0x7c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	210c      	movs	r1, #12
 8005358:	4618      	mov	r0, r3
 800535a:	f001 f8de 	bl	800651a <SDMMC_GetResponse>
 800535e:	4602      	mov	r2, r0
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800536a:	2b03      	cmp	r3, #3
 800536c:	d00d      	beq.n	800538a <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	f107 020e 	add.w	r2, r7, #14
 8005376:	4611      	mov	r1, r2
 8005378:	4618      	mov	r0, r3
 800537a:	f001 fabb 	bl	80068f4 <SDMMC_CmdSetRelAdd>
 800537e:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8005380:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005382:	2b00      	cmp	r3, #0
 8005384:	d001      	beq.n	800538a <SD_InitCard+0xae>
    {
      return errorstate;
 8005386:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005388:	e072      	b.n	8005470 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800538e:	2b03      	cmp	r3, #3
 8005390:	d036      	beq.n	8005400 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8005392:	89fb      	ldrh	r3, [r7, #14]
 8005394:	461a      	mov	r2, r3
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681a      	ldr	r2, [r3, #0]
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80053a2:	041b      	lsls	r3, r3, #16
 80053a4:	4619      	mov	r1, r3
 80053a6:	4610      	mov	r0, r2
 80053a8:	f001 fa85 	bl	80068b6 <SDMMC_CmdSendCSD>
 80053ac:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80053ae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d001      	beq.n	80053b8 <SD_InitCard+0xdc>
    {
      return errorstate;
 80053b4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80053b6:	e05b      	b.n	8005470 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	2100      	movs	r1, #0
 80053be:	4618      	mov	r0, r3
 80053c0:	f001 f8ab 	bl	800651a <SDMMC_GetResponse>
 80053c4:	4602      	mov	r2, r0
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	2104      	movs	r1, #4
 80053d0:	4618      	mov	r0, r3
 80053d2:	f001 f8a2 	bl	800651a <SDMMC_GetResponse>
 80053d6:	4602      	mov	r2, r0
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	669a      	str	r2, [r3, #104]	@ 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	2108      	movs	r1, #8
 80053e2:	4618      	mov	r0, r3
 80053e4:	f001 f899 	bl	800651a <SDMMC_GetResponse>
 80053e8:	4602      	mov	r2, r0
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	66da      	str	r2, [r3, #108]	@ 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	210c      	movs	r1, #12
 80053f4:	4618      	mov	r0, r3
 80053f6:	f001 f890 	bl	800651a <SDMMC_GetResponse>
 80053fa:	4602      	mov	r2, r0
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	671a      	str	r2, [r3, #112]	@ 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	2104      	movs	r1, #4
 8005406:	4618      	mov	r0, r3
 8005408:	f001 f887 	bl	800651a <SDMMC_GetResponse>
 800540c:	4603      	mov	r3, r0
 800540e:	0d1a      	lsrs	r2, r3, #20
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8005414:	f107 0310 	add.w	r3, r7, #16
 8005418:	4619      	mov	r1, r3
 800541a:	6878      	ldr	r0, [r7, #4]
 800541c:	f7ff fc66 	bl	8004cec <HAL_SD_GetCardCSD>
 8005420:	4603      	mov	r3, r0
 8005422:	2b00      	cmp	r3, #0
 8005424:	d002      	beq.n	800542c <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005426:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800542a:	e021      	b.n	8005470 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	6819      	ldr	r1, [r3, #0]
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005434:	041b      	lsls	r3, r3, #16
 8005436:	2200      	movs	r2, #0
 8005438:	461c      	mov	r4, r3
 800543a:	4615      	mov	r5, r2
 800543c:	4622      	mov	r2, r4
 800543e:	462b      	mov	r3, r5
 8005440:	4608      	mov	r0, r1
 8005442:	f001 f975 	bl	8006730 <SDMMC_CmdSelDesel>
 8005446:	63f8      	str	r0, [r7, #60]	@ 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8005448:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800544a:	2b00      	cmp	r3, #0
 800544c:	d001      	beq.n	8005452 <SD_InitCard+0x176>
  {
    return errorstate;
 800544e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005450:	e00e      	b.n	8005470 <SD_InitCard+0x194>
  }

#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681d      	ldr	r5, [r3, #0]
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	466c      	mov	r4, sp
 800545a:	f103 0210 	add.w	r2, r3, #16
 800545e:	ca07      	ldmia	r2, {r0, r1, r2}
 8005460:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8005464:	3304      	adds	r3, #4
 8005466:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005468:	4628      	mov	r0, r5
 800546a:	f000 ffb7 	bl	80063dc <SDMMC_Init>
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800546e:	2300      	movs	r3, #0
}
 8005470:	4618      	mov	r0, r3
 8005472:	3740      	adds	r7, #64	@ 0x40
 8005474:	46bd      	mov	sp, r7
 8005476:	bdb0      	pop	{r4, r5, r7, pc}

08005478 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8005478:	b580      	push	{r7, lr}
 800547a:	b086      	sub	sp, #24
 800547c:	af00      	add	r7, sp, #0
 800547e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005480:	2300      	movs	r3, #0
 8005482:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8005484:	2300      	movs	r3, #0
 8005486:	617b      	str	r3, [r7, #20]
 8005488:	2300      	movs	r3, #0
 800548a:	613b      	str	r3, [r7, #16]
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t tickstart = HAL_GetTick();
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	4618      	mov	r0, r3
 8005492:	f001 f970 	bl	8006776 <SDMMC_CmdGoIdleState>
 8005496:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	2b00      	cmp	r3, #0
 800549c:	d001      	beq.n	80054a2 <SD_PowerON+0x2a>
  {
    return errorstate;
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	e072      	b.n	8005588 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	4618      	mov	r0, r3
 80054a8:	f001 f983 	bl	80067b2 <SDMMC_CmdOperCond>
 80054ac:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d00d      	beq.n	80054d0 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	2200      	movs	r2, #0
 80054b8:	649a      	str	r2, [r3, #72]	@ 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	4618      	mov	r0, r3
 80054c0:	f001 f959 	bl	8006776 <SDMMC_CmdGoIdleState>
 80054c4:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d004      	beq.n	80054d6 <SD_PowerON+0x5e>
    {
      return errorstate;
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	e05b      	b.n	8005588 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	2201      	movs	r2, #1
 80054d4:	649a      	str	r2, [r3, #72]	@ 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80054da:	2b01      	cmp	r3, #1
 80054dc:	d137      	bne.n	800554e <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	2100      	movs	r1, #0
 80054e4:	4618      	mov	r0, r3
 80054e6:	f001 f983 	bl	80067f0 <SDMMC_CmdAppCommand>
 80054ea:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d02d      	beq.n	800554e <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80054f2:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80054f6:	e047      	b.n	8005588 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	2100      	movs	r1, #0
 80054fe:	4618      	mov	r0, r3
 8005500:	f001 f976 	bl	80067f0 <SDMMC_CmdAppCommand>
 8005504:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	2b00      	cmp	r3, #0
 800550a:	d001      	beq.n	8005510 <SD_PowerON+0x98>
    {
      return errorstate;
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	e03b      	b.n	8005588 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	491e      	ldr	r1, [pc, #120]	@ (8005590 <SD_PowerON+0x118>)
 8005516:	4618      	mov	r0, r3
 8005518:	f001 f98c 	bl	8006834 <SDMMC_CmdAppOperCommand>
 800551c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	2b00      	cmp	r3, #0
 8005522:	d002      	beq.n	800552a <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005524:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8005528:	e02e      	b.n	8005588 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	2100      	movs	r1, #0
 8005530:	4618      	mov	r0, r3
 8005532:	f000 fff2 	bl	800651a <SDMMC_GetResponse>
 8005536:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8005538:	697b      	ldr	r3, [r7, #20]
 800553a:	0fdb      	lsrs	r3, r3, #31
 800553c:	2b01      	cmp	r3, #1
 800553e:	d101      	bne.n	8005544 <SD_PowerON+0xcc>
 8005540:	2301      	movs	r3, #1
 8005542:	e000      	b.n	8005546 <SD_PowerON+0xce>
 8005544:	2300      	movs	r3, #0
 8005546:	613b      	str	r3, [r7, #16]

    count++;
 8005548:	68bb      	ldr	r3, [r7, #8]
 800554a:	3301      	adds	r3, #1
 800554c:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800554e:	68bb      	ldr	r3, [r7, #8]
 8005550:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8005554:	4293      	cmp	r3, r2
 8005556:	d802      	bhi.n	800555e <SD_PowerON+0xe6>
 8005558:	693b      	ldr	r3, [r7, #16]
 800555a:	2b00      	cmp	r3, #0
 800555c:	d0cc      	beq.n	80054f8 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800555e:	68bb      	ldr	r3, [r7, #8]
 8005560:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8005564:	4293      	cmp	r3, r2
 8005566:	d902      	bls.n	800556e <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8005568:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800556c:	e00c      	b.n	8005588 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800556e:	697b      	ldr	r3, [r7, #20]
 8005570:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8005574:	2b00      	cmp	r3, #0
 8005576:	d003      	beq.n	8005580 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	2201      	movs	r2, #1
 800557c:	645a      	str	r2, [r3, #68]	@ 0x44
 800557e:	e002      	b.n	8005586 <SD_PowerON+0x10e>
    }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	2200      	movs	r2, #0
 8005584:	645a      	str	r2, [r3, #68]	@ 0x44
  }


  return HAL_SD_ERROR_NONE;
 8005586:	2300      	movs	r3, #0
}
 8005588:	4618      	mov	r0, r3
 800558a:	3718      	adds	r7, #24
 800558c:	46bd      	mov	sp, r7
 800558e:	bd80      	pop	{r7, pc}
 8005590:	c1100000 	.word	0xc1100000

08005594 <SD_SendStatus>:
  * @param  pCardStatus pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8005594:	b580      	push	{r7, lr}
 8005596:	b084      	sub	sp, #16
 8005598:	af00      	add	r7, sp, #0
 800559a:	6078      	str	r0, [r7, #4]
 800559c:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800559e:	683b      	ldr	r3, [r7, #0]
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d102      	bne.n	80055aa <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 80055a4:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80055a8:	e018      	b.n	80055dc <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681a      	ldr	r2, [r3, #0]
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80055b2:	041b      	lsls	r3, r3, #16
 80055b4:	4619      	mov	r1, r3
 80055b6:	4610      	mov	r0, r2
 80055b8:	f001 f9bd 	bl	8006936 <SDMMC_CmdSendStatus>
 80055bc:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d001      	beq.n	80055c8 <SD_SendStatus+0x34>
  {
    return errorstate;
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	e009      	b.n	80055dc <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	2100      	movs	r1, #0
 80055ce:	4618      	mov	r0, r3
 80055d0:	f000 ffa3 	bl	800651a <SDMMC_GetResponse>
 80055d4:	4602      	mov	r2, r0
 80055d6:	683b      	ldr	r3, [r7, #0]
 80055d8:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 80055da:	2300      	movs	r3, #0
}
 80055dc:	4618      	mov	r0, r3
 80055de:	3710      	adds	r7, #16
 80055e0:	46bd      	mov	sp, r7
 80055e2:	bd80      	pop	{r7, pc}

080055e4 <SD_Read_IT>:
  * @param  hsd pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 80055e4:	b580      	push	{r7, lr}
 80055e6:	b086      	sub	sp, #24
 80055e8:	af00      	add	r7, sp, #0
 80055ea:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055f0:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055f6:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 80055f8:	693b      	ldr	r3, [r7, #16]
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d03f      	beq.n	800567e <SD_Read_IT+0x9a>
  {
    /* Read data from SDMMC Rx FIFO */
    for(count = 0U; count < 8U; count++)
 80055fe:	2300      	movs	r3, #0
 8005600:	617b      	str	r3, [r7, #20]
 8005602:	e033      	b.n	800566c <SD_Read_IT+0x88>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	4618      	mov	r0, r3
 800560a:	f000 ff14 	bl	8006436 <SDMMC_ReadFIFO>
 800560e:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 8005610:	68bb      	ldr	r3, [r7, #8]
 8005612:	b2da      	uxtb	r2, r3
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	701a      	strb	r2, [r3, #0]
      tmp++;
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	3301      	adds	r3, #1
 800561c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800561e:	693b      	ldr	r3, [r7, #16]
 8005620:	3b01      	subs	r3, #1
 8005622:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 8005624:	68bb      	ldr	r3, [r7, #8]
 8005626:	0a1b      	lsrs	r3, r3, #8
 8005628:	b2da      	uxtb	r2, r3
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	701a      	strb	r2, [r3, #0]
      tmp++;
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	3301      	adds	r3, #1
 8005632:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8005634:	693b      	ldr	r3, [r7, #16]
 8005636:	3b01      	subs	r3, #1
 8005638:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800563a:	68bb      	ldr	r3, [r7, #8]
 800563c:	0c1b      	lsrs	r3, r3, #16
 800563e:	b2da      	uxtb	r2, r3
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	701a      	strb	r2, [r3, #0]
      tmp++;
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	3301      	adds	r3, #1
 8005648:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800564a:	693b      	ldr	r3, [r7, #16]
 800564c:	3b01      	subs	r3, #1
 800564e:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 8005650:	68bb      	ldr	r3, [r7, #8]
 8005652:	0e1b      	lsrs	r3, r3, #24
 8005654:	b2da      	uxtb	r2, r3
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	701a      	strb	r2, [r3, #0]
      tmp++;
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	3301      	adds	r3, #1
 800565e:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8005660:	693b      	ldr	r3, [r7, #16]
 8005662:	3b01      	subs	r3, #1
 8005664:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 8005666:	697b      	ldr	r3, [r7, #20]
 8005668:	3301      	adds	r3, #1
 800566a:	617b      	str	r3, [r7, #20]
 800566c:	697b      	ldr	r3, [r7, #20]
 800566e:	2b07      	cmp	r3, #7
 8005670:	d9c8      	bls.n	8005604 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	68fa      	ldr	r2, [r7, #12]
 8005676:	629a      	str	r2, [r3, #40]	@ 0x28
    hsd->RxXferSize = dataremaining;
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	693a      	ldr	r2, [r7, #16]
 800567c:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
}
 800567e:	bf00      	nop
 8005680:	3718      	adds	r7, #24
 8005682:	46bd      	mov	sp, r7
 8005684:	bd80      	pop	{r7, pc}

08005686 <SD_Write_IT>:
  * @param  hsd pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 8005686:	b580      	push	{r7, lr}
 8005688:	b086      	sub	sp, #24
 800568a:	af00      	add	r7, sp, #0
 800568c:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	6a1b      	ldr	r3, [r3, #32]
 8005692:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005698:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800569a:	693b      	ldr	r3, [r7, #16]
 800569c:	2b00      	cmp	r3, #0
 800569e:	d043      	beq.n	8005728 <SD_Write_IT+0xa2>
  {
    /* Write data to SDMMC Tx FIFO */
    for(count = 0U; count < 8U; count++)
 80056a0:	2300      	movs	r3, #0
 80056a2:	617b      	str	r3, [r7, #20]
 80056a4:	e037      	b.n	8005716 <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	781b      	ldrb	r3, [r3, #0]
 80056aa:	60bb      	str	r3, [r7, #8]
      tmp++;
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	3301      	adds	r3, #1
 80056b0:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80056b2:	693b      	ldr	r3, [r7, #16]
 80056b4:	3b01      	subs	r3, #1
 80056b6:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	781b      	ldrb	r3, [r3, #0]
 80056bc:	021a      	lsls	r2, r3, #8
 80056be:	68bb      	ldr	r3, [r7, #8]
 80056c0:	4313      	orrs	r3, r2
 80056c2:	60bb      	str	r3, [r7, #8]
      tmp++;
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	3301      	adds	r3, #1
 80056c8:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80056ca:	693b      	ldr	r3, [r7, #16]
 80056cc:	3b01      	subs	r3, #1
 80056ce:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	781b      	ldrb	r3, [r3, #0]
 80056d4:	041a      	lsls	r2, r3, #16
 80056d6:	68bb      	ldr	r3, [r7, #8]
 80056d8:	4313      	orrs	r3, r2
 80056da:	60bb      	str	r3, [r7, #8]
      tmp++;
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	3301      	adds	r3, #1
 80056e0:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80056e2:	693b      	ldr	r3, [r7, #16]
 80056e4:	3b01      	subs	r3, #1
 80056e6:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	781b      	ldrb	r3, [r3, #0]
 80056ec:	061a      	lsls	r2, r3, #24
 80056ee:	68bb      	ldr	r3, [r7, #8]
 80056f0:	4313      	orrs	r3, r2
 80056f2:	60bb      	str	r3, [r7, #8]
      tmp++;
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	3301      	adds	r3, #1
 80056f8:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80056fa:	693b      	ldr	r3, [r7, #16]
 80056fc:	3b01      	subs	r3, #1
 80056fe:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	f107 0208 	add.w	r2, r7, #8
 8005708:	4611      	mov	r1, r2
 800570a:	4618      	mov	r0, r3
 800570c:	f000 fea0 	bl	8006450 <SDMMC_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 8005710:	697b      	ldr	r3, [r7, #20]
 8005712:	3301      	adds	r3, #1
 8005714:	617b      	str	r3, [r7, #20]
 8005716:	697b      	ldr	r3, [r7, #20]
 8005718:	2b07      	cmp	r3, #7
 800571a:	d9c4      	bls.n	80056a6 <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	68fa      	ldr	r2, [r7, #12]
 8005720:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	693a      	ldr	r2, [r7, #16]
 8005726:	625a      	str	r2, [r3, #36]	@ 0x24
  }
}
 8005728:	bf00      	nop
 800572a:	3718      	adds	r7, #24
 800572c:	46bd      	mov	sp, r7
 800572e:	bd80      	pop	{r7, pc}

08005730 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005730:	b580      	push	{r7, lr}
 8005732:	b082      	sub	sp, #8
 8005734:	af00      	add	r7, sp, #0
 8005736:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	2b00      	cmp	r3, #0
 800573c:	d101      	bne.n	8005742 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800573e:	2301      	movs	r3, #1
 8005740:	e049      	b.n	80057d6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005748:	b2db      	uxtb	r3, r3
 800574a:	2b00      	cmp	r3, #0
 800574c:	d106      	bne.n	800575c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	2200      	movs	r2, #0
 8005752:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005756:	6878      	ldr	r0, [r7, #4]
 8005758:	f7fb fa68 	bl	8000c2c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	2202      	movs	r2, #2
 8005760:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681a      	ldr	r2, [r3, #0]
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	3304      	adds	r3, #4
 800576c:	4619      	mov	r1, r3
 800576e:	4610      	mov	r0, r2
 8005770:	f000 f9da 	bl	8005b28 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	2201      	movs	r2, #1
 8005778:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	2201      	movs	r2, #1
 8005780:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	2201      	movs	r2, #1
 8005788:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	2201      	movs	r2, #1
 8005790:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	2201      	movs	r2, #1
 8005798:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	2201      	movs	r2, #1
 80057a0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	2201      	movs	r2, #1
 80057a8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	2201      	movs	r2, #1
 80057b0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	2201      	movs	r2, #1
 80057b8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	2201      	movs	r2, #1
 80057c0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	2201      	movs	r2, #1
 80057c8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	2201      	movs	r2, #1
 80057d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80057d4:	2300      	movs	r3, #0
}
 80057d6:	4618      	mov	r0, r3
 80057d8:	3708      	adds	r7, #8
 80057da:	46bd      	mov	sp, r7
 80057dc:	bd80      	pop	{r7, pc}

080057de <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 80057de:	b580      	push	{r7, lr}
 80057e0:	b082      	sub	sp, #8
 80057e2:	af00      	add	r7, sp, #0
 80057e4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d101      	bne.n	80057f0 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 80057ec:	2301      	movs	r3, #1
 80057ee:	e049      	b.n	8005884 <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80057f6:	b2db      	uxtb	r3, r3
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d106      	bne.n	800580a <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	2200      	movs	r2, #0
 8005800:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8005804:	6878      	ldr	r0, [r7, #4]
 8005806:	f000 f841 	bl	800588c <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	2202      	movs	r2, #2
 800580e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681a      	ldr	r2, [r3, #0]
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	3304      	adds	r3, #4
 800581a:	4619      	mov	r1, r3
 800581c:	4610      	mov	r0, r2
 800581e:	f000 f983 	bl	8005b28 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	2201      	movs	r2, #1
 8005826:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	2201      	movs	r2, #1
 800582e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	2201      	movs	r2, #1
 8005836:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	2201      	movs	r2, #1
 800583e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	2201      	movs	r2, #1
 8005846:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	2201      	movs	r2, #1
 800584e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	2201      	movs	r2, #1
 8005856:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	2201      	movs	r2, #1
 800585e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	2201      	movs	r2, #1
 8005866:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	2201      	movs	r2, #1
 800586e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	2201      	movs	r2, #1
 8005876:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	2201      	movs	r2, #1
 800587e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005882:	2300      	movs	r3, #0
}
 8005884:	4618      	mov	r0, r3
 8005886:	3708      	adds	r7, #8
 8005888:	46bd      	mov	sp, r7
 800588a:	bd80      	pop	{r7, pc}

0800588c <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 800588c:	b480      	push	{r7}
 800588e:	b083      	sub	sp, #12
 8005890:	af00      	add	r7, sp, #0
 8005892:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8005894:	bf00      	nop
 8005896:	370c      	adds	r7, #12
 8005898:	46bd      	mov	sp, r7
 800589a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800589e:	4770      	bx	lr

080058a0 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 80058a0:	b580      	push	{r7, lr}
 80058a2:	b086      	sub	sp, #24
 80058a4:	af00      	add	r7, sp, #0
 80058a6:	60f8      	str	r0, [r7, #12]
 80058a8:	60b9      	str	r1, [r7, #8]
 80058aa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80058ac:	2300      	movs	r3, #0
 80058ae:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80058b6:	2b01      	cmp	r3, #1
 80058b8:	d101      	bne.n	80058be <HAL_TIM_OC_ConfigChannel+0x1e>
 80058ba:	2302      	movs	r3, #2
 80058bc:	e066      	b.n	800598c <HAL_TIM_OC_ConfigChannel+0xec>
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	2201      	movs	r2, #1
 80058c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	2b14      	cmp	r3, #20
 80058ca:	d857      	bhi.n	800597c <HAL_TIM_OC_ConfigChannel+0xdc>
 80058cc:	a201      	add	r2, pc, #4	@ (adr r2, 80058d4 <HAL_TIM_OC_ConfigChannel+0x34>)
 80058ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058d2:	bf00      	nop
 80058d4:	08005929 	.word	0x08005929
 80058d8:	0800597d 	.word	0x0800597d
 80058dc:	0800597d 	.word	0x0800597d
 80058e0:	0800597d 	.word	0x0800597d
 80058e4:	08005937 	.word	0x08005937
 80058e8:	0800597d 	.word	0x0800597d
 80058ec:	0800597d 	.word	0x0800597d
 80058f0:	0800597d 	.word	0x0800597d
 80058f4:	08005945 	.word	0x08005945
 80058f8:	0800597d 	.word	0x0800597d
 80058fc:	0800597d 	.word	0x0800597d
 8005900:	0800597d 	.word	0x0800597d
 8005904:	08005953 	.word	0x08005953
 8005908:	0800597d 	.word	0x0800597d
 800590c:	0800597d 	.word	0x0800597d
 8005910:	0800597d 	.word	0x0800597d
 8005914:	08005961 	.word	0x08005961
 8005918:	0800597d 	.word	0x0800597d
 800591c:	0800597d 	.word	0x0800597d
 8005920:	0800597d 	.word	0x0800597d
 8005924:	0800596f 	.word	0x0800596f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	68b9      	ldr	r1, [r7, #8]
 800592e:	4618      	mov	r0, r3
 8005930:	f000 f95e 	bl	8005bf0 <TIM_OC1_SetConfig>
      break;
 8005934:	e025      	b.n	8005982 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	68b9      	ldr	r1, [r7, #8]
 800593c:	4618      	mov	r0, r3
 800593e:	f000 f9d3 	bl	8005ce8 <TIM_OC2_SetConfig>
      break;
 8005942:	e01e      	b.n	8005982 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	68b9      	ldr	r1, [r7, #8]
 800594a:	4618      	mov	r0, r3
 800594c:	f000 fa46 	bl	8005ddc <TIM_OC3_SetConfig>
      break;
 8005950:	e017      	b.n	8005982 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	68b9      	ldr	r1, [r7, #8]
 8005958:	4618      	mov	r0, r3
 800595a:	f000 fab7 	bl	8005ecc <TIM_OC4_SetConfig>
      break;
 800595e:	e010      	b.n	8005982 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	68b9      	ldr	r1, [r7, #8]
 8005966:	4618      	mov	r0, r3
 8005968:	f000 fb0e 	bl	8005f88 <TIM_OC5_SetConfig>
      break;
 800596c:	e009      	b.n	8005982 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	68b9      	ldr	r1, [r7, #8]
 8005974:	4618      	mov	r0, r3
 8005976:	f000 fb5f 	bl	8006038 <TIM_OC6_SetConfig>
      break;
 800597a:	e002      	b.n	8005982 <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 800597c:	2301      	movs	r3, #1
 800597e:	75fb      	strb	r3, [r7, #23]
      break;
 8005980:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	2200      	movs	r2, #0
 8005986:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800598a:	7dfb      	ldrb	r3, [r7, #23]
}
 800598c:	4618      	mov	r0, r3
 800598e:	3718      	adds	r7, #24
 8005990:	46bd      	mov	sp, r7
 8005992:	bd80      	pop	{r7, pc}

08005994 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005994:	b580      	push	{r7, lr}
 8005996:	b084      	sub	sp, #16
 8005998:	af00      	add	r7, sp, #0
 800599a:	6078      	str	r0, [r7, #4]
 800599c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800599e:	2300      	movs	r3, #0
 80059a0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80059a8:	2b01      	cmp	r3, #1
 80059aa:	d101      	bne.n	80059b0 <HAL_TIM_ConfigClockSource+0x1c>
 80059ac:	2302      	movs	r3, #2
 80059ae:	e0b6      	b.n	8005b1e <HAL_TIM_ConfigClockSource+0x18a>
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	2201      	movs	r2, #1
 80059b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	2202      	movs	r2, #2
 80059bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	689b      	ldr	r3, [r3, #8]
 80059c6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80059c8:	68bb      	ldr	r3, [r7, #8]
 80059ca:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80059ce:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80059d2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80059d4:	68bb      	ldr	r3, [r7, #8]
 80059d6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80059da:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	68ba      	ldr	r2, [r7, #8]
 80059e2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80059e4:	683b      	ldr	r3, [r7, #0]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80059ec:	d03e      	beq.n	8005a6c <HAL_TIM_ConfigClockSource+0xd8>
 80059ee:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80059f2:	f200 8087 	bhi.w	8005b04 <HAL_TIM_ConfigClockSource+0x170>
 80059f6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80059fa:	f000 8086 	beq.w	8005b0a <HAL_TIM_ConfigClockSource+0x176>
 80059fe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005a02:	d87f      	bhi.n	8005b04 <HAL_TIM_ConfigClockSource+0x170>
 8005a04:	2b70      	cmp	r3, #112	@ 0x70
 8005a06:	d01a      	beq.n	8005a3e <HAL_TIM_ConfigClockSource+0xaa>
 8005a08:	2b70      	cmp	r3, #112	@ 0x70
 8005a0a:	d87b      	bhi.n	8005b04 <HAL_TIM_ConfigClockSource+0x170>
 8005a0c:	2b60      	cmp	r3, #96	@ 0x60
 8005a0e:	d050      	beq.n	8005ab2 <HAL_TIM_ConfigClockSource+0x11e>
 8005a10:	2b60      	cmp	r3, #96	@ 0x60
 8005a12:	d877      	bhi.n	8005b04 <HAL_TIM_ConfigClockSource+0x170>
 8005a14:	2b50      	cmp	r3, #80	@ 0x50
 8005a16:	d03c      	beq.n	8005a92 <HAL_TIM_ConfigClockSource+0xfe>
 8005a18:	2b50      	cmp	r3, #80	@ 0x50
 8005a1a:	d873      	bhi.n	8005b04 <HAL_TIM_ConfigClockSource+0x170>
 8005a1c:	2b40      	cmp	r3, #64	@ 0x40
 8005a1e:	d058      	beq.n	8005ad2 <HAL_TIM_ConfigClockSource+0x13e>
 8005a20:	2b40      	cmp	r3, #64	@ 0x40
 8005a22:	d86f      	bhi.n	8005b04 <HAL_TIM_ConfigClockSource+0x170>
 8005a24:	2b30      	cmp	r3, #48	@ 0x30
 8005a26:	d064      	beq.n	8005af2 <HAL_TIM_ConfigClockSource+0x15e>
 8005a28:	2b30      	cmp	r3, #48	@ 0x30
 8005a2a:	d86b      	bhi.n	8005b04 <HAL_TIM_ConfigClockSource+0x170>
 8005a2c:	2b20      	cmp	r3, #32
 8005a2e:	d060      	beq.n	8005af2 <HAL_TIM_ConfigClockSource+0x15e>
 8005a30:	2b20      	cmp	r3, #32
 8005a32:	d867      	bhi.n	8005b04 <HAL_TIM_ConfigClockSource+0x170>
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d05c      	beq.n	8005af2 <HAL_TIM_ConfigClockSource+0x15e>
 8005a38:	2b10      	cmp	r3, #16
 8005a3a:	d05a      	beq.n	8005af2 <HAL_TIM_ConfigClockSource+0x15e>
 8005a3c:	e062      	b.n	8005b04 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005a42:	683b      	ldr	r3, [r7, #0]
 8005a44:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005a46:	683b      	ldr	r3, [r7, #0]
 8005a48:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005a4a:	683b      	ldr	r3, [r7, #0]
 8005a4c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005a4e:	f000 fbc7 	bl	80061e0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	689b      	ldr	r3, [r3, #8]
 8005a58:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005a5a:	68bb      	ldr	r3, [r7, #8]
 8005a5c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005a60:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	68ba      	ldr	r2, [r7, #8]
 8005a68:	609a      	str	r2, [r3, #8]
      break;
 8005a6a:	e04f      	b.n	8005b0c <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005a70:	683b      	ldr	r3, [r7, #0]
 8005a72:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005a74:	683b      	ldr	r3, [r7, #0]
 8005a76:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005a78:	683b      	ldr	r3, [r7, #0]
 8005a7a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005a7c:	f000 fbb0 	bl	80061e0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	689a      	ldr	r2, [r3, #8]
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005a8e:	609a      	str	r2, [r3, #8]
      break;
 8005a90:	e03c      	b.n	8005b0c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005a96:	683b      	ldr	r3, [r7, #0]
 8005a98:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005a9a:	683b      	ldr	r3, [r7, #0]
 8005a9c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005a9e:	461a      	mov	r2, r3
 8005aa0:	f000 fb24 	bl	80060ec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	2150      	movs	r1, #80	@ 0x50
 8005aaa:	4618      	mov	r0, r3
 8005aac:	f000 fb7d 	bl	80061aa <TIM_ITRx_SetConfig>
      break;
 8005ab0:	e02c      	b.n	8005b0c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005ab6:	683b      	ldr	r3, [r7, #0]
 8005ab8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005aba:	683b      	ldr	r3, [r7, #0]
 8005abc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005abe:	461a      	mov	r2, r3
 8005ac0:	f000 fb43 	bl	800614a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	2160      	movs	r1, #96	@ 0x60
 8005aca:	4618      	mov	r0, r3
 8005acc:	f000 fb6d 	bl	80061aa <TIM_ITRx_SetConfig>
      break;
 8005ad0:	e01c      	b.n	8005b0c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005ad6:	683b      	ldr	r3, [r7, #0]
 8005ad8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005ada:	683b      	ldr	r3, [r7, #0]
 8005adc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005ade:	461a      	mov	r2, r3
 8005ae0:	f000 fb04 	bl	80060ec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	2140      	movs	r1, #64	@ 0x40
 8005aea:	4618      	mov	r0, r3
 8005aec:	f000 fb5d 	bl	80061aa <TIM_ITRx_SetConfig>
      break;
 8005af0:	e00c      	b.n	8005b0c <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681a      	ldr	r2, [r3, #0]
 8005af6:	683b      	ldr	r3, [r7, #0]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	4619      	mov	r1, r3
 8005afc:	4610      	mov	r0, r2
 8005afe:	f000 fb54 	bl	80061aa <TIM_ITRx_SetConfig>
      break;
 8005b02:	e003      	b.n	8005b0c <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8005b04:	2301      	movs	r3, #1
 8005b06:	73fb      	strb	r3, [r7, #15]
      break;
 8005b08:	e000      	b.n	8005b0c <HAL_TIM_ConfigClockSource+0x178>
      break;
 8005b0a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	2201      	movs	r2, #1
 8005b10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	2200      	movs	r2, #0
 8005b18:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005b1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b1e:	4618      	mov	r0, r3
 8005b20:	3710      	adds	r7, #16
 8005b22:	46bd      	mov	sp, r7
 8005b24:	bd80      	pop	{r7, pc}
	...

08005b28 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005b28:	b480      	push	{r7}
 8005b2a:	b085      	sub	sp, #20
 8005b2c:	af00      	add	r7, sp, #0
 8005b2e:	6078      	str	r0, [r7, #4]
 8005b30:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	4a2a      	ldr	r2, [pc, #168]	@ (8005be4 <TIM_Base_SetConfig+0xbc>)
 8005b3c:	4293      	cmp	r3, r2
 8005b3e:	d003      	beq.n	8005b48 <TIM_Base_SetConfig+0x20>
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005b46:	d108      	bne.n	8005b5a <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005b4e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005b50:	683b      	ldr	r3, [r7, #0]
 8005b52:	685b      	ldr	r3, [r3, #4]
 8005b54:	68fa      	ldr	r2, [r7, #12]
 8005b56:	4313      	orrs	r3, r2
 8005b58:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	4a21      	ldr	r2, [pc, #132]	@ (8005be4 <TIM_Base_SetConfig+0xbc>)
 8005b5e:	4293      	cmp	r3, r2
 8005b60:	d00b      	beq.n	8005b7a <TIM_Base_SetConfig+0x52>
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005b68:	d007      	beq.n	8005b7a <TIM_Base_SetConfig+0x52>
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	4a1e      	ldr	r2, [pc, #120]	@ (8005be8 <TIM_Base_SetConfig+0xc0>)
 8005b6e:	4293      	cmp	r3, r2
 8005b70:	d003      	beq.n	8005b7a <TIM_Base_SetConfig+0x52>
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	4a1d      	ldr	r2, [pc, #116]	@ (8005bec <TIM_Base_SetConfig+0xc4>)
 8005b76:	4293      	cmp	r3, r2
 8005b78:	d108      	bne.n	8005b8c <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005b80:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005b82:	683b      	ldr	r3, [r7, #0]
 8005b84:	68db      	ldr	r3, [r3, #12]
 8005b86:	68fa      	ldr	r2, [r7, #12]
 8005b88:	4313      	orrs	r3, r2
 8005b8a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005b92:	683b      	ldr	r3, [r7, #0]
 8005b94:	695b      	ldr	r3, [r3, #20]
 8005b96:	4313      	orrs	r3, r2
 8005b98:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	68fa      	ldr	r2, [r7, #12]
 8005b9e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005ba0:	683b      	ldr	r3, [r7, #0]
 8005ba2:	689a      	ldr	r2, [r3, #8]
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005ba8:	683b      	ldr	r3, [r7, #0]
 8005baa:	681a      	ldr	r2, [r3, #0]
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	4a0c      	ldr	r2, [pc, #48]	@ (8005be4 <TIM_Base_SetConfig+0xbc>)
 8005bb4:	4293      	cmp	r3, r2
 8005bb6:	d007      	beq.n	8005bc8 <TIM_Base_SetConfig+0xa0>
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	4a0b      	ldr	r2, [pc, #44]	@ (8005be8 <TIM_Base_SetConfig+0xc0>)
 8005bbc:	4293      	cmp	r3, r2
 8005bbe:	d003      	beq.n	8005bc8 <TIM_Base_SetConfig+0xa0>
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	4a0a      	ldr	r2, [pc, #40]	@ (8005bec <TIM_Base_SetConfig+0xc4>)
 8005bc4:	4293      	cmp	r3, r2
 8005bc6:	d103      	bne.n	8005bd0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005bc8:	683b      	ldr	r3, [r7, #0]
 8005bca:	691a      	ldr	r2, [r3, #16]
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	2201      	movs	r2, #1
 8005bd4:	615a      	str	r2, [r3, #20]
}
 8005bd6:	bf00      	nop
 8005bd8:	3714      	adds	r7, #20
 8005bda:	46bd      	mov	sp, r7
 8005bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be0:	4770      	bx	lr
 8005be2:	bf00      	nop
 8005be4:	40012c00 	.word	0x40012c00
 8005be8:	40014000 	.word	0x40014000
 8005bec:	40014400 	.word	0x40014400

08005bf0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005bf0:	b480      	push	{r7}
 8005bf2:	b087      	sub	sp, #28
 8005bf4:	af00      	add	r7, sp, #0
 8005bf6:	6078      	str	r0, [r7, #4]
 8005bf8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	6a1b      	ldr	r3, [r3, #32]
 8005bfe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	6a1b      	ldr	r3, [r3, #32]
 8005c04:	f023 0201 	bic.w	r2, r3, #1
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	685b      	ldr	r3, [r3, #4]
 8005c10:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	699b      	ldr	r3, [r3, #24]
 8005c16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005c1e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005c22:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	f023 0303 	bic.w	r3, r3, #3
 8005c2a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005c2c:	683b      	ldr	r3, [r7, #0]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	68fa      	ldr	r2, [r7, #12]
 8005c32:	4313      	orrs	r3, r2
 8005c34:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005c36:	697b      	ldr	r3, [r7, #20]
 8005c38:	f023 0302 	bic.w	r3, r3, #2
 8005c3c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005c3e:	683b      	ldr	r3, [r7, #0]
 8005c40:	689b      	ldr	r3, [r3, #8]
 8005c42:	697a      	ldr	r2, [r7, #20]
 8005c44:	4313      	orrs	r3, r2
 8005c46:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	4a24      	ldr	r2, [pc, #144]	@ (8005cdc <TIM_OC1_SetConfig+0xec>)
 8005c4c:	4293      	cmp	r3, r2
 8005c4e:	d007      	beq.n	8005c60 <TIM_OC1_SetConfig+0x70>
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	4a23      	ldr	r2, [pc, #140]	@ (8005ce0 <TIM_OC1_SetConfig+0xf0>)
 8005c54:	4293      	cmp	r3, r2
 8005c56:	d003      	beq.n	8005c60 <TIM_OC1_SetConfig+0x70>
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	4a22      	ldr	r2, [pc, #136]	@ (8005ce4 <TIM_OC1_SetConfig+0xf4>)
 8005c5c:	4293      	cmp	r3, r2
 8005c5e:	d10c      	bne.n	8005c7a <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005c60:	697b      	ldr	r3, [r7, #20]
 8005c62:	f023 0308 	bic.w	r3, r3, #8
 8005c66:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005c68:	683b      	ldr	r3, [r7, #0]
 8005c6a:	68db      	ldr	r3, [r3, #12]
 8005c6c:	697a      	ldr	r2, [r7, #20]
 8005c6e:	4313      	orrs	r3, r2
 8005c70:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005c72:	697b      	ldr	r3, [r7, #20]
 8005c74:	f023 0304 	bic.w	r3, r3, #4
 8005c78:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	4a17      	ldr	r2, [pc, #92]	@ (8005cdc <TIM_OC1_SetConfig+0xec>)
 8005c7e:	4293      	cmp	r3, r2
 8005c80:	d007      	beq.n	8005c92 <TIM_OC1_SetConfig+0xa2>
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	4a16      	ldr	r2, [pc, #88]	@ (8005ce0 <TIM_OC1_SetConfig+0xf0>)
 8005c86:	4293      	cmp	r3, r2
 8005c88:	d003      	beq.n	8005c92 <TIM_OC1_SetConfig+0xa2>
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	4a15      	ldr	r2, [pc, #84]	@ (8005ce4 <TIM_OC1_SetConfig+0xf4>)
 8005c8e:	4293      	cmp	r3, r2
 8005c90:	d111      	bne.n	8005cb6 <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005c92:	693b      	ldr	r3, [r7, #16]
 8005c94:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005c98:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005c9a:	693b      	ldr	r3, [r7, #16]
 8005c9c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005ca0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005ca2:	683b      	ldr	r3, [r7, #0]
 8005ca4:	695b      	ldr	r3, [r3, #20]
 8005ca6:	693a      	ldr	r2, [r7, #16]
 8005ca8:	4313      	orrs	r3, r2
 8005caa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005cac:	683b      	ldr	r3, [r7, #0]
 8005cae:	699b      	ldr	r3, [r3, #24]
 8005cb0:	693a      	ldr	r2, [r7, #16]
 8005cb2:	4313      	orrs	r3, r2
 8005cb4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	693a      	ldr	r2, [r7, #16]
 8005cba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	68fa      	ldr	r2, [r7, #12]
 8005cc0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005cc2:	683b      	ldr	r3, [r7, #0]
 8005cc4:	685a      	ldr	r2, [r3, #4]
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	697a      	ldr	r2, [r7, #20]
 8005cce:	621a      	str	r2, [r3, #32]
}
 8005cd0:	bf00      	nop
 8005cd2:	371c      	adds	r7, #28
 8005cd4:	46bd      	mov	sp, r7
 8005cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cda:	4770      	bx	lr
 8005cdc:	40012c00 	.word	0x40012c00
 8005ce0:	40014000 	.word	0x40014000
 8005ce4:	40014400 	.word	0x40014400

08005ce8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005ce8:	b480      	push	{r7}
 8005cea:	b087      	sub	sp, #28
 8005cec:	af00      	add	r7, sp, #0
 8005cee:	6078      	str	r0, [r7, #4]
 8005cf0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	6a1b      	ldr	r3, [r3, #32]
 8005cf6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	6a1b      	ldr	r3, [r3, #32]
 8005cfc:	f023 0210 	bic.w	r2, r3, #16
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	685b      	ldr	r3, [r3, #4]
 8005d08:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	699b      	ldr	r3, [r3, #24]
 8005d0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005d16:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005d1a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005d22:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005d24:	683b      	ldr	r3, [r7, #0]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	021b      	lsls	r3, r3, #8
 8005d2a:	68fa      	ldr	r2, [r7, #12]
 8005d2c:	4313      	orrs	r3, r2
 8005d2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005d30:	697b      	ldr	r3, [r7, #20]
 8005d32:	f023 0320 	bic.w	r3, r3, #32
 8005d36:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005d38:	683b      	ldr	r3, [r7, #0]
 8005d3a:	689b      	ldr	r3, [r3, #8]
 8005d3c:	011b      	lsls	r3, r3, #4
 8005d3e:	697a      	ldr	r2, [r7, #20]
 8005d40:	4313      	orrs	r3, r2
 8005d42:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	4a22      	ldr	r2, [pc, #136]	@ (8005dd0 <TIM_OC2_SetConfig+0xe8>)
 8005d48:	4293      	cmp	r3, r2
 8005d4a:	d10d      	bne.n	8005d68 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005d4c:	697b      	ldr	r3, [r7, #20]
 8005d4e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005d52:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005d54:	683b      	ldr	r3, [r7, #0]
 8005d56:	68db      	ldr	r3, [r3, #12]
 8005d58:	011b      	lsls	r3, r3, #4
 8005d5a:	697a      	ldr	r2, [r7, #20]
 8005d5c:	4313      	orrs	r3, r2
 8005d5e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005d60:	697b      	ldr	r3, [r7, #20]
 8005d62:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005d66:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	4a19      	ldr	r2, [pc, #100]	@ (8005dd0 <TIM_OC2_SetConfig+0xe8>)
 8005d6c:	4293      	cmp	r3, r2
 8005d6e:	d007      	beq.n	8005d80 <TIM_OC2_SetConfig+0x98>
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	4a18      	ldr	r2, [pc, #96]	@ (8005dd4 <TIM_OC2_SetConfig+0xec>)
 8005d74:	4293      	cmp	r3, r2
 8005d76:	d003      	beq.n	8005d80 <TIM_OC2_SetConfig+0x98>
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	4a17      	ldr	r2, [pc, #92]	@ (8005dd8 <TIM_OC2_SetConfig+0xf0>)
 8005d7c:	4293      	cmp	r3, r2
 8005d7e:	d113      	bne.n	8005da8 <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005d80:	693b      	ldr	r3, [r7, #16]
 8005d82:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005d86:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005d88:	693b      	ldr	r3, [r7, #16]
 8005d8a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005d8e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005d90:	683b      	ldr	r3, [r7, #0]
 8005d92:	695b      	ldr	r3, [r3, #20]
 8005d94:	009b      	lsls	r3, r3, #2
 8005d96:	693a      	ldr	r2, [r7, #16]
 8005d98:	4313      	orrs	r3, r2
 8005d9a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005d9c:	683b      	ldr	r3, [r7, #0]
 8005d9e:	699b      	ldr	r3, [r3, #24]
 8005da0:	009b      	lsls	r3, r3, #2
 8005da2:	693a      	ldr	r2, [r7, #16]
 8005da4:	4313      	orrs	r3, r2
 8005da6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	693a      	ldr	r2, [r7, #16]
 8005dac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	68fa      	ldr	r2, [r7, #12]
 8005db2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005db4:	683b      	ldr	r3, [r7, #0]
 8005db6:	685a      	ldr	r2, [r3, #4]
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	697a      	ldr	r2, [r7, #20]
 8005dc0:	621a      	str	r2, [r3, #32]
}
 8005dc2:	bf00      	nop
 8005dc4:	371c      	adds	r7, #28
 8005dc6:	46bd      	mov	sp, r7
 8005dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dcc:	4770      	bx	lr
 8005dce:	bf00      	nop
 8005dd0:	40012c00 	.word	0x40012c00
 8005dd4:	40014000 	.word	0x40014000
 8005dd8:	40014400 	.word	0x40014400

08005ddc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005ddc:	b480      	push	{r7}
 8005dde:	b087      	sub	sp, #28
 8005de0:	af00      	add	r7, sp, #0
 8005de2:	6078      	str	r0, [r7, #4]
 8005de4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	6a1b      	ldr	r3, [r3, #32]
 8005dea:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	6a1b      	ldr	r3, [r3, #32]
 8005df0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	685b      	ldr	r3, [r3, #4]
 8005dfc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	69db      	ldr	r3, [r3, #28]
 8005e02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005e0a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005e0e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	f023 0303 	bic.w	r3, r3, #3
 8005e16:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005e18:	683b      	ldr	r3, [r7, #0]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	68fa      	ldr	r2, [r7, #12]
 8005e1e:	4313      	orrs	r3, r2
 8005e20:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005e22:	697b      	ldr	r3, [r7, #20]
 8005e24:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005e28:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005e2a:	683b      	ldr	r3, [r7, #0]
 8005e2c:	689b      	ldr	r3, [r3, #8]
 8005e2e:	021b      	lsls	r3, r3, #8
 8005e30:	697a      	ldr	r2, [r7, #20]
 8005e32:	4313      	orrs	r3, r2
 8005e34:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	4a21      	ldr	r2, [pc, #132]	@ (8005ec0 <TIM_OC3_SetConfig+0xe4>)
 8005e3a:	4293      	cmp	r3, r2
 8005e3c:	d10d      	bne.n	8005e5a <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005e3e:	697b      	ldr	r3, [r7, #20]
 8005e40:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005e44:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005e46:	683b      	ldr	r3, [r7, #0]
 8005e48:	68db      	ldr	r3, [r3, #12]
 8005e4a:	021b      	lsls	r3, r3, #8
 8005e4c:	697a      	ldr	r2, [r7, #20]
 8005e4e:	4313      	orrs	r3, r2
 8005e50:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005e52:	697b      	ldr	r3, [r7, #20]
 8005e54:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005e58:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	4a18      	ldr	r2, [pc, #96]	@ (8005ec0 <TIM_OC3_SetConfig+0xe4>)
 8005e5e:	4293      	cmp	r3, r2
 8005e60:	d007      	beq.n	8005e72 <TIM_OC3_SetConfig+0x96>
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	4a17      	ldr	r2, [pc, #92]	@ (8005ec4 <TIM_OC3_SetConfig+0xe8>)
 8005e66:	4293      	cmp	r3, r2
 8005e68:	d003      	beq.n	8005e72 <TIM_OC3_SetConfig+0x96>
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	4a16      	ldr	r2, [pc, #88]	@ (8005ec8 <TIM_OC3_SetConfig+0xec>)
 8005e6e:	4293      	cmp	r3, r2
 8005e70:	d113      	bne.n	8005e9a <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005e72:	693b      	ldr	r3, [r7, #16]
 8005e74:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005e78:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005e7a:	693b      	ldr	r3, [r7, #16]
 8005e7c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005e80:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005e82:	683b      	ldr	r3, [r7, #0]
 8005e84:	695b      	ldr	r3, [r3, #20]
 8005e86:	011b      	lsls	r3, r3, #4
 8005e88:	693a      	ldr	r2, [r7, #16]
 8005e8a:	4313      	orrs	r3, r2
 8005e8c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005e8e:	683b      	ldr	r3, [r7, #0]
 8005e90:	699b      	ldr	r3, [r3, #24]
 8005e92:	011b      	lsls	r3, r3, #4
 8005e94:	693a      	ldr	r2, [r7, #16]
 8005e96:	4313      	orrs	r3, r2
 8005e98:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	693a      	ldr	r2, [r7, #16]
 8005e9e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	68fa      	ldr	r2, [r7, #12]
 8005ea4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005ea6:	683b      	ldr	r3, [r7, #0]
 8005ea8:	685a      	ldr	r2, [r3, #4]
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	697a      	ldr	r2, [r7, #20]
 8005eb2:	621a      	str	r2, [r3, #32]
}
 8005eb4:	bf00      	nop
 8005eb6:	371c      	adds	r7, #28
 8005eb8:	46bd      	mov	sp, r7
 8005eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ebe:	4770      	bx	lr
 8005ec0:	40012c00 	.word	0x40012c00
 8005ec4:	40014000 	.word	0x40014000
 8005ec8:	40014400 	.word	0x40014400

08005ecc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005ecc:	b480      	push	{r7}
 8005ece:	b087      	sub	sp, #28
 8005ed0:	af00      	add	r7, sp, #0
 8005ed2:	6078      	str	r0, [r7, #4]
 8005ed4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	6a1b      	ldr	r3, [r3, #32]
 8005eda:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	6a1b      	ldr	r3, [r3, #32]
 8005ee0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	685b      	ldr	r3, [r3, #4]
 8005eec:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	69db      	ldr	r3, [r3, #28]
 8005ef2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005efa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005efe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005f06:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005f08:	683b      	ldr	r3, [r7, #0]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	021b      	lsls	r3, r3, #8
 8005f0e:	68fa      	ldr	r2, [r7, #12]
 8005f10:	4313      	orrs	r3, r2
 8005f12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005f14:	693b      	ldr	r3, [r7, #16]
 8005f16:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005f1a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005f1c:	683b      	ldr	r3, [r7, #0]
 8005f1e:	689b      	ldr	r3, [r3, #8]
 8005f20:	031b      	lsls	r3, r3, #12
 8005f22:	693a      	ldr	r2, [r7, #16]
 8005f24:	4313      	orrs	r3, r2
 8005f26:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	4a14      	ldr	r2, [pc, #80]	@ (8005f7c <TIM_OC4_SetConfig+0xb0>)
 8005f2c:	4293      	cmp	r3, r2
 8005f2e:	d007      	beq.n	8005f40 <TIM_OC4_SetConfig+0x74>
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	4a13      	ldr	r2, [pc, #76]	@ (8005f80 <TIM_OC4_SetConfig+0xb4>)
 8005f34:	4293      	cmp	r3, r2
 8005f36:	d003      	beq.n	8005f40 <TIM_OC4_SetConfig+0x74>
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	4a12      	ldr	r2, [pc, #72]	@ (8005f84 <TIM_OC4_SetConfig+0xb8>)
 8005f3c:	4293      	cmp	r3, r2
 8005f3e:	d109      	bne.n	8005f54 <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005f40:	697b      	ldr	r3, [r7, #20]
 8005f42:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005f46:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005f48:	683b      	ldr	r3, [r7, #0]
 8005f4a:	695b      	ldr	r3, [r3, #20]
 8005f4c:	019b      	lsls	r3, r3, #6
 8005f4e:	697a      	ldr	r2, [r7, #20]
 8005f50:	4313      	orrs	r3, r2
 8005f52:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	697a      	ldr	r2, [r7, #20]
 8005f58:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	68fa      	ldr	r2, [r7, #12]
 8005f5e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005f60:	683b      	ldr	r3, [r7, #0]
 8005f62:	685a      	ldr	r2, [r3, #4]
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	693a      	ldr	r2, [r7, #16]
 8005f6c:	621a      	str	r2, [r3, #32]
}
 8005f6e:	bf00      	nop
 8005f70:	371c      	adds	r7, #28
 8005f72:	46bd      	mov	sp, r7
 8005f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f78:	4770      	bx	lr
 8005f7a:	bf00      	nop
 8005f7c:	40012c00 	.word	0x40012c00
 8005f80:	40014000 	.word	0x40014000
 8005f84:	40014400 	.word	0x40014400

08005f88 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005f88:	b480      	push	{r7}
 8005f8a:	b087      	sub	sp, #28
 8005f8c:	af00      	add	r7, sp, #0
 8005f8e:	6078      	str	r0, [r7, #4]
 8005f90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	6a1b      	ldr	r3, [r3, #32]
 8005f96:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	6a1b      	ldr	r3, [r3, #32]
 8005f9c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	685b      	ldr	r3, [r3, #4]
 8005fa8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005fae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005fb6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005fba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005fbc:	683b      	ldr	r3, [r7, #0]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	68fa      	ldr	r2, [r7, #12]
 8005fc2:	4313      	orrs	r3, r2
 8005fc4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005fc6:	693b      	ldr	r3, [r7, #16]
 8005fc8:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8005fcc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005fce:	683b      	ldr	r3, [r7, #0]
 8005fd0:	689b      	ldr	r3, [r3, #8]
 8005fd2:	041b      	lsls	r3, r3, #16
 8005fd4:	693a      	ldr	r2, [r7, #16]
 8005fd6:	4313      	orrs	r3, r2
 8005fd8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	4a13      	ldr	r2, [pc, #76]	@ (800602c <TIM_OC5_SetConfig+0xa4>)
 8005fde:	4293      	cmp	r3, r2
 8005fe0:	d007      	beq.n	8005ff2 <TIM_OC5_SetConfig+0x6a>
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	4a12      	ldr	r2, [pc, #72]	@ (8006030 <TIM_OC5_SetConfig+0xa8>)
 8005fe6:	4293      	cmp	r3, r2
 8005fe8:	d003      	beq.n	8005ff2 <TIM_OC5_SetConfig+0x6a>
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	4a11      	ldr	r2, [pc, #68]	@ (8006034 <TIM_OC5_SetConfig+0xac>)
 8005fee:	4293      	cmp	r3, r2
 8005ff0:	d109      	bne.n	8006006 <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005ff2:	697b      	ldr	r3, [r7, #20]
 8005ff4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005ff8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005ffa:	683b      	ldr	r3, [r7, #0]
 8005ffc:	695b      	ldr	r3, [r3, #20]
 8005ffe:	021b      	lsls	r3, r3, #8
 8006000:	697a      	ldr	r2, [r7, #20]
 8006002:	4313      	orrs	r3, r2
 8006004:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	697a      	ldr	r2, [r7, #20]
 800600a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	68fa      	ldr	r2, [r7, #12]
 8006010:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006012:	683b      	ldr	r3, [r7, #0]
 8006014:	685a      	ldr	r2, [r3, #4]
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	693a      	ldr	r2, [r7, #16]
 800601e:	621a      	str	r2, [r3, #32]
}
 8006020:	bf00      	nop
 8006022:	371c      	adds	r7, #28
 8006024:	46bd      	mov	sp, r7
 8006026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800602a:	4770      	bx	lr
 800602c:	40012c00 	.word	0x40012c00
 8006030:	40014000 	.word	0x40014000
 8006034:	40014400 	.word	0x40014400

08006038 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006038:	b480      	push	{r7}
 800603a:	b087      	sub	sp, #28
 800603c:	af00      	add	r7, sp, #0
 800603e:	6078      	str	r0, [r7, #4]
 8006040:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	6a1b      	ldr	r3, [r3, #32]
 8006046:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	6a1b      	ldr	r3, [r3, #32]
 800604c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	685b      	ldr	r3, [r3, #4]
 8006058:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800605e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006066:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800606a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800606c:	683b      	ldr	r3, [r7, #0]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	021b      	lsls	r3, r3, #8
 8006072:	68fa      	ldr	r2, [r7, #12]
 8006074:	4313      	orrs	r3, r2
 8006076:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006078:	693b      	ldr	r3, [r7, #16]
 800607a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800607e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006080:	683b      	ldr	r3, [r7, #0]
 8006082:	689b      	ldr	r3, [r3, #8]
 8006084:	051b      	lsls	r3, r3, #20
 8006086:	693a      	ldr	r2, [r7, #16]
 8006088:	4313      	orrs	r3, r2
 800608a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	4a14      	ldr	r2, [pc, #80]	@ (80060e0 <TIM_OC6_SetConfig+0xa8>)
 8006090:	4293      	cmp	r3, r2
 8006092:	d007      	beq.n	80060a4 <TIM_OC6_SetConfig+0x6c>
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	4a13      	ldr	r2, [pc, #76]	@ (80060e4 <TIM_OC6_SetConfig+0xac>)
 8006098:	4293      	cmp	r3, r2
 800609a:	d003      	beq.n	80060a4 <TIM_OC6_SetConfig+0x6c>
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	4a12      	ldr	r2, [pc, #72]	@ (80060e8 <TIM_OC6_SetConfig+0xb0>)
 80060a0:	4293      	cmp	r3, r2
 80060a2:	d109      	bne.n	80060b8 <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80060a4:	697b      	ldr	r3, [r7, #20]
 80060a6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80060aa:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80060ac:	683b      	ldr	r3, [r7, #0]
 80060ae:	695b      	ldr	r3, [r3, #20]
 80060b0:	029b      	lsls	r3, r3, #10
 80060b2:	697a      	ldr	r2, [r7, #20]
 80060b4:	4313      	orrs	r3, r2
 80060b6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	697a      	ldr	r2, [r7, #20]
 80060bc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	68fa      	ldr	r2, [r7, #12]
 80060c2:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80060c4:	683b      	ldr	r3, [r7, #0]
 80060c6:	685a      	ldr	r2, [r3, #4]
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	693a      	ldr	r2, [r7, #16]
 80060d0:	621a      	str	r2, [r3, #32]
}
 80060d2:	bf00      	nop
 80060d4:	371c      	adds	r7, #28
 80060d6:	46bd      	mov	sp, r7
 80060d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060dc:	4770      	bx	lr
 80060de:	bf00      	nop
 80060e0:	40012c00 	.word	0x40012c00
 80060e4:	40014000 	.word	0x40014000
 80060e8:	40014400 	.word	0x40014400

080060ec <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80060ec:	b480      	push	{r7}
 80060ee:	b087      	sub	sp, #28
 80060f0:	af00      	add	r7, sp, #0
 80060f2:	60f8      	str	r0, [r7, #12]
 80060f4:	60b9      	str	r1, [r7, #8]
 80060f6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	6a1b      	ldr	r3, [r3, #32]
 80060fc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	6a1b      	ldr	r3, [r3, #32]
 8006102:	f023 0201 	bic.w	r2, r3, #1
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	699b      	ldr	r3, [r3, #24]
 800610e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006110:	693b      	ldr	r3, [r7, #16]
 8006112:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006116:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	011b      	lsls	r3, r3, #4
 800611c:	693a      	ldr	r2, [r7, #16]
 800611e:	4313      	orrs	r3, r2
 8006120:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006122:	697b      	ldr	r3, [r7, #20]
 8006124:	f023 030a 	bic.w	r3, r3, #10
 8006128:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800612a:	697a      	ldr	r2, [r7, #20]
 800612c:	68bb      	ldr	r3, [r7, #8]
 800612e:	4313      	orrs	r3, r2
 8006130:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	693a      	ldr	r2, [r7, #16]
 8006136:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	697a      	ldr	r2, [r7, #20]
 800613c:	621a      	str	r2, [r3, #32]
}
 800613e:	bf00      	nop
 8006140:	371c      	adds	r7, #28
 8006142:	46bd      	mov	sp, r7
 8006144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006148:	4770      	bx	lr

0800614a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800614a:	b480      	push	{r7}
 800614c:	b087      	sub	sp, #28
 800614e:	af00      	add	r7, sp, #0
 8006150:	60f8      	str	r0, [r7, #12]
 8006152:	60b9      	str	r1, [r7, #8]
 8006154:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	6a1b      	ldr	r3, [r3, #32]
 800615a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	6a1b      	ldr	r3, [r3, #32]
 8006160:	f023 0210 	bic.w	r2, r3, #16
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	699b      	ldr	r3, [r3, #24]
 800616c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800616e:	693b      	ldr	r3, [r7, #16]
 8006170:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006174:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	031b      	lsls	r3, r3, #12
 800617a:	693a      	ldr	r2, [r7, #16]
 800617c:	4313      	orrs	r3, r2
 800617e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006180:	697b      	ldr	r3, [r7, #20]
 8006182:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006186:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006188:	68bb      	ldr	r3, [r7, #8]
 800618a:	011b      	lsls	r3, r3, #4
 800618c:	697a      	ldr	r2, [r7, #20]
 800618e:	4313      	orrs	r3, r2
 8006190:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	693a      	ldr	r2, [r7, #16]
 8006196:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	697a      	ldr	r2, [r7, #20]
 800619c:	621a      	str	r2, [r3, #32]
}
 800619e:	bf00      	nop
 80061a0:	371c      	adds	r7, #28
 80061a2:	46bd      	mov	sp, r7
 80061a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a8:	4770      	bx	lr

080061aa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80061aa:	b480      	push	{r7}
 80061ac:	b085      	sub	sp, #20
 80061ae:	af00      	add	r7, sp, #0
 80061b0:	6078      	str	r0, [r7, #4]
 80061b2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	689b      	ldr	r3, [r3, #8]
 80061b8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80061c0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80061c2:	683a      	ldr	r2, [r7, #0]
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	4313      	orrs	r3, r2
 80061c8:	f043 0307 	orr.w	r3, r3, #7
 80061cc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	68fa      	ldr	r2, [r7, #12]
 80061d2:	609a      	str	r2, [r3, #8]
}
 80061d4:	bf00      	nop
 80061d6:	3714      	adds	r7, #20
 80061d8:	46bd      	mov	sp, r7
 80061da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061de:	4770      	bx	lr

080061e0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80061e0:	b480      	push	{r7}
 80061e2:	b087      	sub	sp, #28
 80061e4:	af00      	add	r7, sp, #0
 80061e6:	60f8      	str	r0, [r7, #12]
 80061e8:	60b9      	str	r1, [r7, #8]
 80061ea:	607a      	str	r2, [r7, #4]
 80061ec:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	689b      	ldr	r3, [r3, #8]
 80061f2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80061f4:	697b      	ldr	r3, [r7, #20]
 80061f6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80061fa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80061fc:	683b      	ldr	r3, [r7, #0]
 80061fe:	021a      	lsls	r2, r3, #8
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	431a      	orrs	r2, r3
 8006204:	68bb      	ldr	r3, [r7, #8]
 8006206:	4313      	orrs	r3, r2
 8006208:	697a      	ldr	r2, [r7, #20]
 800620a:	4313      	orrs	r3, r2
 800620c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	697a      	ldr	r2, [r7, #20]
 8006212:	609a      	str	r2, [r3, #8]
}
 8006214:	bf00      	nop
 8006216:	371c      	adds	r7, #28
 8006218:	46bd      	mov	sp, r7
 800621a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800621e:	4770      	bx	lr

08006220 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006220:	b480      	push	{r7}
 8006222:	b085      	sub	sp, #20
 8006224:	af00      	add	r7, sp, #0
 8006226:	6078      	str	r0, [r7, #4]
 8006228:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006230:	2b01      	cmp	r3, #1
 8006232:	d101      	bne.n	8006238 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006234:	2302      	movs	r3, #2
 8006236:	e04f      	b.n	80062d8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	2201      	movs	r2, #1
 800623c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	2202      	movs	r2, #2
 8006244:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	685b      	ldr	r3, [r3, #4]
 800624e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	689b      	ldr	r3, [r3, #8]
 8006256:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	4a21      	ldr	r2, [pc, #132]	@ (80062e4 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800625e:	4293      	cmp	r3, r2
 8006260:	d108      	bne.n	8006274 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8006268:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800626a:	683b      	ldr	r3, [r7, #0]
 800626c:	685b      	ldr	r3, [r3, #4]
 800626e:	68fa      	ldr	r2, [r7, #12]
 8006270:	4313      	orrs	r3, r2
 8006272:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800627a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800627c:	683b      	ldr	r3, [r7, #0]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	68fa      	ldr	r2, [r7, #12]
 8006282:	4313      	orrs	r3, r2
 8006284:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	68fa      	ldr	r2, [r7, #12]
 800628c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	4a14      	ldr	r2, [pc, #80]	@ (80062e4 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8006294:	4293      	cmp	r3, r2
 8006296:	d009      	beq.n	80062ac <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80062a0:	d004      	beq.n	80062ac <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	4a10      	ldr	r2, [pc, #64]	@ (80062e8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80062a8:	4293      	cmp	r3, r2
 80062aa:	d10c      	bne.n	80062c6 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80062ac:	68bb      	ldr	r3, [r7, #8]
 80062ae:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80062b2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80062b4:	683b      	ldr	r3, [r7, #0]
 80062b6:	689b      	ldr	r3, [r3, #8]
 80062b8:	68ba      	ldr	r2, [r7, #8]
 80062ba:	4313      	orrs	r3, r2
 80062bc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	68ba      	ldr	r2, [r7, #8]
 80062c4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	2201      	movs	r2, #1
 80062ca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	2200      	movs	r2, #0
 80062d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80062d6:	2300      	movs	r3, #0
}
 80062d8:	4618      	mov	r0, r3
 80062da:	3714      	adds	r7, #20
 80062dc:	46bd      	mov	sp, r7
 80062de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e2:	4770      	bx	lr
 80062e4:	40012c00 	.word	0x40012c00
 80062e8:	40014000 	.word	0x40014000

080062ec <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80062ec:	b480      	push	{r7}
 80062ee:	b085      	sub	sp, #20
 80062f0:	af00      	add	r7, sp, #0
 80062f2:	6078      	str	r0, [r7, #4]
 80062f4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80062f6:	2300      	movs	r3, #0
 80062f8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006300:	2b01      	cmp	r3, #1
 8006302:	d101      	bne.n	8006308 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006304:	2302      	movs	r3, #2
 8006306:	e060      	b.n	80063ca <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	2201      	movs	r2, #1
 800630c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8006316:	683b      	ldr	r3, [r7, #0]
 8006318:	68db      	ldr	r3, [r3, #12]
 800631a:	4313      	orrs	r3, r2
 800631c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006324:	683b      	ldr	r3, [r7, #0]
 8006326:	689b      	ldr	r3, [r3, #8]
 8006328:	4313      	orrs	r3, r2
 800632a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8006332:	683b      	ldr	r3, [r7, #0]
 8006334:	685b      	ldr	r3, [r3, #4]
 8006336:	4313      	orrs	r3, r2
 8006338:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8006340:	683b      	ldr	r3, [r7, #0]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	4313      	orrs	r3, r2
 8006346:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800634e:	683b      	ldr	r3, [r7, #0]
 8006350:	691b      	ldr	r3, [r3, #16]
 8006352:	4313      	orrs	r3, r2
 8006354:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800635c:	683b      	ldr	r3, [r7, #0]
 800635e:	695b      	ldr	r3, [r3, #20]
 8006360:	4313      	orrs	r3, r2
 8006362:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800636a:	683b      	ldr	r3, [r7, #0]
 800636c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800636e:	4313      	orrs	r3, r2
 8006370:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8006378:	683b      	ldr	r3, [r7, #0]
 800637a:	699b      	ldr	r3, [r3, #24]
 800637c:	041b      	lsls	r3, r3, #16
 800637e:	4313      	orrs	r3, r2
 8006380:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	4a14      	ldr	r2, [pc, #80]	@ (80063d8 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 8006388:	4293      	cmp	r3, r2
 800638a:	d115      	bne.n	80063b8 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8006392:	683b      	ldr	r3, [r7, #0]
 8006394:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006396:	051b      	lsls	r3, r3, #20
 8006398:	4313      	orrs	r3, r2
 800639a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80063a2:	683b      	ldr	r3, [r7, #0]
 80063a4:	69db      	ldr	r3, [r3, #28]
 80063a6:	4313      	orrs	r3, r2
 80063a8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80063b0:	683b      	ldr	r3, [r7, #0]
 80063b2:	6a1b      	ldr	r3, [r3, #32]
 80063b4:	4313      	orrs	r3, r2
 80063b6:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	68fa      	ldr	r2, [r7, #12]
 80063be:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	2200      	movs	r2, #0
 80063c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80063c8:	2300      	movs	r3, #0
}
 80063ca:	4618      	mov	r0, r3
 80063cc:	3714      	adds	r7, #20
 80063ce:	46bd      	mov	sp, r7
 80063d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d4:	4770      	bx	lr
 80063d6:	bf00      	nop
 80063d8:	40012c00 	.word	0x40012c00

080063dc <SDMMC_Init>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Init SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 80063dc:	b084      	sub	sp, #16
 80063de:	b480      	push	{r7}
 80063e0:	b085      	sub	sp, #20
 80063e2:	af00      	add	r7, sp, #0
 80063e4:	6078      	str	r0, [r7, #4]
 80063e6:	f107 001c 	add.w	r0, r7, #28
 80063ea:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 80063ee:	2300      	movs	r3, #0
 80063f0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  tmpreg |= Init.ClockBypass;
 80063f2:	6a3b      	ldr	r3, [r7, #32]
 80063f4:	68fa      	ldr	r2, [r7, #12]
 80063f6:	4313      	orrs	r3, r2
 80063f8:	60fb      	str	r3, [r7, #12]
#endif
  tmpreg |= (Init.ClockEdge           |\
 80063fa:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      |\
 80063fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
  tmpreg |= (Init.ClockEdge           |\
 80063fe:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8006400:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.ClockPowerSave      |\
 8006402:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8006404:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.BusWide             |\
 8006406:	431a      	orrs	r2, r3
             Init.ClockDiv
 8006408:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
             Init.HardwareFlowControl |\
 800640a:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800640c:	68fa      	ldr	r2, [r7, #12]
 800640e:	4313      	orrs	r3, r2
 8006410:	60fb      	str	r3, [r7, #12]
             );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	685b      	ldr	r3, [r3, #4]
 8006416:	f423 43fd 	bic.w	r3, r3, #32384	@ 0x7e80
 800641a:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800641e:	68fa      	ldr	r2, [r7, #12]
 8006420:	431a      	orrs	r2, r3
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8006426:	2300      	movs	r3, #0
}
 8006428:	4618      	mov	r0, r3
 800642a:	3714      	adds	r7, #20
 800642c:	46bd      	mov	sp, r7
 800642e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006432:	b004      	add	sp, #16
 8006434:	4770      	bx	lr

08006436 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 8006436:	b480      	push	{r7}
 8006438:	b083      	sub	sp, #12
 800643a:	af00      	add	r7, sp, #0
 800643c:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 8006444:	4618      	mov	r0, r3
 8006446:	370c      	adds	r7, #12
 8006448:	46bd      	mov	sp, r7
 800644a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800644e:	4770      	bx	lr

08006450 <SDMMC_WriteFIFO>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  pWriteData pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 8006450:	b480      	push	{r7}
 8006452:	b083      	sub	sp, #12
 8006454:	af00      	add	r7, sp, #0
 8006456:	6078      	str	r0, [r7, #4]
 8006458:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 800645a:	683b      	ldr	r3, [r7, #0]
 800645c:	681a      	ldr	r2, [r3, #0]
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 8006464:	2300      	movs	r3, #0
}
 8006466:	4618      	mov	r0, r3
 8006468:	370c      	adds	r7, #12
 800646a:	46bd      	mov	sp, r7
 800646c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006470:	4770      	bx	lr

08006472 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 8006472:	b580      	push	{r7, lr}
 8006474:	b082      	sub	sp, #8
 8006476:	af00      	add	r7, sp, #0
 8006478:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
#else
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	2203      	movs	r2, #3
 800647e:	601a      	str	r2, [r3, #0]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 8006480:	2002      	movs	r0, #2
 8006482:	f7fa fe5b 	bl	800113c <HAL_Delay>

  return HAL_OK;
 8006486:	2300      	movs	r3, #0
}
 8006488:	4618      	mov	r0, r3
 800648a:	3708      	adds	r7, #8
 800648c:	46bd      	mov	sp, r7
 800648e:	bd80      	pop	{r7, pc}

08006490 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 8006490:	b480      	push	{r7}
 8006492:	b083      	sub	sp, #12
 8006494:	af00      	add	r7, sp, #0
 8006496:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	f003 0303 	and.w	r3, r3, #3
}
 80064a0:	4618      	mov	r0, r3
 80064a2:	370c      	adds	r7, #12
 80064a4:	46bd      	mov	sp, r7
 80064a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064aa:	4770      	bx	lr

080064ac <SDMMC_SendCommand>:
  * @param  Command pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 80064ac:	b480      	push	{r7}
 80064ae:	b085      	sub	sp, #20
 80064b0:	af00      	add	r7, sp, #0
 80064b2:	6078      	str	r0, [r7, #4]
 80064b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80064b6:	2300      	movs	r3, #0
 80064b8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 80064ba:	683b      	ldr	r3, [r7, #0]
 80064bc:	681a      	ldr	r2, [r3, #0]
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80064c2:	683b      	ldr	r3, [r7, #0]
 80064c4:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 80064c6:	683b      	ldr	r3, [r7, #0]
 80064c8:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80064ca:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 80064cc:	683b      	ldr	r3, [r7, #0]
 80064ce:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 80064d0:	431a      	orrs	r2, r3
                       Command->CPSM);
 80064d2:	683b      	ldr	r3, [r7, #0]
 80064d4:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 80064d6:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80064d8:	68fa      	ldr	r2, [r7, #12]
 80064da:	4313      	orrs	r3, r2
 80064dc:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	68db      	ldr	r3, [r3, #12]
 80064e2:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 80064e6:	f023 030f 	bic.w	r3, r3, #15
 80064ea:	68fa      	ldr	r2, [r7, #12]
 80064ec:	431a      	orrs	r2, r3
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80064f2:	2300      	movs	r3, #0
}
 80064f4:	4618      	mov	r0, r3
 80064f6:	3714      	adds	r7, #20
 80064f8:	46bd      	mov	sp, r7
 80064fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064fe:	4770      	bx	lr

08006500 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 8006500:	b480      	push	{r7}
 8006502:	b083      	sub	sp, #12
 8006504:	af00      	add	r7, sp, #0
 8006506:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	691b      	ldr	r3, [r3, #16]
 800650c:	b2db      	uxtb	r3, r3
}
 800650e:	4618      	mov	r0, r3
 8006510:	370c      	adds	r7, #12
 8006512:	46bd      	mov	sp, r7
 8006514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006518:	4770      	bx	lr

0800651a <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800651a:	b480      	push	{r7}
 800651c:	b085      	sub	sp, #20
 800651e:	af00      	add	r7, sp, #0
 8006520:	6078      	str	r0, [r7, #4]
 8006522:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	3314      	adds	r3, #20
 8006528:	461a      	mov	r2, r3
 800652a:	683b      	ldr	r3, [r7, #0]
 800652c:	4413      	add	r3, r2
 800652e:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	681b      	ldr	r3, [r3, #0]
}
 8006534:	4618      	mov	r0, r3
 8006536:	3714      	adds	r7, #20
 8006538:	46bd      	mov	sp, r7
 800653a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800653e:	4770      	bx	lr

08006540 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 8006540:	b480      	push	{r7}
 8006542:	b085      	sub	sp, #20
 8006544:	af00      	add	r7, sp, #0
 8006546:	6078      	str	r0, [r7, #4]
 8006548:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800654a:	2300      	movs	r3, #0
 800654c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800654e:	683b      	ldr	r3, [r7, #0]
 8006550:	681a      	ldr	r2, [r3, #0]
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 8006556:	683b      	ldr	r3, [r7, #0]
 8006558:	685a      	ldr	r2, [r3, #4]
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800655e:	683b      	ldr	r3, [r7, #0]
 8006560:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8006562:	683b      	ldr	r3, [r7, #0]
 8006564:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8006566:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8006568:	683b      	ldr	r3, [r7, #0]
 800656a:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800656c:	431a      	orrs	r2, r3
                       Data->DPSM);
 800656e:	683b      	ldr	r3, [r7, #0]
 8006570:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8006572:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8006574:	68fa      	ldr	r2, [r7, #12]
 8006576:	4313      	orrs	r3, r2
 8006578:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800657e:	f023 02f7 	bic.w	r2, r3, #247	@ 0xf7
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	431a      	orrs	r2, r3
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 800658a:	2300      	movs	r3, #0

}
 800658c:	4618      	mov	r0, r3
 800658e:	3714      	adds	r7, #20
 8006590:	46bd      	mov	sp, r7
 8006592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006596:	4770      	bx	lr

08006598 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 8006598:	b580      	push	{r7, lr}
 800659a:	b088      	sub	sp, #32
 800659c:	af00      	add	r7, sp, #0
 800659e:	6078      	str	r0, [r7, #4]
 80065a0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 80065a2:	683b      	ldr	r3, [r7, #0]
 80065a4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 80065a6:	2310      	movs	r3, #16
 80065a8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80065aa:	2340      	movs	r3, #64	@ 0x40
 80065ac:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80065ae:	2300      	movs	r3, #0
 80065b0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80065b2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80065b6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80065b8:	f107 0308 	add.w	r3, r7, #8
 80065bc:	4619      	mov	r1, r3
 80065be:	6878      	ldr	r0, [r7, #4]
 80065c0:	f7ff ff74 	bl	80064ac <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 80065c4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80065c8:	2110      	movs	r1, #16
 80065ca:	6878      	ldr	r0, [r7, #4]
 80065cc:	f000 f9d6 	bl	800697c <SDMMC_GetCmdResp1>
 80065d0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80065d2:	69fb      	ldr	r3, [r7, #28]
}
 80065d4:	4618      	mov	r0, r3
 80065d6:	3720      	adds	r7, #32
 80065d8:	46bd      	mov	sp, r7
 80065da:	bd80      	pop	{r7, pc}

080065dc <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 80065dc:	b580      	push	{r7, lr}
 80065de:	b088      	sub	sp, #32
 80065e0:	af00      	add	r7, sp, #0
 80065e2:	6078      	str	r0, [r7, #4]
 80065e4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80065e6:	683b      	ldr	r3, [r7, #0]
 80065e8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 80065ea:	2311      	movs	r3, #17
 80065ec:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80065ee:	2340      	movs	r3, #64	@ 0x40
 80065f0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80065f2:	2300      	movs	r3, #0
 80065f4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80065f6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80065fa:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80065fc:	f107 0308 	add.w	r3, r7, #8
 8006600:	4619      	mov	r1, r3
 8006602:	6878      	ldr	r0, [r7, #4]
 8006604:	f7ff ff52 	bl	80064ac <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8006608:	f241 3288 	movw	r2, #5000	@ 0x1388
 800660c:	2111      	movs	r1, #17
 800660e:	6878      	ldr	r0, [r7, #4]
 8006610:	f000 f9b4 	bl	800697c <SDMMC_GetCmdResp1>
 8006614:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006616:	69fb      	ldr	r3, [r7, #28]
}
 8006618:	4618      	mov	r0, r3
 800661a:	3720      	adds	r7, #32
 800661c:	46bd      	mov	sp, r7
 800661e:	bd80      	pop	{r7, pc}

08006620 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8006620:	b580      	push	{r7, lr}
 8006622:	b088      	sub	sp, #32
 8006624:	af00      	add	r7, sp, #0
 8006626:	6078      	str	r0, [r7, #4]
 8006628:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800662a:	683b      	ldr	r3, [r7, #0]
 800662c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800662e:	2312      	movs	r3, #18
 8006630:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8006632:	2340      	movs	r3, #64	@ 0x40
 8006634:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8006636:	2300      	movs	r3, #0
 8006638:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800663a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800663e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8006640:	f107 0308 	add.w	r3, r7, #8
 8006644:	4619      	mov	r1, r3
 8006646:	6878      	ldr	r0, [r7, #4]
 8006648:	f7ff ff30 	bl	80064ac <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800664c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006650:	2112      	movs	r1, #18
 8006652:	6878      	ldr	r0, [r7, #4]
 8006654:	f000 f992 	bl	800697c <SDMMC_GetCmdResp1>
 8006658:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800665a:	69fb      	ldr	r3, [r7, #28]
}
 800665c:	4618      	mov	r0, r3
 800665e:	3720      	adds	r7, #32
 8006660:	46bd      	mov	sp, r7
 8006662:	bd80      	pop	{r7, pc}

08006664 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8006664:	b580      	push	{r7, lr}
 8006666:	b088      	sub	sp, #32
 8006668:	af00      	add	r7, sp, #0
 800666a:	6078      	str	r0, [r7, #4]
 800666c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800666e:	683b      	ldr	r3, [r7, #0]
 8006670:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8006672:	2318      	movs	r3, #24
 8006674:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8006676:	2340      	movs	r3, #64	@ 0x40
 8006678:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800667a:	2300      	movs	r3, #0
 800667c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800667e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006682:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8006684:	f107 0308 	add.w	r3, r7, #8
 8006688:	4619      	mov	r1, r3
 800668a:	6878      	ldr	r0, [r7, #4]
 800668c:	f7ff ff0e 	bl	80064ac <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8006690:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006694:	2118      	movs	r1, #24
 8006696:	6878      	ldr	r0, [r7, #4]
 8006698:	f000 f970 	bl	800697c <SDMMC_GetCmdResp1>
 800669c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800669e:	69fb      	ldr	r3, [r7, #28]
}
 80066a0:	4618      	mov	r0, r3
 80066a2:	3720      	adds	r7, #32
 80066a4:	46bd      	mov	sp, r7
 80066a6:	bd80      	pop	{r7, pc}

080066a8 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 80066a8:	b580      	push	{r7, lr}
 80066aa:	b088      	sub	sp, #32
 80066ac:	af00      	add	r7, sp, #0
 80066ae:	6078      	str	r0, [r7, #4]
 80066b0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80066b2:	683b      	ldr	r3, [r7, #0]
 80066b4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 80066b6:	2319      	movs	r3, #25
 80066b8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80066ba:	2340      	movs	r3, #64	@ 0x40
 80066bc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80066be:	2300      	movs	r3, #0
 80066c0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80066c2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80066c6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80066c8:	f107 0308 	add.w	r3, r7, #8
 80066cc:	4619      	mov	r1, r3
 80066ce:	6878      	ldr	r0, [r7, #4]
 80066d0:	f7ff feec 	bl	80064ac <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 80066d4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80066d8:	2119      	movs	r1, #25
 80066da:	6878      	ldr	r0, [r7, #4]
 80066dc:	f000 f94e 	bl	800697c <SDMMC_GetCmdResp1>
 80066e0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80066e2:	69fb      	ldr	r3, [r7, #28]
}
 80066e4:	4618      	mov	r0, r3
 80066e6:	3720      	adds	r7, #32
 80066e8:	46bd      	mov	sp, r7
 80066ea:	bd80      	pop	{r7, pc}

080066ec <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 80066ec:	b580      	push	{r7, lr}
 80066ee:	b088      	sub	sp, #32
 80066f0:	af00      	add	r7, sp, #0
 80066f2:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 80066f4:	2300      	movs	r3, #0
 80066f6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 80066f8:	230c      	movs	r3, #12
 80066fa:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80066fc:	2340      	movs	r3, #64	@ 0x40
 80066fe:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8006700:	2300      	movs	r3, #0
 8006702:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8006704:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006708:	61bb      	str	r3, [r7, #24]
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800670a:	f107 0308 	add.w	r3, r7, #8
 800670e:	4619      	mov	r1, r3
 8006710:	6878      	ldr	r0, [r7, #4]
 8006712:	f7ff fecb 	bl	80064ac <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 8006716:	4a05      	ldr	r2, [pc, #20]	@ (800672c <SDMMC_CmdStopTransfer+0x40>)
 8006718:	210c      	movs	r1, #12
 800671a:	6878      	ldr	r0, [r7, #4]
 800671c:	f000 f92e 	bl	800697c <SDMMC_GetCmdResp1>
 8006720:	61f8      	str	r0, [r7, #28]

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  return errorstate;
 8006722:	69fb      	ldr	r3, [r7, #28]
}
 8006724:	4618      	mov	r0, r3
 8006726:	3720      	adds	r7, #32
 8006728:	46bd      	mov	sp, r7
 800672a:	bd80      	pop	{r7, pc}
 800672c:	05f5e100 	.word	0x05f5e100

08006730 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  addr Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 8006730:	b580      	push	{r7, lr}
 8006732:	b08a      	sub	sp, #40	@ 0x28
 8006734:	af00      	add	r7, sp, #0
 8006736:	60f8      	str	r0, [r7, #12]
 8006738:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800673c:	683b      	ldr	r3, [r7, #0]
 800673e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8006740:	2307      	movs	r3, #7
 8006742:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8006744:	2340      	movs	r3, #64	@ 0x40
 8006746:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8006748:	2300      	movs	r3, #0
 800674a:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800674c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006750:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8006752:	f107 0310 	add.w	r3, r7, #16
 8006756:	4619      	mov	r1, r3
 8006758:	68f8      	ldr	r0, [r7, #12]
 800675a:	f7ff fea7 	bl	80064ac <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800675e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006762:	2107      	movs	r1, #7
 8006764:	68f8      	ldr	r0, [r7, #12]
 8006766:	f000 f909 	bl	800697c <SDMMC_GetCmdResp1>
 800676a:	6278      	str	r0, [r7, #36]	@ 0x24

  return errorstate;
 800676c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800676e:	4618      	mov	r0, r3
 8006770:	3728      	adds	r7, #40	@ 0x28
 8006772:	46bd      	mov	sp, r7
 8006774:	bd80      	pop	{r7, pc}

08006776 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 8006776:	b580      	push	{r7, lr}
 8006778:	b088      	sub	sp, #32
 800677a:	af00      	add	r7, sp, #0
 800677c:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800677e:	2300      	movs	r3, #0
 8006780:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8006782:	2300      	movs	r3, #0
 8006784:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 8006786:	2300      	movs	r3, #0
 8006788:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800678a:	2300      	movs	r3, #0
 800678c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800678e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006792:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8006794:	f107 0308 	add.w	r3, r7, #8
 8006798:	4619      	mov	r1, r3
 800679a:	6878      	ldr	r0, [r7, #4]
 800679c:	f7ff fe86 	bl	80064ac <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 80067a0:	6878      	ldr	r0, [r7, #4]
 80067a2:	f000 fb23 	bl	8006dec <SDMMC_GetCmdError>
 80067a6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80067a8:	69fb      	ldr	r3, [r7, #28]
}
 80067aa:	4618      	mov	r0, r3
 80067ac:	3720      	adds	r7, #32
 80067ae:	46bd      	mov	sp, r7
 80067b0:	bd80      	pop	{r7, pc}

080067b2 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 80067b2:	b580      	push	{r7, lr}
 80067b4:	b088      	sub	sp, #32
 80067b6:	af00      	add	r7, sp, #0
 80067b8:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 80067ba:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 80067be:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 80067c0:	2308      	movs	r3, #8
 80067c2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80067c4:	2340      	movs	r3, #64	@ 0x40
 80067c6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80067c8:	2300      	movs	r3, #0
 80067ca:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80067cc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80067d0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80067d2:	f107 0308 	add.w	r3, r7, #8
 80067d6:	4619      	mov	r1, r3
 80067d8:	6878      	ldr	r0, [r7, #4]
 80067da:	f7ff fe67 	bl	80064ac <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 80067de:	6878      	ldr	r0, [r7, #4]
 80067e0:	f000 fab6 	bl	8006d50 <SDMMC_GetCmdResp7>
 80067e4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80067e6:	69fb      	ldr	r3, [r7, #28]
}
 80067e8:	4618      	mov	r0, r3
 80067ea:	3720      	adds	r7, #32
 80067ec:	46bd      	mov	sp, r7
 80067ee:	bd80      	pop	{r7, pc}

080067f0 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80067f0:	b580      	push	{r7, lr}
 80067f2:	b088      	sub	sp, #32
 80067f4:	af00      	add	r7, sp, #0
 80067f6:	6078      	str	r0, [r7, #4]
 80067f8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 80067fa:	683b      	ldr	r3, [r7, #0]
 80067fc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 80067fe:	2337      	movs	r3, #55	@ 0x37
 8006800:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8006802:	2340      	movs	r3, #64	@ 0x40
 8006804:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8006806:	2300      	movs	r3, #0
 8006808:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800680a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800680e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8006810:	f107 0308 	add.w	r3, r7, #8
 8006814:	4619      	mov	r1, r3
 8006816:	6878      	ldr	r0, [r7, #4]
 8006818:	f7ff fe48 	bl	80064ac <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800681c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006820:	2137      	movs	r1, #55	@ 0x37
 8006822:	6878      	ldr	r0, [r7, #4]
 8006824:	f000 f8aa 	bl	800697c <SDMMC_GetCmdResp1>
 8006828:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800682a:	69fb      	ldr	r3, [r7, #28]
}
 800682c:	4618      	mov	r0, r3
 800682e:	3720      	adds	r7, #32
 8006830:	46bd      	mov	sp, r7
 8006832:	bd80      	pop	{r7, pc}

08006834 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8006834:	b580      	push	{r7, lr}
 8006836:	b088      	sub	sp, #32
 8006838:	af00      	add	r7, sp, #0
 800683a:	6078      	str	r0, [r7, #4]
 800683c:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  sdmmc_cmdinit.Argument         = Argument;
#else
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800683e:	683b      	ldr	r3, [r7, #0]
 8006840:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006844:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006848:	60bb      	str	r3, [r7, #8]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800684a:	2329      	movs	r3, #41	@ 0x29
 800684c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800684e:	2340      	movs	r3, #64	@ 0x40
 8006850:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8006852:	2300      	movs	r3, #0
 8006854:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8006856:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800685a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800685c:	f107 0308 	add.w	r3, r7, #8
 8006860:	4619      	mov	r1, r3
 8006862:	6878      	ldr	r0, [r7, #4]
 8006864:	f7ff fe22 	bl	80064ac <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 8006868:	6878      	ldr	r0, [r7, #4]
 800686a:	f000 f9bd 	bl	8006be8 <SDMMC_GetCmdResp3>
 800686e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006870:	69fb      	ldr	r3, [r7, #28]
}
 8006872:	4618      	mov	r0, r3
 8006874:	3720      	adds	r7, #32
 8006876:	46bd      	mov	sp, r7
 8006878:	bd80      	pop	{r7, pc}

0800687a <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800687a:	b580      	push	{r7, lr}
 800687c:	b088      	sub	sp, #32
 800687e:	af00      	add	r7, sp, #0
 8006880:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8006882:	2300      	movs	r3, #0
 8006884:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8006886:	2302      	movs	r3, #2
 8006888:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800688a:	23c0      	movs	r3, #192	@ 0xc0
 800688c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800688e:	2300      	movs	r3, #0
 8006890:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8006892:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006896:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8006898:	f107 0308 	add.w	r3, r7, #8
 800689c:	4619      	mov	r1, r3
 800689e:	6878      	ldr	r0, [r7, #4]
 80068a0:	f7ff fe04 	bl	80064ac <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 80068a4:	6878      	ldr	r0, [r7, #4]
 80068a6:	f000 f957 	bl	8006b58 <SDMMC_GetCmdResp2>
 80068aa:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80068ac:	69fb      	ldr	r3, [r7, #28]
}
 80068ae:	4618      	mov	r0, r3
 80068b0:	3720      	adds	r7, #32
 80068b2:	46bd      	mov	sp, r7
 80068b4:	bd80      	pop	{r7, pc}

080068b6 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80068b6:	b580      	push	{r7, lr}
 80068b8:	b088      	sub	sp, #32
 80068ba:	af00      	add	r7, sp, #0
 80068bc:	6078      	str	r0, [r7, #4]
 80068be:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 80068c0:	683b      	ldr	r3, [r7, #0]
 80068c2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 80068c4:	2309      	movs	r3, #9
 80068c6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 80068c8:	23c0      	movs	r3, #192	@ 0xc0
 80068ca:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80068cc:	2300      	movs	r3, #0
 80068ce:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80068d0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80068d4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80068d6:	f107 0308 	add.w	r3, r7, #8
 80068da:	4619      	mov	r1, r3
 80068dc:	6878      	ldr	r0, [r7, #4]
 80068de:	f7ff fde5 	bl	80064ac <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 80068e2:	6878      	ldr	r0, [r7, #4]
 80068e4:	f000 f938 	bl	8006b58 <SDMMC_GetCmdResp2>
 80068e8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80068ea:	69fb      	ldr	r3, [r7, #28]
}
 80068ec:	4618      	mov	r0, r3
 80068ee:	3720      	adds	r7, #32
 80068f0:	46bd      	mov	sp, r7
 80068f2:	bd80      	pop	{r7, pc}

080068f4 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  pRCA Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 80068f4:	b580      	push	{r7, lr}
 80068f6:	b088      	sub	sp, #32
 80068f8:	af00      	add	r7, sp, #0
 80068fa:	6078      	str	r0, [r7, #4]
 80068fc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 80068fe:	2300      	movs	r3, #0
 8006900:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8006902:	2303      	movs	r3, #3
 8006904:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8006906:	2340      	movs	r3, #64	@ 0x40
 8006908:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800690a:	2300      	movs	r3, #0
 800690c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800690e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006912:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8006914:	f107 0308 	add.w	r3, r7, #8
 8006918:	4619      	mov	r1, r3
 800691a:	6878      	ldr	r0, [r7, #4]
 800691c:	f7ff fdc6 	bl	80064ac <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8006920:	683a      	ldr	r2, [r7, #0]
 8006922:	2103      	movs	r1, #3
 8006924:	6878      	ldr	r0, [r7, #4]
 8006926:	f000 f99d 	bl	8006c64 <SDMMC_GetCmdResp6>
 800692a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800692c:	69fb      	ldr	r3, [r7, #28]
}
 800692e:	4618      	mov	r0, r3
 8006930:	3720      	adds	r7, #32
 8006932:	46bd      	mov	sp, r7
 8006934:	bd80      	pop	{r7, pc}

08006936 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8006936:	b580      	push	{r7, lr}
 8006938:	b088      	sub	sp, #32
 800693a:	af00      	add	r7, sp, #0
 800693c:	6078      	str	r0, [r7, #4]
 800693e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 8006940:	683b      	ldr	r3, [r7, #0]
 8006942:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8006944:	230d      	movs	r3, #13
 8006946:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8006948:	2340      	movs	r3, #64	@ 0x40
 800694a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800694c:	2300      	movs	r3, #0
 800694e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8006950:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006954:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8006956:	f107 0308 	add.w	r3, r7, #8
 800695a:	4619      	mov	r1, r3
 800695c:	6878      	ldr	r0, [r7, #4]
 800695e:	f7ff fda5 	bl	80064ac <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 8006962:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006966:	210d      	movs	r1, #13
 8006968:	6878      	ldr	r0, [r7, #4]
 800696a:	f000 f807 	bl	800697c <SDMMC_GetCmdResp1>
 800696e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006970:	69fb      	ldr	r3, [r7, #28]
}
 8006972:	4618      	mov	r0, r3
 8006974:	3720      	adds	r7, #32
 8006976:	46bd      	mov	sp, r7
 8006978:	bd80      	pop	{r7, pc}
	...

0800697c <SDMMC_GetCmdResp1>:
  * @param  hsd SD handle
  * @param  SD_CMD The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800697c:	b580      	push	{r7, lr}
 800697e:	b088      	sub	sp, #32
 8006980:	af00      	add	r7, sp, #0
 8006982:	60f8      	str	r0, [r7, #12]
 8006984:	460b      	mov	r3, r1
 8006986:	607a      	str	r2, [r7, #4]
 8006988:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800698a:	4b70      	ldr	r3, [pc, #448]	@ (8006b4c <SDMMC_GetCmdResp1+0x1d0>)
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	4a70      	ldr	r2, [pc, #448]	@ (8006b50 <SDMMC_GetCmdResp1+0x1d4>)
 8006990:	fba2 2303 	umull	r2, r3, r2, r3
 8006994:	0a5a      	lsrs	r2, r3, #9
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	fb02 f303 	mul.w	r3, r2, r3
 800699c:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800699e:	69fb      	ldr	r3, [r7, #28]
 80069a0:	1e5a      	subs	r2, r3, #1
 80069a2:	61fa      	str	r2, [r7, #28]
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d102      	bne.n	80069ae <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 80069a8:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80069ac:	e0c9      	b.n	8006b42 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80069b2:	61bb      	str	r3, [r7, #24]
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
#else
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80069b4:	69bb      	ldr	r3, [r7, #24]
 80069b6:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d0ef      	beq.n	800699e <SDMMC_GetCmdResp1+0x22>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 80069be:	69bb      	ldr	r3, [r7, #24]
 80069c0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d1ea      	bne.n	800699e <SDMMC_GetCmdResp1+0x22>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80069cc:	f003 0304 	and.w	r3, r3, #4
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d004      	beq.n	80069de <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	2204      	movs	r2, #4
 80069d8:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80069da:	2304      	movs	r3, #4
 80069dc:	e0b1      	b.n	8006b42 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80069e2:	f003 0301 	and.w	r3, r3, #1
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d004      	beq.n	80069f4 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	2201      	movs	r2, #1
 80069ee:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 80069f0:	2301      	movs	r3, #1
 80069f2:	e0a6      	b.n	8006b42 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	22c5      	movs	r2, #197	@ 0xc5
 80069f8:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 80069fa:	68f8      	ldr	r0, [r7, #12]
 80069fc:	f7ff fd80 	bl	8006500 <SDMMC_GetCommandResponse>
 8006a00:	4603      	mov	r3, r0
 8006a02:	461a      	mov	r2, r3
 8006a04:	7afb      	ldrb	r3, [r7, #11]
 8006a06:	4293      	cmp	r3, r2
 8006a08:	d001      	beq.n	8006a0e <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006a0a:	2301      	movs	r3, #1
 8006a0c:	e099      	b.n	8006b42 <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8006a0e:	2100      	movs	r1, #0
 8006a10:	68f8      	ldr	r0, [r7, #12]
 8006a12:	f7ff fd82 	bl	800651a <SDMMC_GetResponse>
 8006a16:	6178      	str	r0, [r7, #20]

  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8006a18:	697a      	ldr	r2, [r7, #20]
 8006a1a:	4b4e      	ldr	r3, [pc, #312]	@ (8006b54 <SDMMC_GetCmdResp1+0x1d8>)
 8006a1c:	4013      	ands	r3, r2
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d101      	bne.n	8006a26 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8006a22:	2300      	movs	r3, #0
 8006a24:	e08d      	b.n	8006b42 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8006a26:	697b      	ldr	r3, [r7, #20]
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	da02      	bge.n	8006a32 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8006a2c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006a30:	e087      	b.n	8006b42 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8006a32:	697b      	ldr	r3, [r7, #20]
 8006a34:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d001      	beq.n	8006a40 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8006a3c:	2340      	movs	r3, #64	@ 0x40
 8006a3e:	e080      	b.n	8006b42 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8006a40:	697b      	ldr	r3, [r7, #20]
 8006a42:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d001      	beq.n	8006a4e <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8006a4a:	2380      	movs	r3, #128	@ 0x80
 8006a4c:	e079      	b.n	8006b42 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8006a4e:	697b      	ldr	r3, [r7, #20]
 8006a50:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d002      	beq.n	8006a5e <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8006a58:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8006a5c:	e071      	b.n	8006b42 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8006a5e:	697b      	ldr	r3, [r7, #20]
 8006a60:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d002      	beq.n	8006a6e <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8006a68:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006a6c:	e069      	b.n	8006b42 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8006a6e:	697b      	ldr	r3, [r7, #20]
 8006a70:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d002      	beq.n	8006a7e <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8006a78:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006a7c:	e061      	b.n	8006b42 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8006a7e:	697b      	ldr	r3, [r7, #20]
 8006a80:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d002      	beq.n	8006a8e <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8006a88:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8006a8c:	e059      	b.n	8006b42 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8006a8e:	697b      	ldr	r3, [r7, #20]
 8006a90:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d002      	beq.n	8006a9e <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8006a98:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8006a9c:	e051      	b.n	8006b42 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8006a9e:	697b      	ldr	r3, [r7, #20]
 8006aa0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d002      	beq.n	8006aae <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8006aa8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8006aac:	e049      	b.n	8006b42 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8006aae:	697b      	ldr	r3, [r7, #20]
 8006ab0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d002      	beq.n	8006abe <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8006ab8:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8006abc:	e041      	b.n	8006b42 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8006abe:	697b      	ldr	r3, [r7, #20]
 8006ac0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d002      	beq.n	8006ace <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8006ac8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006acc:	e039      	b.n	8006b42 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8006ace:	697b      	ldr	r3, [r7, #20]
 8006ad0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d002      	beq.n	8006ade <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8006ad8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8006adc:	e031      	b.n	8006b42 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8006ade:	697b      	ldr	r3, [r7, #20]
 8006ae0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d002      	beq.n	8006aee <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8006ae8:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8006aec:	e029      	b.n	8006b42 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8006aee:	697b      	ldr	r3, [r7, #20]
 8006af0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d002      	beq.n	8006afe <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8006af8:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8006afc:	e021      	b.n	8006b42 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8006afe:	697b      	ldr	r3, [r7, #20]
 8006b00:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d002      	beq.n	8006b0e <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8006b08:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8006b0c:	e019      	b.n	8006b42 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8006b0e:	697b      	ldr	r3, [r7, #20]
 8006b10:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d002      	beq.n	8006b1e <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8006b18:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8006b1c:	e011      	b.n	8006b42 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8006b1e:	697b      	ldr	r3, [r7, #20]
 8006b20:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d002      	beq.n	8006b2e <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8006b28:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8006b2c:	e009      	b.n	8006b42 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8006b2e:	697b      	ldr	r3, [r7, #20]
 8006b30:	f003 0308 	and.w	r3, r3, #8
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d002      	beq.n	8006b3e <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8006b38:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 8006b3c:	e001      	b.n	8006b42 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8006b3e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 8006b42:	4618      	mov	r0, r3
 8006b44:	3720      	adds	r7, #32
 8006b46:	46bd      	mov	sp, r7
 8006b48:	bd80      	pop	{r7, pc}
 8006b4a:	bf00      	nop
 8006b4c:	20000000 	.word	0x20000000
 8006b50:	10624dd3 	.word	0x10624dd3
 8006b54:	fdffe008 	.word	0xfdffe008

08006b58 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 8006b58:	b480      	push	{r7}
 8006b5a:	b085      	sub	sp, #20
 8006b5c:	af00      	add	r7, sp, #0
 8006b5e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8006b60:	4b1f      	ldr	r3, [pc, #124]	@ (8006be0 <SDMMC_GetCmdResp2+0x88>)
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	4a1f      	ldr	r2, [pc, #124]	@ (8006be4 <SDMMC_GetCmdResp2+0x8c>)
 8006b66:	fba2 2303 	umull	r2, r3, r2, r3
 8006b6a:	0a5b      	lsrs	r3, r3, #9
 8006b6c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006b70:	fb02 f303 	mul.w	r3, r2, r3
 8006b74:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	1e5a      	subs	r2, r3, #1
 8006b7a:	60fa      	str	r2, [r7, #12]
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d102      	bne.n	8006b86 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006b80:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8006b84:	e026      	b.n	8006bd4 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006b8a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8006b8c:	68bb      	ldr	r3, [r7, #8]
 8006b8e:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d0ef      	beq.n	8006b76 <SDMMC_GetCmdResp2+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8006b96:	68bb      	ldr	r3, [r7, #8]
 8006b98:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d1ea      	bne.n	8006b76 <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006ba4:	f003 0304 	and.w	r3, r3, #4
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d004      	beq.n	8006bb6 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	2204      	movs	r2, #4
 8006bb0:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8006bb2:	2304      	movs	r3, #4
 8006bb4:	e00e      	b.n	8006bd4 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006bba:	f003 0301 	and.w	r3, r3, #1
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d004      	beq.n	8006bcc <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	2201      	movs	r2, #1
 8006bc6:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006bc8:	2301      	movs	r3, #1
 8006bca:	e003      	b.n	8006bd4 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	22c5      	movs	r2, #197	@ 0xc5
 8006bd0:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 8006bd2:	2300      	movs	r3, #0
}
 8006bd4:	4618      	mov	r0, r3
 8006bd6:	3714      	adds	r7, #20
 8006bd8:	46bd      	mov	sp, r7
 8006bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bde:	4770      	bx	lr
 8006be0:	20000000 	.word	0x20000000
 8006be4:	10624dd3 	.word	0x10624dd3

08006be8 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 8006be8:	b480      	push	{r7}
 8006bea:	b085      	sub	sp, #20
 8006bec:	af00      	add	r7, sp, #0
 8006bee:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8006bf0:	4b1a      	ldr	r3, [pc, #104]	@ (8006c5c <SDMMC_GetCmdResp3+0x74>)
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	4a1a      	ldr	r2, [pc, #104]	@ (8006c60 <SDMMC_GetCmdResp3+0x78>)
 8006bf6:	fba2 2303 	umull	r2, r3, r2, r3
 8006bfa:	0a5b      	lsrs	r3, r3, #9
 8006bfc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006c00:	fb02 f303 	mul.w	r3, r2, r3
 8006c04:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	1e5a      	subs	r2, r3, #1
 8006c0a:	60fa      	str	r2, [r7, #12]
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d102      	bne.n	8006c16 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006c10:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8006c14:	e01b      	b.n	8006c4e <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006c1a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8006c1c:	68bb      	ldr	r3, [r7, #8]
 8006c1e:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d0ef      	beq.n	8006c06 <SDMMC_GetCmdResp3+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8006c26:	68bb      	ldr	r3, [r7, #8]
 8006c28:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d1ea      	bne.n	8006c06 <SDMMC_GetCmdResp3+0x1e>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006c34:	f003 0304 	and.w	r3, r3, #4
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d004      	beq.n	8006c46 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	2204      	movs	r2, #4
 8006c40:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8006c42:	2304      	movs	r3, #4
 8006c44:	e003      	b.n	8006c4e <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	22c5      	movs	r2, #197	@ 0xc5
 8006c4a:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 8006c4c:	2300      	movs	r3, #0
}
 8006c4e:	4618      	mov	r0, r3
 8006c50:	3714      	adds	r7, #20
 8006c52:	46bd      	mov	sp, r7
 8006c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c58:	4770      	bx	lr
 8006c5a:	bf00      	nop
 8006c5c:	20000000 	.word	0x20000000
 8006c60:	10624dd3 	.word	0x10624dd3

08006c64 <SDMMC_GetCmdResp6>:
  * @param  pRCA Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8006c64:	b580      	push	{r7, lr}
 8006c66:	b088      	sub	sp, #32
 8006c68:	af00      	add	r7, sp, #0
 8006c6a:	60f8      	str	r0, [r7, #12]
 8006c6c:	460b      	mov	r3, r1
 8006c6e:	607a      	str	r2, [r7, #4]
 8006c70:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8006c72:	4b35      	ldr	r3, [pc, #212]	@ (8006d48 <SDMMC_GetCmdResp6+0xe4>)
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	4a35      	ldr	r2, [pc, #212]	@ (8006d4c <SDMMC_GetCmdResp6+0xe8>)
 8006c78:	fba2 2303 	umull	r2, r3, r2, r3
 8006c7c:	0a5b      	lsrs	r3, r3, #9
 8006c7e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006c82:	fb02 f303 	mul.w	r3, r2, r3
 8006c86:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 8006c88:	69fb      	ldr	r3, [r7, #28]
 8006c8a:	1e5a      	subs	r2, r3, #1
 8006c8c:	61fa      	str	r2, [r7, #28]
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d102      	bne.n	8006c98 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006c92:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8006c96:	e052      	b.n	8006d3e <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006c9c:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8006c9e:	69bb      	ldr	r3, [r7, #24]
 8006ca0:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d0ef      	beq.n	8006c88 <SDMMC_GetCmdResp6+0x24>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8006ca8:	69bb      	ldr	r3, [r7, #24]
 8006caa:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d1ea      	bne.n	8006c88 <SDMMC_GetCmdResp6+0x24>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006cb6:	f003 0304 	and.w	r3, r3, #4
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d004      	beq.n	8006cc8 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	2204      	movs	r2, #4
 8006cc2:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8006cc4:	2304      	movs	r3, #4
 8006cc6:	e03a      	b.n	8006d3e <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006ccc:	f003 0301 	and.w	r3, r3, #1
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d004      	beq.n	8006cde <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	2201      	movs	r2, #1
 8006cd8:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006cda:	2301      	movs	r3, #1
 8006cdc:	e02f      	b.n	8006d3e <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8006cde:	68f8      	ldr	r0, [r7, #12]
 8006ce0:	f7ff fc0e 	bl	8006500 <SDMMC_GetCommandResponse>
 8006ce4:	4603      	mov	r3, r0
 8006ce6:	461a      	mov	r2, r3
 8006ce8:	7afb      	ldrb	r3, [r7, #11]
 8006cea:	4293      	cmp	r3, r2
 8006cec:	d001      	beq.n	8006cf2 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006cee:	2301      	movs	r3, #1
 8006cf0:	e025      	b.n	8006d3e <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	22c5      	movs	r2, #197	@ 0xc5
 8006cf6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8006cf8:	2100      	movs	r1, #0
 8006cfa:	68f8      	ldr	r0, [r7, #12]
 8006cfc:	f7ff fc0d 	bl	800651a <SDMMC_GetResponse>
 8006d00:	6178      	str	r0, [r7, #20]

  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8006d02:	697b      	ldr	r3, [r7, #20]
 8006d04:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d106      	bne.n	8006d1a <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8006d0c:	697b      	ldr	r3, [r7, #20]
 8006d0e:	0c1b      	lsrs	r3, r3, #16
 8006d10:	b29a      	uxth	r2, r3
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 8006d16:	2300      	movs	r3, #0
 8006d18:	e011      	b.n	8006d3e <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8006d1a:	697b      	ldr	r3, [r7, #20]
 8006d1c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d002      	beq.n	8006d2a <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8006d24:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8006d28:	e009      	b.n	8006d3e <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8006d2a:	697b      	ldr	r3, [r7, #20]
 8006d2c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d002      	beq.n	8006d3a <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8006d34:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8006d38:	e001      	b.n	8006d3e <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8006d3a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 8006d3e:	4618      	mov	r0, r3
 8006d40:	3720      	adds	r7, #32
 8006d42:	46bd      	mov	sp, r7
 8006d44:	bd80      	pop	{r7, pc}
 8006d46:	bf00      	nop
 8006d48:	20000000 	.word	0x20000000
 8006d4c:	10624dd3 	.word	0x10624dd3

08006d50 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 8006d50:	b480      	push	{r7}
 8006d52:	b085      	sub	sp, #20
 8006d54:	af00      	add	r7, sp, #0
 8006d56:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8006d58:	4b22      	ldr	r3, [pc, #136]	@ (8006de4 <SDMMC_GetCmdResp7+0x94>)
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	4a22      	ldr	r2, [pc, #136]	@ (8006de8 <SDMMC_GetCmdResp7+0x98>)
 8006d5e:	fba2 2303 	umull	r2, r3, r2, r3
 8006d62:	0a5b      	lsrs	r3, r3, #9
 8006d64:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006d68:	fb02 f303 	mul.w	r3, r2, r3
 8006d6c:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	1e5a      	subs	r2, r3, #1
 8006d72:	60fa      	str	r2, [r7, #12]
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d102      	bne.n	8006d7e <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006d78:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8006d7c:	e02c      	b.n	8006dd8 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006d82:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8006d84:	68bb      	ldr	r3, [r7, #8]
 8006d86:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d0ef      	beq.n	8006d6e <SDMMC_GetCmdResp7+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8006d8e:	68bb      	ldr	r3, [r7, #8]
 8006d90:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d1ea      	bne.n	8006d6e <SDMMC_GetCmdResp7+0x1e>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006d9c:	f003 0304 	and.w	r3, r3, #4
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d004      	beq.n	8006dae <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	2204      	movs	r2, #4
 8006da8:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8006daa:	2304      	movs	r3, #4
 8006dac:	e014      	b.n	8006dd8 <SDMMC_GetCmdResp7+0x88>
  }

  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006db2:	f003 0301 	and.w	r3, r3, #1
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d004      	beq.n	8006dc4 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	2201      	movs	r2, #1
 8006dbe:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006dc0:	2301      	movs	r3, #1
 8006dc2:	e009      	b.n	8006dd8 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006dc8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d002      	beq.n	8006dd6 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	2240      	movs	r2, #64	@ 0x40
 8006dd4:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 8006dd6:	2300      	movs	r3, #0

}
 8006dd8:	4618      	mov	r0, r3
 8006dda:	3714      	adds	r7, #20
 8006ddc:	46bd      	mov	sp, r7
 8006dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006de2:	4770      	bx	lr
 8006de4:	20000000 	.word	0x20000000
 8006de8:	10624dd3 	.word	0x10624dd3

08006dec <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 8006dec:	b480      	push	{r7}
 8006dee:	b085      	sub	sp, #20
 8006df0:	af00      	add	r7, sp, #0
 8006df2:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8006df4:	4b11      	ldr	r3, [pc, #68]	@ (8006e3c <SDMMC_GetCmdError+0x50>)
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	4a11      	ldr	r2, [pc, #68]	@ (8006e40 <SDMMC_GetCmdError+0x54>)
 8006dfa:	fba2 2303 	umull	r2, r3, r2, r3
 8006dfe:	0a5b      	lsrs	r3, r3, #9
 8006e00:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006e04:	fb02 f303 	mul.w	r3, r2, r3
 8006e08:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	1e5a      	subs	r2, r3, #1
 8006e0e:	60fa      	str	r2, [r7, #12]
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d102      	bne.n	8006e1a <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006e14:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8006e18:	e009      	b.n	8006e2e <SDMMC_GetCmdError+0x42>
    }

  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006e1e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d0f1      	beq.n	8006e0a <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	22c5      	movs	r2, #197	@ 0xc5
 8006e2a:	639a      	str	r2, [r3, #56]	@ 0x38

  return SDMMC_ERROR_NONE;
 8006e2c:	2300      	movs	r3, #0
}
 8006e2e:	4618      	mov	r0, r3
 8006e30:	3714      	adds	r7, #20
 8006e32:	46bd      	mov	sp, r7
 8006e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e38:	4770      	bx	lr
 8006e3a:	bf00      	nop
 8006e3c:	20000000 	.word	0x20000000
 8006e40:	10624dd3 	.word	0x10624dd3

08006e44 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8006e44:	b580      	push	{r7, lr}
 8006e46:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8006e48:	4904      	ldr	r1, [pc, #16]	@ (8006e5c <MX_FATFS_Init+0x18>)
 8006e4a:	4805      	ldr	r0, [pc, #20]	@ (8006e60 <MX_FATFS_Init+0x1c>)
 8006e4c:	f003 f892 	bl	8009f74 <FATFS_LinkDriver>
 8006e50:	4603      	mov	r3, r0
 8006e52:	461a      	mov	r2, r3
 8006e54:	4b03      	ldr	r3, [pc, #12]	@ (8006e64 <MX_FATFS_Init+0x20>)
 8006e56:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8006e58:	bf00      	nop
 8006e5a:	bd80      	pop	{r7, pc}
 8006e5c:	20000f60 	.word	0x20000f60
 8006e60:	0800aba4 	.word	0x0800aba4
 8006e64:	20000f5c 	.word	0x20000f5c

08006e68 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8006e68:	b480      	push	{r7}
 8006e6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8006e6c:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8006e6e:	4618      	mov	r0, r3
 8006e70:	46bd      	mov	sp, r7
 8006e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e76:	4770      	bx	lr

08006e78 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8006e78:	b580      	push	{r7, lr}
 8006e7a:	b082      	sub	sp, #8
 8006e7c:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8006e7e:	2300      	movs	r3, #0
 8006e80:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8006e82:	f000 f888 	bl	8006f96 <BSP_SD_IsDetected>
 8006e86:	4603      	mov	r3, r0
 8006e88:	2b01      	cmp	r3, #1
 8006e8a:	d001      	beq.n	8006e90 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 8006e8c:	2302      	movs	r3, #2
 8006e8e:	e005      	b.n	8006e9c <BSP_SD_Init+0x24>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 8006e90:	4804      	ldr	r0, [pc, #16]	@ (8006ea4 <BSP_SD_Init+0x2c>)
 8006e92:	f7fd fb41 	bl	8004518 <HAL_SD_Init>
 8006e96:	4603      	mov	r3, r0
 8006e98:	71fb      	strb	r3, [r7, #7]

  return sd_state;
 8006e9a:	79fb      	ldrb	r3, [r7, #7]
}
 8006e9c:	4618      	mov	r0, r3
 8006e9e:	3708      	adds	r7, #8
 8006ea0:	46bd      	mov	sp, r7
 8006ea2:	bd80      	pop	{r7, pc}
 8006ea4:	200001a4 	.word	0x200001a4

08006ea8 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 8006ea8:	b580      	push	{r7, lr}
 8006eaa:	b086      	sub	sp, #24
 8006eac:	af00      	add	r7, sp, #0
 8006eae:	60f8      	str	r0, [r7, #12]
 8006eb0:	60b9      	str	r1, [r7, #8]
 8006eb2:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8006eb4:	2300      	movs	r3, #0
 8006eb6:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	68ba      	ldr	r2, [r7, #8]
 8006ebc:	68f9      	ldr	r1, [r7, #12]
 8006ebe:	4806      	ldr	r0, [pc, #24]	@ (8006ed8 <BSP_SD_ReadBlocks_DMA+0x30>)
 8006ec0:	f7fd fc00 	bl	80046c4 <HAL_SD_ReadBlocks_DMA>
 8006ec4:	4603      	mov	r3, r0
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d001      	beq.n	8006ece <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8006eca:	2301      	movs	r3, #1
 8006ecc:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8006ece:	7dfb      	ldrb	r3, [r7, #23]
}
 8006ed0:	4618      	mov	r0, r3
 8006ed2:	3718      	adds	r7, #24
 8006ed4:	46bd      	mov	sp, r7
 8006ed6:	bd80      	pop	{r7, pc}
 8006ed8:	200001a4 	.word	0x200001a4

08006edc <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 8006edc:	b580      	push	{r7, lr}
 8006ede:	b086      	sub	sp, #24
 8006ee0:	af00      	add	r7, sp, #0
 8006ee2:	60f8      	str	r0, [r7, #12]
 8006ee4:	60b9      	str	r1, [r7, #8]
 8006ee6:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8006ee8:	2300      	movs	r3, #0
 8006eea:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	68ba      	ldr	r2, [r7, #8]
 8006ef0:	68f9      	ldr	r1, [r7, #12]
 8006ef2:	4806      	ldr	r0, [pc, #24]	@ (8006f0c <BSP_SD_WriteBlocks_DMA+0x30>)
 8006ef4:	f7fd fcae 	bl	8004854 <HAL_SD_WriteBlocks_DMA>
 8006ef8:	4603      	mov	r3, r0
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d001      	beq.n	8006f02 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8006efe:	2301      	movs	r3, #1
 8006f00:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8006f02:	7dfb      	ldrb	r3, [r7, #23]
}
 8006f04:	4618      	mov	r0, r3
 8006f06:	3718      	adds	r7, #24
 8006f08:	46bd      	mov	sp, r7
 8006f0a:	bd80      	pop	{r7, pc}
 8006f0c:	200001a4 	.word	0x200001a4

08006f10 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8006f10:	b580      	push	{r7, lr}
 8006f12:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8006f14:	4805      	ldr	r0, [pc, #20]	@ (8006f2c <BSP_SD_GetCardState+0x1c>)
 8006f16:	f7fe f8b9 	bl	800508c <HAL_SD_GetCardState>
 8006f1a:	4603      	mov	r3, r0
 8006f1c:	2b04      	cmp	r3, #4
 8006f1e:	bf14      	ite	ne
 8006f20:	2301      	movne	r3, #1
 8006f22:	2300      	moveq	r3, #0
 8006f24:	b2db      	uxtb	r3, r3
}
 8006f26:	4618      	mov	r0, r3
 8006f28:	bd80      	pop	{r7, pc}
 8006f2a:	bf00      	nop
 8006f2c:	200001a4 	.word	0x200001a4

08006f30 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(BSP_SD_CardInfo *CardInfo)
{
 8006f30:	b580      	push	{r7, lr}
 8006f32:	b082      	sub	sp, #8
 8006f34:	af00      	add	r7, sp, #0
 8006f36:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 8006f38:	6879      	ldr	r1, [r7, #4]
 8006f3a:	4803      	ldr	r0, [pc, #12]	@ (8006f48 <BSP_SD_GetCardInfo+0x18>)
 8006f3c:	f7fe f87a 	bl	8005034 <HAL_SD_GetCardInfo>
}
 8006f40:	bf00      	nop
 8006f42:	3708      	adds	r7, #8
 8006f44:	46bd      	mov	sp, r7
 8006f46:	bd80      	pop	{r7, pc}
 8006f48:	200001a4 	.word	0x200001a4

08006f4c <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 8006f4c:	b580      	push	{r7, lr}
 8006f4e:	b082      	sub	sp, #8
 8006f50:	af00      	add	r7, sp, #0
 8006f52:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 8006f54:	f000 f818 	bl	8006f88 <BSP_SD_AbortCallback>
}
 8006f58:	bf00      	nop
 8006f5a:	3708      	adds	r7, #8
 8006f5c:	46bd      	mov	sp, r7
 8006f5e:	bd80      	pop	{r7, pc}

08006f60 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 8006f60:	b580      	push	{r7, lr}
 8006f62:	b082      	sub	sp, #8
 8006f64:	af00      	add	r7, sp, #0
 8006f66:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 8006f68:	f000 f9a8 	bl	80072bc <BSP_SD_WriteCpltCallback>
}
 8006f6c:	bf00      	nop
 8006f6e:	3708      	adds	r7, #8
 8006f70:	46bd      	mov	sp, r7
 8006f72:	bd80      	pop	{r7, pc}

08006f74 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8006f74:	b580      	push	{r7, lr}
 8006f76:	b082      	sub	sp, #8
 8006f78:	af00      	add	r7, sp, #0
 8006f7a:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 8006f7c:	f000 f9aa 	bl	80072d4 <BSP_SD_ReadCpltCallback>
}
 8006f80:	bf00      	nop
 8006f82:	3708      	adds	r7, #8
 8006f84:	46bd      	mov	sp, r7
 8006f86:	bd80      	pop	{r7, pc}

08006f88 <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 8006f88:	b480      	push	{r7}
 8006f8a:	af00      	add	r7, sp, #0

}
 8006f8c:	bf00      	nop
 8006f8e:	46bd      	mov	sp, r7
 8006f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f94:	4770      	bx	lr

08006f96 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8006f96:	b580      	push	{r7, lr}
 8006f98:	b082      	sub	sp, #8
 8006f9a:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8006f9c:	2301      	movs	r3, #1
 8006f9e:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 8006fa0:	f000 f80c 	bl	8006fbc <BSP_PlatformIsDetected>
 8006fa4:	4603      	mov	r3, r0
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d101      	bne.n	8006fae <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 8006faa:	2300      	movs	r3, #0
 8006fac:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8006fae:	79fb      	ldrb	r3, [r7, #7]
 8006fb0:	b2db      	uxtb	r3, r3
}
 8006fb2:	4618      	mov	r0, r3
 8006fb4:	3708      	adds	r7, #8
 8006fb6:	46bd      	mov	sp, r7
 8006fb8:	bd80      	pop	{r7, pc}
	...

08006fbc <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 8006fbc:	b580      	push	{r7, lr}
 8006fbe:	b082      	sub	sp, #8
 8006fc0:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 8006fc2:	2301      	movs	r3, #1
 8006fc4:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 8006fc6:	2180      	movs	r1, #128	@ 0x80
 8006fc8:	4806      	ldr	r0, [pc, #24]	@ (8006fe4 <BSP_PlatformIsDetected+0x28>)
 8006fca:	f7fa fddd 	bl	8001b88 <HAL_GPIO_ReadPin>
 8006fce:	4603      	mov	r3, r0
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d001      	beq.n	8006fd8 <BSP_PlatformIsDetected+0x1c>
    {
        status = SD_NOT_PRESENT;
 8006fd4:	2300      	movs	r3, #0
 8006fd6:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 8006fd8:	79fb      	ldrb	r3, [r7, #7]
}
 8006fda:	4618      	mov	r0, r3
 8006fdc:	3708      	adds	r7, #8
 8006fde:	46bd      	mov	sp, r7
 8006fe0:	bd80      	pop	{r7, pc}
 8006fe2:	bf00      	nop
 8006fe4:	48000400 	.word	0x48000400

08006fe8 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 8006fe8:	b580      	push	{r7, lr}
 8006fea:	b084      	sub	sp, #16
 8006fec:	af00      	add	r7, sp, #0
 8006fee:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 8006ff0:	f7fa f898 	bl	8001124 <HAL_GetTick>
 8006ff4:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 8006ff6:	e006      	b.n	8007006 <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8006ff8:	f7ff ff8a 	bl	8006f10 <BSP_SD_GetCardState>
 8006ffc:	4603      	mov	r3, r0
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d101      	bne.n	8007006 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 8007002:	2300      	movs	r3, #0
 8007004:	e009      	b.n	800701a <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 8007006:	f7fa f88d 	bl	8001124 <HAL_GetTick>
 800700a:	4602      	mov	r2, r0
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	1ad3      	subs	r3, r2, r3
 8007010:	687a      	ldr	r2, [r7, #4]
 8007012:	429a      	cmp	r2, r3
 8007014:	d8f0      	bhi.n	8006ff8 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 8007016:	f04f 33ff 	mov.w	r3, #4294967295
}
 800701a:	4618      	mov	r0, r3
 800701c:	3710      	adds	r7, #16
 800701e:	46bd      	mov	sp, r7
 8007020:	bd80      	pop	{r7, pc}
	...

08007024 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8007024:	b580      	push	{r7, lr}
 8007026:	b082      	sub	sp, #8
 8007028:	af00      	add	r7, sp, #0
 800702a:	4603      	mov	r3, r0
 800702c:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800702e:	4b0b      	ldr	r3, [pc, #44]	@ (800705c <SD_CheckStatus+0x38>)
 8007030:	2201      	movs	r2, #1
 8007032:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8007034:	f7ff ff6c 	bl	8006f10 <BSP_SD_GetCardState>
 8007038:	4603      	mov	r3, r0
 800703a:	2b00      	cmp	r3, #0
 800703c:	d107      	bne.n	800704e <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800703e:	4b07      	ldr	r3, [pc, #28]	@ (800705c <SD_CheckStatus+0x38>)
 8007040:	781b      	ldrb	r3, [r3, #0]
 8007042:	b2db      	uxtb	r3, r3
 8007044:	f023 0301 	bic.w	r3, r3, #1
 8007048:	b2da      	uxtb	r2, r3
 800704a:	4b04      	ldr	r3, [pc, #16]	@ (800705c <SD_CheckStatus+0x38>)
 800704c:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800704e:	4b03      	ldr	r3, [pc, #12]	@ (800705c <SD_CheckStatus+0x38>)
 8007050:	781b      	ldrb	r3, [r3, #0]
 8007052:	b2db      	uxtb	r3, r3
}
 8007054:	4618      	mov	r0, r3
 8007056:	3708      	adds	r7, #8
 8007058:	46bd      	mov	sp, r7
 800705a:	bd80      	pop	{r7, pc}
 800705c:	20000009 	.word	0x20000009

08007060 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8007060:	b580      	push	{r7, lr}
 8007062:	b082      	sub	sp, #8
 8007064:	af00      	add	r7, sp, #0
 8007066:	4603      	mov	r3, r0
 8007068:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800706a:	f7ff ff05 	bl	8006e78 <BSP_SD_Init>
 800706e:	4603      	mov	r3, r0
 8007070:	2b00      	cmp	r3, #0
 8007072:	d107      	bne.n	8007084 <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 8007074:	79fb      	ldrb	r3, [r7, #7]
 8007076:	4618      	mov	r0, r3
 8007078:	f7ff ffd4 	bl	8007024 <SD_CheckStatus>
 800707c:	4603      	mov	r3, r0
 800707e:	461a      	mov	r2, r3
 8007080:	4b04      	ldr	r3, [pc, #16]	@ (8007094 <SD_initialize+0x34>)
 8007082:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 8007084:	4b03      	ldr	r3, [pc, #12]	@ (8007094 <SD_initialize+0x34>)
 8007086:	781b      	ldrb	r3, [r3, #0]
 8007088:	b2db      	uxtb	r3, r3
}
 800708a:	4618      	mov	r0, r3
 800708c:	3708      	adds	r7, #8
 800708e:	46bd      	mov	sp, r7
 8007090:	bd80      	pop	{r7, pc}
 8007092:	bf00      	nop
 8007094:	20000009 	.word	0x20000009

08007098 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8007098:	b580      	push	{r7, lr}
 800709a:	b082      	sub	sp, #8
 800709c:	af00      	add	r7, sp, #0
 800709e:	4603      	mov	r3, r0
 80070a0:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 80070a2:	79fb      	ldrb	r3, [r7, #7]
 80070a4:	4618      	mov	r0, r3
 80070a6:	f7ff ffbd 	bl	8007024 <SD_CheckStatus>
 80070aa:	4603      	mov	r3, r0
}
 80070ac:	4618      	mov	r0, r3
 80070ae:	3708      	adds	r7, #8
 80070b0:	46bd      	mov	sp, r7
 80070b2:	bd80      	pop	{r7, pc}

080070b4 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 80070b4:	b580      	push	{r7, lr}
 80070b6:	b086      	sub	sp, #24
 80070b8:	af00      	add	r7, sp, #0
 80070ba:	60b9      	str	r1, [r7, #8]
 80070bc:	607a      	str	r2, [r7, #4]
 80070be:	603b      	str	r3, [r7, #0]
 80070c0:	4603      	mov	r3, r0
 80070c2:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80070c4:	2301      	movs	r3, #1
 80070c6:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 80070c8:	f247 5030 	movw	r0, #30000	@ 0x7530
 80070cc:	f7ff ff8c 	bl	8006fe8 <SD_CheckStatusWithTimeout>
 80070d0:	4603      	mov	r3, r0
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	da01      	bge.n	80070da <SD_read+0x26>
  {
    return res;
 80070d6:	7dfb      	ldrb	r3, [r7, #23]
 80070d8:	e03b      	b.n	8007152 <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 80070da:	683a      	ldr	r2, [r7, #0]
 80070dc:	6879      	ldr	r1, [r7, #4]
 80070de:	68b8      	ldr	r0, [r7, #8]
 80070e0:	f7ff fee2 	bl	8006ea8 <BSP_SD_ReadBlocks_DMA>
 80070e4:	4603      	mov	r3, r0
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d132      	bne.n	8007150 <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 80070ea:	4b1c      	ldr	r3, [pc, #112]	@ (800715c <SD_read+0xa8>)
 80070ec:	2200      	movs	r2, #0
 80070ee:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 80070f0:	f7fa f818 	bl	8001124 <HAL_GetTick>
 80070f4:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 80070f6:	bf00      	nop
 80070f8:	4b18      	ldr	r3, [pc, #96]	@ (800715c <SD_read+0xa8>)
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d108      	bne.n	8007112 <SD_read+0x5e>
 8007100:	f7fa f810 	bl	8001124 <HAL_GetTick>
 8007104:	4602      	mov	r2, r0
 8007106:	693b      	ldr	r3, [r7, #16]
 8007108:	1ad3      	subs	r3, r2, r3
 800710a:	f247 522f 	movw	r2, #29999	@ 0x752f
 800710e:	4293      	cmp	r3, r2
 8007110:	d9f2      	bls.n	80070f8 <SD_read+0x44>
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
 8007112:	4b12      	ldr	r3, [pc, #72]	@ (800715c <SD_read+0xa8>)
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	2b00      	cmp	r3, #0
 8007118:	d102      	bne.n	8007120 <SD_read+0x6c>
      {
        res = RES_ERROR;
 800711a:	2301      	movs	r3, #1
 800711c:	75fb      	strb	r3, [r7, #23]
 800711e:	e017      	b.n	8007150 <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 8007120:	4b0e      	ldr	r3, [pc, #56]	@ (800715c <SD_read+0xa8>)
 8007122:	2200      	movs	r2, #0
 8007124:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8007126:	f7f9 fffd 	bl	8001124 <HAL_GetTick>
 800712a:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800712c:	e007      	b.n	800713e <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800712e:	f7ff feef 	bl	8006f10 <BSP_SD_GetCardState>
 8007132:	4603      	mov	r3, r0
 8007134:	2b00      	cmp	r3, #0
 8007136:	d102      	bne.n	800713e <SD_read+0x8a>
          {
            res = RES_OK;
 8007138:	2300      	movs	r3, #0
 800713a:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 800713c:	e008      	b.n	8007150 <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800713e:	f7f9 fff1 	bl	8001124 <HAL_GetTick>
 8007142:	4602      	mov	r2, r0
 8007144:	693b      	ldr	r3, [r7, #16]
 8007146:	1ad3      	subs	r3, r2, r3
 8007148:	f247 522f 	movw	r2, #29999	@ 0x752f
 800714c:	4293      	cmp	r3, r2
 800714e:	d9ee      	bls.n	800712e <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 8007150:	7dfb      	ldrb	r3, [r7, #23]
}
 8007152:	4618      	mov	r0, r3
 8007154:	3718      	adds	r7, #24
 8007156:	46bd      	mov	sp, r7
 8007158:	bd80      	pop	{r7, pc}
 800715a:	bf00      	nop
 800715c:	20000f68 	.word	0x20000f68

08007160 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8007160:	b580      	push	{r7, lr}
 8007162:	b086      	sub	sp, #24
 8007164:	af00      	add	r7, sp, #0
 8007166:	60b9      	str	r1, [r7, #8]
 8007168:	607a      	str	r2, [r7, #4]
 800716a:	603b      	str	r3, [r7, #0]
 800716c:	4603      	mov	r3, r0
 800716e:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8007170:	2301      	movs	r3, #1
 8007172:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 8007174:	4b24      	ldr	r3, [pc, #144]	@ (8007208 <SD_write+0xa8>)
 8007176:	2200      	movs	r2, #0
 8007178:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800717a:	f247 5030 	movw	r0, #30000	@ 0x7530
 800717e:	f7ff ff33 	bl	8006fe8 <SD_CheckStatusWithTimeout>
 8007182:	4603      	mov	r3, r0
 8007184:	2b00      	cmp	r3, #0
 8007186:	da01      	bge.n	800718c <SD_write+0x2c>
  {
    return res;
 8007188:	7dfb      	ldrb	r3, [r7, #23]
 800718a:	e038      	b.n	80071fe <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800718c:	683a      	ldr	r2, [r7, #0]
 800718e:	6879      	ldr	r1, [r7, #4]
 8007190:	68b8      	ldr	r0, [r7, #8]
 8007192:	f7ff fea3 	bl	8006edc <BSP_SD_WriteBlocks_DMA>
 8007196:	4603      	mov	r3, r0
 8007198:	2b00      	cmp	r3, #0
 800719a:	d12f      	bne.n	80071fc <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 800719c:	f7f9 ffc2 	bl	8001124 <HAL_GetTick>
 80071a0:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 80071a2:	bf00      	nop
 80071a4:	4b18      	ldr	r3, [pc, #96]	@ (8007208 <SD_write+0xa8>)
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d108      	bne.n	80071be <SD_write+0x5e>
 80071ac:	f7f9 ffba 	bl	8001124 <HAL_GetTick>
 80071b0:	4602      	mov	r2, r0
 80071b2:	693b      	ldr	r3, [r7, #16]
 80071b4:	1ad3      	subs	r3, r2, r3
 80071b6:	f247 522f 	movw	r2, #29999	@ 0x752f
 80071ba:	4293      	cmp	r3, r2
 80071bc:	d9f2      	bls.n	80071a4 <SD_write+0x44>
      {
      }
      /* in case of a timeout return error */
      if (WriteStatus == 0)
 80071be:	4b12      	ldr	r3, [pc, #72]	@ (8007208 <SD_write+0xa8>)
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d102      	bne.n	80071cc <SD_write+0x6c>
      {
        res = RES_ERROR;
 80071c6:	2301      	movs	r3, #1
 80071c8:	75fb      	strb	r3, [r7, #23]
 80071ca:	e017      	b.n	80071fc <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 80071cc:	4b0e      	ldr	r3, [pc, #56]	@ (8007208 <SD_write+0xa8>)
 80071ce:	2200      	movs	r2, #0
 80071d0:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 80071d2:	f7f9 ffa7 	bl	8001124 <HAL_GetTick>
 80071d6:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 80071d8:	e007      	b.n	80071ea <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80071da:	f7ff fe99 	bl	8006f10 <BSP_SD_GetCardState>
 80071de:	4603      	mov	r3, r0
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d102      	bne.n	80071ea <SD_write+0x8a>
          {
            res = RES_OK;
 80071e4:	2300      	movs	r3, #0
 80071e6:	75fb      	strb	r3, [r7, #23]
            break;
 80071e8:	e008      	b.n	80071fc <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 80071ea:	f7f9 ff9b 	bl	8001124 <HAL_GetTick>
 80071ee:	4602      	mov	r2, r0
 80071f0:	693b      	ldr	r3, [r7, #16]
 80071f2:	1ad3      	subs	r3, r2, r3
 80071f4:	f247 522f 	movw	r2, #29999	@ 0x752f
 80071f8:	4293      	cmp	r3, r2
 80071fa:	d9ee      	bls.n	80071da <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 80071fc:	7dfb      	ldrb	r3, [r7, #23]
}
 80071fe:	4618      	mov	r0, r3
 8007200:	3718      	adds	r7, #24
 8007202:	46bd      	mov	sp, r7
 8007204:	bd80      	pop	{r7, pc}
 8007206:	bf00      	nop
 8007208:	20000f64 	.word	0x20000f64

0800720c <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800720c:	b580      	push	{r7, lr}
 800720e:	b08c      	sub	sp, #48	@ 0x30
 8007210:	af00      	add	r7, sp, #0
 8007212:	4603      	mov	r3, r0
 8007214:	603a      	str	r2, [r7, #0]
 8007216:	71fb      	strb	r3, [r7, #7]
 8007218:	460b      	mov	r3, r1
 800721a:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800721c:	2301      	movs	r3, #1
 800721e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8007222:	4b25      	ldr	r3, [pc, #148]	@ (80072b8 <SD_ioctl+0xac>)
 8007224:	781b      	ldrb	r3, [r3, #0]
 8007226:	b2db      	uxtb	r3, r3
 8007228:	f003 0301 	and.w	r3, r3, #1
 800722c:	2b00      	cmp	r3, #0
 800722e:	d001      	beq.n	8007234 <SD_ioctl+0x28>
 8007230:	2303      	movs	r3, #3
 8007232:	e03c      	b.n	80072ae <SD_ioctl+0xa2>

  switch (cmd)
 8007234:	79bb      	ldrb	r3, [r7, #6]
 8007236:	2b03      	cmp	r3, #3
 8007238:	d834      	bhi.n	80072a4 <SD_ioctl+0x98>
 800723a:	a201      	add	r2, pc, #4	@ (adr r2, 8007240 <SD_ioctl+0x34>)
 800723c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007240:	08007251 	.word	0x08007251
 8007244:	08007259 	.word	0x08007259
 8007248:	08007271 	.word	0x08007271
 800724c:	0800728b 	.word	0x0800728b
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8007250:	2300      	movs	r3, #0
 8007252:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8007256:	e028      	b.n	80072aa <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8007258:	f107 030c 	add.w	r3, r7, #12
 800725c:	4618      	mov	r0, r3
 800725e:	f7ff fe67 	bl	8006f30 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8007262:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007264:	683b      	ldr	r3, [r7, #0]
 8007266:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8007268:	2300      	movs	r3, #0
 800726a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800726e:	e01c      	b.n	80072aa <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8007270:	f107 030c 	add.w	r3, r7, #12
 8007274:	4618      	mov	r0, r3
 8007276:	f7ff fe5b 	bl	8006f30 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800727a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800727c:	b29a      	uxth	r2, r3
 800727e:	683b      	ldr	r3, [r7, #0]
 8007280:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8007282:	2300      	movs	r3, #0
 8007284:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8007288:	e00f      	b.n	80072aa <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800728a:	f107 030c 	add.w	r3, r7, #12
 800728e:	4618      	mov	r0, r3
 8007290:	f7ff fe4e 	bl	8006f30 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8007294:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007296:	0a5a      	lsrs	r2, r3, #9
 8007298:	683b      	ldr	r3, [r7, #0]
 800729a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800729c:	2300      	movs	r3, #0
 800729e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 80072a2:	e002      	b.n	80072aa <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 80072a4:	2304      	movs	r3, #4
 80072a6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  return res;
 80072aa:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80072ae:	4618      	mov	r0, r3
 80072b0:	3730      	adds	r7, #48	@ 0x30
 80072b2:	46bd      	mov	sp, r7
 80072b4:	bd80      	pop	{r7, pc}
 80072b6:	bf00      	nop
 80072b8:	20000009 	.word	0x20000009

080072bc <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 80072bc:	b480      	push	{r7}
 80072be:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 80072c0:	4b03      	ldr	r3, [pc, #12]	@ (80072d0 <BSP_SD_WriteCpltCallback+0x14>)
 80072c2:	2201      	movs	r2, #1
 80072c4:	601a      	str	r2, [r3, #0]
}
 80072c6:	bf00      	nop
 80072c8:	46bd      	mov	sp, r7
 80072ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ce:	4770      	bx	lr
 80072d0:	20000f64 	.word	0x20000f64

080072d4 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 80072d4:	b480      	push	{r7}
 80072d6:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 80072d8:	4b03      	ldr	r3, [pc, #12]	@ (80072e8 <BSP_SD_ReadCpltCallback+0x14>)
 80072da:	2201      	movs	r2, #1
 80072dc:	601a      	str	r2, [r3, #0]
}
 80072de:	bf00      	nop
 80072e0:	46bd      	mov	sp, r7
 80072e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072e6:	4770      	bx	lr
 80072e8:	20000f68 	.word	0x20000f68

080072ec <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 80072ec:	b580      	push	{r7, lr}
 80072ee:	b084      	sub	sp, #16
 80072f0:	af00      	add	r7, sp, #0
 80072f2:	4603      	mov	r3, r0
 80072f4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 80072f6:	79fb      	ldrb	r3, [r7, #7]
 80072f8:	4a08      	ldr	r2, [pc, #32]	@ (800731c <disk_status+0x30>)
 80072fa:	009b      	lsls	r3, r3, #2
 80072fc:	4413      	add	r3, r2
 80072fe:	685b      	ldr	r3, [r3, #4]
 8007300:	685b      	ldr	r3, [r3, #4]
 8007302:	79fa      	ldrb	r2, [r7, #7]
 8007304:	4905      	ldr	r1, [pc, #20]	@ (800731c <disk_status+0x30>)
 8007306:	440a      	add	r2, r1
 8007308:	7a12      	ldrb	r2, [r2, #8]
 800730a:	4610      	mov	r0, r2
 800730c:	4798      	blx	r3
 800730e:	4603      	mov	r3, r0
 8007310:	73fb      	strb	r3, [r7, #15]
  return stat;
 8007312:	7bfb      	ldrb	r3, [r7, #15]
}
 8007314:	4618      	mov	r0, r3
 8007316:	3710      	adds	r7, #16
 8007318:	46bd      	mov	sp, r7
 800731a:	bd80      	pop	{r7, pc}
 800731c:	20000fa4 	.word	0x20000fa4

08007320 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8007320:	b580      	push	{r7, lr}
 8007322:	b084      	sub	sp, #16
 8007324:	af00      	add	r7, sp, #0
 8007326:	4603      	mov	r3, r0
 8007328:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800732a:	2300      	movs	r3, #0
 800732c:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800732e:	79fb      	ldrb	r3, [r7, #7]
 8007330:	4a0d      	ldr	r2, [pc, #52]	@ (8007368 <disk_initialize+0x48>)
 8007332:	5cd3      	ldrb	r3, [r2, r3]
 8007334:	2b00      	cmp	r3, #0
 8007336:	d111      	bne.n	800735c <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8007338:	79fb      	ldrb	r3, [r7, #7]
 800733a:	4a0b      	ldr	r2, [pc, #44]	@ (8007368 <disk_initialize+0x48>)
 800733c:	2101      	movs	r1, #1
 800733e:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8007340:	79fb      	ldrb	r3, [r7, #7]
 8007342:	4a09      	ldr	r2, [pc, #36]	@ (8007368 <disk_initialize+0x48>)
 8007344:	009b      	lsls	r3, r3, #2
 8007346:	4413      	add	r3, r2
 8007348:	685b      	ldr	r3, [r3, #4]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	79fa      	ldrb	r2, [r7, #7]
 800734e:	4906      	ldr	r1, [pc, #24]	@ (8007368 <disk_initialize+0x48>)
 8007350:	440a      	add	r2, r1
 8007352:	7a12      	ldrb	r2, [r2, #8]
 8007354:	4610      	mov	r0, r2
 8007356:	4798      	blx	r3
 8007358:	4603      	mov	r3, r0
 800735a:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800735c:	7bfb      	ldrb	r3, [r7, #15]
}
 800735e:	4618      	mov	r0, r3
 8007360:	3710      	adds	r7, #16
 8007362:	46bd      	mov	sp, r7
 8007364:	bd80      	pop	{r7, pc}
 8007366:	bf00      	nop
 8007368:	20000fa4 	.word	0x20000fa4

0800736c <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800736c:	b590      	push	{r4, r7, lr}
 800736e:	b087      	sub	sp, #28
 8007370:	af00      	add	r7, sp, #0
 8007372:	60b9      	str	r1, [r7, #8]
 8007374:	607a      	str	r2, [r7, #4]
 8007376:	603b      	str	r3, [r7, #0]
 8007378:	4603      	mov	r3, r0
 800737a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800737c:	7bfb      	ldrb	r3, [r7, #15]
 800737e:	4a0a      	ldr	r2, [pc, #40]	@ (80073a8 <disk_read+0x3c>)
 8007380:	009b      	lsls	r3, r3, #2
 8007382:	4413      	add	r3, r2
 8007384:	685b      	ldr	r3, [r3, #4]
 8007386:	689c      	ldr	r4, [r3, #8]
 8007388:	7bfb      	ldrb	r3, [r7, #15]
 800738a:	4a07      	ldr	r2, [pc, #28]	@ (80073a8 <disk_read+0x3c>)
 800738c:	4413      	add	r3, r2
 800738e:	7a18      	ldrb	r0, [r3, #8]
 8007390:	683b      	ldr	r3, [r7, #0]
 8007392:	687a      	ldr	r2, [r7, #4]
 8007394:	68b9      	ldr	r1, [r7, #8]
 8007396:	47a0      	blx	r4
 8007398:	4603      	mov	r3, r0
 800739a:	75fb      	strb	r3, [r7, #23]
  return res;
 800739c:	7dfb      	ldrb	r3, [r7, #23]
}
 800739e:	4618      	mov	r0, r3
 80073a0:	371c      	adds	r7, #28
 80073a2:	46bd      	mov	sp, r7
 80073a4:	bd90      	pop	{r4, r7, pc}
 80073a6:	bf00      	nop
 80073a8:	20000fa4 	.word	0x20000fa4

080073ac <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 80073ac:	b590      	push	{r4, r7, lr}
 80073ae:	b087      	sub	sp, #28
 80073b0:	af00      	add	r7, sp, #0
 80073b2:	60b9      	str	r1, [r7, #8]
 80073b4:	607a      	str	r2, [r7, #4]
 80073b6:	603b      	str	r3, [r7, #0]
 80073b8:	4603      	mov	r3, r0
 80073ba:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 80073bc:	7bfb      	ldrb	r3, [r7, #15]
 80073be:	4a0a      	ldr	r2, [pc, #40]	@ (80073e8 <disk_write+0x3c>)
 80073c0:	009b      	lsls	r3, r3, #2
 80073c2:	4413      	add	r3, r2
 80073c4:	685b      	ldr	r3, [r3, #4]
 80073c6:	68dc      	ldr	r4, [r3, #12]
 80073c8:	7bfb      	ldrb	r3, [r7, #15]
 80073ca:	4a07      	ldr	r2, [pc, #28]	@ (80073e8 <disk_write+0x3c>)
 80073cc:	4413      	add	r3, r2
 80073ce:	7a18      	ldrb	r0, [r3, #8]
 80073d0:	683b      	ldr	r3, [r7, #0]
 80073d2:	687a      	ldr	r2, [r7, #4]
 80073d4:	68b9      	ldr	r1, [r7, #8]
 80073d6:	47a0      	blx	r4
 80073d8:	4603      	mov	r3, r0
 80073da:	75fb      	strb	r3, [r7, #23]
  return res;
 80073dc:	7dfb      	ldrb	r3, [r7, #23]
}
 80073de:	4618      	mov	r0, r3
 80073e0:	371c      	adds	r7, #28
 80073e2:	46bd      	mov	sp, r7
 80073e4:	bd90      	pop	{r4, r7, pc}
 80073e6:	bf00      	nop
 80073e8:	20000fa4 	.word	0x20000fa4

080073ec <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 80073ec:	b580      	push	{r7, lr}
 80073ee:	b084      	sub	sp, #16
 80073f0:	af00      	add	r7, sp, #0
 80073f2:	4603      	mov	r3, r0
 80073f4:	603a      	str	r2, [r7, #0]
 80073f6:	71fb      	strb	r3, [r7, #7]
 80073f8:	460b      	mov	r3, r1
 80073fa:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 80073fc:	79fb      	ldrb	r3, [r7, #7]
 80073fe:	4a09      	ldr	r2, [pc, #36]	@ (8007424 <disk_ioctl+0x38>)
 8007400:	009b      	lsls	r3, r3, #2
 8007402:	4413      	add	r3, r2
 8007404:	685b      	ldr	r3, [r3, #4]
 8007406:	691b      	ldr	r3, [r3, #16]
 8007408:	79fa      	ldrb	r2, [r7, #7]
 800740a:	4906      	ldr	r1, [pc, #24]	@ (8007424 <disk_ioctl+0x38>)
 800740c:	440a      	add	r2, r1
 800740e:	7a10      	ldrb	r0, [r2, #8]
 8007410:	79b9      	ldrb	r1, [r7, #6]
 8007412:	683a      	ldr	r2, [r7, #0]
 8007414:	4798      	blx	r3
 8007416:	4603      	mov	r3, r0
 8007418:	73fb      	strb	r3, [r7, #15]
  return res;
 800741a:	7bfb      	ldrb	r3, [r7, #15]
}
 800741c:	4618      	mov	r0, r3
 800741e:	3710      	adds	r7, #16
 8007420:	46bd      	mov	sp, r7
 8007422:	bd80      	pop	{r7, pc}
 8007424:	20000fa4 	.word	0x20000fa4

08007428 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8007428:	b480      	push	{r7}
 800742a:	b085      	sub	sp, #20
 800742c:	af00      	add	r7, sp, #0
 800742e:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	3301      	adds	r3, #1
 8007434:	781b      	ldrb	r3, [r3, #0]
 8007436:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8007438:	89fb      	ldrh	r3, [r7, #14]
 800743a:	021b      	lsls	r3, r3, #8
 800743c:	b21a      	sxth	r2, r3
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	781b      	ldrb	r3, [r3, #0]
 8007442:	b21b      	sxth	r3, r3
 8007444:	4313      	orrs	r3, r2
 8007446:	b21b      	sxth	r3, r3
 8007448:	81fb      	strh	r3, [r7, #14]
	return rv;
 800744a:	89fb      	ldrh	r3, [r7, #14]
}
 800744c:	4618      	mov	r0, r3
 800744e:	3714      	adds	r7, #20
 8007450:	46bd      	mov	sp, r7
 8007452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007456:	4770      	bx	lr

08007458 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8007458:	b480      	push	{r7}
 800745a:	b085      	sub	sp, #20
 800745c:	af00      	add	r7, sp, #0
 800745e:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	3303      	adds	r3, #3
 8007464:	781b      	ldrb	r3, [r3, #0]
 8007466:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	021b      	lsls	r3, r3, #8
 800746c:	687a      	ldr	r2, [r7, #4]
 800746e:	3202      	adds	r2, #2
 8007470:	7812      	ldrb	r2, [r2, #0]
 8007472:	4313      	orrs	r3, r2
 8007474:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	021b      	lsls	r3, r3, #8
 800747a:	687a      	ldr	r2, [r7, #4]
 800747c:	3201      	adds	r2, #1
 800747e:	7812      	ldrb	r2, [r2, #0]
 8007480:	4313      	orrs	r3, r2
 8007482:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	021b      	lsls	r3, r3, #8
 8007488:	687a      	ldr	r2, [r7, #4]
 800748a:	7812      	ldrb	r2, [r2, #0]
 800748c:	4313      	orrs	r3, r2
 800748e:	60fb      	str	r3, [r7, #12]
	return rv;
 8007490:	68fb      	ldr	r3, [r7, #12]
}
 8007492:	4618      	mov	r0, r3
 8007494:	3714      	adds	r7, #20
 8007496:	46bd      	mov	sp, r7
 8007498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800749c:	4770      	bx	lr

0800749e <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800749e:	b480      	push	{r7}
 80074a0:	b083      	sub	sp, #12
 80074a2:	af00      	add	r7, sp, #0
 80074a4:	6078      	str	r0, [r7, #4]
 80074a6:	460b      	mov	r3, r1
 80074a8:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	1c5a      	adds	r2, r3, #1
 80074ae:	607a      	str	r2, [r7, #4]
 80074b0:	887a      	ldrh	r2, [r7, #2]
 80074b2:	b2d2      	uxtb	r2, r2
 80074b4:	701a      	strb	r2, [r3, #0]
 80074b6:	887b      	ldrh	r3, [r7, #2]
 80074b8:	0a1b      	lsrs	r3, r3, #8
 80074ba:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	1c5a      	adds	r2, r3, #1
 80074c0:	607a      	str	r2, [r7, #4]
 80074c2:	887a      	ldrh	r2, [r7, #2]
 80074c4:	b2d2      	uxtb	r2, r2
 80074c6:	701a      	strb	r2, [r3, #0]
}
 80074c8:	bf00      	nop
 80074ca:	370c      	adds	r7, #12
 80074cc:	46bd      	mov	sp, r7
 80074ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074d2:	4770      	bx	lr

080074d4 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 80074d4:	b480      	push	{r7}
 80074d6:	b083      	sub	sp, #12
 80074d8:	af00      	add	r7, sp, #0
 80074da:	6078      	str	r0, [r7, #4]
 80074dc:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	1c5a      	adds	r2, r3, #1
 80074e2:	607a      	str	r2, [r7, #4]
 80074e4:	683a      	ldr	r2, [r7, #0]
 80074e6:	b2d2      	uxtb	r2, r2
 80074e8:	701a      	strb	r2, [r3, #0]
 80074ea:	683b      	ldr	r3, [r7, #0]
 80074ec:	0a1b      	lsrs	r3, r3, #8
 80074ee:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	1c5a      	adds	r2, r3, #1
 80074f4:	607a      	str	r2, [r7, #4]
 80074f6:	683a      	ldr	r2, [r7, #0]
 80074f8:	b2d2      	uxtb	r2, r2
 80074fa:	701a      	strb	r2, [r3, #0]
 80074fc:	683b      	ldr	r3, [r7, #0]
 80074fe:	0a1b      	lsrs	r3, r3, #8
 8007500:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	1c5a      	adds	r2, r3, #1
 8007506:	607a      	str	r2, [r7, #4]
 8007508:	683a      	ldr	r2, [r7, #0]
 800750a:	b2d2      	uxtb	r2, r2
 800750c:	701a      	strb	r2, [r3, #0]
 800750e:	683b      	ldr	r3, [r7, #0]
 8007510:	0a1b      	lsrs	r3, r3, #8
 8007512:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	1c5a      	adds	r2, r3, #1
 8007518:	607a      	str	r2, [r7, #4]
 800751a:	683a      	ldr	r2, [r7, #0]
 800751c:	b2d2      	uxtb	r2, r2
 800751e:	701a      	strb	r2, [r3, #0]
}
 8007520:	bf00      	nop
 8007522:	370c      	adds	r7, #12
 8007524:	46bd      	mov	sp, r7
 8007526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800752a:	4770      	bx	lr

0800752c <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800752c:	b480      	push	{r7}
 800752e:	b087      	sub	sp, #28
 8007530:	af00      	add	r7, sp, #0
 8007532:	60f8      	str	r0, [r7, #12]
 8007534:	60b9      	str	r1, [r7, #8]
 8007536:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800753c:	68bb      	ldr	r3, [r7, #8]
 800753e:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	2b00      	cmp	r3, #0
 8007544:	d00d      	beq.n	8007562 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8007546:	693a      	ldr	r2, [r7, #16]
 8007548:	1c53      	adds	r3, r2, #1
 800754a:	613b      	str	r3, [r7, #16]
 800754c:	697b      	ldr	r3, [r7, #20]
 800754e:	1c59      	adds	r1, r3, #1
 8007550:	6179      	str	r1, [r7, #20]
 8007552:	7812      	ldrb	r2, [r2, #0]
 8007554:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	3b01      	subs	r3, #1
 800755a:	607b      	str	r3, [r7, #4]
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	2b00      	cmp	r3, #0
 8007560:	d1f1      	bne.n	8007546 <mem_cpy+0x1a>
	}
}
 8007562:	bf00      	nop
 8007564:	371c      	adds	r7, #28
 8007566:	46bd      	mov	sp, r7
 8007568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800756c:	4770      	bx	lr

0800756e <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800756e:	b480      	push	{r7}
 8007570:	b087      	sub	sp, #28
 8007572:	af00      	add	r7, sp, #0
 8007574:	60f8      	str	r0, [r7, #12]
 8007576:	60b9      	str	r1, [r7, #8]
 8007578:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800757e:	697b      	ldr	r3, [r7, #20]
 8007580:	1c5a      	adds	r2, r3, #1
 8007582:	617a      	str	r2, [r7, #20]
 8007584:	68ba      	ldr	r2, [r7, #8]
 8007586:	b2d2      	uxtb	r2, r2
 8007588:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	3b01      	subs	r3, #1
 800758e:	607b      	str	r3, [r7, #4]
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	2b00      	cmp	r3, #0
 8007594:	d1f3      	bne.n	800757e <mem_set+0x10>
}
 8007596:	bf00      	nop
 8007598:	bf00      	nop
 800759a:	371c      	adds	r7, #28
 800759c:	46bd      	mov	sp, r7
 800759e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075a2:	4770      	bx	lr

080075a4 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 80075a4:	b480      	push	{r7}
 80075a6:	b089      	sub	sp, #36	@ 0x24
 80075a8:	af00      	add	r7, sp, #0
 80075aa:	60f8      	str	r0, [r7, #12]
 80075ac:	60b9      	str	r1, [r7, #8]
 80075ae:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	61fb      	str	r3, [r7, #28]
 80075b4:	68bb      	ldr	r3, [r7, #8]
 80075b6:	61bb      	str	r3, [r7, #24]
	int r = 0;
 80075b8:	2300      	movs	r3, #0
 80075ba:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 80075bc:	69fb      	ldr	r3, [r7, #28]
 80075be:	1c5a      	adds	r2, r3, #1
 80075c0:	61fa      	str	r2, [r7, #28]
 80075c2:	781b      	ldrb	r3, [r3, #0]
 80075c4:	4619      	mov	r1, r3
 80075c6:	69bb      	ldr	r3, [r7, #24]
 80075c8:	1c5a      	adds	r2, r3, #1
 80075ca:	61ba      	str	r2, [r7, #24]
 80075cc:	781b      	ldrb	r3, [r3, #0]
 80075ce:	1acb      	subs	r3, r1, r3
 80075d0:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	3b01      	subs	r3, #1
 80075d6:	607b      	str	r3, [r7, #4]
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d002      	beq.n	80075e4 <mem_cmp+0x40>
 80075de:	697b      	ldr	r3, [r7, #20]
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d0eb      	beq.n	80075bc <mem_cmp+0x18>

	return r;
 80075e4:	697b      	ldr	r3, [r7, #20]
}
 80075e6:	4618      	mov	r0, r3
 80075e8:	3724      	adds	r7, #36	@ 0x24
 80075ea:	46bd      	mov	sp, r7
 80075ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075f0:	4770      	bx	lr

080075f2 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 80075f2:	b480      	push	{r7}
 80075f4:	b083      	sub	sp, #12
 80075f6:	af00      	add	r7, sp, #0
 80075f8:	6078      	str	r0, [r7, #4]
 80075fa:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 80075fc:	e002      	b.n	8007604 <chk_chr+0x12>
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	3301      	adds	r3, #1
 8007602:	607b      	str	r3, [r7, #4]
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	781b      	ldrb	r3, [r3, #0]
 8007608:	2b00      	cmp	r3, #0
 800760a:	d005      	beq.n	8007618 <chk_chr+0x26>
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	781b      	ldrb	r3, [r3, #0]
 8007610:	461a      	mov	r2, r3
 8007612:	683b      	ldr	r3, [r7, #0]
 8007614:	4293      	cmp	r3, r2
 8007616:	d1f2      	bne.n	80075fe <chk_chr+0xc>
	return *str;
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	781b      	ldrb	r3, [r3, #0]
}
 800761c:	4618      	mov	r0, r3
 800761e:	370c      	adds	r7, #12
 8007620:	46bd      	mov	sp, r7
 8007622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007626:	4770      	bx	lr

08007628 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8007628:	b480      	push	{r7}
 800762a:	b085      	sub	sp, #20
 800762c:	af00      	add	r7, sp, #0
 800762e:	6078      	str	r0, [r7, #4]
 8007630:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8007632:	2300      	movs	r3, #0
 8007634:	60bb      	str	r3, [r7, #8]
 8007636:	68bb      	ldr	r3, [r7, #8]
 8007638:	60fb      	str	r3, [r7, #12]
 800763a:	e029      	b.n	8007690 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800763c:	4a27      	ldr	r2, [pc, #156]	@ (80076dc <chk_lock+0xb4>)
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	011b      	lsls	r3, r3, #4
 8007642:	4413      	add	r3, r2
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	2b00      	cmp	r3, #0
 8007648:	d01d      	beq.n	8007686 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800764a:	4a24      	ldr	r2, [pc, #144]	@ (80076dc <chk_lock+0xb4>)
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	011b      	lsls	r3, r3, #4
 8007650:	4413      	add	r3, r2
 8007652:	681a      	ldr	r2, [r3, #0]
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	429a      	cmp	r2, r3
 800765a:	d116      	bne.n	800768a <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800765c:	4a1f      	ldr	r2, [pc, #124]	@ (80076dc <chk_lock+0xb4>)
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	011b      	lsls	r3, r3, #4
 8007662:	4413      	add	r3, r2
 8007664:	3304      	adds	r3, #4
 8007666:	681a      	ldr	r2, [r3, #0]
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800766c:	429a      	cmp	r2, r3
 800766e:	d10c      	bne.n	800768a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8007670:	4a1a      	ldr	r2, [pc, #104]	@ (80076dc <chk_lock+0xb4>)
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	011b      	lsls	r3, r3, #4
 8007676:	4413      	add	r3, r2
 8007678:	3308      	adds	r3, #8
 800767a:	681a      	ldr	r2, [r3, #0]
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8007680:	429a      	cmp	r2, r3
 8007682:	d102      	bne.n	800768a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8007684:	e007      	b.n	8007696 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8007686:	2301      	movs	r3, #1
 8007688:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	3301      	adds	r3, #1
 800768e:	60fb      	str	r3, [r7, #12]
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	2b02      	cmp	r3, #2
 8007694:	d9d2      	bls.n	800763c <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	2b03      	cmp	r3, #3
 800769a:	d109      	bne.n	80076b0 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800769c:	68bb      	ldr	r3, [r7, #8]
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d102      	bne.n	80076a8 <chk_lock+0x80>
 80076a2:	683b      	ldr	r3, [r7, #0]
 80076a4:	2b02      	cmp	r3, #2
 80076a6:	d101      	bne.n	80076ac <chk_lock+0x84>
 80076a8:	2300      	movs	r3, #0
 80076aa:	e010      	b.n	80076ce <chk_lock+0xa6>
 80076ac:	2312      	movs	r3, #18
 80076ae:	e00e      	b.n	80076ce <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 80076b0:	683b      	ldr	r3, [r7, #0]
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d108      	bne.n	80076c8 <chk_lock+0xa0>
 80076b6:	4a09      	ldr	r2, [pc, #36]	@ (80076dc <chk_lock+0xb4>)
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	011b      	lsls	r3, r3, #4
 80076bc:	4413      	add	r3, r2
 80076be:	330c      	adds	r3, #12
 80076c0:	881b      	ldrh	r3, [r3, #0]
 80076c2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80076c6:	d101      	bne.n	80076cc <chk_lock+0xa4>
 80076c8:	2310      	movs	r3, #16
 80076ca:	e000      	b.n	80076ce <chk_lock+0xa6>
 80076cc:	2300      	movs	r3, #0
}
 80076ce:	4618      	mov	r0, r3
 80076d0:	3714      	adds	r7, #20
 80076d2:	46bd      	mov	sp, r7
 80076d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076d8:	4770      	bx	lr
 80076da:	bf00      	nop
 80076dc:	20000f74 	.word	0x20000f74

080076e0 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 80076e0:	b480      	push	{r7}
 80076e2:	b083      	sub	sp, #12
 80076e4:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80076e6:	2300      	movs	r3, #0
 80076e8:	607b      	str	r3, [r7, #4]
 80076ea:	e002      	b.n	80076f2 <enq_lock+0x12>
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	3301      	adds	r3, #1
 80076f0:	607b      	str	r3, [r7, #4]
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	2b02      	cmp	r3, #2
 80076f6:	d806      	bhi.n	8007706 <enq_lock+0x26>
 80076f8:	4a09      	ldr	r2, [pc, #36]	@ (8007720 <enq_lock+0x40>)
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	011b      	lsls	r3, r3, #4
 80076fe:	4413      	add	r3, r2
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	2b00      	cmp	r3, #0
 8007704:	d1f2      	bne.n	80076ec <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	2b03      	cmp	r3, #3
 800770a:	bf14      	ite	ne
 800770c:	2301      	movne	r3, #1
 800770e:	2300      	moveq	r3, #0
 8007710:	b2db      	uxtb	r3, r3
}
 8007712:	4618      	mov	r0, r3
 8007714:	370c      	adds	r7, #12
 8007716:	46bd      	mov	sp, r7
 8007718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800771c:	4770      	bx	lr
 800771e:	bf00      	nop
 8007720:	20000f74 	.word	0x20000f74

08007724 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8007724:	b480      	push	{r7}
 8007726:	b085      	sub	sp, #20
 8007728:	af00      	add	r7, sp, #0
 800772a:	6078      	str	r0, [r7, #4]
 800772c:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800772e:	2300      	movs	r3, #0
 8007730:	60fb      	str	r3, [r7, #12]
 8007732:	e01f      	b.n	8007774 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8007734:	4a41      	ldr	r2, [pc, #260]	@ (800783c <inc_lock+0x118>)
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	011b      	lsls	r3, r3, #4
 800773a:	4413      	add	r3, r2
 800773c:	681a      	ldr	r2, [r3, #0]
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	429a      	cmp	r2, r3
 8007744:	d113      	bne.n	800776e <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8007746:	4a3d      	ldr	r2, [pc, #244]	@ (800783c <inc_lock+0x118>)
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	011b      	lsls	r3, r3, #4
 800774c:	4413      	add	r3, r2
 800774e:	3304      	adds	r3, #4
 8007750:	681a      	ldr	r2, [r3, #0]
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8007756:	429a      	cmp	r2, r3
 8007758:	d109      	bne.n	800776e <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800775a:	4a38      	ldr	r2, [pc, #224]	@ (800783c <inc_lock+0x118>)
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	011b      	lsls	r3, r3, #4
 8007760:	4413      	add	r3, r2
 8007762:	3308      	adds	r3, #8
 8007764:	681a      	ldr	r2, [r3, #0]
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800776a:	429a      	cmp	r2, r3
 800776c:	d006      	beq.n	800777c <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	3301      	adds	r3, #1
 8007772:	60fb      	str	r3, [r7, #12]
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	2b02      	cmp	r3, #2
 8007778:	d9dc      	bls.n	8007734 <inc_lock+0x10>
 800777a:	e000      	b.n	800777e <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800777c:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	2b03      	cmp	r3, #3
 8007782:	d132      	bne.n	80077ea <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8007784:	2300      	movs	r3, #0
 8007786:	60fb      	str	r3, [r7, #12]
 8007788:	e002      	b.n	8007790 <inc_lock+0x6c>
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	3301      	adds	r3, #1
 800778e:	60fb      	str	r3, [r7, #12]
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	2b02      	cmp	r3, #2
 8007794:	d806      	bhi.n	80077a4 <inc_lock+0x80>
 8007796:	4a29      	ldr	r2, [pc, #164]	@ (800783c <inc_lock+0x118>)
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	011b      	lsls	r3, r3, #4
 800779c:	4413      	add	r3, r2
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d1f2      	bne.n	800778a <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	2b03      	cmp	r3, #3
 80077a8:	d101      	bne.n	80077ae <inc_lock+0x8a>
 80077aa:	2300      	movs	r3, #0
 80077ac:	e040      	b.n	8007830 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	681a      	ldr	r2, [r3, #0]
 80077b2:	4922      	ldr	r1, [pc, #136]	@ (800783c <inc_lock+0x118>)
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	011b      	lsls	r3, r3, #4
 80077b8:	440b      	add	r3, r1
 80077ba:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	689a      	ldr	r2, [r3, #8]
 80077c0:	491e      	ldr	r1, [pc, #120]	@ (800783c <inc_lock+0x118>)
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	011b      	lsls	r3, r3, #4
 80077c6:	440b      	add	r3, r1
 80077c8:	3304      	adds	r3, #4
 80077ca:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	695a      	ldr	r2, [r3, #20]
 80077d0:	491a      	ldr	r1, [pc, #104]	@ (800783c <inc_lock+0x118>)
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	011b      	lsls	r3, r3, #4
 80077d6:	440b      	add	r3, r1
 80077d8:	3308      	adds	r3, #8
 80077da:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 80077dc:	4a17      	ldr	r2, [pc, #92]	@ (800783c <inc_lock+0x118>)
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	011b      	lsls	r3, r3, #4
 80077e2:	4413      	add	r3, r2
 80077e4:	330c      	adds	r3, #12
 80077e6:	2200      	movs	r2, #0
 80077e8:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 80077ea:	683b      	ldr	r3, [r7, #0]
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d009      	beq.n	8007804 <inc_lock+0xe0>
 80077f0:	4a12      	ldr	r2, [pc, #72]	@ (800783c <inc_lock+0x118>)
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	011b      	lsls	r3, r3, #4
 80077f6:	4413      	add	r3, r2
 80077f8:	330c      	adds	r3, #12
 80077fa:	881b      	ldrh	r3, [r3, #0]
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d001      	beq.n	8007804 <inc_lock+0xe0>
 8007800:	2300      	movs	r3, #0
 8007802:	e015      	b.n	8007830 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8007804:	683b      	ldr	r3, [r7, #0]
 8007806:	2b00      	cmp	r3, #0
 8007808:	d108      	bne.n	800781c <inc_lock+0xf8>
 800780a:	4a0c      	ldr	r2, [pc, #48]	@ (800783c <inc_lock+0x118>)
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	011b      	lsls	r3, r3, #4
 8007810:	4413      	add	r3, r2
 8007812:	330c      	adds	r3, #12
 8007814:	881b      	ldrh	r3, [r3, #0]
 8007816:	3301      	adds	r3, #1
 8007818:	b29a      	uxth	r2, r3
 800781a:	e001      	b.n	8007820 <inc_lock+0xfc>
 800781c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007820:	4906      	ldr	r1, [pc, #24]	@ (800783c <inc_lock+0x118>)
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	011b      	lsls	r3, r3, #4
 8007826:	440b      	add	r3, r1
 8007828:	330c      	adds	r3, #12
 800782a:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	3301      	adds	r3, #1
}
 8007830:	4618      	mov	r0, r3
 8007832:	3714      	adds	r7, #20
 8007834:	46bd      	mov	sp, r7
 8007836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800783a:	4770      	bx	lr
 800783c:	20000f74 	.word	0x20000f74

08007840 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8007840:	b480      	push	{r7}
 8007842:	b085      	sub	sp, #20
 8007844:	af00      	add	r7, sp, #0
 8007846:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	3b01      	subs	r3, #1
 800784c:	607b      	str	r3, [r7, #4]
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	2b02      	cmp	r3, #2
 8007852:	d825      	bhi.n	80078a0 <dec_lock+0x60>
		n = Files[i].ctr;
 8007854:	4a17      	ldr	r2, [pc, #92]	@ (80078b4 <dec_lock+0x74>)
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	011b      	lsls	r3, r3, #4
 800785a:	4413      	add	r3, r2
 800785c:	330c      	adds	r3, #12
 800785e:	881b      	ldrh	r3, [r3, #0]
 8007860:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8007862:	89fb      	ldrh	r3, [r7, #14]
 8007864:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007868:	d101      	bne.n	800786e <dec_lock+0x2e>
 800786a:	2300      	movs	r3, #0
 800786c:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800786e:	89fb      	ldrh	r3, [r7, #14]
 8007870:	2b00      	cmp	r3, #0
 8007872:	d002      	beq.n	800787a <dec_lock+0x3a>
 8007874:	89fb      	ldrh	r3, [r7, #14]
 8007876:	3b01      	subs	r3, #1
 8007878:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800787a:	4a0e      	ldr	r2, [pc, #56]	@ (80078b4 <dec_lock+0x74>)
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	011b      	lsls	r3, r3, #4
 8007880:	4413      	add	r3, r2
 8007882:	330c      	adds	r3, #12
 8007884:	89fa      	ldrh	r2, [r7, #14]
 8007886:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8007888:	89fb      	ldrh	r3, [r7, #14]
 800788a:	2b00      	cmp	r3, #0
 800788c:	d105      	bne.n	800789a <dec_lock+0x5a>
 800788e:	4a09      	ldr	r2, [pc, #36]	@ (80078b4 <dec_lock+0x74>)
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	011b      	lsls	r3, r3, #4
 8007894:	4413      	add	r3, r2
 8007896:	2200      	movs	r2, #0
 8007898:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800789a:	2300      	movs	r3, #0
 800789c:	737b      	strb	r3, [r7, #13]
 800789e:	e001      	b.n	80078a4 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 80078a0:	2302      	movs	r3, #2
 80078a2:	737b      	strb	r3, [r7, #13]
	}
	return res;
 80078a4:	7b7b      	ldrb	r3, [r7, #13]
}
 80078a6:	4618      	mov	r0, r3
 80078a8:	3714      	adds	r7, #20
 80078aa:	46bd      	mov	sp, r7
 80078ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078b0:	4770      	bx	lr
 80078b2:	bf00      	nop
 80078b4:	20000f74 	.word	0x20000f74

080078b8 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 80078b8:	b480      	push	{r7}
 80078ba:	b085      	sub	sp, #20
 80078bc:	af00      	add	r7, sp, #0
 80078be:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 80078c0:	2300      	movs	r3, #0
 80078c2:	60fb      	str	r3, [r7, #12]
 80078c4:	e010      	b.n	80078e8 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 80078c6:	4a0d      	ldr	r2, [pc, #52]	@ (80078fc <clear_lock+0x44>)
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	011b      	lsls	r3, r3, #4
 80078cc:	4413      	add	r3, r2
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	687a      	ldr	r2, [r7, #4]
 80078d2:	429a      	cmp	r2, r3
 80078d4:	d105      	bne.n	80078e2 <clear_lock+0x2a>
 80078d6:	4a09      	ldr	r2, [pc, #36]	@ (80078fc <clear_lock+0x44>)
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	011b      	lsls	r3, r3, #4
 80078dc:	4413      	add	r3, r2
 80078de:	2200      	movs	r2, #0
 80078e0:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	3301      	adds	r3, #1
 80078e6:	60fb      	str	r3, [r7, #12]
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	2b02      	cmp	r3, #2
 80078ec:	d9eb      	bls.n	80078c6 <clear_lock+0xe>
	}
}
 80078ee:	bf00      	nop
 80078f0:	bf00      	nop
 80078f2:	3714      	adds	r7, #20
 80078f4:	46bd      	mov	sp, r7
 80078f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078fa:	4770      	bx	lr
 80078fc:	20000f74 	.word	0x20000f74

08007900 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8007900:	b580      	push	{r7, lr}
 8007902:	b086      	sub	sp, #24
 8007904:	af00      	add	r7, sp, #0
 8007906:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8007908:	2300      	movs	r3, #0
 800790a:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	78db      	ldrb	r3, [r3, #3]
 8007910:	2b00      	cmp	r3, #0
 8007912:	d034      	beq.n	800797e <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007918:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	7858      	ldrb	r0, [r3, #1]
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8007924:	2301      	movs	r3, #1
 8007926:	697a      	ldr	r2, [r7, #20]
 8007928:	f7ff fd40 	bl	80073ac <disk_write>
 800792c:	4603      	mov	r3, r0
 800792e:	2b00      	cmp	r3, #0
 8007930:	d002      	beq.n	8007938 <sync_window+0x38>
			res = FR_DISK_ERR;
 8007932:	2301      	movs	r3, #1
 8007934:	73fb      	strb	r3, [r7, #15]
 8007936:	e022      	b.n	800797e <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	2200      	movs	r2, #0
 800793c:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007942:	697a      	ldr	r2, [r7, #20]
 8007944:	1ad2      	subs	r2, r2, r3
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	69db      	ldr	r3, [r3, #28]
 800794a:	429a      	cmp	r2, r3
 800794c:	d217      	bcs.n	800797e <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	789b      	ldrb	r3, [r3, #2]
 8007952:	613b      	str	r3, [r7, #16]
 8007954:	e010      	b.n	8007978 <sync_window+0x78>
					wsect += fs->fsize;
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	69db      	ldr	r3, [r3, #28]
 800795a:	697a      	ldr	r2, [r7, #20]
 800795c:	4413      	add	r3, r2
 800795e:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	7858      	ldrb	r0, [r3, #1]
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800796a:	2301      	movs	r3, #1
 800796c:	697a      	ldr	r2, [r7, #20]
 800796e:	f7ff fd1d 	bl	80073ac <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8007972:	693b      	ldr	r3, [r7, #16]
 8007974:	3b01      	subs	r3, #1
 8007976:	613b      	str	r3, [r7, #16]
 8007978:	693b      	ldr	r3, [r7, #16]
 800797a:	2b01      	cmp	r3, #1
 800797c:	d8eb      	bhi.n	8007956 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800797e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007980:	4618      	mov	r0, r3
 8007982:	3718      	adds	r7, #24
 8007984:	46bd      	mov	sp, r7
 8007986:	bd80      	pop	{r7, pc}

08007988 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8007988:	b580      	push	{r7, lr}
 800798a:	b084      	sub	sp, #16
 800798c:	af00      	add	r7, sp, #0
 800798e:	6078      	str	r0, [r7, #4]
 8007990:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8007992:	2300      	movs	r3, #0
 8007994:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800799a:	683a      	ldr	r2, [r7, #0]
 800799c:	429a      	cmp	r2, r3
 800799e:	d01b      	beq.n	80079d8 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 80079a0:	6878      	ldr	r0, [r7, #4]
 80079a2:	f7ff ffad 	bl	8007900 <sync_window>
 80079a6:	4603      	mov	r3, r0
 80079a8:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 80079aa:	7bfb      	ldrb	r3, [r7, #15]
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d113      	bne.n	80079d8 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	7858      	ldrb	r0, [r3, #1]
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 80079ba:	2301      	movs	r3, #1
 80079bc:	683a      	ldr	r2, [r7, #0]
 80079be:	f7ff fcd5 	bl	800736c <disk_read>
 80079c2:	4603      	mov	r3, r0
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d004      	beq.n	80079d2 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 80079c8:	f04f 33ff 	mov.w	r3, #4294967295
 80079cc:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 80079ce:	2301      	movs	r3, #1
 80079d0:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	683a      	ldr	r2, [r7, #0]
 80079d6:	631a      	str	r2, [r3, #48]	@ 0x30
		}
	}
	return res;
 80079d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80079da:	4618      	mov	r0, r3
 80079dc:	3710      	adds	r7, #16
 80079de:	46bd      	mov	sp, r7
 80079e0:	bd80      	pop	{r7, pc}
	...

080079e4 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 80079e4:	b580      	push	{r7, lr}
 80079e6:	b084      	sub	sp, #16
 80079e8:	af00      	add	r7, sp, #0
 80079ea:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 80079ec:	6878      	ldr	r0, [r7, #4]
 80079ee:	f7ff ff87 	bl	8007900 <sync_window>
 80079f2:	4603      	mov	r3, r0
 80079f4:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80079f6:	7bfb      	ldrb	r3, [r7, #15]
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d158      	bne.n	8007aae <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	781b      	ldrb	r3, [r3, #0]
 8007a00:	2b03      	cmp	r3, #3
 8007a02:	d148      	bne.n	8007a96 <sync_fs+0xb2>
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	791b      	ldrb	r3, [r3, #4]
 8007a08:	2b01      	cmp	r3, #1
 8007a0a:	d144      	bne.n	8007a96 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	3334      	adds	r3, #52	@ 0x34
 8007a10:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007a14:	2100      	movs	r1, #0
 8007a16:	4618      	mov	r0, r3
 8007a18:	f7ff fda9 	bl	800756e <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	3334      	adds	r3, #52	@ 0x34
 8007a20:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8007a24:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 8007a28:	4618      	mov	r0, r3
 8007a2a:	f7ff fd38 	bl	800749e <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	3334      	adds	r3, #52	@ 0x34
 8007a32:	4921      	ldr	r1, [pc, #132]	@ (8007ab8 <sync_fs+0xd4>)
 8007a34:	4618      	mov	r0, r3
 8007a36:	f7ff fd4d 	bl	80074d4 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	3334      	adds	r3, #52	@ 0x34
 8007a3e:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8007a42:	491e      	ldr	r1, [pc, #120]	@ (8007abc <sync_fs+0xd8>)
 8007a44:	4618      	mov	r0, r3
 8007a46:	f7ff fd45 	bl	80074d4 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	3334      	adds	r3, #52	@ 0x34
 8007a4e:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	695b      	ldr	r3, [r3, #20]
 8007a56:	4619      	mov	r1, r3
 8007a58:	4610      	mov	r0, r2
 8007a5a:	f7ff fd3b 	bl	80074d4 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	3334      	adds	r3, #52	@ 0x34
 8007a62:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	691b      	ldr	r3, [r3, #16]
 8007a6a:	4619      	mov	r1, r3
 8007a6c:	4610      	mov	r0, r2
 8007a6e:	f7ff fd31 	bl	80074d4 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	6a1b      	ldr	r3, [r3, #32]
 8007a76:	1c5a      	adds	r2, r3, #1
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	631a      	str	r2, [r3, #48]	@ 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	7858      	ldrb	r0, [r3, #1]
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007a8a:	2301      	movs	r3, #1
 8007a8c:	f7ff fc8e 	bl	80073ac <disk_write>
			fs->fsi_flag = 0;
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	2200      	movs	r2, #0
 8007a94:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	785b      	ldrb	r3, [r3, #1]
 8007a9a:	2200      	movs	r2, #0
 8007a9c:	2100      	movs	r1, #0
 8007a9e:	4618      	mov	r0, r3
 8007aa0:	f7ff fca4 	bl	80073ec <disk_ioctl>
 8007aa4:	4603      	mov	r3, r0
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d001      	beq.n	8007aae <sync_fs+0xca>
 8007aaa:	2301      	movs	r3, #1
 8007aac:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8007aae:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ab0:	4618      	mov	r0, r3
 8007ab2:	3710      	adds	r7, #16
 8007ab4:	46bd      	mov	sp, r7
 8007ab6:	bd80      	pop	{r7, pc}
 8007ab8:	41615252 	.word	0x41615252
 8007abc:	61417272 	.word	0x61417272

08007ac0 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8007ac0:	b480      	push	{r7}
 8007ac2:	b083      	sub	sp, #12
 8007ac4:	af00      	add	r7, sp, #0
 8007ac6:	6078      	str	r0, [r7, #4]
 8007ac8:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8007aca:	683b      	ldr	r3, [r7, #0]
 8007acc:	3b02      	subs	r3, #2
 8007ace:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	699b      	ldr	r3, [r3, #24]
 8007ad4:	3b02      	subs	r3, #2
 8007ad6:	683a      	ldr	r2, [r7, #0]
 8007ad8:	429a      	cmp	r2, r3
 8007ada:	d301      	bcc.n	8007ae0 <clust2sect+0x20>
 8007adc:	2300      	movs	r3, #0
 8007ade:	e008      	b.n	8007af2 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	895b      	ldrh	r3, [r3, #10]
 8007ae4:	461a      	mov	r2, r3
 8007ae6:	683b      	ldr	r3, [r7, #0]
 8007ae8:	fb03 f202 	mul.w	r2, r3, r2
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007af0:	4413      	add	r3, r2
}
 8007af2:	4618      	mov	r0, r3
 8007af4:	370c      	adds	r7, #12
 8007af6:	46bd      	mov	sp, r7
 8007af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007afc:	4770      	bx	lr

08007afe <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8007afe:	b580      	push	{r7, lr}
 8007b00:	b086      	sub	sp, #24
 8007b02:	af00      	add	r7, sp, #0
 8007b04:	6078      	str	r0, [r7, #4]
 8007b06:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8007b0e:	683b      	ldr	r3, [r7, #0]
 8007b10:	2b01      	cmp	r3, #1
 8007b12:	d904      	bls.n	8007b1e <get_fat+0x20>
 8007b14:	693b      	ldr	r3, [r7, #16]
 8007b16:	699b      	ldr	r3, [r3, #24]
 8007b18:	683a      	ldr	r2, [r7, #0]
 8007b1a:	429a      	cmp	r2, r3
 8007b1c:	d302      	bcc.n	8007b24 <get_fat+0x26>
		val = 1;	/* Internal error */
 8007b1e:	2301      	movs	r3, #1
 8007b20:	617b      	str	r3, [r7, #20]
 8007b22:	e08e      	b.n	8007c42 <get_fat+0x144>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8007b24:	f04f 33ff 	mov.w	r3, #4294967295
 8007b28:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8007b2a:	693b      	ldr	r3, [r7, #16]
 8007b2c:	781b      	ldrb	r3, [r3, #0]
 8007b2e:	2b03      	cmp	r3, #3
 8007b30:	d061      	beq.n	8007bf6 <get_fat+0xf8>
 8007b32:	2b03      	cmp	r3, #3
 8007b34:	dc7b      	bgt.n	8007c2e <get_fat+0x130>
 8007b36:	2b01      	cmp	r3, #1
 8007b38:	d002      	beq.n	8007b40 <get_fat+0x42>
 8007b3a:	2b02      	cmp	r3, #2
 8007b3c:	d041      	beq.n	8007bc2 <get_fat+0xc4>
 8007b3e:	e076      	b.n	8007c2e <get_fat+0x130>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8007b40:	683b      	ldr	r3, [r7, #0]
 8007b42:	60fb      	str	r3, [r7, #12]
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	085b      	lsrs	r3, r3, #1
 8007b48:	68fa      	ldr	r2, [r7, #12]
 8007b4a:	4413      	add	r3, r2
 8007b4c:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007b4e:	693b      	ldr	r3, [r7, #16]
 8007b50:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	0a5b      	lsrs	r3, r3, #9
 8007b56:	4413      	add	r3, r2
 8007b58:	4619      	mov	r1, r3
 8007b5a:	6938      	ldr	r0, [r7, #16]
 8007b5c:	f7ff ff14 	bl	8007988 <move_window>
 8007b60:	4603      	mov	r3, r0
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d166      	bne.n	8007c34 <get_fat+0x136>
			wc = fs->win[bc++ % SS(fs)];
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	1c5a      	adds	r2, r3, #1
 8007b6a:	60fa      	str	r2, [r7, #12]
 8007b6c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007b70:	693a      	ldr	r2, [r7, #16]
 8007b72:	4413      	add	r3, r2
 8007b74:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8007b78:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007b7a:	693b      	ldr	r3, [r7, #16]
 8007b7c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	0a5b      	lsrs	r3, r3, #9
 8007b82:	4413      	add	r3, r2
 8007b84:	4619      	mov	r1, r3
 8007b86:	6938      	ldr	r0, [r7, #16]
 8007b88:	f7ff fefe 	bl	8007988 <move_window>
 8007b8c:	4603      	mov	r3, r0
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d152      	bne.n	8007c38 <get_fat+0x13a>
			wc |= fs->win[bc % SS(fs)] << 8;
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007b98:	693a      	ldr	r2, [r7, #16]
 8007b9a:	4413      	add	r3, r2
 8007b9c:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8007ba0:	021b      	lsls	r3, r3, #8
 8007ba2:	68ba      	ldr	r2, [r7, #8]
 8007ba4:	4313      	orrs	r3, r2
 8007ba6:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8007ba8:	683b      	ldr	r3, [r7, #0]
 8007baa:	f003 0301 	and.w	r3, r3, #1
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d002      	beq.n	8007bb8 <get_fat+0xba>
 8007bb2:	68bb      	ldr	r3, [r7, #8]
 8007bb4:	091b      	lsrs	r3, r3, #4
 8007bb6:	e002      	b.n	8007bbe <get_fat+0xc0>
 8007bb8:	68bb      	ldr	r3, [r7, #8]
 8007bba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007bbe:	617b      	str	r3, [r7, #20]
			break;
 8007bc0:	e03f      	b.n	8007c42 <get_fat+0x144>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8007bc2:	693b      	ldr	r3, [r7, #16]
 8007bc4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007bc6:	683b      	ldr	r3, [r7, #0]
 8007bc8:	0a1b      	lsrs	r3, r3, #8
 8007bca:	4413      	add	r3, r2
 8007bcc:	4619      	mov	r1, r3
 8007bce:	6938      	ldr	r0, [r7, #16]
 8007bd0:	f7ff feda 	bl	8007988 <move_window>
 8007bd4:	4603      	mov	r3, r0
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d130      	bne.n	8007c3c <get_fat+0x13e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8007bda:	693b      	ldr	r3, [r7, #16]
 8007bdc:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8007be0:	683b      	ldr	r3, [r7, #0]
 8007be2:	005b      	lsls	r3, r3, #1
 8007be4:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 8007be8:	4413      	add	r3, r2
 8007bea:	4618      	mov	r0, r3
 8007bec:	f7ff fc1c 	bl	8007428 <ld_word>
 8007bf0:	4603      	mov	r3, r0
 8007bf2:	617b      	str	r3, [r7, #20]
			break;
 8007bf4:	e025      	b.n	8007c42 <get_fat+0x144>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8007bf6:	693b      	ldr	r3, [r7, #16]
 8007bf8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007bfa:	683b      	ldr	r3, [r7, #0]
 8007bfc:	09db      	lsrs	r3, r3, #7
 8007bfe:	4413      	add	r3, r2
 8007c00:	4619      	mov	r1, r3
 8007c02:	6938      	ldr	r0, [r7, #16]
 8007c04:	f7ff fec0 	bl	8007988 <move_window>
 8007c08:	4603      	mov	r3, r0
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d118      	bne.n	8007c40 <get_fat+0x142>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8007c0e:	693b      	ldr	r3, [r7, #16]
 8007c10:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8007c14:	683b      	ldr	r3, [r7, #0]
 8007c16:	009b      	lsls	r3, r3, #2
 8007c18:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8007c1c:	4413      	add	r3, r2
 8007c1e:	4618      	mov	r0, r3
 8007c20:	f7ff fc1a 	bl	8007458 <ld_dword>
 8007c24:	4603      	mov	r3, r0
 8007c26:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8007c2a:	617b      	str	r3, [r7, #20]
			break;
 8007c2c:	e009      	b.n	8007c42 <get_fat+0x144>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8007c2e:	2301      	movs	r3, #1
 8007c30:	617b      	str	r3, [r7, #20]
 8007c32:	e006      	b.n	8007c42 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007c34:	bf00      	nop
 8007c36:	e004      	b.n	8007c42 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007c38:	bf00      	nop
 8007c3a:	e002      	b.n	8007c42 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8007c3c:	bf00      	nop
 8007c3e:	e000      	b.n	8007c42 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8007c40:	bf00      	nop
		}
	}

	return val;
 8007c42:	697b      	ldr	r3, [r7, #20]
}
 8007c44:	4618      	mov	r0, r3
 8007c46:	3718      	adds	r7, #24
 8007c48:	46bd      	mov	sp, r7
 8007c4a:	bd80      	pop	{r7, pc}

08007c4c <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8007c4c:	b590      	push	{r4, r7, lr}
 8007c4e:	b089      	sub	sp, #36	@ 0x24
 8007c50:	af00      	add	r7, sp, #0
 8007c52:	60f8      	str	r0, [r7, #12]
 8007c54:	60b9      	str	r1, [r7, #8]
 8007c56:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8007c58:	2302      	movs	r3, #2
 8007c5a:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8007c5c:	68bb      	ldr	r3, [r7, #8]
 8007c5e:	2b01      	cmp	r3, #1
 8007c60:	f240 80d9 	bls.w	8007e16 <put_fat+0x1ca>
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	699b      	ldr	r3, [r3, #24]
 8007c68:	68ba      	ldr	r2, [r7, #8]
 8007c6a:	429a      	cmp	r2, r3
 8007c6c:	f080 80d3 	bcs.w	8007e16 <put_fat+0x1ca>
		switch (fs->fs_type) {
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	781b      	ldrb	r3, [r3, #0]
 8007c74:	2b03      	cmp	r3, #3
 8007c76:	f000 8096 	beq.w	8007da6 <put_fat+0x15a>
 8007c7a:	2b03      	cmp	r3, #3
 8007c7c:	f300 80cb 	bgt.w	8007e16 <put_fat+0x1ca>
 8007c80:	2b01      	cmp	r3, #1
 8007c82:	d002      	beq.n	8007c8a <put_fat+0x3e>
 8007c84:	2b02      	cmp	r3, #2
 8007c86:	d06e      	beq.n	8007d66 <put_fat+0x11a>
 8007c88:	e0c5      	b.n	8007e16 <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8007c8a:	68bb      	ldr	r3, [r7, #8]
 8007c8c:	61bb      	str	r3, [r7, #24]
 8007c8e:	69bb      	ldr	r3, [r7, #24]
 8007c90:	085b      	lsrs	r3, r3, #1
 8007c92:	69ba      	ldr	r2, [r7, #24]
 8007c94:	4413      	add	r3, r2
 8007c96:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007c9c:	69bb      	ldr	r3, [r7, #24]
 8007c9e:	0a5b      	lsrs	r3, r3, #9
 8007ca0:	4413      	add	r3, r2
 8007ca2:	4619      	mov	r1, r3
 8007ca4:	68f8      	ldr	r0, [r7, #12]
 8007ca6:	f7ff fe6f 	bl	8007988 <move_window>
 8007caa:	4603      	mov	r3, r0
 8007cac:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007cae:	7ffb      	ldrb	r3, [r7, #31]
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	f040 80a9 	bne.w	8007e08 <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8007cbc:	69bb      	ldr	r3, [r7, #24]
 8007cbe:	1c59      	adds	r1, r3, #1
 8007cc0:	61b9      	str	r1, [r7, #24]
 8007cc2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007cc6:	4413      	add	r3, r2
 8007cc8:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8007cca:	68bb      	ldr	r3, [r7, #8]
 8007ccc:	f003 0301 	and.w	r3, r3, #1
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d00d      	beq.n	8007cf0 <put_fat+0xa4>
 8007cd4:	697b      	ldr	r3, [r7, #20]
 8007cd6:	781b      	ldrb	r3, [r3, #0]
 8007cd8:	b25b      	sxtb	r3, r3
 8007cda:	f003 030f 	and.w	r3, r3, #15
 8007cde:	b25a      	sxtb	r2, r3
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	b2db      	uxtb	r3, r3
 8007ce4:	011b      	lsls	r3, r3, #4
 8007ce6:	b25b      	sxtb	r3, r3
 8007ce8:	4313      	orrs	r3, r2
 8007cea:	b25b      	sxtb	r3, r3
 8007cec:	b2db      	uxtb	r3, r3
 8007cee:	e001      	b.n	8007cf4 <put_fat+0xa8>
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	b2db      	uxtb	r3, r3
 8007cf4:	697a      	ldr	r2, [r7, #20]
 8007cf6:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	2201      	movs	r2, #1
 8007cfc:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007d02:	69bb      	ldr	r3, [r7, #24]
 8007d04:	0a5b      	lsrs	r3, r3, #9
 8007d06:	4413      	add	r3, r2
 8007d08:	4619      	mov	r1, r3
 8007d0a:	68f8      	ldr	r0, [r7, #12]
 8007d0c:	f7ff fe3c 	bl	8007988 <move_window>
 8007d10:	4603      	mov	r3, r0
 8007d12:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007d14:	7ffb      	ldrb	r3, [r7, #31]
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d178      	bne.n	8007e0c <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8007d20:	69bb      	ldr	r3, [r7, #24]
 8007d22:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007d26:	4413      	add	r3, r2
 8007d28:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8007d2a:	68bb      	ldr	r3, [r7, #8]
 8007d2c:	f003 0301 	and.w	r3, r3, #1
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d003      	beq.n	8007d3c <put_fat+0xf0>
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	091b      	lsrs	r3, r3, #4
 8007d38:	b2db      	uxtb	r3, r3
 8007d3a:	e00e      	b.n	8007d5a <put_fat+0x10e>
 8007d3c:	697b      	ldr	r3, [r7, #20]
 8007d3e:	781b      	ldrb	r3, [r3, #0]
 8007d40:	b25b      	sxtb	r3, r3
 8007d42:	f023 030f 	bic.w	r3, r3, #15
 8007d46:	b25a      	sxtb	r2, r3
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	0a1b      	lsrs	r3, r3, #8
 8007d4c:	b25b      	sxtb	r3, r3
 8007d4e:	f003 030f 	and.w	r3, r3, #15
 8007d52:	b25b      	sxtb	r3, r3
 8007d54:	4313      	orrs	r3, r2
 8007d56:	b25b      	sxtb	r3, r3
 8007d58:	b2db      	uxtb	r3, r3
 8007d5a:	697a      	ldr	r2, [r7, #20]
 8007d5c:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	2201      	movs	r2, #1
 8007d62:	70da      	strb	r2, [r3, #3]
			break;
 8007d64:	e057      	b.n	8007e16 <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007d6a:	68bb      	ldr	r3, [r7, #8]
 8007d6c:	0a1b      	lsrs	r3, r3, #8
 8007d6e:	4413      	add	r3, r2
 8007d70:	4619      	mov	r1, r3
 8007d72:	68f8      	ldr	r0, [r7, #12]
 8007d74:	f7ff fe08 	bl	8007988 <move_window>
 8007d78:	4603      	mov	r3, r0
 8007d7a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007d7c:	7ffb      	ldrb	r3, [r7, #31]
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d146      	bne.n	8007e10 <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8007d88:	68bb      	ldr	r3, [r7, #8]
 8007d8a:	005b      	lsls	r3, r3, #1
 8007d8c:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 8007d90:	4413      	add	r3, r2
 8007d92:	687a      	ldr	r2, [r7, #4]
 8007d94:	b292      	uxth	r2, r2
 8007d96:	4611      	mov	r1, r2
 8007d98:	4618      	mov	r0, r3
 8007d9a:	f7ff fb80 	bl	800749e <st_word>
			fs->wflag = 1;
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	2201      	movs	r2, #1
 8007da2:	70da      	strb	r2, [r3, #3]
			break;
 8007da4:	e037      	b.n	8007e16 <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007daa:	68bb      	ldr	r3, [r7, #8]
 8007dac:	09db      	lsrs	r3, r3, #7
 8007dae:	4413      	add	r3, r2
 8007db0:	4619      	mov	r1, r3
 8007db2:	68f8      	ldr	r0, [r7, #12]
 8007db4:	f7ff fde8 	bl	8007988 <move_window>
 8007db8:	4603      	mov	r3, r0
 8007dba:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007dbc:	7ffb      	ldrb	r3, [r7, #31]
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d128      	bne.n	8007e14 <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8007dce:	68bb      	ldr	r3, [r7, #8]
 8007dd0:	009b      	lsls	r3, r3, #2
 8007dd2:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8007dd6:	4413      	add	r3, r2
 8007dd8:	4618      	mov	r0, r3
 8007dda:	f7ff fb3d 	bl	8007458 <ld_dword>
 8007dde:	4603      	mov	r3, r0
 8007de0:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8007de4:	4323      	orrs	r3, r4
 8007de6:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8007dee:	68bb      	ldr	r3, [r7, #8]
 8007df0:	009b      	lsls	r3, r3, #2
 8007df2:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8007df6:	4413      	add	r3, r2
 8007df8:	6879      	ldr	r1, [r7, #4]
 8007dfa:	4618      	mov	r0, r3
 8007dfc:	f7ff fb6a 	bl	80074d4 <st_dword>
			fs->wflag = 1;
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	2201      	movs	r2, #1
 8007e04:	70da      	strb	r2, [r3, #3]
			break;
 8007e06:	e006      	b.n	8007e16 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8007e08:	bf00      	nop
 8007e0a:	e004      	b.n	8007e16 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8007e0c:	bf00      	nop
 8007e0e:	e002      	b.n	8007e16 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8007e10:	bf00      	nop
 8007e12:	e000      	b.n	8007e16 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8007e14:	bf00      	nop
		}
	}
	return res;
 8007e16:	7ffb      	ldrb	r3, [r7, #31]
}
 8007e18:	4618      	mov	r0, r3
 8007e1a:	3724      	adds	r7, #36	@ 0x24
 8007e1c:	46bd      	mov	sp, r7
 8007e1e:	bd90      	pop	{r4, r7, pc}

08007e20 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8007e20:	b580      	push	{r7, lr}
 8007e22:	b088      	sub	sp, #32
 8007e24:	af00      	add	r7, sp, #0
 8007e26:	60f8      	str	r0, [r7, #12]
 8007e28:	60b9      	str	r1, [r7, #8]
 8007e2a:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8007e2c:	2300      	movs	r3, #0
 8007e2e:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8007e36:	68bb      	ldr	r3, [r7, #8]
 8007e38:	2b01      	cmp	r3, #1
 8007e3a:	d904      	bls.n	8007e46 <remove_chain+0x26>
 8007e3c:	69bb      	ldr	r3, [r7, #24]
 8007e3e:	699b      	ldr	r3, [r3, #24]
 8007e40:	68ba      	ldr	r2, [r7, #8]
 8007e42:	429a      	cmp	r2, r3
 8007e44:	d301      	bcc.n	8007e4a <remove_chain+0x2a>
 8007e46:	2302      	movs	r3, #2
 8007e48:	e04b      	b.n	8007ee2 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	d00c      	beq.n	8007e6a <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8007e50:	f04f 32ff 	mov.w	r2, #4294967295
 8007e54:	6879      	ldr	r1, [r7, #4]
 8007e56:	69b8      	ldr	r0, [r7, #24]
 8007e58:	f7ff fef8 	bl	8007c4c <put_fat>
 8007e5c:	4603      	mov	r3, r0
 8007e5e:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8007e60:	7ffb      	ldrb	r3, [r7, #31]
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	d001      	beq.n	8007e6a <remove_chain+0x4a>
 8007e66:	7ffb      	ldrb	r3, [r7, #31]
 8007e68:	e03b      	b.n	8007ee2 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8007e6a:	68b9      	ldr	r1, [r7, #8]
 8007e6c:	68f8      	ldr	r0, [r7, #12]
 8007e6e:	f7ff fe46 	bl	8007afe <get_fat>
 8007e72:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8007e74:	697b      	ldr	r3, [r7, #20]
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	d031      	beq.n	8007ede <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8007e7a:	697b      	ldr	r3, [r7, #20]
 8007e7c:	2b01      	cmp	r3, #1
 8007e7e:	d101      	bne.n	8007e84 <remove_chain+0x64>
 8007e80:	2302      	movs	r3, #2
 8007e82:	e02e      	b.n	8007ee2 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8007e84:	697b      	ldr	r3, [r7, #20]
 8007e86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e8a:	d101      	bne.n	8007e90 <remove_chain+0x70>
 8007e8c:	2301      	movs	r3, #1
 8007e8e:	e028      	b.n	8007ee2 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8007e90:	2200      	movs	r2, #0
 8007e92:	68b9      	ldr	r1, [r7, #8]
 8007e94:	69b8      	ldr	r0, [r7, #24]
 8007e96:	f7ff fed9 	bl	8007c4c <put_fat>
 8007e9a:	4603      	mov	r3, r0
 8007e9c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8007e9e:	7ffb      	ldrb	r3, [r7, #31]
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	d001      	beq.n	8007ea8 <remove_chain+0x88>
 8007ea4:	7ffb      	ldrb	r3, [r7, #31]
 8007ea6:	e01c      	b.n	8007ee2 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8007ea8:	69bb      	ldr	r3, [r7, #24]
 8007eaa:	695a      	ldr	r2, [r3, #20]
 8007eac:	69bb      	ldr	r3, [r7, #24]
 8007eae:	699b      	ldr	r3, [r3, #24]
 8007eb0:	3b02      	subs	r3, #2
 8007eb2:	429a      	cmp	r2, r3
 8007eb4:	d20b      	bcs.n	8007ece <remove_chain+0xae>
			fs->free_clst++;
 8007eb6:	69bb      	ldr	r3, [r7, #24]
 8007eb8:	695b      	ldr	r3, [r3, #20]
 8007eba:	1c5a      	adds	r2, r3, #1
 8007ebc:	69bb      	ldr	r3, [r7, #24]
 8007ebe:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 8007ec0:	69bb      	ldr	r3, [r7, #24]
 8007ec2:	791b      	ldrb	r3, [r3, #4]
 8007ec4:	f043 0301 	orr.w	r3, r3, #1
 8007ec8:	b2da      	uxtb	r2, r3
 8007eca:	69bb      	ldr	r3, [r7, #24]
 8007ecc:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8007ece:	697b      	ldr	r3, [r7, #20]
 8007ed0:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8007ed2:	69bb      	ldr	r3, [r7, #24]
 8007ed4:	699b      	ldr	r3, [r3, #24]
 8007ed6:	68ba      	ldr	r2, [r7, #8]
 8007ed8:	429a      	cmp	r2, r3
 8007eda:	d3c6      	bcc.n	8007e6a <remove_chain+0x4a>
 8007edc:	e000      	b.n	8007ee0 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8007ede:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8007ee0:	2300      	movs	r3, #0
}
 8007ee2:	4618      	mov	r0, r3
 8007ee4:	3720      	adds	r7, #32
 8007ee6:	46bd      	mov	sp, r7
 8007ee8:	bd80      	pop	{r7, pc}

08007eea <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8007eea:	b580      	push	{r7, lr}
 8007eec:	b088      	sub	sp, #32
 8007eee:	af00      	add	r7, sp, #0
 8007ef0:	6078      	str	r0, [r7, #4]
 8007ef2:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8007efa:	683b      	ldr	r3, [r7, #0]
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d10d      	bne.n	8007f1c <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8007f00:	693b      	ldr	r3, [r7, #16]
 8007f02:	691b      	ldr	r3, [r3, #16]
 8007f04:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8007f06:	69bb      	ldr	r3, [r7, #24]
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d004      	beq.n	8007f16 <create_chain+0x2c>
 8007f0c:	693b      	ldr	r3, [r7, #16]
 8007f0e:	699b      	ldr	r3, [r3, #24]
 8007f10:	69ba      	ldr	r2, [r7, #24]
 8007f12:	429a      	cmp	r2, r3
 8007f14:	d31b      	bcc.n	8007f4e <create_chain+0x64>
 8007f16:	2301      	movs	r3, #1
 8007f18:	61bb      	str	r3, [r7, #24]
 8007f1a:	e018      	b.n	8007f4e <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8007f1c:	6839      	ldr	r1, [r7, #0]
 8007f1e:	6878      	ldr	r0, [r7, #4]
 8007f20:	f7ff fded 	bl	8007afe <get_fat>
 8007f24:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	2b01      	cmp	r3, #1
 8007f2a:	d801      	bhi.n	8007f30 <create_chain+0x46>
 8007f2c:	2301      	movs	r3, #1
 8007f2e:	e070      	b.n	8008012 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f36:	d101      	bne.n	8007f3c <create_chain+0x52>
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	e06a      	b.n	8008012 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8007f3c:	693b      	ldr	r3, [r7, #16]
 8007f3e:	699b      	ldr	r3, [r3, #24]
 8007f40:	68fa      	ldr	r2, [r7, #12]
 8007f42:	429a      	cmp	r2, r3
 8007f44:	d201      	bcs.n	8007f4a <create_chain+0x60>
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	e063      	b.n	8008012 <create_chain+0x128>
		scl = clst;
 8007f4a:	683b      	ldr	r3, [r7, #0]
 8007f4c:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8007f4e:	69bb      	ldr	r3, [r7, #24]
 8007f50:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8007f52:	69fb      	ldr	r3, [r7, #28]
 8007f54:	3301      	adds	r3, #1
 8007f56:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8007f58:	693b      	ldr	r3, [r7, #16]
 8007f5a:	699b      	ldr	r3, [r3, #24]
 8007f5c:	69fa      	ldr	r2, [r7, #28]
 8007f5e:	429a      	cmp	r2, r3
 8007f60:	d307      	bcc.n	8007f72 <create_chain+0x88>
				ncl = 2;
 8007f62:	2302      	movs	r3, #2
 8007f64:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8007f66:	69fa      	ldr	r2, [r7, #28]
 8007f68:	69bb      	ldr	r3, [r7, #24]
 8007f6a:	429a      	cmp	r2, r3
 8007f6c:	d901      	bls.n	8007f72 <create_chain+0x88>
 8007f6e:	2300      	movs	r3, #0
 8007f70:	e04f      	b.n	8008012 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8007f72:	69f9      	ldr	r1, [r7, #28]
 8007f74:	6878      	ldr	r0, [r7, #4]
 8007f76:	f7ff fdc2 	bl	8007afe <get_fat>
 8007f7a:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d00e      	beq.n	8007fa0 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	2b01      	cmp	r3, #1
 8007f86:	d003      	beq.n	8007f90 <create_chain+0xa6>
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f8e:	d101      	bne.n	8007f94 <create_chain+0xaa>
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	e03e      	b.n	8008012 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8007f94:	69fa      	ldr	r2, [r7, #28]
 8007f96:	69bb      	ldr	r3, [r7, #24]
 8007f98:	429a      	cmp	r2, r3
 8007f9a:	d1da      	bne.n	8007f52 <create_chain+0x68>
 8007f9c:	2300      	movs	r3, #0
 8007f9e:	e038      	b.n	8008012 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8007fa0:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8007fa2:	f04f 32ff 	mov.w	r2, #4294967295
 8007fa6:	69f9      	ldr	r1, [r7, #28]
 8007fa8:	6938      	ldr	r0, [r7, #16]
 8007faa:	f7ff fe4f 	bl	8007c4c <put_fat>
 8007fae:	4603      	mov	r3, r0
 8007fb0:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8007fb2:	7dfb      	ldrb	r3, [r7, #23]
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d109      	bne.n	8007fcc <create_chain+0xe2>
 8007fb8:	683b      	ldr	r3, [r7, #0]
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d006      	beq.n	8007fcc <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8007fbe:	69fa      	ldr	r2, [r7, #28]
 8007fc0:	6839      	ldr	r1, [r7, #0]
 8007fc2:	6938      	ldr	r0, [r7, #16]
 8007fc4:	f7ff fe42 	bl	8007c4c <put_fat>
 8007fc8:	4603      	mov	r3, r0
 8007fca:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8007fcc:	7dfb      	ldrb	r3, [r7, #23]
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d116      	bne.n	8008000 <create_chain+0x116>
		fs->last_clst = ncl;
 8007fd2:	693b      	ldr	r3, [r7, #16]
 8007fd4:	69fa      	ldr	r2, [r7, #28]
 8007fd6:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8007fd8:	693b      	ldr	r3, [r7, #16]
 8007fda:	695a      	ldr	r2, [r3, #20]
 8007fdc:	693b      	ldr	r3, [r7, #16]
 8007fde:	699b      	ldr	r3, [r3, #24]
 8007fe0:	3b02      	subs	r3, #2
 8007fe2:	429a      	cmp	r2, r3
 8007fe4:	d804      	bhi.n	8007ff0 <create_chain+0x106>
 8007fe6:	693b      	ldr	r3, [r7, #16]
 8007fe8:	695b      	ldr	r3, [r3, #20]
 8007fea:	1e5a      	subs	r2, r3, #1
 8007fec:	693b      	ldr	r3, [r7, #16]
 8007fee:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 8007ff0:	693b      	ldr	r3, [r7, #16]
 8007ff2:	791b      	ldrb	r3, [r3, #4]
 8007ff4:	f043 0301 	orr.w	r3, r3, #1
 8007ff8:	b2da      	uxtb	r2, r3
 8007ffa:	693b      	ldr	r3, [r7, #16]
 8007ffc:	711a      	strb	r2, [r3, #4]
 8007ffe:	e007      	b.n	8008010 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8008000:	7dfb      	ldrb	r3, [r7, #23]
 8008002:	2b01      	cmp	r3, #1
 8008004:	d102      	bne.n	800800c <create_chain+0x122>
 8008006:	f04f 33ff 	mov.w	r3, #4294967295
 800800a:	e000      	b.n	800800e <create_chain+0x124>
 800800c:	2301      	movs	r3, #1
 800800e:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8008010:	69fb      	ldr	r3, [r7, #28]
}
 8008012:	4618      	mov	r0, r3
 8008014:	3720      	adds	r7, #32
 8008016:	46bd      	mov	sp, r7
 8008018:	bd80      	pop	{r7, pc}

0800801a <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800801a:	b480      	push	{r7}
 800801c:	b087      	sub	sp, #28
 800801e:	af00      	add	r7, sp, #0
 8008020:	6078      	str	r0, [r7, #4]
 8008022:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800802e:	3304      	adds	r3, #4
 8008030:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8008032:	683b      	ldr	r3, [r7, #0]
 8008034:	0a5b      	lsrs	r3, r3, #9
 8008036:	68fa      	ldr	r2, [r7, #12]
 8008038:	8952      	ldrh	r2, [r2, #10]
 800803a:	fbb3 f3f2 	udiv	r3, r3, r2
 800803e:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8008040:	693b      	ldr	r3, [r7, #16]
 8008042:	1d1a      	adds	r2, r3, #4
 8008044:	613a      	str	r2, [r7, #16]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800804a:	68bb      	ldr	r3, [r7, #8]
 800804c:	2b00      	cmp	r3, #0
 800804e:	d101      	bne.n	8008054 <clmt_clust+0x3a>
 8008050:	2300      	movs	r3, #0
 8008052:	e010      	b.n	8008076 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 8008054:	697a      	ldr	r2, [r7, #20]
 8008056:	68bb      	ldr	r3, [r7, #8]
 8008058:	429a      	cmp	r2, r3
 800805a:	d307      	bcc.n	800806c <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800805c:	697a      	ldr	r2, [r7, #20]
 800805e:	68bb      	ldr	r3, [r7, #8]
 8008060:	1ad3      	subs	r3, r2, r3
 8008062:	617b      	str	r3, [r7, #20]
 8008064:	693b      	ldr	r3, [r7, #16]
 8008066:	3304      	adds	r3, #4
 8008068:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800806a:	e7e9      	b.n	8008040 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800806c:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800806e:	693b      	ldr	r3, [r7, #16]
 8008070:	681a      	ldr	r2, [r3, #0]
 8008072:	697b      	ldr	r3, [r7, #20]
 8008074:	4413      	add	r3, r2
}
 8008076:	4618      	mov	r0, r3
 8008078:	371c      	adds	r7, #28
 800807a:	46bd      	mov	sp, r7
 800807c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008080:	4770      	bx	lr

08008082 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8008082:	b580      	push	{r7, lr}
 8008084:	b086      	sub	sp, #24
 8008086:	af00      	add	r7, sp, #0
 8008088:	6078      	str	r0, [r7, #4]
 800808a:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8008092:	683b      	ldr	r3, [r7, #0]
 8008094:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008098:	d204      	bcs.n	80080a4 <dir_sdi+0x22>
 800809a:	683b      	ldr	r3, [r7, #0]
 800809c:	f003 031f 	and.w	r3, r3, #31
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	d001      	beq.n	80080a8 <dir_sdi+0x26>
		return FR_INT_ERR;
 80080a4:	2302      	movs	r3, #2
 80080a6:	e063      	b.n	8008170 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	683a      	ldr	r2, [r7, #0]
 80080ac:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	689b      	ldr	r3, [r3, #8]
 80080b2:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 80080b4:	697b      	ldr	r3, [r7, #20]
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d106      	bne.n	80080c8 <dir_sdi+0x46>
 80080ba:	693b      	ldr	r3, [r7, #16]
 80080bc:	781b      	ldrb	r3, [r3, #0]
 80080be:	2b02      	cmp	r3, #2
 80080c0:	d902      	bls.n	80080c8 <dir_sdi+0x46>
		clst = fs->dirbase;
 80080c2:	693b      	ldr	r3, [r7, #16]
 80080c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80080c6:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 80080c8:	697b      	ldr	r3, [r7, #20]
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	d10c      	bne.n	80080e8 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 80080ce:	683b      	ldr	r3, [r7, #0]
 80080d0:	095b      	lsrs	r3, r3, #5
 80080d2:	693a      	ldr	r2, [r7, #16]
 80080d4:	8912      	ldrh	r2, [r2, #8]
 80080d6:	4293      	cmp	r3, r2
 80080d8:	d301      	bcc.n	80080de <dir_sdi+0x5c>
 80080da:	2302      	movs	r3, #2
 80080dc:	e048      	b.n	8008170 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 80080de:	693b      	ldr	r3, [r7, #16]
 80080e0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	61da      	str	r2, [r3, #28]
 80080e6:	e029      	b.n	800813c <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 80080e8:	693b      	ldr	r3, [r7, #16]
 80080ea:	895b      	ldrh	r3, [r3, #10]
 80080ec:	025b      	lsls	r3, r3, #9
 80080ee:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 80080f0:	e019      	b.n	8008126 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	6979      	ldr	r1, [r7, #20]
 80080f6:	4618      	mov	r0, r3
 80080f8:	f7ff fd01 	bl	8007afe <get_fat>
 80080fc:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80080fe:	697b      	ldr	r3, [r7, #20]
 8008100:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008104:	d101      	bne.n	800810a <dir_sdi+0x88>
 8008106:	2301      	movs	r3, #1
 8008108:	e032      	b.n	8008170 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800810a:	697b      	ldr	r3, [r7, #20]
 800810c:	2b01      	cmp	r3, #1
 800810e:	d904      	bls.n	800811a <dir_sdi+0x98>
 8008110:	693b      	ldr	r3, [r7, #16]
 8008112:	699b      	ldr	r3, [r3, #24]
 8008114:	697a      	ldr	r2, [r7, #20]
 8008116:	429a      	cmp	r2, r3
 8008118:	d301      	bcc.n	800811e <dir_sdi+0x9c>
 800811a:	2302      	movs	r3, #2
 800811c:	e028      	b.n	8008170 <dir_sdi+0xee>
			ofs -= csz;
 800811e:	683a      	ldr	r2, [r7, #0]
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	1ad3      	subs	r3, r2, r3
 8008124:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8008126:	683a      	ldr	r2, [r7, #0]
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	429a      	cmp	r2, r3
 800812c:	d2e1      	bcs.n	80080f2 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800812e:	6979      	ldr	r1, [r7, #20]
 8008130:	6938      	ldr	r0, [r7, #16]
 8008132:	f7ff fcc5 	bl	8007ac0 <clust2sect>
 8008136:	4602      	mov	r2, r0
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	697a      	ldr	r2, [r7, #20]
 8008140:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	69db      	ldr	r3, [r3, #28]
 8008146:	2b00      	cmp	r3, #0
 8008148:	d101      	bne.n	800814e <dir_sdi+0xcc>
 800814a:	2302      	movs	r3, #2
 800814c:	e010      	b.n	8008170 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	69da      	ldr	r2, [r3, #28]
 8008152:	683b      	ldr	r3, [r7, #0]
 8008154:	0a5b      	lsrs	r3, r3, #9
 8008156:	441a      	add	r2, r3
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800815c:	693b      	ldr	r3, [r7, #16]
 800815e:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8008162:	683b      	ldr	r3, [r7, #0]
 8008164:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008168:	441a      	add	r2, r3
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800816e:	2300      	movs	r3, #0
}
 8008170:	4618      	mov	r0, r3
 8008172:	3718      	adds	r7, #24
 8008174:	46bd      	mov	sp, r7
 8008176:	bd80      	pop	{r7, pc}

08008178 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8008178:	b580      	push	{r7, lr}
 800817a:	b086      	sub	sp, #24
 800817c:	af00      	add	r7, sp, #0
 800817e:	6078      	str	r0, [r7, #4]
 8008180:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	695b      	ldr	r3, [r3, #20]
 800818c:	3320      	adds	r3, #32
 800818e:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	69db      	ldr	r3, [r3, #28]
 8008194:	2b00      	cmp	r3, #0
 8008196:	d003      	beq.n	80081a0 <dir_next+0x28>
 8008198:	68bb      	ldr	r3, [r7, #8]
 800819a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800819e:	d301      	bcc.n	80081a4 <dir_next+0x2c>
 80081a0:	2304      	movs	r3, #4
 80081a2:	e0aa      	b.n	80082fa <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 80081a4:	68bb      	ldr	r3, [r7, #8]
 80081a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	f040 8098 	bne.w	80082e0 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	69db      	ldr	r3, [r3, #28]
 80081b4:	1c5a      	adds	r2, r3, #1
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	699b      	ldr	r3, [r3, #24]
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d10b      	bne.n	80081da <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 80081c2:	68bb      	ldr	r3, [r7, #8]
 80081c4:	095b      	lsrs	r3, r3, #5
 80081c6:	68fa      	ldr	r2, [r7, #12]
 80081c8:	8912      	ldrh	r2, [r2, #8]
 80081ca:	4293      	cmp	r3, r2
 80081cc:	f0c0 8088 	bcc.w	80082e0 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	2200      	movs	r2, #0
 80081d4:	61da      	str	r2, [r3, #28]
 80081d6:	2304      	movs	r3, #4
 80081d8:	e08f      	b.n	80082fa <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 80081da:	68bb      	ldr	r3, [r7, #8]
 80081dc:	0a5b      	lsrs	r3, r3, #9
 80081de:	68fa      	ldr	r2, [r7, #12]
 80081e0:	8952      	ldrh	r2, [r2, #10]
 80081e2:	3a01      	subs	r2, #1
 80081e4:	4013      	ands	r3, r2
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d17a      	bne.n	80082e0 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 80081ea:	687a      	ldr	r2, [r7, #4]
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	699b      	ldr	r3, [r3, #24]
 80081f0:	4619      	mov	r1, r3
 80081f2:	4610      	mov	r0, r2
 80081f4:	f7ff fc83 	bl	8007afe <get_fat>
 80081f8:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 80081fa:	697b      	ldr	r3, [r7, #20]
 80081fc:	2b01      	cmp	r3, #1
 80081fe:	d801      	bhi.n	8008204 <dir_next+0x8c>
 8008200:	2302      	movs	r3, #2
 8008202:	e07a      	b.n	80082fa <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8008204:	697b      	ldr	r3, [r7, #20]
 8008206:	f1b3 3fff 	cmp.w	r3, #4294967295
 800820a:	d101      	bne.n	8008210 <dir_next+0x98>
 800820c:	2301      	movs	r3, #1
 800820e:	e074      	b.n	80082fa <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	699b      	ldr	r3, [r3, #24]
 8008214:	697a      	ldr	r2, [r7, #20]
 8008216:	429a      	cmp	r2, r3
 8008218:	d358      	bcc.n	80082cc <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800821a:	683b      	ldr	r3, [r7, #0]
 800821c:	2b00      	cmp	r3, #0
 800821e:	d104      	bne.n	800822a <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	2200      	movs	r2, #0
 8008224:	61da      	str	r2, [r3, #28]
 8008226:	2304      	movs	r3, #4
 8008228:	e067      	b.n	80082fa <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800822a:	687a      	ldr	r2, [r7, #4]
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	699b      	ldr	r3, [r3, #24]
 8008230:	4619      	mov	r1, r3
 8008232:	4610      	mov	r0, r2
 8008234:	f7ff fe59 	bl	8007eea <create_chain>
 8008238:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800823a:	697b      	ldr	r3, [r7, #20]
 800823c:	2b00      	cmp	r3, #0
 800823e:	d101      	bne.n	8008244 <dir_next+0xcc>
 8008240:	2307      	movs	r3, #7
 8008242:	e05a      	b.n	80082fa <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8008244:	697b      	ldr	r3, [r7, #20]
 8008246:	2b01      	cmp	r3, #1
 8008248:	d101      	bne.n	800824e <dir_next+0xd6>
 800824a:	2302      	movs	r3, #2
 800824c:	e055      	b.n	80082fa <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800824e:	697b      	ldr	r3, [r7, #20]
 8008250:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008254:	d101      	bne.n	800825a <dir_next+0xe2>
 8008256:	2301      	movs	r3, #1
 8008258:	e04f      	b.n	80082fa <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800825a:	68f8      	ldr	r0, [r7, #12]
 800825c:	f7ff fb50 	bl	8007900 <sync_window>
 8008260:	4603      	mov	r3, r0
 8008262:	2b00      	cmp	r3, #0
 8008264:	d001      	beq.n	800826a <dir_next+0xf2>
 8008266:	2301      	movs	r3, #1
 8008268:	e047      	b.n	80082fa <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	3334      	adds	r3, #52	@ 0x34
 800826e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008272:	2100      	movs	r1, #0
 8008274:	4618      	mov	r0, r3
 8008276:	f7ff f97a 	bl	800756e <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800827a:	2300      	movs	r3, #0
 800827c:	613b      	str	r3, [r7, #16]
 800827e:	6979      	ldr	r1, [r7, #20]
 8008280:	68f8      	ldr	r0, [r7, #12]
 8008282:	f7ff fc1d 	bl	8007ac0 <clust2sect>
 8008286:	4602      	mov	r2, r0
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	631a      	str	r2, [r3, #48]	@ 0x30
 800828c:	e012      	b.n	80082b4 <dir_next+0x13c>
						fs->wflag = 1;
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	2201      	movs	r2, #1
 8008292:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8008294:	68f8      	ldr	r0, [r7, #12]
 8008296:	f7ff fb33 	bl	8007900 <sync_window>
 800829a:	4603      	mov	r3, r0
 800829c:	2b00      	cmp	r3, #0
 800829e:	d001      	beq.n	80082a4 <dir_next+0x12c>
 80082a0:	2301      	movs	r3, #1
 80082a2:	e02a      	b.n	80082fa <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80082a4:	693b      	ldr	r3, [r7, #16]
 80082a6:	3301      	adds	r3, #1
 80082a8:	613b      	str	r3, [r7, #16]
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80082ae:	1c5a      	adds	r2, r3, #1
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	631a      	str	r2, [r3, #48]	@ 0x30
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	895b      	ldrh	r3, [r3, #10]
 80082b8:	461a      	mov	r2, r3
 80082ba:	693b      	ldr	r3, [r7, #16]
 80082bc:	4293      	cmp	r3, r2
 80082be:	d3e6      	bcc.n	800828e <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80082c4:	693b      	ldr	r3, [r7, #16]
 80082c6:	1ad2      	subs	r2, r2, r3
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	631a      	str	r2, [r3, #48]	@ 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	697a      	ldr	r2, [r7, #20]
 80082d0:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 80082d2:	6979      	ldr	r1, [r7, #20]
 80082d4:	68f8      	ldr	r0, [r7, #12]
 80082d6:	f7ff fbf3 	bl	8007ac0 <clust2sect>
 80082da:	4602      	mov	r2, r0
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	68ba      	ldr	r2, [r7, #8]
 80082e4:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 80082ec:	68bb      	ldr	r3, [r7, #8]
 80082ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80082f2:	441a      	add	r2, r3
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80082f8:	2300      	movs	r3, #0
}
 80082fa:	4618      	mov	r0, r3
 80082fc:	3718      	adds	r7, #24
 80082fe:	46bd      	mov	sp, r7
 8008300:	bd80      	pop	{r7, pc}

08008302 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8008302:	b580      	push	{r7, lr}
 8008304:	b086      	sub	sp, #24
 8008306:	af00      	add	r7, sp, #0
 8008308:	6078      	str	r0, [r7, #4]
 800830a:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8008312:	2100      	movs	r1, #0
 8008314:	6878      	ldr	r0, [r7, #4]
 8008316:	f7ff feb4 	bl	8008082 <dir_sdi>
 800831a:	4603      	mov	r3, r0
 800831c:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800831e:	7dfb      	ldrb	r3, [r7, #23]
 8008320:	2b00      	cmp	r3, #0
 8008322:	d12b      	bne.n	800837c <dir_alloc+0x7a>
		n = 0;
 8008324:	2300      	movs	r3, #0
 8008326:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	69db      	ldr	r3, [r3, #28]
 800832c:	4619      	mov	r1, r3
 800832e:	68f8      	ldr	r0, [r7, #12]
 8008330:	f7ff fb2a 	bl	8007988 <move_window>
 8008334:	4603      	mov	r3, r0
 8008336:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8008338:	7dfb      	ldrb	r3, [r7, #23]
 800833a:	2b00      	cmp	r3, #0
 800833c:	d11d      	bne.n	800837a <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	6a1b      	ldr	r3, [r3, #32]
 8008342:	781b      	ldrb	r3, [r3, #0]
 8008344:	2be5      	cmp	r3, #229	@ 0xe5
 8008346:	d004      	beq.n	8008352 <dir_alloc+0x50>
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	6a1b      	ldr	r3, [r3, #32]
 800834c:	781b      	ldrb	r3, [r3, #0]
 800834e:	2b00      	cmp	r3, #0
 8008350:	d107      	bne.n	8008362 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8008352:	693b      	ldr	r3, [r7, #16]
 8008354:	3301      	adds	r3, #1
 8008356:	613b      	str	r3, [r7, #16]
 8008358:	693a      	ldr	r2, [r7, #16]
 800835a:	683b      	ldr	r3, [r7, #0]
 800835c:	429a      	cmp	r2, r3
 800835e:	d102      	bne.n	8008366 <dir_alloc+0x64>
 8008360:	e00c      	b.n	800837c <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8008362:	2300      	movs	r3, #0
 8008364:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8008366:	2101      	movs	r1, #1
 8008368:	6878      	ldr	r0, [r7, #4]
 800836a:	f7ff ff05 	bl	8008178 <dir_next>
 800836e:	4603      	mov	r3, r0
 8008370:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8008372:	7dfb      	ldrb	r3, [r7, #23]
 8008374:	2b00      	cmp	r3, #0
 8008376:	d0d7      	beq.n	8008328 <dir_alloc+0x26>
 8008378:	e000      	b.n	800837c <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800837a:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800837c:	7dfb      	ldrb	r3, [r7, #23]
 800837e:	2b04      	cmp	r3, #4
 8008380:	d101      	bne.n	8008386 <dir_alloc+0x84>
 8008382:	2307      	movs	r3, #7
 8008384:	75fb      	strb	r3, [r7, #23]
	return res;
 8008386:	7dfb      	ldrb	r3, [r7, #23]
}
 8008388:	4618      	mov	r0, r3
 800838a:	3718      	adds	r7, #24
 800838c:	46bd      	mov	sp, r7
 800838e:	bd80      	pop	{r7, pc}

08008390 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8008390:	b580      	push	{r7, lr}
 8008392:	b084      	sub	sp, #16
 8008394:	af00      	add	r7, sp, #0
 8008396:	6078      	str	r0, [r7, #4]
 8008398:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800839a:	683b      	ldr	r3, [r7, #0]
 800839c:	331a      	adds	r3, #26
 800839e:	4618      	mov	r0, r3
 80083a0:	f7ff f842 	bl	8007428 <ld_word>
 80083a4:	4603      	mov	r3, r0
 80083a6:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	781b      	ldrb	r3, [r3, #0]
 80083ac:	2b03      	cmp	r3, #3
 80083ae:	d109      	bne.n	80083c4 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 80083b0:	683b      	ldr	r3, [r7, #0]
 80083b2:	3314      	adds	r3, #20
 80083b4:	4618      	mov	r0, r3
 80083b6:	f7ff f837 	bl	8007428 <ld_word>
 80083ba:	4603      	mov	r3, r0
 80083bc:	041b      	lsls	r3, r3, #16
 80083be:	68fa      	ldr	r2, [r7, #12]
 80083c0:	4313      	orrs	r3, r2
 80083c2:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 80083c4:	68fb      	ldr	r3, [r7, #12]
}
 80083c6:	4618      	mov	r0, r3
 80083c8:	3710      	adds	r7, #16
 80083ca:	46bd      	mov	sp, r7
 80083cc:	bd80      	pop	{r7, pc}

080083ce <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 80083ce:	b580      	push	{r7, lr}
 80083d0:	b084      	sub	sp, #16
 80083d2:	af00      	add	r7, sp, #0
 80083d4:	60f8      	str	r0, [r7, #12]
 80083d6:	60b9      	str	r1, [r7, #8]
 80083d8:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 80083da:	68bb      	ldr	r3, [r7, #8]
 80083dc:	331a      	adds	r3, #26
 80083de:	687a      	ldr	r2, [r7, #4]
 80083e0:	b292      	uxth	r2, r2
 80083e2:	4611      	mov	r1, r2
 80083e4:	4618      	mov	r0, r3
 80083e6:	f7ff f85a 	bl	800749e <st_word>
	if (fs->fs_type == FS_FAT32) {
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	781b      	ldrb	r3, [r3, #0]
 80083ee:	2b03      	cmp	r3, #3
 80083f0:	d109      	bne.n	8008406 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 80083f2:	68bb      	ldr	r3, [r7, #8]
 80083f4:	f103 0214 	add.w	r2, r3, #20
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	0c1b      	lsrs	r3, r3, #16
 80083fc:	b29b      	uxth	r3, r3
 80083fe:	4619      	mov	r1, r3
 8008400:	4610      	mov	r0, r2
 8008402:	f7ff f84c 	bl	800749e <st_word>
	}
}
 8008406:	bf00      	nop
 8008408:	3710      	adds	r7, #16
 800840a:	46bd      	mov	sp, r7
 800840c:	bd80      	pop	{r7, pc}
	...

08008410 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 8008410:	b590      	push	{r4, r7, lr}
 8008412:	b087      	sub	sp, #28
 8008414:	af00      	add	r7, sp, #0
 8008416:	6078      	str	r0, [r7, #4]
 8008418:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800841a:	683b      	ldr	r3, [r7, #0]
 800841c:	331a      	adds	r3, #26
 800841e:	4618      	mov	r0, r3
 8008420:	f7ff f802 	bl	8007428 <ld_word>
 8008424:	4603      	mov	r3, r0
 8008426:	2b00      	cmp	r3, #0
 8008428:	d001      	beq.n	800842e <cmp_lfn+0x1e>
 800842a:	2300      	movs	r3, #0
 800842c:	e059      	b.n	80084e2 <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800842e:	683b      	ldr	r3, [r7, #0]
 8008430:	781b      	ldrb	r3, [r3, #0]
 8008432:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008436:	1e5a      	subs	r2, r3, #1
 8008438:	4613      	mov	r3, r2
 800843a:	005b      	lsls	r3, r3, #1
 800843c:	4413      	add	r3, r2
 800843e:	009b      	lsls	r3, r3, #2
 8008440:	4413      	add	r3, r2
 8008442:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8008444:	2301      	movs	r3, #1
 8008446:	81fb      	strh	r3, [r7, #14]
 8008448:	2300      	movs	r3, #0
 800844a:	613b      	str	r3, [r7, #16]
 800844c:	e033      	b.n	80084b6 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800844e:	4a27      	ldr	r2, [pc, #156]	@ (80084ec <cmp_lfn+0xdc>)
 8008450:	693b      	ldr	r3, [r7, #16]
 8008452:	4413      	add	r3, r2
 8008454:	781b      	ldrb	r3, [r3, #0]
 8008456:	461a      	mov	r2, r3
 8008458:	683b      	ldr	r3, [r7, #0]
 800845a:	4413      	add	r3, r2
 800845c:	4618      	mov	r0, r3
 800845e:	f7fe ffe3 	bl	8007428 <ld_word>
 8008462:	4603      	mov	r3, r0
 8008464:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 8008466:	89fb      	ldrh	r3, [r7, #14]
 8008468:	2b00      	cmp	r3, #0
 800846a:	d01a      	beq.n	80084a2 <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800846c:	697b      	ldr	r3, [r7, #20]
 800846e:	2bfe      	cmp	r3, #254	@ 0xfe
 8008470:	d812      	bhi.n	8008498 <cmp_lfn+0x88>
 8008472:	89bb      	ldrh	r3, [r7, #12]
 8008474:	4618      	mov	r0, r3
 8008476:	f001 fdc9 	bl	800a00c <ff_wtoupper>
 800847a:	4603      	mov	r3, r0
 800847c:	461c      	mov	r4, r3
 800847e:	697b      	ldr	r3, [r7, #20]
 8008480:	1c5a      	adds	r2, r3, #1
 8008482:	617a      	str	r2, [r7, #20]
 8008484:	005b      	lsls	r3, r3, #1
 8008486:	687a      	ldr	r2, [r7, #4]
 8008488:	4413      	add	r3, r2
 800848a:	881b      	ldrh	r3, [r3, #0]
 800848c:	4618      	mov	r0, r3
 800848e:	f001 fdbd 	bl	800a00c <ff_wtoupper>
 8008492:	4603      	mov	r3, r0
 8008494:	429c      	cmp	r4, r3
 8008496:	d001      	beq.n	800849c <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 8008498:	2300      	movs	r3, #0
 800849a:	e022      	b.n	80084e2 <cmp_lfn+0xd2>
			}
			wc = uc;
 800849c:	89bb      	ldrh	r3, [r7, #12]
 800849e:	81fb      	strh	r3, [r7, #14]
 80084a0:	e006      	b.n	80084b0 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 80084a2:	89bb      	ldrh	r3, [r7, #12]
 80084a4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80084a8:	4293      	cmp	r3, r2
 80084aa:	d001      	beq.n	80084b0 <cmp_lfn+0xa0>
 80084ac:	2300      	movs	r3, #0
 80084ae:	e018      	b.n	80084e2 <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 80084b0:	693b      	ldr	r3, [r7, #16]
 80084b2:	3301      	adds	r3, #1
 80084b4:	613b      	str	r3, [r7, #16]
 80084b6:	693b      	ldr	r3, [r7, #16]
 80084b8:	2b0c      	cmp	r3, #12
 80084ba:	d9c8      	bls.n	800844e <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 80084bc:	683b      	ldr	r3, [r7, #0]
 80084be:	781b      	ldrb	r3, [r3, #0]
 80084c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	d00b      	beq.n	80084e0 <cmp_lfn+0xd0>
 80084c8:	89fb      	ldrh	r3, [r7, #14]
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	d008      	beq.n	80084e0 <cmp_lfn+0xd0>
 80084ce:	697b      	ldr	r3, [r7, #20]
 80084d0:	005b      	lsls	r3, r3, #1
 80084d2:	687a      	ldr	r2, [r7, #4]
 80084d4:	4413      	add	r3, r2
 80084d6:	881b      	ldrh	r3, [r3, #0]
 80084d8:	2b00      	cmp	r3, #0
 80084da:	d001      	beq.n	80084e0 <cmp_lfn+0xd0>
 80084dc:	2300      	movs	r3, #0
 80084de:	e000      	b.n	80084e2 <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 80084e0:	2301      	movs	r3, #1
}
 80084e2:	4618      	mov	r0, r3
 80084e4:	371c      	adds	r7, #28
 80084e6:	46bd      	mov	sp, r7
 80084e8:	bd90      	pop	{r4, r7, pc}
 80084ea:	bf00      	nop
 80084ec:	0800ac38 	.word	0x0800ac38

080084f0 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 80084f0:	b580      	push	{r7, lr}
 80084f2:	b088      	sub	sp, #32
 80084f4:	af00      	add	r7, sp, #0
 80084f6:	60f8      	str	r0, [r7, #12]
 80084f8:	60b9      	str	r1, [r7, #8]
 80084fa:	4611      	mov	r1, r2
 80084fc:	461a      	mov	r2, r3
 80084fe:	460b      	mov	r3, r1
 8008500:	71fb      	strb	r3, [r7, #7]
 8008502:	4613      	mov	r3, r2
 8008504:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 8008506:	68bb      	ldr	r3, [r7, #8]
 8008508:	330d      	adds	r3, #13
 800850a:	79ba      	ldrb	r2, [r7, #6]
 800850c:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800850e:	68bb      	ldr	r3, [r7, #8]
 8008510:	330b      	adds	r3, #11
 8008512:	220f      	movs	r2, #15
 8008514:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 8008516:	68bb      	ldr	r3, [r7, #8]
 8008518:	330c      	adds	r3, #12
 800851a:	2200      	movs	r2, #0
 800851c:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 800851e:	68bb      	ldr	r3, [r7, #8]
 8008520:	331a      	adds	r3, #26
 8008522:	2100      	movs	r1, #0
 8008524:	4618      	mov	r0, r3
 8008526:	f7fe ffba 	bl	800749e <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800852a:	79fb      	ldrb	r3, [r7, #7]
 800852c:	1e5a      	subs	r2, r3, #1
 800852e:	4613      	mov	r3, r2
 8008530:	005b      	lsls	r3, r3, #1
 8008532:	4413      	add	r3, r2
 8008534:	009b      	lsls	r3, r3, #2
 8008536:	4413      	add	r3, r2
 8008538:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800853a:	2300      	movs	r3, #0
 800853c:	82fb      	strh	r3, [r7, #22]
 800853e:	2300      	movs	r3, #0
 8008540:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8008542:	8afb      	ldrh	r3, [r7, #22]
 8008544:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8008548:	4293      	cmp	r3, r2
 800854a:	d007      	beq.n	800855c <put_lfn+0x6c>
 800854c:	69fb      	ldr	r3, [r7, #28]
 800854e:	1c5a      	adds	r2, r3, #1
 8008550:	61fa      	str	r2, [r7, #28]
 8008552:	005b      	lsls	r3, r3, #1
 8008554:	68fa      	ldr	r2, [r7, #12]
 8008556:	4413      	add	r3, r2
 8008558:	881b      	ldrh	r3, [r3, #0]
 800855a:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 800855c:	4a17      	ldr	r2, [pc, #92]	@ (80085bc <put_lfn+0xcc>)
 800855e:	69bb      	ldr	r3, [r7, #24]
 8008560:	4413      	add	r3, r2
 8008562:	781b      	ldrb	r3, [r3, #0]
 8008564:	461a      	mov	r2, r3
 8008566:	68bb      	ldr	r3, [r7, #8]
 8008568:	4413      	add	r3, r2
 800856a:	8afa      	ldrh	r2, [r7, #22]
 800856c:	4611      	mov	r1, r2
 800856e:	4618      	mov	r0, r3
 8008570:	f7fe ff95 	bl	800749e <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8008574:	8afb      	ldrh	r3, [r7, #22]
 8008576:	2b00      	cmp	r3, #0
 8008578:	d102      	bne.n	8008580 <put_lfn+0x90>
 800857a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800857e:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 8008580:	69bb      	ldr	r3, [r7, #24]
 8008582:	3301      	adds	r3, #1
 8008584:	61bb      	str	r3, [r7, #24]
 8008586:	69bb      	ldr	r3, [r7, #24]
 8008588:	2b0c      	cmp	r3, #12
 800858a:	d9da      	bls.n	8008542 <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 800858c:	8afb      	ldrh	r3, [r7, #22]
 800858e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8008592:	4293      	cmp	r3, r2
 8008594:	d006      	beq.n	80085a4 <put_lfn+0xb4>
 8008596:	69fb      	ldr	r3, [r7, #28]
 8008598:	005b      	lsls	r3, r3, #1
 800859a:	68fa      	ldr	r2, [r7, #12]
 800859c:	4413      	add	r3, r2
 800859e:	881b      	ldrh	r3, [r3, #0]
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	d103      	bne.n	80085ac <put_lfn+0xbc>
 80085a4:	79fb      	ldrb	r3, [r7, #7]
 80085a6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80085aa:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 80085ac:	68bb      	ldr	r3, [r7, #8]
 80085ae:	79fa      	ldrb	r2, [r7, #7]
 80085b0:	701a      	strb	r2, [r3, #0]
}
 80085b2:	bf00      	nop
 80085b4:	3720      	adds	r7, #32
 80085b6:	46bd      	mov	sp, r7
 80085b8:	bd80      	pop	{r7, pc}
 80085ba:	bf00      	nop
 80085bc:	0800ac38 	.word	0x0800ac38

080085c0 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 80085c0:	b580      	push	{r7, lr}
 80085c2:	b08c      	sub	sp, #48	@ 0x30
 80085c4:	af00      	add	r7, sp, #0
 80085c6:	60f8      	str	r0, [r7, #12]
 80085c8:	60b9      	str	r1, [r7, #8]
 80085ca:	607a      	str	r2, [r7, #4]
 80085cc:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 80085ce:	220b      	movs	r2, #11
 80085d0:	68b9      	ldr	r1, [r7, #8]
 80085d2:	68f8      	ldr	r0, [r7, #12]
 80085d4:	f7fe ffaa 	bl	800752c <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 80085d8:	683b      	ldr	r3, [r7, #0]
 80085da:	2b05      	cmp	r3, #5
 80085dc:	d92b      	bls.n	8008636 <gen_numname+0x76>
		sr = seq;
 80085de:	683b      	ldr	r3, [r7, #0]
 80085e0:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 80085e2:	e022      	b.n	800862a <gen_numname+0x6a>
			wc = *lfn++;
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	1c9a      	adds	r2, r3, #2
 80085e8:	607a      	str	r2, [r7, #4]
 80085ea:	881b      	ldrh	r3, [r3, #0]
 80085ec:	847b      	strh	r3, [r7, #34]	@ 0x22
			for (i = 0; i < 16; i++) {
 80085ee:	2300      	movs	r3, #0
 80085f0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80085f2:	e017      	b.n	8008624 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 80085f4:	69fb      	ldr	r3, [r7, #28]
 80085f6:	005a      	lsls	r2, r3, #1
 80085f8:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80085fa:	f003 0301 	and.w	r3, r3, #1
 80085fe:	4413      	add	r3, r2
 8008600:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 8008602:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8008604:	085b      	lsrs	r3, r3, #1
 8008606:	847b      	strh	r3, [r7, #34]	@ 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 8008608:	69fb      	ldr	r3, [r7, #28]
 800860a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800860e:	2b00      	cmp	r3, #0
 8008610:	d005      	beq.n	800861e <gen_numname+0x5e>
 8008612:	69fb      	ldr	r3, [r7, #28]
 8008614:	f483 3388 	eor.w	r3, r3, #69632	@ 0x11000
 8008618:	f083 0321 	eor.w	r3, r3, #33	@ 0x21
 800861c:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800861e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008620:	3301      	adds	r3, #1
 8008622:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008624:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008626:	2b0f      	cmp	r3, #15
 8008628:	d9e4      	bls.n	80085f4 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	881b      	ldrh	r3, [r3, #0]
 800862e:	2b00      	cmp	r3, #0
 8008630:	d1d8      	bne.n	80085e4 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 8008632:	69fb      	ldr	r3, [r7, #28]
 8008634:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 8008636:	2307      	movs	r3, #7
 8008638:	62bb      	str	r3, [r7, #40]	@ 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 800863a:	683b      	ldr	r3, [r7, #0]
 800863c:	b2db      	uxtb	r3, r3
 800863e:	f003 030f 	and.w	r3, r3, #15
 8008642:	b2db      	uxtb	r3, r3
 8008644:	3330      	adds	r3, #48	@ 0x30
 8008646:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (c > '9') c += 7;
 800864a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800864e:	2b39      	cmp	r3, #57	@ 0x39
 8008650:	d904      	bls.n	800865c <gen_numname+0x9c>
 8008652:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8008656:	3307      	adds	r3, #7
 8008658:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		ns[i--] = c;
 800865c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800865e:	1e5a      	subs	r2, r3, #1
 8008660:	62ba      	str	r2, [r7, #40]	@ 0x28
 8008662:	3330      	adds	r3, #48	@ 0x30
 8008664:	443b      	add	r3, r7
 8008666:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 800866a:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 800866e:	683b      	ldr	r3, [r7, #0]
 8008670:	091b      	lsrs	r3, r3, #4
 8008672:	603b      	str	r3, [r7, #0]
	} while (seq);
 8008674:	683b      	ldr	r3, [r7, #0]
 8008676:	2b00      	cmp	r3, #0
 8008678:	d1df      	bne.n	800863a <gen_numname+0x7a>
	ns[i] = '~';
 800867a:	f107 0214 	add.w	r2, r7, #20
 800867e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008680:	4413      	add	r3, r2
 8008682:	227e      	movs	r2, #126	@ 0x7e
 8008684:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8008686:	2300      	movs	r3, #0
 8008688:	627b      	str	r3, [r7, #36]	@ 0x24
 800868a:	e002      	b.n	8008692 <gen_numname+0xd2>
 800868c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800868e:	3301      	adds	r3, #1
 8008690:	627b      	str	r3, [r7, #36]	@ 0x24
 8008692:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008694:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008696:	429a      	cmp	r2, r3
 8008698:	d205      	bcs.n	80086a6 <gen_numname+0xe6>
 800869a:	68fa      	ldr	r2, [r7, #12]
 800869c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800869e:	4413      	add	r3, r2
 80086a0:	781b      	ldrb	r3, [r3, #0]
 80086a2:	2b20      	cmp	r3, #32
 80086a4:	d1f2      	bne.n	800868c <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 80086a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80086a8:	2b07      	cmp	r3, #7
 80086aa:	d807      	bhi.n	80086bc <gen_numname+0xfc>
 80086ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80086ae:	1c5a      	adds	r2, r3, #1
 80086b0:	62ba      	str	r2, [r7, #40]	@ 0x28
 80086b2:	3330      	adds	r3, #48	@ 0x30
 80086b4:	443b      	add	r3, r7
 80086b6:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 80086ba:	e000      	b.n	80086be <gen_numname+0xfe>
 80086bc:	2120      	movs	r1, #32
 80086be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086c0:	1c5a      	adds	r2, r3, #1
 80086c2:	627a      	str	r2, [r7, #36]	@ 0x24
 80086c4:	68fa      	ldr	r2, [r7, #12]
 80086c6:	4413      	add	r3, r2
 80086c8:	460a      	mov	r2, r1
 80086ca:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 80086cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086ce:	2b07      	cmp	r3, #7
 80086d0:	d9e9      	bls.n	80086a6 <gen_numname+0xe6>
}
 80086d2:	bf00      	nop
 80086d4:	bf00      	nop
 80086d6:	3730      	adds	r7, #48	@ 0x30
 80086d8:	46bd      	mov	sp, r7
 80086da:	bd80      	pop	{r7, pc}

080086dc <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 80086dc:	b480      	push	{r7}
 80086de:	b085      	sub	sp, #20
 80086e0:	af00      	add	r7, sp, #0
 80086e2:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 80086e4:	2300      	movs	r3, #0
 80086e6:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 80086e8:	230b      	movs	r3, #11
 80086ea:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 80086ec:	7bfb      	ldrb	r3, [r7, #15]
 80086ee:	b2da      	uxtb	r2, r3
 80086f0:	0852      	lsrs	r2, r2, #1
 80086f2:	01db      	lsls	r3, r3, #7
 80086f4:	4313      	orrs	r3, r2
 80086f6:	b2da      	uxtb	r2, r3
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	1c59      	adds	r1, r3, #1
 80086fc:	6079      	str	r1, [r7, #4]
 80086fe:	781b      	ldrb	r3, [r3, #0]
 8008700:	4413      	add	r3, r2
 8008702:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 8008704:	68bb      	ldr	r3, [r7, #8]
 8008706:	3b01      	subs	r3, #1
 8008708:	60bb      	str	r3, [r7, #8]
 800870a:	68bb      	ldr	r3, [r7, #8]
 800870c:	2b00      	cmp	r3, #0
 800870e:	d1ed      	bne.n	80086ec <sum_sfn+0x10>
	return sum;
 8008710:	7bfb      	ldrb	r3, [r7, #15]
}
 8008712:	4618      	mov	r0, r3
 8008714:	3714      	adds	r7, #20
 8008716:	46bd      	mov	sp, r7
 8008718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800871c:	4770      	bx	lr

0800871e <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800871e:	b580      	push	{r7, lr}
 8008720:	b086      	sub	sp, #24
 8008722:	af00      	add	r7, sp, #0
 8008724:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800872c:	2100      	movs	r1, #0
 800872e:	6878      	ldr	r0, [r7, #4]
 8008730:	f7ff fca7 	bl	8008082 <dir_sdi>
 8008734:	4603      	mov	r3, r0
 8008736:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8008738:	7dfb      	ldrb	r3, [r7, #23]
 800873a:	2b00      	cmp	r3, #0
 800873c:	d001      	beq.n	8008742 <dir_find+0x24>
 800873e:	7dfb      	ldrb	r3, [r7, #23]
 8008740:	e0a9      	b.n	8008896 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8008742:	23ff      	movs	r3, #255	@ 0xff
 8008744:	753b      	strb	r3, [r7, #20]
 8008746:	7d3b      	ldrb	r3, [r7, #20]
 8008748:	757b      	strb	r3, [r7, #21]
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	f04f 32ff 	mov.w	r2, #4294967295
 8008750:	631a      	str	r2, [r3, #48]	@ 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	69db      	ldr	r3, [r3, #28]
 8008756:	4619      	mov	r1, r3
 8008758:	6938      	ldr	r0, [r7, #16]
 800875a:	f7ff f915 	bl	8007988 <move_window>
 800875e:	4603      	mov	r3, r0
 8008760:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8008762:	7dfb      	ldrb	r3, [r7, #23]
 8008764:	2b00      	cmp	r3, #0
 8008766:	f040 8090 	bne.w	800888a <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	6a1b      	ldr	r3, [r3, #32]
 800876e:	781b      	ldrb	r3, [r3, #0]
 8008770:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8008772:	7dbb      	ldrb	r3, [r7, #22]
 8008774:	2b00      	cmp	r3, #0
 8008776:	d102      	bne.n	800877e <dir_find+0x60>
 8008778:	2304      	movs	r3, #4
 800877a:	75fb      	strb	r3, [r7, #23]
 800877c:	e08a      	b.n	8008894 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	6a1b      	ldr	r3, [r3, #32]
 8008782:	330b      	adds	r3, #11
 8008784:	781b      	ldrb	r3, [r3, #0]
 8008786:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800878a:	73fb      	strb	r3, [r7, #15]
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	7bfa      	ldrb	r2, [r7, #15]
 8008790:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8008792:	7dbb      	ldrb	r3, [r7, #22]
 8008794:	2be5      	cmp	r3, #229	@ 0xe5
 8008796:	d007      	beq.n	80087a8 <dir_find+0x8a>
 8008798:	7bfb      	ldrb	r3, [r7, #15]
 800879a:	f003 0308 	and.w	r3, r3, #8
 800879e:	2b00      	cmp	r3, #0
 80087a0:	d009      	beq.n	80087b6 <dir_find+0x98>
 80087a2:	7bfb      	ldrb	r3, [r7, #15]
 80087a4:	2b0f      	cmp	r3, #15
 80087a6:	d006      	beq.n	80087b6 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 80087a8:	23ff      	movs	r3, #255	@ 0xff
 80087aa:	757b      	strb	r3, [r7, #21]
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	f04f 32ff 	mov.w	r2, #4294967295
 80087b2:	631a      	str	r2, [r3, #48]	@ 0x30
 80087b4:	e05e      	b.n	8008874 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 80087b6:	7bfb      	ldrb	r3, [r7, #15]
 80087b8:	2b0f      	cmp	r3, #15
 80087ba:	d136      	bne.n	800882a <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 80087c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	d154      	bne.n	8008874 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 80087ca:	7dbb      	ldrb	r3, [r7, #22]
 80087cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	d00d      	beq.n	80087f0 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	6a1b      	ldr	r3, [r3, #32]
 80087d8:	7b5b      	ldrb	r3, [r3, #13]
 80087da:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 80087dc:	7dbb      	ldrb	r3, [r7, #22]
 80087de:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80087e2:	75bb      	strb	r3, [r7, #22]
 80087e4:	7dbb      	ldrb	r3, [r7, #22]
 80087e6:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	695a      	ldr	r2, [r3, #20]
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	631a      	str	r2, [r3, #48]	@ 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 80087f0:	7dba      	ldrb	r2, [r7, #22]
 80087f2:	7d7b      	ldrb	r3, [r7, #21]
 80087f4:	429a      	cmp	r2, r3
 80087f6:	d115      	bne.n	8008824 <dir_find+0x106>
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	6a1b      	ldr	r3, [r3, #32]
 80087fc:	330d      	adds	r3, #13
 80087fe:	781b      	ldrb	r3, [r3, #0]
 8008800:	7d3a      	ldrb	r2, [r7, #20]
 8008802:	429a      	cmp	r2, r3
 8008804:	d10e      	bne.n	8008824 <dir_find+0x106>
 8008806:	693b      	ldr	r3, [r7, #16]
 8008808:	68da      	ldr	r2, [r3, #12]
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	6a1b      	ldr	r3, [r3, #32]
 800880e:	4619      	mov	r1, r3
 8008810:	4610      	mov	r0, r2
 8008812:	f7ff fdfd 	bl	8008410 <cmp_lfn>
 8008816:	4603      	mov	r3, r0
 8008818:	2b00      	cmp	r3, #0
 800881a:	d003      	beq.n	8008824 <dir_find+0x106>
 800881c:	7d7b      	ldrb	r3, [r7, #21]
 800881e:	3b01      	subs	r3, #1
 8008820:	b2db      	uxtb	r3, r3
 8008822:	e000      	b.n	8008826 <dir_find+0x108>
 8008824:	23ff      	movs	r3, #255	@ 0xff
 8008826:	757b      	strb	r3, [r7, #21]
 8008828:	e024      	b.n	8008874 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800882a:	7d7b      	ldrb	r3, [r7, #21]
 800882c:	2b00      	cmp	r3, #0
 800882e:	d109      	bne.n	8008844 <dir_find+0x126>
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	6a1b      	ldr	r3, [r3, #32]
 8008834:	4618      	mov	r0, r3
 8008836:	f7ff ff51 	bl	80086dc <sum_sfn>
 800883a:	4603      	mov	r3, r0
 800883c:	461a      	mov	r2, r3
 800883e:	7d3b      	ldrb	r3, [r7, #20]
 8008840:	4293      	cmp	r3, r2
 8008842:	d024      	beq.n	800888e <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800884a:	f003 0301 	and.w	r3, r3, #1
 800884e:	2b00      	cmp	r3, #0
 8008850:	d10a      	bne.n	8008868 <dir_find+0x14a>
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	6a18      	ldr	r0, [r3, #32]
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	3324      	adds	r3, #36	@ 0x24
 800885a:	220b      	movs	r2, #11
 800885c:	4619      	mov	r1, r3
 800885e:	f7fe fea1 	bl	80075a4 <mem_cmp>
 8008862:	4603      	mov	r3, r0
 8008864:	2b00      	cmp	r3, #0
 8008866:	d014      	beq.n	8008892 <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8008868:	23ff      	movs	r3, #255	@ 0xff
 800886a:	757b      	strb	r3, [r7, #21]
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	f04f 32ff 	mov.w	r2, #4294967295
 8008872:	631a      	str	r2, [r3, #48]	@ 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8008874:	2100      	movs	r1, #0
 8008876:	6878      	ldr	r0, [r7, #4]
 8008878:	f7ff fc7e 	bl	8008178 <dir_next>
 800887c:	4603      	mov	r3, r0
 800887e:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8008880:	7dfb      	ldrb	r3, [r7, #23]
 8008882:	2b00      	cmp	r3, #0
 8008884:	f43f af65 	beq.w	8008752 <dir_find+0x34>
 8008888:	e004      	b.n	8008894 <dir_find+0x176>
		if (res != FR_OK) break;
 800888a:	bf00      	nop
 800888c:	e002      	b.n	8008894 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800888e:	bf00      	nop
 8008890:	e000      	b.n	8008894 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8008892:	bf00      	nop

	return res;
 8008894:	7dfb      	ldrb	r3, [r7, #23]
}
 8008896:	4618      	mov	r0, r3
 8008898:	3718      	adds	r7, #24
 800889a:	46bd      	mov	sp, r7
 800889c:	bd80      	pop	{r7, pc}
	...

080088a0 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 80088a0:	b580      	push	{r7, lr}
 80088a2:	b08c      	sub	sp, #48	@ 0x30
 80088a4:	af00      	add	r7, sp, #0
 80088a6:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 80088b4:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	d001      	beq.n	80088c0 <dir_register+0x20>
 80088bc:	2306      	movs	r3, #6
 80088be:	e0e0      	b.n	8008a82 <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 80088c0:	2300      	movs	r3, #0
 80088c2:	627b      	str	r3, [r7, #36]	@ 0x24
 80088c4:	e002      	b.n	80088cc <dir_register+0x2c>
 80088c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80088c8:	3301      	adds	r3, #1
 80088ca:	627b      	str	r3, [r7, #36]	@ 0x24
 80088cc:	69fb      	ldr	r3, [r7, #28]
 80088ce:	68da      	ldr	r2, [r3, #12]
 80088d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80088d2:	005b      	lsls	r3, r3, #1
 80088d4:	4413      	add	r3, r2
 80088d6:	881b      	ldrh	r3, [r3, #0]
 80088d8:	2b00      	cmp	r3, #0
 80088da:	d1f4      	bne.n	80088c6 <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	f103 0124 	add.w	r1, r3, #36	@ 0x24
 80088e2:	f107 030c 	add.w	r3, r7, #12
 80088e6:	220c      	movs	r2, #12
 80088e8:	4618      	mov	r0, r3
 80088ea:	f7fe fe1f 	bl	800752c <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 80088ee:	7dfb      	ldrb	r3, [r7, #23]
 80088f0:	f003 0301 	and.w	r3, r3, #1
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	d032      	beq.n	800895e <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	2240      	movs	r2, #64	@ 0x40
 80088fc:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		for (n = 1; n < 100; n++) {
 8008900:	2301      	movs	r3, #1
 8008902:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008904:	e016      	b.n	8008934 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	f103 0024 	add.w	r0, r3, #36	@ 0x24
 800890c:	69fb      	ldr	r3, [r7, #28]
 800890e:	68da      	ldr	r2, [r3, #12]
 8008910:	f107 010c 	add.w	r1, r7, #12
 8008914:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008916:	f7ff fe53 	bl	80085c0 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800891a:	6878      	ldr	r0, [r7, #4]
 800891c:	f7ff feff 	bl	800871e <dir_find>
 8008920:	4603      	mov	r3, r0
 8008922:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			if (res != FR_OK) break;
 8008926:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800892a:	2b00      	cmp	r3, #0
 800892c:	d106      	bne.n	800893c <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 800892e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008930:	3301      	adds	r3, #1
 8008932:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008934:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008936:	2b63      	cmp	r3, #99	@ 0x63
 8008938:	d9e5      	bls.n	8008906 <dir_register+0x66>
 800893a:	e000      	b.n	800893e <dir_register+0x9e>
			if (res != FR_OK) break;
 800893c:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800893e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008940:	2b64      	cmp	r3, #100	@ 0x64
 8008942:	d101      	bne.n	8008948 <dir_register+0xa8>
 8008944:	2307      	movs	r3, #7
 8008946:	e09c      	b.n	8008a82 <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8008948:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800894c:	2b04      	cmp	r3, #4
 800894e:	d002      	beq.n	8008956 <dir_register+0xb6>
 8008950:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8008954:	e095      	b.n	8008a82 <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 8008956:	7dfa      	ldrb	r2, [r7, #23]
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800895e:	7dfb      	ldrb	r3, [r7, #23]
 8008960:	f003 0302 	and.w	r3, r3, #2
 8008964:	2b00      	cmp	r3, #0
 8008966:	d007      	beq.n	8008978 <dir_register+0xd8>
 8008968:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800896a:	330c      	adds	r3, #12
 800896c:	4a47      	ldr	r2, [pc, #284]	@ (8008a8c <dir_register+0x1ec>)
 800896e:	fba2 2303 	umull	r2, r3, r2, r3
 8008972:	089b      	lsrs	r3, r3, #2
 8008974:	3301      	adds	r3, #1
 8008976:	e000      	b.n	800897a <dir_register+0xda>
 8008978:	2301      	movs	r3, #1
 800897a:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 800897c:	6a39      	ldr	r1, [r7, #32]
 800897e:	6878      	ldr	r0, [r7, #4]
 8008980:	f7ff fcbf 	bl	8008302 <dir_alloc>
 8008984:	4603      	mov	r3, r0
 8008986:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800898a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800898e:	2b00      	cmp	r3, #0
 8008990:	d148      	bne.n	8008a24 <dir_register+0x184>
 8008992:	6a3b      	ldr	r3, [r7, #32]
 8008994:	3b01      	subs	r3, #1
 8008996:	623b      	str	r3, [r7, #32]
 8008998:	6a3b      	ldr	r3, [r7, #32]
 800899a:	2b00      	cmp	r3, #0
 800899c:	d042      	beq.n	8008a24 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	695a      	ldr	r2, [r3, #20]
 80089a2:	6a3b      	ldr	r3, [r7, #32]
 80089a4:	015b      	lsls	r3, r3, #5
 80089a6:	1ad3      	subs	r3, r2, r3
 80089a8:	4619      	mov	r1, r3
 80089aa:	6878      	ldr	r0, [r7, #4]
 80089ac:	f7ff fb69 	bl	8008082 <dir_sdi>
 80089b0:	4603      	mov	r3, r0
 80089b2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 80089b6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	d132      	bne.n	8008a24 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	3324      	adds	r3, #36	@ 0x24
 80089c2:	4618      	mov	r0, r3
 80089c4:	f7ff fe8a 	bl	80086dc <sum_sfn>
 80089c8:	4603      	mov	r3, r0
 80089ca:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	69db      	ldr	r3, [r3, #28]
 80089d0:	4619      	mov	r1, r3
 80089d2:	69f8      	ldr	r0, [r7, #28]
 80089d4:	f7fe ffd8 	bl	8007988 <move_window>
 80089d8:	4603      	mov	r3, r0
 80089da:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				if (res != FR_OK) break;
 80089de:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	d11d      	bne.n	8008a22 <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 80089e6:	69fb      	ldr	r3, [r7, #28]
 80089e8:	68d8      	ldr	r0, [r3, #12]
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	6a19      	ldr	r1, [r3, #32]
 80089ee:	6a3b      	ldr	r3, [r7, #32]
 80089f0:	b2da      	uxtb	r2, r3
 80089f2:	7efb      	ldrb	r3, [r7, #27]
 80089f4:	f7ff fd7c 	bl	80084f0 <put_lfn>
				fs->wflag = 1;
 80089f8:	69fb      	ldr	r3, [r7, #28]
 80089fa:	2201      	movs	r2, #1
 80089fc:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 80089fe:	2100      	movs	r1, #0
 8008a00:	6878      	ldr	r0, [r7, #4]
 8008a02:	f7ff fbb9 	bl	8008178 <dir_next>
 8008a06:	4603      	mov	r3, r0
 8008a08:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			} while (res == FR_OK && --nent);
 8008a0c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	d107      	bne.n	8008a24 <dir_register+0x184>
 8008a14:	6a3b      	ldr	r3, [r7, #32]
 8008a16:	3b01      	subs	r3, #1
 8008a18:	623b      	str	r3, [r7, #32]
 8008a1a:	6a3b      	ldr	r3, [r7, #32]
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	d1d5      	bne.n	80089cc <dir_register+0x12c>
 8008a20:	e000      	b.n	8008a24 <dir_register+0x184>
				if (res != FR_OK) break;
 8008a22:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8008a24:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	d128      	bne.n	8008a7e <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	69db      	ldr	r3, [r3, #28]
 8008a30:	4619      	mov	r1, r3
 8008a32:	69f8      	ldr	r0, [r7, #28]
 8008a34:	f7fe ffa8 	bl	8007988 <move_window>
 8008a38:	4603      	mov	r3, r0
 8008a3a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 8008a3e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	d11b      	bne.n	8008a7e <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	6a1b      	ldr	r3, [r3, #32]
 8008a4a:	2220      	movs	r2, #32
 8008a4c:	2100      	movs	r1, #0
 8008a4e:	4618      	mov	r0, r3
 8008a50:	f7fe fd8d 	bl	800756e <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	6a18      	ldr	r0, [r3, #32]
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	3324      	adds	r3, #36	@ 0x24
 8008a5c:	220b      	movs	r2, #11
 8008a5e:	4619      	mov	r1, r3
 8008a60:	f7fe fd64 	bl	800752c <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	f893 202f 	ldrb.w	r2, [r3, #47]	@ 0x2f
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	6a1b      	ldr	r3, [r3, #32]
 8008a6e:	330c      	adds	r3, #12
 8008a70:	f002 0218 	and.w	r2, r2, #24
 8008a74:	b2d2      	uxtb	r2, r2
 8008a76:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 8008a78:	69fb      	ldr	r3, [r7, #28]
 8008a7a:	2201      	movs	r2, #1
 8008a7c:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8008a7e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8008a82:	4618      	mov	r0, r3
 8008a84:	3730      	adds	r7, #48	@ 0x30
 8008a86:	46bd      	mov	sp, r7
 8008a88:	bd80      	pop	{r7, pc}
 8008a8a:	bf00      	nop
 8008a8c:	4ec4ec4f 	.word	0x4ec4ec4f

08008a90 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8008a90:	b580      	push	{r7, lr}
 8008a92:	b08a      	sub	sp, #40	@ 0x28
 8008a94:	af00      	add	r7, sp, #0
 8008a96:	6078      	str	r0, [r7, #4]
 8008a98:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 8008a9a:	683b      	ldr	r3, [r7, #0]
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	613b      	str	r3, [r7, #16]
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	68db      	ldr	r3, [r3, #12]
 8008aa6:	60fb      	str	r3, [r7, #12]
 8008aa8:	2300      	movs	r3, #0
 8008aaa:	617b      	str	r3, [r7, #20]
 8008aac:	697b      	ldr	r3, [r7, #20]
 8008aae:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 8008ab0:	69bb      	ldr	r3, [r7, #24]
 8008ab2:	1c5a      	adds	r2, r3, #1
 8008ab4:	61ba      	str	r2, [r7, #24]
 8008ab6:	693a      	ldr	r2, [r7, #16]
 8008ab8:	4413      	add	r3, r2
 8008aba:	781b      	ldrb	r3, [r3, #0]
 8008abc:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 8008abe:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008ac0:	2b1f      	cmp	r3, #31
 8008ac2:	d940      	bls.n	8008b46 <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 8008ac4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008ac6:	2b2f      	cmp	r3, #47	@ 0x2f
 8008ac8:	d006      	beq.n	8008ad8 <create_name+0x48>
 8008aca:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008acc:	2b5c      	cmp	r3, #92	@ 0x5c
 8008ace:	d110      	bne.n	8008af2 <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8008ad0:	e002      	b.n	8008ad8 <create_name+0x48>
 8008ad2:	69bb      	ldr	r3, [r7, #24]
 8008ad4:	3301      	adds	r3, #1
 8008ad6:	61bb      	str	r3, [r7, #24]
 8008ad8:	693a      	ldr	r2, [r7, #16]
 8008ada:	69bb      	ldr	r3, [r7, #24]
 8008adc:	4413      	add	r3, r2
 8008ade:	781b      	ldrb	r3, [r3, #0]
 8008ae0:	2b2f      	cmp	r3, #47	@ 0x2f
 8008ae2:	d0f6      	beq.n	8008ad2 <create_name+0x42>
 8008ae4:	693a      	ldr	r2, [r7, #16]
 8008ae6:	69bb      	ldr	r3, [r7, #24]
 8008ae8:	4413      	add	r3, r2
 8008aea:	781b      	ldrb	r3, [r3, #0]
 8008aec:	2b5c      	cmp	r3, #92	@ 0x5c
 8008aee:	d0f0      	beq.n	8008ad2 <create_name+0x42>
			break;
 8008af0:	e02a      	b.n	8008b48 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 8008af2:	697b      	ldr	r3, [r7, #20]
 8008af4:	2bfe      	cmp	r3, #254	@ 0xfe
 8008af6:	d901      	bls.n	8008afc <create_name+0x6c>
 8008af8:	2306      	movs	r3, #6
 8008afa:	e17d      	b.n	8008df8 <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 8008afc:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008afe:	b2db      	uxtb	r3, r3
 8008b00:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 8008b02:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008b04:	2101      	movs	r1, #1
 8008b06:	4618      	mov	r0, r3
 8008b08:	f001 fa44 	bl	8009f94 <ff_convert>
 8008b0c:	4603      	mov	r3, r0
 8008b0e:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8008b10:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008b12:	2b00      	cmp	r3, #0
 8008b14:	d101      	bne.n	8008b1a <create_name+0x8a>
 8008b16:	2306      	movs	r3, #6
 8008b18:	e16e      	b.n	8008df8 <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 8008b1a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008b1c:	2b7f      	cmp	r3, #127	@ 0x7f
 8008b1e:	d809      	bhi.n	8008b34 <create_name+0xa4>
 8008b20:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008b22:	4619      	mov	r1, r3
 8008b24:	488d      	ldr	r0, [pc, #564]	@ (8008d5c <create_name+0x2cc>)
 8008b26:	f7fe fd64 	bl	80075f2 <chk_chr>
 8008b2a:	4603      	mov	r3, r0
 8008b2c:	2b00      	cmp	r3, #0
 8008b2e:	d001      	beq.n	8008b34 <create_name+0xa4>
 8008b30:	2306      	movs	r3, #6
 8008b32:	e161      	b.n	8008df8 <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 8008b34:	697b      	ldr	r3, [r7, #20]
 8008b36:	1c5a      	adds	r2, r3, #1
 8008b38:	617a      	str	r2, [r7, #20]
 8008b3a:	005b      	lsls	r3, r3, #1
 8008b3c:	68fa      	ldr	r2, [r7, #12]
 8008b3e:	4413      	add	r3, r2
 8008b40:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8008b42:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 8008b44:	e7b4      	b.n	8008ab0 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 8008b46:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8008b48:	693a      	ldr	r2, [r7, #16]
 8008b4a:	69bb      	ldr	r3, [r7, #24]
 8008b4c:	441a      	add	r2, r3
 8008b4e:	683b      	ldr	r3, [r7, #0]
 8008b50:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8008b52:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008b54:	2b1f      	cmp	r3, #31
 8008b56:	d801      	bhi.n	8008b5c <create_name+0xcc>
 8008b58:	2304      	movs	r3, #4
 8008b5a:	e000      	b.n	8008b5e <create_name+0xce>
 8008b5c:	2300      	movs	r3, #0
 8008b5e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8008b62:	e011      	b.n	8008b88 <create_name+0xf8>
		w = lfn[di - 1];
 8008b64:	697b      	ldr	r3, [r7, #20]
 8008b66:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8008b6a:	3b01      	subs	r3, #1
 8008b6c:	005b      	lsls	r3, r3, #1
 8008b6e:	68fa      	ldr	r2, [r7, #12]
 8008b70:	4413      	add	r3, r2
 8008b72:	881b      	ldrh	r3, [r3, #0]
 8008b74:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w != ' ' && w != '.') break;
 8008b76:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008b78:	2b20      	cmp	r3, #32
 8008b7a:	d002      	beq.n	8008b82 <create_name+0xf2>
 8008b7c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008b7e:	2b2e      	cmp	r3, #46	@ 0x2e
 8008b80:	d106      	bne.n	8008b90 <create_name+0x100>
		di--;
 8008b82:	697b      	ldr	r3, [r7, #20]
 8008b84:	3b01      	subs	r3, #1
 8008b86:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8008b88:	697b      	ldr	r3, [r7, #20]
 8008b8a:	2b00      	cmp	r3, #0
 8008b8c:	d1ea      	bne.n	8008b64 <create_name+0xd4>
 8008b8e:	e000      	b.n	8008b92 <create_name+0x102>
		if (w != ' ' && w != '.') break;
 8008b90:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 8008b92:	697b      	ldr	r3, [r7, #20]
 8008b94:	005b      	lsls	r3, r3, #1
 8008b96:	68fa      	ldr	r2, [r7, #12]
 8008b98:	4413      	add	r3, r2
 8008b9a:	2200      	movs	r2, #0
 8008b9c:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 8008b9e:	697b      	ldr	r3, [r7, #20]
 8008ba0:	2b00      	cmp	r3, #0
 8008ba2:	d101      	bne.n	8008ba8 <create_name+0x118>
 8008ba4:	2306      	movs	r3, #6
 8008ba6:	e127      	b.n	8008df8 <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	3324      	adds	r3, #36	@ 0x24
 8008bac:	220b      	movs	r2, #11
 8008bae:	2120      	movs	r1, #32
 8008bb0:	4618      	mov	r0, r3
 8008bb2:	f7fe fcdc 	bl	800756e <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 8008bb6:	2300      	movs	r3, #0
 8008bb8:	61bb      	str	r3, [r7, #24]
 8008bba:	e002      	b.n	8008bc2 <create_name+0x132>
 8008bbc:	69bb      	ldr	r3, [r7, #24]
 8008bbe:	3301      	adds	r3, #1
 8008bc0:	61bb      	str	r3, [r7, #24]
 8008bc2:	69bb      	ldr	r3, [r7, #24]
 8008bc4:	005b      	lsls	r3, r3, #1
 8008bc6:	68fa      	ldr	r2, [r7, #12]
 8008bc8:	4413      	add	r3, r2
 8008bca:	881b      	ldrh	r3, [r3, #0]
 8008bcc:	2b20      	cmp	r3, #32
 8008bce:	d0f5      	beq.n	8008bbc <create_name+0x12c>
 8008bd0:	69bb      	ldr	r3, [r7, #24]
 8008bd2:	005b      	lsls	r3, r3, #1
 8008bd4:	68fa      	ldr	r2, [r7, #12]
 8008bd6:	4413      	add	r3, r2
 8008bd8:	881b      	ldrh	r3, [r3, #0]
 8008bda:	2b2e      	cmp	r3, #46	@ 0x2e
 8008bdc:	d0ee      	beq.n	8008bbc <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 8008bde:	69bb      	ldr	r3, [r7, #24]
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	d009      	beq.n	8008bf8 <create_name+0x168>
 8008be4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008be8:	f043 0303 	orr.w	r3, r3, #3
 8008bec:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 8008bf0:	e002      	b.n	8008bf8 <create_name+0x168>
 8008bf2:	697b      	ldr	r3, [r7, #20]
 8008bf4:	3b01      	subs	r3, #1
 8008bf6:	617b      	str	r3, [r7, #20]
 8008bf8:	697b      	ldr	r3, [r7, #20]
 8008bfa:	2b00      	cmp	r3, #0
 8008bfc:	d009      	beq.n	8008c12 <create_name+0x182>
 8008bfe:	697b      	ldr	r3, [r7, #20]
 8008c00:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8008c04:	3b01      	subs	r3, #1
 8008c06:	005b      	lsls	r3, r3, #1
 8008c08:	68fa      	ldr	r2, [r7, #12]
 8008c0a:	4413      	add	r3, r2
 8008c0c:	881b      	ldrh	r3, [r3, #0]
 8008c0e:	2b2e      	cmp	r3, #46	@ 0x2e
 8008c10:	d1ef      	bne.n	8008bf2 <create_name+0x162>

	i = b = 0; ni = 8;
 8008c12:	2300      	movs	r3, #0
 8008c14:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8008c18:	2300      	movs	r3, #0
 8008c1a:	623b      	str	r3, [r7, #32]
 8008c1c:	2308      	movs	r3, #8
 8008c1e:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 8008c20:	69bb      	ldr	r3, [r7, #24]
 8008c22:	1c5a      	adds	r2, r3, #1
 8008c24:	61ba      	str	r2, [r7, #24]
 8008c26:	005b      	lsls	r3, r3, #1
 8008c28:	68fa      	ldr	r2, [r7, #12]
 8008c2a:	4413      	add	r3, r2
 8008c2c:	881b      	ldrh	r3, [r3, #0]
 8008c2e:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) break;					/* Break on end of the LFN */
 8008c30:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008c32:	2b00      	cmp	r3, #0
 8008c34:	f000 8090 	beq.w	8008d58 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8008c38:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008c3a:	2b20      	cmp	r3, #32
 8008c3c:	d006      	beq.n	8008c4c <create_name+0x1bc>
 8008c3e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008c40:	2b2e      	cmp	r3, #46	@ 0x2e
 8008c42:	d10a      	bne.n	8008c5a <create_name+0x1ca>
 8008c44:	69ba      	ldr	r2, [r7, #24]
 8008c46:	697b      	ldr	r3, [r7, #20]
 8008c48:	429a      	cmp	r2, r3
 8008c4a:	d006      	beq.n	8008c5a <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 8008c4c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008c50:	f043 0303 	orr.w	r3, r3, #3
 8008c54:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8008c58:	e07d      	b.n	8008d56 <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 8008c5a:	6a3a      	ldr	r2, [r7, #32]
 8008c5c:	69fb      	ldr	r3, [r7, #28]
 8008c5e:	429a      	cmp	r2, r3
 8008c60:	d203      	bcs.n	8008c6a <create_name+0x1da>
 8008c62:	69ba      	ldr	r2, [r7, #24]
 8008c64:	697b      	ldr	r3, [r7, #20]
 8008c66:	429a      	cmp	r2, r3
 8008c68:	d123      	bne.n	8008cb2 <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 8008c6a:	69fb      	ldr	r3, [r7, #28]
 8008c6c:	2b0b      	cmp	r3, #11
 8008c6e:	d106      	bne.n	8008c7e <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 8008c70:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008c74:	f043 0303 	orr.w	r3, r3, #3
 8008c78:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8008c7c:	e075      	b.n	8008d6a <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 8008c7e:	69ba      	ldr	r2, [r7, #24]
 8008c80:	697b      	ldr	r3, [r7, #20]
 8008c82:	429a      	cmp	r2, r3
 8008c84:	d005      	beq.n	8008c92 <create_name+0x202>
 8008c86:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008c8a:	f043 0303 	orr.w	r3, r3, #3
 8008c8e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (si > di) break;			/* No extension */
 8008c92:	69ba      	ldr	r2, [r7, #24]
 8008c94:	697b      	ldr	r3, [r7, #20]
 8008c96:	429a      	cmp	r2, r3
 8008c98:	d866      	bhi.n	8008d68 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 8008c9a:	697b      	ldr	r3, [r7, #20]
 8008c9c:	61bb      	str	r3, [r7, #24]
 8008c9e:	2308      	movs	r3, #8
 8008ca0:	623b      	str	r3, [r7, #32]
 8008ca2:	230b      	movs	r3, #11
 8008ca4:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 8008ca6:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8008caa:	009b      	lsls	r3, r3, #2
 8008cac:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8008cb0:	e051      	b.n	8008d56 <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 8008cb2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008cb4:	2b7f      	cmp	r3, #127	@ 0x7f
 8008cb6:	d914      	bls.n	8008ce2 <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8008cb8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008cba:	2100      	movs	r1, #0
 8008cbc:	4618      	mov	r0, r3
 8008cbe:	f001 f969 	bl	8009f94 <ff_convert>
 8008cc2:	4603      	mov	r3, r0
 8008cc4:	84bb      	strh	r3, [r7, #36]	@ 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 8008cc6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008cc8:	2b00      	cmp	r3, #0
 8008cca:	d004      	beq.n	8008cd6 <create_name+0x246>
 8008ccc:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008cce:	3b80      	subs	r3, #128	@ 0x80
 8008cd0:	4a23      	ldr	r2, [pc, #140]	@ (8008d60 <create_name+0x2d0>)
 8008cd2:	5cd3      	ldrb	r3, [r2, r3]
 8008cd4:	84bb      	strh	r3, [r7, #36]	@ 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 8008cd6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008cda:	f043 0302 	orr.w	r3, r3, #2
 8008cde:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 8008ce2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008ce4:	2b00      	cmp	r3, #0
 8008ce6:	d007      	beq.n	8008cf8 <create_name+0x268>
 8008ce8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008cea:	4619      	mov	r1, r3
 8008cec:	481d      	ldr	r0, [pc, #116]	@ (8008d64 <create_name+0x2d4>)
 8008cee:	f7fe fc80 	bl	80075f2 <chk_chr>
 8008cf2:	4603      	mov	r3, r0
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	d008      	beq.n	8008d0a <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8008cf8:	235f      	movs	r3, #95	@ 0x5f
 8008cfa:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8008cfc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008d00:	f043 0303 	orr.w	r3, r3, #3
 8008d04:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8008d08:	e01b      	b.n	8008d42 <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 8008d0a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008d0c:	2b40      	cmp	r3, #64	@ 0x40
 8008d0e:	d909      	bls.n	8008d24 <create_name+0x294>
 8008d10:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008d12:	2b5a      	cmp	r3, #90	@ 0x5a
 8008d14:	d806      	bhi.n	8008d24 <create_name+0x294>
					b |= 2;
 8008d16:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8008d1a:	f043 0302 	orr.w	r3, r3, #2
 8008d1e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8008d22:	e00e      	b.n	8008d42 <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 8008d24:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008d26:	2b60      	cmp	r3, #96	@ 0x60
 8008d28:	d90b      	bls.n	8008d42 <create_name+0x2b2>
 8008d2a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008d2c:	2b7a      	cmp	r3, #122	@ 0x7a
 8008d2e:	d808      	bhi.n	8008d42 <create_name+0x2b2>
						b |= 1; w -= 0x20;
 8008d30:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8008d34:	f043 0301 	orr.w	r3, r3, #1
 8008d38:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8008d3c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008d3e:	3b20      	subs	r3, #32
 8008d40:	84bb      	strh	r3, [r7, #36]	@ 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 8008d42:	6a3b      	ldr	r3, [r7, #32]
 8008d44:	1c5a      	adds	r2, r3, #1
 8008d46:	623a      	str	r2, [r7, #32]
 8008d48:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8008d4a:	b2d1      	uxtb	r1, r2
 8008d4c:	687a      	ldr	r2, [r7, #4]
 8008d4e:	4413      	add	r3, r2
 8008d50:	460a      	mov	r2, r1
 8008d52:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
		w = lfn[si++];					/* Get an LFN character */
 8008d56:	e763      	b.n	8008c20 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 8008d58:	bf00      	nop
 8008d5a:	e006      	b.n	8008d6a <create_name+0x2da>
 8008d5c:	0800ab14 	.word	0x0800ab14
 8008d60:	0800abb8 	.word	0x0800abb8
 8008d64:	0800ab20 	.word	0x0800ab20
			if (si > di) break;			/* No extension */
 8008d68:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8008d70:	2be5      	cmp	r3, #229	@ 0xe5
 8008d72:	d103      	bne.n	8008d7c <create_name+0x2ec>
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	2205      	movs	r2, #5
 8008d78:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

	if (ni == 8) b <<= 2;
 8008d7c:	69fb      	ldr	r3, [r7, #28]
 8008d7e:	2b08      	cmp	r3, #8
 8008d80:	d104      	bne.n	8008d8c <create_name+0x2fc>
 8008d82:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8008d86:	009b      	lsls	r3, r3, #2
 8008d88:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 8008d8c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8008d90:	f003 030c 	and.w	r3, r3, #12
 8008d94:	2b0c      	cmp	r3, #12
 8008d96:	d005      	beq.n	8008da4 <create_name+0x314>
 8008d98:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8008d9c:	f003 0303 	and.w	r3, r3, #3
 8008da0:	2b03      	cmp	r3, #3
 8008da2:	d105      	bne.n	8008db0 <create_name+0x320>
 8008da4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008da8:	f043 0302 	orr.w	r3, r3, #2
 8008dac:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8008db0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008db4:	f003 0302 	and.w	r3, r3, #2
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	d117      	bne.n	8008dec <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8008dbc:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8008dc0:	f003 0303 	and.w	r3, r3, #3
 8008dc4:	2b01      	cmp	r3, #1
 8008dc6:	d105      	bne.n	8008dd4 <create_name+0x344>
 8008dc8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008dcc:	f043 0310 	orr.w	r3, r3, #16
 8008dd0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8008dd4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8008dd8:	f003 030c 	and.w	r3, r3, #12
 8008ddc:	2b04      	cmp	r3, #4
 8008dde:	d105      	bne.n	8008dec <create_name+0x35c>
 8008de0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008de4:	f043 0308 	orr.w	r3, r3, #8
 8008de8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8008df2:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f

	return FR_OK;
 8008df6:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 8008df8:	4618      	mov	r0, r3
 8008dfa:	3728      	adds	r7, #40	@ 0x28
 8008dfc:	46bd      	mov	sp, r7
 8008dfe:	bd80      	pop	{r7, pc}

08008e00 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8008e00:	b580      	push	{r7, lr}
 8008e02:	b086      	sub	sp, #24
 8008e04:	af00      	add	r7, sp, #0
 8008e06:	6078      	str	r0, [r7, #4]
 8008e08:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8008e0e:	693b      	ldr	r3, [r7, #16]
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8008e14:	e002      	b.n	8008e1c <follow_path+0x1c>
 8008e16:	683b      	ldr	r3, [r7, #0]
 8008e18:	3301      	adds	r3, #1
 8008e1a:	603b      	str	r3, [r7, #0]
 8008e1c:	683b      	ldr	r3, [r7, #0]
 8008e1e:	781b      	ldrb	r3, [r3, #0]
 8008e20:	2b2f      	cmp	r3, #47	@ 0x2f
 8008e22:	d0f8      	beq.n	8008e16 <follow_path+0x16>
 8008e24:	683b      	ldr	r3, [r7, #0]
 8008e26:	781b      	ldrb	r3, [r3, #0]
 8008e28:	2b5c      	cmp	r3, #92	@ 0x5c
 8008e2a:	d0f4      	beq.n	8008e16 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8008e2c:	693b      	ldr	r3, [r7, #16]
 8008e2e:	2200      	movs	r2, #0
 8008e30:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8008e32:	683b      	ldr	r3, [r7, #0]
 8008e34:	781b      	ldrb	r3, [r3, #0]
 8008e36:	2b1f      	cmp	r3, #31
 8008e38:	d80a      	bhi.n	8008e50 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	2280      	movs	r2, #128	@ 0x80
 8008e3e:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 8008e42:	2100      	movs	r1, #0
 8008e44:	6878      	ldr	r0, [r7, #4]
 8008e46:	f7ff f91c 	bl	8008082 <dir_sdi>
 8008e4a:	4603      	mov	r3, r0
 8008e4c:	75fb      	strb	r3, [r7, #23]
 8008e4e:	e043      	b.n	8008ed8 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8008e50:	463b      	mov	r3, r7
 8008e52:	4619      	mov	r1, r3
 8008e54:	6878      	ldr	r0, [r7, #4]
 8008e56:	f7ff fe1b 	bl	8008a90 <create_name>
 8008e5a:	4603      	mov	r3, r0
 8008e5c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8008e5e:	7dfb      	ldrb	r3, [r7, #23]
 8008e60:	2b00      	cmp	r3, #0
 8008e62:	d134      	bne.n	8008ece <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 8008e64:	6878      	ldr	r0, [r7, #4]
 8008e66:	f7ff fc5a 	bl	800871e <dir_find>
 8008e6a:	4603      	mov	r3, r0
 8008e6c:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8008e74:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8008e76:	7dfb      	ldrb	r3, [r7, #23]
 8008e78:	2b00      	cmp	r3, #0
 8008e7a:	d00a      	beq.n	8008e92 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8008e7c:	7dfb      	ldrb	r3, [r7, #23]
 8008e7e:	2b04      	cmp	r3, #4
 8008e80:	d127      	bne.n	8008ed2 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8008e82:	7afb      	ldrb	r3, [r7, #11]
 8008e84:	f003 0304 	and.w	r3, r3, #4
 8008e88:	2b00      	cmp	r3, #0
 8008e8a:	d122      	bne.n	8008ed2 <follow_path+0xd2>
 8008e8c:	2305      	movs	r3, #5
 8008e8e:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8008e90:	e01f      	b.n	8008ed2 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8008e92:	7afb      	ldrb	r3, [r7, #11]
 8008e94:	f003 0304 	and.w	r3, r3, #4
 8008e98:	2b00      	cmp	r3, #0
 8008e9a:	d11c      	bne.n	8008ed6 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8008e9c:	693b      	ldr	r3, [r7, #16]
 8008e9e:	799b      	ldrb	r3, [r3, #6]
 8008ea0:	f003 0310 	and.w	r3, r3, #16
 8008ea4:	2b00      	cmp	r3, #0
 8008ea6:	d102      	bne.n	8008eae <follow_path+0xae>
				res = FR_NO_PATH; break;
 8008ea8:	2305      	movs	r3, #5
 8008eaa:	75fb      	strb	r3, [r7, #23]
 8008eac:	e014      	b.n	8008ed8 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8008eae:	68fb      	ldr	r3, [r7, #12]
 8008eb0:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	695b      	ldr	r3, [r3, #20]
 8008eb8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008ebc:	4413      	add	r3, r2
 8008ebe:	4619      	mov	r1, r3
 8008ec0:	68f8      	ldr	r0, [r7, #12]
 8008ec2:	f7ff fa65 	bl	8008390 <ld_clust>
 8008ec6:	4602      	mov	r2, r0
 8008ec8:	693b      	ldr	r3, [r7, #16]
 8008eca:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8008ecc:	e7c0      	b.n	8008e50 <follow_path+0x50>
			if (res != FR_OK) break;
 8008ece:	bf00      	nop
 8008ed0:	e002      	b.n	8008ed8 <follow_path+0xd8>
				break;
 8008ed2:	bf00      	nop
 8008ed4:	e000      	b.n	8008ed8 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8008ed6:	bf00      	nop
			}
		}
	}

	return res;
 8008ed8:	7dfb      	ldrb	r3, [r7, #23]
}
 8008eda:	4618      	mov	r0, r3
 8008edc:	3718      	adds	r7, #24
 8008ede:	46bd      	mov	sp, r7
 8008ee0:	bd80      	pop	{r7, pc}

08008ee2 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8008ee2:	b480      	push	{r7}
 8008ee4:	b087      	sub	sp, #28
 8008ee6:	af00      	add	r7, sp, #0
 8008ee8:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8008eea:	f04f 33ff 	mov.w	r3, #4294967295
 8008eee:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	2b00      	cmp	r3, #0
 8008ef6:	d031      	beq.n	8008f5c <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	617b      	str	r3, [r7, #20]
 8008efe:	e002      	b.n	8008f06 <get_ldnumber+0x24>
 8008f00:	697b      	ldr	r3, [r7, #20]
 8008f02:	3301      	adds	r3, #1
 8008f04:	617b      	str	r3, [r7, #20]
 8008f06:	697b      	ldr	r3, [r7, #20]
 8008f08:	781b      	ldrb	r3, [r3, #0]
 8008f0a:	2b1f      	cmp	r3, #31
 8008f0c:	d903      	bls.n	8008f16 <get_ldnumber+0x34>
 8008f0e:	697b      	ldr	r3, [r7, #20]
 8008f10:	781b      	ldrb	r3, [r3, #0]
 8008f12:	2b3a      	cmp	r3, #58	@ 0x3a
 8008f14:	d1f4      	bne.n	8008f00 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8008f16:	697b      	ldr	r3, [r7, #20]
 8008f18:	781b      	ldrb	r3, [r3, #0]
 8008f1a:	2b3a      	cmp	r3, #58	@ 0x3a
 8008f1c:	d11c      	bne.n	8008f58 <get_ldnumber+0x76>
			tp = *path;
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8008f24:	68fb      	ldr	r3, [r7, #12]
 8008f26:	1c5a      	adds	r2, r3, #1
 8008f28:	60fa      	str	r2, [r7, #12]
 8008f2a:	781b      	ldrb	r3, [r3, #0]
 8008f2c:	3b30      	subs	r3, #48	@ 0x30
 8008f2e:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8008f30:	68bb      	ldr	r3, [r7, #8]
 8008f32:	2b09      	cmp	r3, #9
 8008f34:	d80e      	bhi.n	8008f54 <get_ldnumber+0x72>
 8008f36:	68fa      	ldr	r2, [r7, #12]
 8008f38:	697b      	ldr	r3, [r7, #20]
 8008f3a:	429a      	cmp	r2, r3
 8008f3c:	d10a      	bne.n	8008f54 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8008f3e:	68bb      	ldr	r3, [r7, #8]
 8008f40:	2b00      	cmp	r3, #0
 8008f42:	d107      	bne.n	8008f54 <get_ldnumber+0x72>
					vol = (int)i;
 8008f44:	68bb      	ldr	r3, [r7, #8]
 8008f46:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8008f48:	697b      	ldr	r3, [r7, #20]
 8008f4a:	3301      	adds	r3, #1
 8008f4c:	617b      	str	r3, [r7, #20]
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	697a      	ldr	r2, [r7, #20]
 8008f52:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8008f54:	693b      	ldr	r3, [r7, #16]
 8008f56:	e002      	b.n	8008f5e <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8008f58:	2300      	movs	r3, #0
 8008f5a:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8008f5c:	693b      	ldr	r3, [r7, #16]
}
 8008f5e:	4618      	mov	r0, r3
 8008f60:	371c      	adds	r7, #28
 8008f62:	46bd      	mov	sp, r7
 8008f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f68:	4770      	bx	lr
	...

08008f6c <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8008f6c:	b580      	push	{r7, lr}
 8008f6e:	b082      	sub	sp, #8
 8008f70:	af00      	add	r7, sp, #0
 8008f72:	6078      	str	r0, [r7, #4]
 8008f74:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	2200      	movs	r2, #0
 8008f7a:	70da      	strb	r2, [r3, #3]
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	f04f 32ff 	mov.w	r2, #4294967295
 8008f82:	631a      	str	r2, [r3, #48]	@ 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8008f84:	6839      	ldr	r1, [r7, #0]
 8008f86:	6878      	ldr	r0, [r7, #4]
 8008f88:	f7fe fcfe 	bl	8007988 <move_window>
 8008f8c:	4603      	mov	r3, r0
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	d001      	beq.n	8008f96 <check_fs+0x2a>
 8008f92:	2304      	movs	r3, #4
 8008f94:	e038      	b.n	8009008 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	3334      	adds	r3, #52	@ 0x34
 8008f9a:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8008f9e:	4618      	mov	r0, r3
 8008fa0:	f7fe fa42 	bl	8007428 <ld_word>
 8008fa4:	4603      	mov	r3, r0
 8008fa6:	461a      	mov	r2, r3
 8008fa8:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8008fac:	429a      	cmp	r2, r3
 8008fae:	d001      	beq.n	8008fb4 <check_fs+0x48>
 8008fb0:	2303      	movs	r3, #3
 8008fb2:	e029      	b.n	8009008 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8008fba:	2be9      	cmp	r3, #233	@ 0xe9
 8008fbc:	d009      	beq.n	8008fd2 <check_fs+0x66>
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8008fc4:	2beb      	cmp	r3, #235	@ 0xeb
 8008fc6:	d11e      	bne.n	8009006 <check_fs+0x9a>
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8008fce:	2b90      	cmp	r3, #144	@ 0x90
 8008fd0:	d119      	bne.n	8009006 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	3334      	adds	r3, #52	@ 0x34
 8008fd6:	3336      	adds	r3, #54	@ 0x36
 8008fd8:	4618      	mov	r0, r3
 8008fda:	f7fe fa3d 	bl	8007458 <ld_dword>
 8008fde:	4603      	mov	r3, r0
 8008fe0:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8008fe4:	4a0a      	ldr	r2, [pc, #40]	@ (8009010 <check_fs+0xa4>)
 8008fe6:	4293      	cmp	r3, r2
 8008fe8:	d101      	bne.n	8008fee <check_fs+0x82>
 8008fea:	2300      	movs	r3, #0
 8008fec:	e00c      	b.n	8009008 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	3334      	adds	r3, #52	@ 0x34
 8008ff2:	3352      	adds	r3, #82	@ 0x52
 8008ff4:	4618      	mov	r0, r3
 8008ff6:	f7fe fa2f 	bl	8007458 <ld_dword>
 8008ffa:	4603      	mov	r3, r0
 8008ffc:	4a05      	ldr	r2, [pc, #20]	@ (8009014 <check_fs+0xa8>)
 8008ffe:	4293      	cmp	r3, r2
 8009000:	d101      	bne.n	8009006 <check_fs+0x9a>
 8009002:	2300      	movs	r3, #0
 8009004:	e000      	b.n	8009008 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8009006:	2302      	movs	r3, #2
}
 8009008:	4618      	mov	r0, r3
 800900a:	3708      	adds	r7, #8
 800900c:	46bd      	mov	sp, r7
 800900e:	bd80      	pop	{r7, pc}
 8009010:	00544146 	.word	0x00544146
 8009014:	33544146 	.word	0x33544146

08009018 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8009018:	b580      	push	{r7, lr}
 800901a:	b096      	sub	sp, #88	@ 0x58
 800901c:	af00      	add	r7, sp, #0
 800901e:	60f8      	str	r0, [r7, #12]
 8009020:	60b9      	str	r1, [r7, #8]
 8009022:	4613      	mov	r3, r2
 8009024:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8009026:	68bb      	ldr	r3, [r7, #8]
 8009028:	2200      	movs	r2, #0
 800902a:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800902c:	68f8      	ldr	r0, [r7, #12]
 800902e:	f7ff ff58 	bl	8008ee2 <get_ldnumber>
 8009032:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8009034:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009036:	2b00      	cmp	r3, #0
 8009038:	da01      	bge.n	800903e <find_volume+0x26>
 800903a:	230b      	movs	r3, #11
 800903c:	e22d      	b.n	800949a <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800903e:	4aa1      	ldr	r2, [pc, #644]	@ (80092c4 <find_volume+0x2ac>)
 8009040:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009042:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009046:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8009048:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800904a:	2b00      	cmp	r3, #0
 800904c:	d101      	bne.n	8009052 <find_volume+0x3a>
 800904e:	230c      	movs	r3, #12
 8009050:	e223      	b.n	800949a <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8009052:	68bb      	ldr	r3, [r7, #8]
 8009054:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009056:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8009058:	79fb      	ldrb	r3, [r7, #7]
 800905a:	f023 0301 	bic.w	r3, r3, #1
 800905e:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8009060:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009062:	781b      	ldrb	r3, [r3, #0]
 8009064:	2b00      	cmp	r3, #0
 8009066:	d01a      	beq.n	800909e <find_volume+0x86>
		stat = disk_status(fs->drv);
 8009068:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800906a:	785b      	ldrb	r3, [r3, #1]
 800906c:	4618      	mov	r0, r3
 800906e:	f7fe f93d 	bl	80072ec <disk_status>
 8009072:	4603      	mov	r3, r0
 8009074:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8009078:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800907c:	f003 0301 	and.w	r3, r3, #1
 8009080:	2b00      	cmp	r3, #0
 8009082:	d10c      	bne.n	800909e <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8009084:	79fb      	ldrb	r3, [r7, #7]
 8009086:	2b00      	cmp	r3, #0
 8009088:	d007      	beq.n	800909a <find_volume+0x82>
 800908a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800908e:	f003 0304 	and.w	r3, r3, #4
 8009092:	2b00      	cmp	r3, #0
 8009094:	d001      	beq.n	800909a <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8009096:	230a      	movs	r3, #10
 8009098:	e1ff      	b.n	800949a <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 800909a:	2300      	movs	r3, #0
 800909c:	e1fd      	b.n	800949a <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800909e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80090a0:	2200      	movs	r2, #0
 80090a2:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 80090a4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80090a6:	b2da      	uxtb	r2, r3
 80090a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80090aa:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 80090ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80090ae:	785b      	ldrb	r3, [r3, #1]
 80090b0:	4618      	mov	r0, r3
 80090b2:	f7fe f935 	bl	8007320 <disk_initialize>
 80090b6:	4603      	mov	r3, r0
 80090b8:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 80090bc:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80090c0:	f003 0301 	and.w	r3, r3, #1
 80090c4:	2b00      	cmp	r3, #0
 80090c6:	d001      	beq.n	80090cc <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 80090c8:	2303      	movs	r3, #3
 80090ca:	e1e6      	b.n	800949a <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 80090cc:	79fb      	ldrb	r3, [r7, #7]
 80090ce:	2b00      	cmp	r3, #0
 80090d0:	d007      	beq.n	80090e2 <find_volume+0xca>
 80090d2:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80090d6:	f003 0304 	and.w	r3, r3, #4
 80090da:	2b00      	cmp	r3, #0
 80090dc:	d001      	beq.n	80090e2 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 80090de:	230a      	movs	r3, #10
 80090e0:	e1db      	b.n	800949a <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 80090e2:	2300      	movs	r3, #0
 80090e4:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 80090e6:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80090e8:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80090ea:	f7ff ff3f 	bl	8008f6c <check_fs>
 80090ee:	4603      	mov	r3, r0
 80090f0:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 80090f4:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80090f8:	2b02      	cmp	r3, #2
 80090fa:	d149      	bne.n	8009190 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80090fc:	2300      	movs	r3, #0
 80090fe:	643b      	str	r3, [r7, #64]	@ 0x40
 8009100:	e01e      	b.n	8009140 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8009102:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009104:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8009108:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800910a:	011b      	lsls	r3, r3, #4
 800910c:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 8009110:	4413      	add	r3, r2
 8009112:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8009114:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009116:	3304      	adds	r3, #4
 8009118:	781b      	ldrb	r3, [r3, #0]
 800911a:	2b00      	cmp	r3, #0
 800911c:	d006      	beq.n	800912c <find_volume+0x114>
 800911e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009120:	3308      	adds	r3, #8
 8009122:	4618      	mov	r0, r3
 8009124:	f7fe f998 	bl	8007458 <ld_dword>
 8009128:	4602      	mov	r2, r0
 800912a:	e000      	b.n	800912e <find_volume+0x116>
 800912c:	2200      	movs	r2, #0
 800912e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009130:	009b      	lsls	r3, r3, #2
 8009132:	3358      	adds	r3, #88	@ 0x58
 8009134:	443b      	add	r3, r7
 8009136:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800913a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800913c:	3301      	adds	r3, #1
 800913e:	643b      	str	r3, [r7, #64]	@ 0x40
 8009140:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009142:	2b03      	cmp	r3, #3
 8009144:	d9dd      	bls.n	8009102 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8009146:	2300      	movs	r3, #0
 8009148:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 800914a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800914c:	2b00      	cmp	r3, #0
 800914e:	d002      	beq.n	8009156 <find_volume+0x13e>
 8009150:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009152:	3b01      	subs	r3, #1
 8009154:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8009156:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009158:	009b      	lsls	r3, r3, #2
 800915a:	3358      	adds	r3, #88	@ 0x58
 800915c:	443b      	add	r3, r7
 800915e:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8009162:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8009164:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009166:	2b00      	cmp	r3, #0
 8009168:	d005      	beq.n	8009176 <find_volume+0x15e>
 800916a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800916c:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800916e:	f7ff fefd 	bl	8008f6c <check_fs>
 8009172:	4603      	mov	r3, r0
 8009174:	e000      	b.n	8009178 <find_volume+0x160>
 8009176:	2303      	movs	r3, #3
 8009178:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800917c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8009180:	2b01      	cmp	r3, #1
 8009182:	d905      	bls.n	8009190 <find_volume+0x178>
 8009184:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009186:	3301      	adds	r3, #1
 8009188:	643b      	str	r3, [r7, #64]	@ 0x40
 800918a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800918c:	2b03      	cmp	r3, #3
 800918e:	d9e2      	bls.n	8009156 <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8009190:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8009194:	2b04      	cmp	r3, #4
 8009196:	d101      	bne.n	800919c <find_volume+0x184>
 8009198:	2301      	movs	r3, #1
 800919a:	e17e      	b.n	800949a <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800919c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80091a0:	2b01      	cmp	r3, #1
 80091a2:	d901      	bls.n	80091a8 <find_volume+0x190>
 80091a4:	230d      	movs	r3, #13
 80091a6:	e178      	b.n	800949a <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 80091a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80091aa:	3334      	adds	r3, #52	@ 0x34
 80091ac:	330b      	adds	r3, #11
 80091ae:	4618      	mov	r0, r3
 80091b0:	f7fe f93a 	bl	8007428 <ld_word>
 80091b4:	4603      	mov	r3, r0
 80091b6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80091ba:	d001      	beq.n	80091c0 <find_volume+0x1a8>
 80091bc:	230d      	movs	r3, #13
 80091be:	e16c      	b.n	800949a <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 80091c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80091c2:	3334      	adds	r3, #52	@ 0x34
 80091c4:	3316      	adds	r3, #22
 80091c6:	4618      	mov	r0, r3
 80091c8:	f7fe f92e 	bl	8007428 <ld_word>
 80091cc:	4603      	mov	r3, r0
 80091ce:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 80091d0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80091d2:	2b00      	cmp	r3, #0
 80091d4:	d106      	bne.n	80091e4 <find_volume+0x1cc>
 80091d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80091d8:	3334      	adds	r3, #52	@ 0x34
 80091da:	3324      	adds	r3, #36	@ 0x24
 80091dc:	4618      	mov	r0, r3
 80091de:	f7fe f93b 	bl	8007458 <ld_dword>
 80091e2:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 80091e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80091e6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80091e8:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 80091ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80091ec:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 80091f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80091f2:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 80091f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80091f6:	789b      	ldrb	r3, [r3, #2]
 80091f8:	2b01      	cmp	r3, #1
 80091fa:	d005      	beq.n	8009208 <find_volume+0x1f0>
 80091fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80091fe:	789b      	ldrb	r3, [r3, #2]
 8009200:	2b02      	cmp	r3, #2
 8009202:	d001      	beq.n	8009208 <find_volume+0x1f0>
 8009204:	230d      	movs	r3, #13
 8009206:	e148      	b.n	800949a <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8009208:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800920a:	789b      	ldrb	r3, [r3, #2]
 800920c:	461a      	mov	r2, r3
 800920e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009210:	fb02 f303 	mul.w	r3, r2, r3
 8009214:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8009216:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009218:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800921c:	461a      	mov	r2, r3
 800921e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009220:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8009222:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009224:	895b      	ldrh	r3, [r3, #10]
 8009226:	2b00      	cmp	r3, #0
 8009228:	d008      	beq.n	800923c <find_volume+0x224>
 800922a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800922c:	895b      	ldrh	r3, [r3, #10]
 800922e:	461a      	mov	r2, r3
 8009230:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009232:	895b      	ldrh	r3, [r3, #10]
 8009234:	3b01      	subs	r3, #1
 8009236:	4013      	ands	r3, r2
 8009238:	2b00      	cmp	r3, #0
 800923a:	d001      	beq.n	8009240 <find_volume+0x228>
 800923c:	230d      	movs	r3, #13
 800923e:	e12c      	b.n	800949a <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8009240:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009242:	3334      	adds	r3, #52	@ 0x34
 8009244:	3311      	adds	r3, #17
 8009246:	4618      	mov	r0, r3
 8009248:	f7fe f8ee 	bl	8007428 <ld_word>
 800924c:	4603      	mov	r3, r0
 800924e:	461a      	mov	r2, r3
 8009250:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009252:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8009254:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009256:	891b      	ldrh	r3, [r3, #8]
 8009258:	f003 030f 	and.w	r3, r3, #15
 800925c:	b29b      	uxth	r3, r3
 800925e:	2b00      	cmp	r3, #0
 8009260:	d001      	beq.n	8009266 <find_volume+0x24e>
 8009262:	230d      	movs	r3, #13
 8009264:	e119      	b.n	800949a <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8009266:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009268:	3334      	adds	r3, #52	@ 0x34
 800926a:	3313      	adds	r3, #19
 800926c:	4618      	mov	r0, r3
 800926e:	f7fe f8db 	bl	8007428 <ld_word>
 8009272:	4603      	mov	r3, r0
 8009274:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8009276:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009278:	2b00      	cmp	r3, #0
 800927a:	d106      	bne.n	800928a <find_volume+0x272>
 800927c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800927e:	3334      	adds	r3, #52	@ 0x34
 8009280:	3320      	adds	r3, #32
 8009282:	4618      	mov	r0, r3
 8009284:	f7fe f8e8 	bl	8007458 <ld_dword>
 8009288:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800928a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800928c:	3334      	adds	r3, #52	@ 0x34
 800928e:	330e      	adds	r3, #14
 8009290:	4618      	mov	r0, r3
 8009292:	f7fe f8c9 	bl	8007428 <ld_word>
 8009296:	4603      	mov	r3, r0
 8009298:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800929a:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800929c:	2b00      	cmp	r3, #0
 800929e:	d101      	bne.n	80092a4 <find_volume+0x28c>
 80092a0:	230d      	movs	r3, #13
 80092a2:	e0fa      	b.n	800949a <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 80092a4:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 80092a6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80092a8:	4413      	add	r3, r2
 80092aa:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80092ac:	8912      	ldrh	r2, [r2, #8]
 80092ae:	0912      	lsrs	r2, r2, #4
 80092b0:	b292      	uxth	r2, r2
 80092b2:	4413      	add	r3, r2
 80092b4:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 80092b6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80092b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80092ba:	429a      	cmp	r2, r3
 80092bc:	d204      	bcs.n	80092c8 <find_volume+0x2b0>
 80092be:	230d      	movs	r3, #13
 80092c0:	e0eb      	b.n	800949a <find_volume+0x482>
 80092c2:	bf00      	nop
 80092c4:	20000f6c 	.word	0x20000f6c
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 80092c8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80092ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80092cc:	1ad3      	subs	r3, r2, r3
 80092ce:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80092d0:	8952      	ldrh	r2, [r2, #10]
 80092d2:	fbb3 f3f2 	udiv	r3, r3, r2
 80092d6:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 80092d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80092da:	2b00      	cmp	r3, #0
 80092dc:	d101      	bne.n	80092e2 <find_volume+0x2ca>
 80092de:	230d      	movs	r3, #13
 80092e0:	e0db      	b.n	800949a <find_volume+0x482>
		fmt = FS_FAT32;
 80092e2:	2303      	movs	r3, #3
 80092e4:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 80092e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80092ea:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 80092ee:	4293      	cmp	r3, r2
 80092f0:	d802      	bhi.n	80092f8 <find_volume+0x2e0>
 80092f2:	2302      	movs	r3, #2
 80092f4:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 80092f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80092fa:	f640 72f5 	movw	r2, #4085	@ 0xff5
 80092fe:	4293      	cmp	r3, r2
 8009300:	d802      	bhi.n	8009308 <find_volume+0x2f0>
 8009302:	2301      	movs	r3, #1
 8009304:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8009308:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800930a:	1c9a      	adds	r2, r3, #2
 800930c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800930e:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 8009310:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009312:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8009314:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8009316:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8009318:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800931a:	441a      	add	r2, r3
 800931c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800931e:	625a      	str	r2, [r3, #36]	@ 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 8009320:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8009322:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009324:	441a      	add	r2, r3
 8009326:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009328:	62da      	str	r2, [r3, #44]	@ 0x2c
		if (fmt == FS_FAT32) {
 800932a:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800932e:	2b03      	cmp	r3, #3
 8009330:	d11e      	bne.n	8009370 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8009332:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009334:	3334      	adds	r3, #52	@ 0x34
 8009336:	332a      	adds	r3, #42	@ 0x2a
 8009338:	4618      	mov	r0, r3
 800933a:	f7fe f875 	bl	8007428 <ld_word>
 800933e:	4603      	mov	r3, r0
 8009340:	2b00      	cmp	r3, #0
 8009342:	d001      	beq.n	8009348 <find_volume+0x330>
 8009344:	230d      	movs	r3, #13
 8009346:	e0a8      	b.n	800949a <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8009348:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800934a:	891b      	ldrh	r3, [r3, #8]
 800934c:	2b00      	cmp	r3, #0
 800934e:	d001      	beq.n	8009354 <find_volume+0x33c>
 8009350:	230d      	movs	r3, #13
 8009352:	e0a2      	b.n	800949a <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8009354:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009356:	3334      	adds	r3, #52	@ 0x34
 8009358:	332c      	adds	r3, #44	@ 0x2c
 800935a:	4618      	mov	r0, r3
 800935c:	f7fe f87c 	bl	8007458 <ld_dword>
 8009360:	4602      	mov	r2, r0
 8009362:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009364:	629a      	str	r2, [r3, #40]	@ 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8009366:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009368:	699b      	ldr	r3, [r3, #24]
 800936a:	009b      	lsls	r3, r3, #2
 800936c:	647b      	str	r3, [r7, #68]	@ 0x44
 800936e:	e01f      	b.n	80093b0 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8009370:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009372:	891b      	ldrh	r3, [r3, #8]
 8009374:	2b00      	cmp	r3, #0
 8009376:	d101      	bne.n	800937c <find_volume+0x364>
 8009378:	230d      	movs	r3, #13
 800937a:	e08e      	b.n	800949a <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800937c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800937e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009380:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009382:	441a      	add	r2, r3
 8009384:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009386:	629a      	str	r2, [r3, #40]	@ 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8009388:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800938c:	2b02      	cmp	r3, #2
 800938e:	d103      	bne.n	8009398 <find_volume+0x380>
 8009390:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009392:	699b      	ldr	r3, [r3, #24]
 8009394:	005b      	lsls	r3, r3, #1
 8009396:	e00a      	b.n	80093ae <find_volume+0x396>
 8009398:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800939a:	699a      	ldr	r2, [r3, #24]
 800939c:	4613      	mov	r3, r2
 800939e:	005b      	lsls	r3, r3, #1
 80093a0:	4413      	add	r3, r2
 80093a2:	085a      	lsrs	r2, r3, #1
 80093a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80093a6:	699b      	ldr	r3, [r3, #24]
 80093a8:	f003 0301 	and.w	r3, r3, #1
 80093ac:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 80093ae:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 80093b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80093b2:	69da      	ldr	r2, [r3, #28]
 80093b4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80093b6:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 80093ba:	0a5b      	lsrs	r3, r3, #9
 80093bc:	429a      	cmp	r2, r3
 80093be:	d201      	bcs.n	80093c4 <find_volume+0x3ac>
 80093c0:	230d      	movs	r3, #13
 80093c2:	e06a      	b.n	800949a <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 80093c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80093c6:	f04f 32ff 	mov.w	r2, #4294967295
 80093ca:	615a      	str	r2, [r3, #20]
 80093cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80093ce:	695a      	ldr	r2, [r3, #20]
 80093d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80093d2:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 80093d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80093d6:	2280      	movs	r2, #128	@ 0x80
 80093d8:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 80093da:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80093de:	2b03      	cmp	r3, #3
 80093e0:	d149      	bne.n	8009476 <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 80093e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80093e4:	3334      	adds	r3, #52	@ 0x34
 80093e6:	3330      	adds	r3, #48	@ 0x30
 80093e8:	4618      	mov	r0, r3
 80093ea:	f7fe f81d 	bl	8007428 <ld_word>
 80093ee:	4603      	mov	r3, r0
 80093f0:	2b01      	cmp	r3, #1
 80093f2:	d140      	bne.n	8009476 <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 80093f4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80093f6:	3301      	adds	r3, #1
 80093f8:	4619      	mov	r1, r3
 80093fa:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80093fc:	f7fe fac4 	bl	8007988 <move_window>
 8009400:	4603      	mov	r3, r0
 8009402:	2b00      	cmp	r3, #0
 8009404:	d137      	bne.n	8009476 <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 8009406:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009408:	2200      	movs	r2, #0
 800940a:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800940c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800940e:	3334      	adds	r3, #52	@ 0x34
 8009410:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8009414:	4618      	mov	r0, r3
 8009416:	f7fe f807 	bl	8007428 <ld_word>
 800941a:	4603      	mov	r3, r0
 800941c:	461a      	mov	r2, r3
 800941e:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8009422:	429a      	cmp	r2, r3
 8009424:	d127      	bne.n	8009476 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8009426:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009428:	3334      	adds	r3, #52	@ 0x34
 800942a:	4618      	mov	r0, r3
 800942c:	f7fe f814 	bl	8007458 <ld_dword>
 8009430:	4603      	mov	r3, r0
 8009432:	4a1c      	ldr	r2, [pc, #112]	@ (80094a4 <find_volume+0x48c>)
 8009434:	4293      	cmp	r3, r2
 8009436:	d11e      	bne.n	8009476 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8009438:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800943a:	3334      	adds	r3, #52	@ 0x34
 800943c:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8009440:	4618      	mov	r0, r3
 8009442:	f7fe f809 	bl	8007458 <ld_dword>
 8009446:	4603      	mov	r3, r0
 8009448:	4a17      	ldr	r2, [pc, #92]	@ (80094a8 <find_volume+0x490>)
 800944a:	4293      	cmp	r3, r2
 800944c:	d113      	bne.n	8009476 <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800944e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009450:	3334      	adds	r3, #52	@ 0x34
 8009452:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 8009456:	4618      	mov	r0, r3
 8009458:	f7fd fffe 	bl	8007458 <ld_dword>
 800945c:	4602      	mov	r2, r0
 800945e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009460:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8009462:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009464:	3334      	adds	r3, #52	@ 0x34
 8009466:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 800946a:	4618      	mov	r0, r3
 800946c:	f7fd fff4 	bl	8007458 <ld_dword>
 8009470:	4602      	mov	r2, r0
 8009472:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009474:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8009476:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009478:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 800947c:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800947e:	4b0b      	ldr	r3, [pc, #44]	@ (80094ac <find_volume+0x494>)
 8009480:	881b      	ldrh	r3, [r3, #0]
 8009482:	3301      	adds	r3, #1
 8009484:	b29a      	uxth	r2, r3
 8009486:	4b09      	ldr	r3, [pc, #36]	@ (80094ac <find_volume+0x494>)
 8009488:	801a      	strh	r2, [r3, #0]
 800948a:	4b08      	ldr	r3, [pc, #32]	@ (80094ac <find_volume+0x494>)
 800948c:	881a      	ldrh	r2, [r3, #0]
 800948e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009490:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8009492:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8009494:	f7fe fa10 	bl	80078b8 <clear_lock>
#endif
	return FR_OK;
 8009498:	2300      	movs	r3, #0
}
 800949a:	4618      	mov	r0, r3
 800949c:	3758      	adds	r7, #88	@ 0x58
 800949e:	46bd      	mov	sp, r7
 80094a0:	bd80      	pop	{r7, pc}
 80094a2:	bf00      	nop
 80094a4:	41615252 	.word	0x41615252
 80094a8:	61417272 	.word	0x61417272
 80094ac:	20000f70 	.word	0x20000f70

080094b0 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 80094b0:	b580      	push	{r7, lr}
 80094b2:	b084      	sub	sp, #16
 80094b4:	af00      	add	r7, sp, #0
 80094b6:	6078      	str	r0, [r7, #4]
 80094b8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 80094ba:	2309      	movs	r3, #9
 80094bc:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	2b00      	cmp	r3, #0
 80094c2:	d01c      	beq.n	80094fe <validate+0x4e>
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	2b00      	cmp	r3, #0
 80094ca:	d018      	beq.n	80094fe <validate+0x4e>
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	781b      	ldrb	r3, [r3, #0]
 80094d2:	2b00      	cmp	r3, #0
 80094d4:	d013      	beq.n	80094fe <validate+0x4e>
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	889a      	ldrh	r2, [r3, #4]
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	88db      	ldrh	r3, [r3, #6]
 80094e0:	429a      	cmp	r2, r3
 80094e2:	d10c      	bne.n	80094fe <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	785b      	ldrb	r3, [r3, #1]
 80094ea:	4618      	mov	r0, r3
 80094ec:	f7fd fefe 	bl	80072ec <disk_status>
 80094f0:	4603      	mov	r3, r0
 80094f2:	f003 0301 	and.w	r3, r3, #1
 80094f6:	2b00      	cmp	r3, #0
 80094f8:	d101      	bne.n	80094fe <validate+0x4e>
			res = FR_OK;
 80094fa:	2300      	movs	r3, #0
 80094fc:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 80094fe:	7bfb      	ldrb	r3, [r7, #15]
 8009500:	2b00      	cmp	r3, #0
 8009502:	d102      	bne.n	800950a <validate+0x5a>
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	681b      	ldr	r3, [r3, #0]
 8009508:	e000      	b.n	800950c <validate+0x5c>
 800950a:	2300      	movs	r3, #0
 800950c:	683a      	ldr	r2, [r7, #0]
 800950e:	6013      	str	r3, [r2, #0]
	return res;
 8009510:	7bfb      	ldrb	r3, [r7, #15]
}
 8009512:	4618      	mov	r0, r3
 8009514:	3710      	adds	r7, #16
 8009516:	46bd      	mov	sp, r7
 8009518:	bd80      	pop	{r7, pc}
	...

0800951c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800951c:	b580      	push	{r7, lr}
 800951e:	b088      	sub	sp, #32
 8009520:	af00      	add	r7, sp, #0
 8009522:	60f8      	str	r0, [r7, #12]
 8009524:	60b9      	str	r1, [r7, #8]
 8009526:	4613      	mov	r3, r2
 8009528:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800952a:	68bb      	ldr	r3, [r7, #8]
 800952c:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800952e:	f107 0310 	add.w	r3, r7, #16
 8009532:	4618      	mov	r0, r3
 8009534:	f7ff fcd5 	bl	8008ee2 <get_ldnumber>
 8009538:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800953a:	69fb      	ldr	r3, [r7, #28]
 800953c:	2b00      	cmp	r3, #0
 800953e:	da01      	bge.n	8009544 <f_mount+0x28>
 8009540:	230b      	movs	r3, #11
 8009542:	e02b      	b.n	800959c <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8009544:	4a17      	ldr	r2, [pc, #92]	@ (80095a4 <f_mount+0x88>)
 8009546:	69fb      	ldr	r3, [r7, #28]
 8009548:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800954c:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800954e:	69bb      	ldr	r3, [r7, #24]
 8009550:	2b00      	cmp	r3, #0
 8009552:	d005      	beq.n	8009560 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8009554:	69b8      	ldr	r0, [r7, #24]
 8009556:	f7fe f9af 	bl	80078b8 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800955a:	69bb      	ldr	r3, [r7, #24]
 800955c:	2200      	movs	r2, #0
 800955e:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8009560:	68fb      	ldr	r3, [r7, #12]
 8009562:	2b00      	cmp	r3, #0
 8009564:	d002      	beq.n	800956c <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8009566:	68fb      	ldr	r3, [r7, #12]
 8009568:	2200      	movs	r2, #0
 800956a:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800956c:	68fa      	ldr	r2, [r7, #12]
 800956e:	490d      	ldr	r1, [pc, #52]	@ (80095a4 <f_mount+0x88>)
 8009570:	69fb      	ldr	r3, [r7, #28]
 8009572:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8009576:	68fb      	ldr	r3, [r7, #12]
 8009578:	2b00      	cmp	r3, #0
 800957a:	d002      	beq.n	8009582 <f_mount+0x66>
 800957c:	79fb      	ldrb	r3, [r7, #7]
 800957e:	2b01      	cmp	r3, #1
 8009580:	d001      	beq.n	8009586 <f_mount+0x6a>
 8009582:	2300      	movs	r3, #0
 8009584:	e00a      	b.n	800959c <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8009586:	f107 010c 	add.w	r1, r7, #12
 800958a:	f107 0308 	add.w	r3, r7, #8
 800958e:	2200      	movs	r2, #0
 8009590:	4618      	mov	r0, r3
 8009592:	f7ff fd41 	bl	8009018 <find_volume>
 8009596:	4603      	mov	r3, r0
 8009598:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800959a:	7dfb      	ldrb	r3, [r7, #23]
}
 800959c:	4618      	mov	r0, r3
 800959e:	3720      	adds	r7, #32
 80095a0:	46bd      	mov	sp, r7
 80095a2:	bd80      	pop	{r7, pc}
 80095a4:	20000f6c 	.word	0x20000f6c

080095a8 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 80095a8:	b580      	push	{r7, lr}
 80095aa:	f5ad 7d1a 	sub.w	sp, sp, #616	@ 0x268
 80095ae:	af00      	add	r7, sp, #0
 80095b0:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80095b4:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 80095b8:	6018      	str	r0, [r3, #0]
 80095ba:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80095be:	f5a3 7318 	sub.w	r3, r3, #608	@ 0x260
 80095c2:	6019      	str	r1, [r3, #0]
 80095c4:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80095c8:	f2a3 2361 	subw	r3, r3, #609	@ 0x261
 80095cc:	701a      	strb	r2, [r3, #0]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 80095ce:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80095d2:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	2b00      	cmp	r3, #0
 80095da:	d101      	bne.n	80095e0 <f_open+0x38>
 80095dc:	2309      	movs	r3, #9
 80095de:	e291      	b.n	8009b04 <f_open+0x55c>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 80095e0:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80095e4:	f2a3 2361 	subw	r3, r3, #609	@ 0x261
 80095e8:	f507 721a 	add.w	r2, r7, #616	@ 0x268
 80095ec:	f2a2 2261 	subw	r2, r2, #609	@ 0x261
 80095f0:	7812      	ldrb	r2, [r2, #0]
 80095f2:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 80095f6:	701a      	strb	r2, [r3, #0]
	res = find_volume(&path, &fs, mode);
 80095f8:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80095fc:	f2a3 2361 	subw	r3, r3, #609	@ 0x261
 8009600:	781a      	ldrb	r2, [r3, #0]
 8009602:	f507 7105 	add.w	r1, r7, #532	@ 0x214
 8009606:	f107 0308 	add.w	r3, r7, #8
 800960a:	4618      	mov	r0, r3
 800960c:	f7ff fd04 	bl	8009018 <find_volume>
 8009610:	4603      	mov	r3, r0
 8009612:	f887 3267 	strb.w	r3, [r7, #615]	@ 0x267
	if (res == FR_OK) {
 8009616:	f897 3267 	ldrb.w	r3, [r7, #615]	@ 0x267
 800961a:	2b00      	cmp	r3, #0
 800961c:	f040 8265 	bne.w	8009aea <f_open+0x542>
		dj.obj.fs = fs;
 8009620:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8009624:	f8c7 3218 	str.w	r3, [r7, #536]	@ 0x218
		INIT_NAMBUF(fs);
 8009628:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 800962c:	f107 0214 	add.w	r2, r7, #20
 8009630:	60da      	str	r2, [r3, #12]
		res = follow_path(&dj, path);	/* Follow the file path */
 8009632:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8009636:	f5a3 7318 	sub.w	r3, r3, #608	@ 0x260
 800963a:	681a      	ldr	r2, [r3, #0]
 800963c:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8009640:	4611      	mov	r1, r2
 8009642:	4618      	mov	r0, r3
 8009644:	f7ff fbdc 	bl	8008e00 <follow_path>
 8009648:	4603      	mov	r3, r0
 800964a:	f887 3267 	strb.w	r3, [r7, #615]	@ 0x267
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800964e:	f897 3267 	ldrb.w	r3, [r7, #615]	@ 0x267
 8009652:	2b00      	cmp	r3, #0
 8009654:	d11c      	bne.n	8009690 <f_open+0xe8>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8009656:	f897 3247 	ldrb.w	r3, [r7, #583]	@ 0x247
 800965a:	b25b      	sxtb	r3, r3
 800965c:	2b00      	cmp	r3, #0
 800965e:	da03      	bge.n	8009668 <f_open+0xc0>
				res = FR_INVALID_NAME;
 8009660:	2306      	movs	r3, #6
 8009662:	f887 3267 	strb.w	r3, [r7, #615]	@ 0x267
 8009666:	e013      	b.n	8009690 <f_open+0xe8>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8009668:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800966c:	f2a3 2361 	subw	r3, r3, #609	@ 0x261
 8009670:	781b      	ldrb	r3, [r3, #0]
 8009672:	2b01      	cmp	r3, #1
 8009674:	bf8c      	ite	hi
 8009676:	2301      	movhi	r3, #1
 8009678:	2300      	movls	r3, #0
 800967a:	b2db      	uxtb	r3, r3
 800967c:	461a      	mov	r2, r3
 800967e:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8009682:	4611      	mov	r1, r2
 8009684:	4618      	mov	r0, r3
 8009686:	f7fd ffcf 	bl	8007628 <chk_lock>
 800968a:	4603      	mov	r3, r0
 800968c:	f887 3267 	strb.w	r3, [r7, #615]	@ 0x267
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8009690:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8009694:	f2a3 2361 	subw	r3, r3, #609	@ 0x261
 8009698:	781b      	ldrb	r3, [r3, #0]
 800969a:	f003 031c 	and.w	r3, r3, #28
 800969e:	2b00      	cmp	r3, #0
 80096a0:	f000 80a7 	beq.w	80097f2 <f_open+0x24a>
			if (res != FR_OK) {					/* No file, create new */
 80096a4:	f897 3267 	ldrb.w	r3, [r7, #615]	@ 0x267
 80096a8:	2b00      	cmp	r3, #0
 80096aa:	d01f      	beq.n	80096ec <f_open+0x144>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 80096ac:	f897 3267 	ldrb.w	r3, [r7, #615]	@ 0x267
 80096b0:	2b04      	cmp	r3, #4
 80096b2:	d10e      	bne.n	80096d2 <f_open+0x12a>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 80096b4:	f7fe f814 	bl	80076e0 <enq_lock>
 80096b8:	4603      	mov	r3, r0
 80096ba:	2b00      	cmp	r3, #0
 80096bc:	d006      	beq.n	80096cc <f_open+0x124>
 80096be:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80096c2:	4618      	mov	r0, r3
 80096c4:	f7ff f8ec 	bl	80088a0 <dir_register>
 80096c8:	4603      	mov	r3, r0
 80096ca:	e000      	b.n	80096ce <f_open+0x126>
 80096cc:	2312      	movs	r3, #18
 80096ce:	f887 3267 	strb.w	r3, [r7, #615]	@ 0x267
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 80096d2:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80096d6:	f2a3 2361 	subw	r3, r3, #609	@ 0x261
 80096da:	f507 721a 	add.w	r2, r7, #616	@ 0x268
 80096de:	f2a2 2261 	subw	r2, r2, #609	@ 0x261
 80096e2:	7812      	ldrb	r2, [r2, #0]
 80096e4:	f042 0208 	orr.w	r2, r2, #8
 80096e8:	701a      	strb	r2, [r3, #0]
 80096ea:	e015      	b.n	8009718 <f_open+0x170>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 80096ec:	f897 321e 	ldrb.w	r3, [r7, #542]	@ 0x21e
 80096f0:	f003 0311 	and.w	r3, r3, #17
 80096f4:	2b00      	cmp	r3, #0
 80096f6:	d003      	beq.n	8009700 <f_open+0x158>
					res = FR_DENIED;
 80096f8:	2307      	movs	r3, #7
 80096fa:	f887 3267 	strb.w	r3, [r7, #615]	@ 0x267
 80096fe:	e00b      	b.n	8009718 <f_open+0x170>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8009700:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8009704:	f2a3 2361 	subw	r3, r3, #609	@ 0x261
 8009708:	781b      	ldrb	r3, [r3, #0]
 800970a:	f003 0304 	and.w	r3, r3, #4
 800970e:	2b00      	cmp	r3, #0
 8009710:	d002      	beq.n	8009718 <f_open+0x170>
 8009712:	2308      	movs	r3, #8
 8009714:	f887 3267 	strb.w	r3, [r7, #615]	@ 0x267
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8009718:	f897 3267 	ldrb.w	r3, [r7, #615]	@ 0x267
 800971c:	2b00      	cmp	r3, #0
 800971e:	f040 8088 	bne.w	8009832 <f_open+0x28a>
 8009722:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8009726:	f2a3 2361 	subw	r3, r3, #609	@ 0x261
 800972a:	781b      	ldrb	r3, [r3, #0]
 800972c:	f003 0308 	and.w	r3, r3, #8
 8009730:	2b00      	cmp	r3, #0
 8009732:	d07e      	beq.n	8009832 <f_open+0x28a>
				dw = GET_FATTIME();
 8009734:	f7fd fb98 	bl	8006e68 <get_fattime>
 8009738:	f8c7 0258 	str.w	r0, [r7, #600]	@ 0x258
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800973c:	f8d7 3238 	ldr.w	r3, [r7, #568]	@ 0x238
 8009740:	330e      	adds	r3, #14
 8009742:	f8d7 1258 	ldr.w	r1, [r7, #600]	@ 0x258
 8009746:	4618      	mov	r0, r3
 8009748:	f7fd fec4 	bl	80074d4 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800974c:	f8d7 3238 	ldr.w	r3, [r7, #568]	@ 0x238
 8009750:	3316      	adds	r3, #22
 8009752:	f8d7 1258 	ldr.w	r1, [r7, #600]	@ 0x258
 8009756:	4618      	mov	r0, r3
 8009758:	f7fd febc 	bl	80074d4 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800975c:	f8d7 3238 	ldr.w	r3, [r7, #568]	@ 0x238
 8009760:	330b      	adds	r3, #11
 8009762:	2220      	movs	r2, #32
 8009764:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8009766:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 800976a:	f8d7 2238 	ldr.w	r2, [r7, #568]	@ 0x238
 800976e:	4611      	mov	r1, r2
 8009770:	4618      	mov	r0, r3
 8009772:	f7fe fe0d 	bl	8008390 <ld_clust>
 8009776:	f8c7 0254 	str.w	r0, [r7, #596]	@ 0x254
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800977a:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 800977e:	f8d7 1238 	ldr.w	r1, [r7, #568]	@ 0x238
 8009782:	2200      	movs	r2, #0
 8009784:	4618      	mov	r0, r3
 8009786:	f7fe fe22 	bl	80083ce <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800978a:	f8d7 3238 	ldr.w	r3, [r7, #568]	@ 0x238
 800978e:	331c      	adds	r3, #28
 8009790:	2100      	movs	r1, #0
 8009792:	4618      	mov	r0, r3
 8009794:	f7fd fe9e 	bl	80074d4 <st_dword>
					fs->wflag = 1;
 8009798:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 800979c:	2201      	movs	r2, #1
 800979e:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 80097a0:	f8d7 3254 	ldr.w	r3, [r7, #596]	@ 0x254
 80097a4:	2b00      	cmp	r3, #0
 80097a6:	d044      	beq.n	8009832 <f_open+0x28a>
						dw = fs->winsect;
 80097a8:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 80097ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80097ae:	f8c7 3258 	str.w	r3, [r7, #600]	@ 0x258
						res = remove_chain(&dj.obj, cl, 0);
 80097b2:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80097b6:	2200      	movs	r2, #0
 80097b8:	f8d7 1254 	ldr.w	r1, [r7, #596]	@ 0x254
 80097bc:	4618      	mov	r0, r3
 80097be:	f7fe fb2f 	bl	8007e20 <remove_chain>
 80097c2:	4603      	mov	r3, r0
 80097c4:	f887 3267 	strb.w	r3, [r7, #615]	@ 0x267
						if (res == FR_OK) {
 80097c8:	f897 3267 	ldrb.w	r3, [r7, #615]	@ 0x267
 80097cc:	2b00      	cmp	r3, #0
 80097ce:	d130      	bne.n	8009832 <f_open+0x28a>
							res = move_window(fs, dw);
 80097d0:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 80097d4:	f8d7 1258 	ldr.w	r1, [r7, #600]	@ 0x258
 80097d8:	4618      	mov	r0, r3
 80097da:	f7fe f8d5 	bl	8007988 <move_window>
 80097de:	4603      	mov	r3, r0
 80097e0:	f887 3267 	strb.w	r3, [r7, #615]	@ 0x267
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 80097e4:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 80097e8:	f8d7 2254 	ldr.w	r2, [r7, #596]	@ 0x254
 80097ec:	3a01      	subs	r2, #1
 80097ee:	611a      	str	r2, [r3, #16]
 80097f0:	e01f      	b.n	8009832 <f_open+0x28a>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 80097f2:	f897 3267 	ldrb.w	r3, [r7, #615]	@ 0x267
 80097f6:	2b00      	cmp	r3, #0
 80097f8:	d11b      	bne.n	8009832 <f_open+0x28a>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 80097fa:	f897 321e 	ldrb.w	r3, [r7, #542]	@ 0x21e
 80097fe:	f003 0310 	and.w	r3, r3, #16
 8009802:	2b00      	cmp	r3, #0
 8009804:	d003      	beq.n	800980e <f_open+0x266>
					res = FR_NO_FILE;
 8009806:	2304      	movs	r3, #4
 8009808:	f887 3267 	strb.w	r3, [r7, #615]	@ 0x267
 800980c:	e011      	b.n	8009832 <f_open+0x28a>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800980e:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8009812:	f2a3 2361 	subw	r3, r3, #609	@ 0x261
 8009816:	781b      	ldrb	r3, [r3, #0]
 8009818:	f003 0302 	and.w	r3, r3, #2
 800981c:	2b00      	cmp	r3, #0
 800981e:	d008      	beq.n	8009832 <f_open+0x28a>
 8009820:	f897 321e 	ldrb.w	r3, [r7, #542]	@ 0x21e
 8009824:	f003 0301 	and.w	r3, r3, #1
 8009828:	2b00      	cmp	r3, #0
 800982a:	d002      	beq.n	8009832 <f_open+0x28a>
						res = FR_DENIED;
 800982c:	2307      	movs	r3, #7
 800982e:	f887 3267 	strb.w	r3, [r7, #615]	@ 0x267
					}
				}
			}
		}
		if (res == FR_OK) {
 8009832:	f897 3267 	ldrb.w	r3, [r7, #615]	@ 0x267
 8009836:	2b00      	cmp	r3, #0
 8009838:	d148      	bne.n	80098cc <f_open+0x324>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800983a:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800983e:	f2a3 2361 	subw	r3, r3, #609	@ 0x261
 8009842:	781b      	ldrb	r3, [r3, #0]
 8009844:	f003 0308 	and.w	r3, r3, #8
 8009848:	2b00      	cmp	r3, #0
 800984a:	d00b      	beq.n	8009864 <f_open+0x2bc>
				mode |= FA_MODIFIED;
 800984c:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8009850:	f2a3 2361 	subw	r3, r3, #609	@ 0x261
 8009854:	f507 721a 	add.w	r2, r7, #616	@ 0x268
 8009858:	f2a2 2261 	subw	r2, r2, #609	@ 0x261
 800985c:	7812      	ldrb	r2, [r2, #0]
 800985e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009862:	701a      	strb	r2, [r3, #0]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8009864:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8009868:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800986a:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800986e:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 8009876:	f8d7 2238 	ldr.w	r2, [r7, #568]	@ 0x238
 800987a:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800987e:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 8009882:	681b      	ldr	r3, [r3, #0]
 8009884:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8009886:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800988a:	f2a3 2361 	subw	r3, r3, #609	@ 0x261
 800988e:	781b      	ldrb	r3, [r3, #0]
 8009890:	2b01      	cmp	r3, #1
 8009892:	bf8c      	ite	hi
 8009894:	2301      	movhi	r3, #1
 8009896:	2300      	movls	r3, #0
 8009898:	b2db      	uxtb	r3, r3
 800989a:	461a      	mov	r2, r3
 800989c:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80098a0:	4611      	mov	r1, r2
 80098a2:	4618      	mov	r0, r3
 80098a4:	f7fd ff3e 	bl	8007724 <inc_lock>
 80098a8:	4602      	mov	r2, r0
 80098aa:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80098ae:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 80098b2:	681b      	ldr	r3, [r3, #0]
 80098b4:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 80098b6:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80098ba:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 80098be:	681b      	ldr	r3, [r3, #0]
 80098c0:	691b      	ldr	r3, [r3, #16]
 80098c2:	2b00      	cmp	r3, #0
 80098c4:	d102      	bne.n	80098cc <f_open+0x324>
 80098c6:	2302      	movs	r3, #2
 80098c8:	f887 3267 	strb.w	r3, [r7, #615]	@ 0x267
				}
			}
		}
#endif

		if (res == FR_OK) {
 80098cc:	f897 3267 	ldrb.w	r3, [r7, #615]	@ 0x267
 80098d0:	2b00      	cmp	r3, #0
 80098d2:	f040 810a 	bne.w	8009aea <f_open+0x542>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 80098d6:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 80098da:	f8d7 2238 	ldr.w	r2, [r7, #568]	@ 0x238
 80098de:	4611      	mov	r1, r2
 80098e0:	4618      	mov	r0, r3
 80098e2:	f7fe fd55 	bl	8008390 <ld_clust>
 80098e6:	4602      	mov	r2, r0
 80098e8:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80098ec:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 80098f0:	681b      	ldr	r3, [r3, #0]
 80098f2:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 80098f4:	f8d7 3238 	ldr.w	r3, [r7, #568]	@ 0x238
 80098f8:	331c      	adds	r3, #28
 80098fa:	4618      	mov	r0, r3
 80098fc:	f7fd fdac 	bl	8007458 <ld_dword>
 8009900:	4602      	mov	r2, r0
 8009902:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8009906:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 800990a:	681b      	ldr	r3, [r3, #0]
 800990c:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800990e:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8009912:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 8009916:	681b      	ldr	r3, [r3, #0]
 8009918:	2200      	movs	r2, #0
 800991a:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800991c:	f8d7 2214 	ldr.w	r2, [r7, #532]	@ 0x214
 8009920:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8009924:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 8009928:	681b      	ldr	r3, [r3, #0]
 800992a:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800992c:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8009930:	88da      	ldrh	r2, [r3, #6]
 8009932:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8009936:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 800993a:	681b      	ldr	r3, [r3, #0]
 800993c:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800993e:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8009942:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 8009946:	681b      	ldr	r3, [r3, #0]
 8009948:	f507 721a 	add.w	r2, r7, #616	@ 0x268
 800994c:	f2a2 2261 	subw	r2, r2, #609	@ 0x261
 8009950:	7812      	ldrb	r2, [r2, #0]
 8009952:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8009954:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8009958:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 800995c:	681b      	ldr	r3, [r3, #0]
 800995e:	2200      	movs	r2, #0
 8009960:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8009962:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8009966:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 800996a:	681b      	ldr	r3, [r3, #0]
 800996c:	2200      	movs	r2, #0
 800996e:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8009970:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8009974:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 8009978:	681b      	ldr	r3, [r3, #0]
 800997a:	2200      	movs	r2, #0
 800997c:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800997e:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8009982:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 8009986:	681b      	ldr	r3, [r3, #0]
 8009988:	3330      	adds	r3, #48	@ 0x30
 800998a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800998e:	2100      	movs	r1, #0
 8009990:	4618      	mov	r0, r3
 8009992:	f7fd fdec 	bl	800756e <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8009996:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800999a:	f2a3 2361 	subw	r3, r3, #609	@ 0x261
 800999e:	781b      	ldrb	r3, [r3, #0]
 80099a0:	f003 0320 	and.w	r3, r3, #32
 80099a4:	2b00      	cmp	r3, #0
 80099a6:	f000 80a0 	beq.w	8009aea <f_open+0x542>
 80099aa:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80099ae:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 80099b2:	681b      	ldr	r3, [r3, #0]
 80099b4:	68db      	ldr	r3, [r3, #12]
 80099b6:	2b00      	cmp	r3, #0
 80099b8:	f000 8097 	beq.w	8009aea <f_open+0x542>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 80099bc:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80099c0:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 80099c4:	681b      	ldr	r3, [r3, #0]
 80099c6:	68da      	ldr	r2, [r3, #12]
 80099c8:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80099cc:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 80099d0:	681b      	ldr	r3, [r3, #0]
 80099d2:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 80099d4:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 80099d8:	895b      	ldrh	r3, [r3, #10]
 80099da:	025b      	lsls	r3, r3, #9
 80099dc:	f8c7 3250 	str.w	r3, [r7, #592]	@ 0x250
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 80099e0:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80099e4:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 80099e8:	681b      	ldr	r3, [r3, #0]
 80099ea:	689b      	ldr	r3, [r3, #8]
 80099ec:	f8c7 3260 	str.w	r3, [r7, #608]	@ 0x260
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80099f0:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80099f4:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 80099f8:	681b      	ldr	r3, [r3, #0]
 80099fa:	68db      	ldr	r3, [r3, #12]
 80099fc:	f8c7 325c 	str.w	r3, [r7, #604]	@ 0x25c
 8009a00:	e021      	b.n	8009a46 <f_open+0x49e>
					clst = get_fat(&fp->obj, clst);
 8009a02:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8009a06:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 8009a0a:	681b      	ldr	r3, [r3, #0]
 8009a0c:	f8d7 1260 	ldr.w	r1, [r7, #608]	@ 0x260
 8009a10:	4618      	mov	r0, r3
 8009a12:	f7fe f874 	bl	8007afe <get_fat>
 8009a16:	f8c7 0260 	str.w	r0, [r7, #608]	@ 0x260
					if (clst <= 1) res = FR_INT_ERR;
 8009a1a:	f8d7 3260 	ldr.w	r3, [r7, #608]	@ 0x260
 8009a1e:	2b01      	cmp	r3, #1
 8009a20:	d802      	bhi.n	8009a28 <f_open+0x480>
 8009a22:	2302      	movs	r3, #2
 8009a24:	f887 3267 	strb.w	r3, [r7, #615]	@ 0x267
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8009a28:	f8d7 3260 	ldr.w	r3, [r7, #608]	@ 0x260
 8009a2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a30:	d102      	bne.n	8009a38 <f_open+0x490>
 8009a32:	2301      	movs	r3, #1
 8009a34:	f887 3267 	strb.w	r3, [r7, #615]	@ 0x267
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8009a38:	f8d7 225c 	ldr.w	r2, [r7, #604]	@ 0x25c
 8009a3c:	f8d7 3250 	ldr.w	r3, [r7, #592]	@ 0x250
 8009a40:	1ad3      	subs	r3, r2, r3
 8009a42:	f8c7 325c 	str.w	r3, [r7, #604]	@ 0x25c
 8009a46:	f897 3267 	ldrb.w	r3, [r7, #615]	@ 0x267
 8009a4a:	2b00      	cmp	r3, #0
 8009a4c:	d105      	bne.n	8009a5a <f_open+0x4b2>
 8009a4e:	f8d7 225c 	ldr.w	r2, [r7, #604]	@ 0x25c
 8009a52:	f8d7 3250 	ldr.w	r3, [r7, #592]	@ 0x250
 8009a56:	429a      	cmp	r2, r3
 8009a58:	d8d3      	bhi.n	8009a02 <f_open+0x45a>
				}
				fp->clust = clst;
 8009a5a:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8009a5e:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 8009a62:	681b      	ldr	r3, [r3, #0]
 8009a64:	f8d7 2260 	ldr.w	r2, [r7, #608]	@ 0x260
 8009a68:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8009a6a:	f897 3267 	ldrb.w	r3, [r7, #615]	@ 0x267
 8009a6e:	2b00      	cmp	r3, #0
 8009a70:	d13b      	bne.n	8009aea <f_open+0x542>
 8009a72:	f8d7 325c 	ldr.w	r3, [r7, #604]	@ 0x25c
 8009a76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009a7a:	2b00      	cmp	r3, #0
 8009a7c:	d035      	beq.n	8009aea <f_open+0x542>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8009a7e:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8009a82:	f8d7 1260 	ldr.w	r1, [r7, #608]	@ 0x260
 8009a86:	4618      	mov	r0, r3
 8009a88:	f7fe f81a 	bl	8007ac0 <clust2sect>
 8009a8c:	f8c7 024c 	str.w	r0, [r7, #588]	@ 0x24c
 8009a90:	f8d7 324c 	ldr.w	r3, [r7, #588]	@ 0x24c
 8009a94:	2b00      	cmp	r3, #0
 8009a96:	d103      	bne.n	8009aa0 <f_open+0x4f8>
						res = FR_INT_ERR;
 8009a98:	2302      	movs	r3, #2
 8009a9a:	f887 3267 	strb.w	r3, [r7, #615]	@ 0x267
 8009a9e:	e024      	b.n	8009aea <f_open+0x542>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8009aa0:	f8d7 325c 	ldr.w	r3, [r7, #604]	@ 0x25c
 8009aa4:	0a5a      	lsrs	r2, r3, #9
 8009aa6:	f8d7 324c 	ldr.w	r3, [r7, #588]	@ 0x24c
 8009aaa:	441a      	add	r2, r3
 8009aac:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8009ab0:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 8009ab4:	681b      	ldr	r3, [r3, #0]
 8009ab6:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8009ab8:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8009abc:	7858      	ldrb	r0, [r3, #1]
 8009abe:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8009ac2:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 8009ac6:	681b      	ldr	r3, [r3, #0]
 8009ac8:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8009acc:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8009ad0:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 8009ad4:	681b      	ldr	r3, [r3, #0]
 8009ad6:	6a1a      	ldr	r2, [r3, #32]
 8009ad8:	2301      	movs	r3, #1
 8009ada:	f7fd fc47 	bl	800736c <disk_read>
 8009ade:	4603      	mov	r3, r0
 8009ae0:	2b00      	cmp	r3, #0
 8009ae2:	d002      	beq.n	8009aea <f_open+0x542>
 8009ae4:	2301      	movs	r3, #1
 8009ae6:	f887 3267 	strb.w	r3, [r7, #615]	@ 0x267
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8009aea:	f897 3267 	ldrb.w	r3, [r7, #615]	@ 0x267
 8009aee:	2b00      	cmp	r3, #0
 8009af0:	d006      	beq.n	8009b00 <f_open+0x558>
 8009af2:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8009af6:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 8009afa:	681b      	ldr	r3, [r3, #0]
 8009afc:	2200      	movs	r2, #0
 8009afe:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8009b00:	f897 3267 	ldrb.w	r3, [r7, #615]	@ 0x267
}
 8009b04:	4618      	mov	r0, r3
 8009b06:	f507 771a 	add.w	r7, r7, #616	@ 0x268
 8009b0a:	46bd      	mov	sp, r7
 8009b0c:	bd80      	pop	{r7, pc}

08009b0e <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8009b0e:	b580      	push	{r7, lr}
 8009b10:	b08e      	sub	sp, #56	@ 0x38
 8009b12:	af00      	add	r7, sp, #0
 8009b14:	60f8      	str	r0, [r7, #12]
 8009b16:	60b9      	str	r1, [r7, #8]
 8009b18:	607a      	str	r2, [r7, #4]
 8009b1a:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 8009b1c:	68bb      	ldr	r3, [r7, #8]
 8009b1e:	627b      	str	r3, [r7, #36]	@ 0x24


	*br = 0;	/* Clear read byte counter */
 8009b20:	683b      	ldr	r3, [r7, #0]
 8009b22:	2200      	movs	r2, #0
 8009b24:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8009b26:	68fb      	ldr	r3, [r7, #12]
 8009b28:	f107 0214 	add.w	r2, r7, #20
 8009b2c:	4611      	mov	r1, r2
 8009b2e:	4618      	mov	r0, r3
 8009b30:	f7ff fcbe 	bl	80094b0 <validate>
 8009b34:	4603      	mov	r3, r0
 8009b36:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8009b3a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8009b3e:	2b00      	cmp	r3, #0
 8009b40:	d107      	bne.n	8009b52 <f_read+0x44>
 8009b42:	68fb      	ldr	r3, [r7, #12]
 8009b44:	7d5b      	ldrb	r3, [r3, #21]
 8009b46:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8009b4a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8009b4e:	2b00      	cmp	r3, #0
 8009b50:	d002      	beq.n	8009b58 <f_read+0x4a>
 8009b52:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8009b56:	e115      	b.n	8009d84 <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8009b58:	68fb      	ldr	r3, [r7, #12]
 8009b5a:	7d1b      	ldrb	r3, [r3, #20]
 8009b5c:	f003 0301 	and.w	r3, r3, #1
 8009b60:	2b00      	cmp	r3, #0
 8009b62:	d101      	bne.n	8009b68 <f_read+0x5a>
 8009b64:	2307      	movs	r3, #7
 8009b66:	e10d      	b.n	8009d84 <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 8009b68:	68fb      	ldr	r3, [r7, #12]
 8009b6a:	68da      	ldr	r2, [r3, #12]
 8009b6c:	68fb      	ldr	r3, [r7, #12]
 8009b6e:	699b      	ldr	r3, [r3, #24]
 8009b70:	1ad3      	subs	r3, r2, r3
 8009b72:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8009b74:	687a      	ldr	r2, [r7, #4]
 8009b76:	6a3b      	ldr	r3, [r7, #32]
 8009b78:	429a      	cmp	r2, r3
 8009b7a:	f240 80fe 	bls.w	8009d7a <f_read+0x26c>
 8009b7e:	6a3b      	ldr	r3, [r7, #32]
 8009b80:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8009b82:	e0fa      	b.n	8009d7a <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8009b84:	68fb      	ldr	r3, [r7, #12]
 8009b86:	699b      	ldr	r3, [r3, #24]
 8009b88:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009b8c:	2b00      	cmp	r3, #0
 8009b8e:	f040 80c6 	bne.w	8009d1e <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8009b92:	68fb      	ldr	r3, [r7, #12]
 8009b94:	699b      	ldr	r3, [r3, #24]
 8009b96:	0a5b      	lsrs	r3, r3, #9
 8009b98:	697a      	ldr	r2, [r7, #20]
 8009b9a:	8952      	ldrh	r2, [r2, #10]
 8009b9c:	3a01      	subs	r2, #1
 8009b9e:	4013      	ands	r3, r2
 8009ba0:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 8009ba2:	69fb      	ldr	r3, [r7, #28]
 8009ba4:	2b00      	cmp	r3, #0
 8009ba6:	d12f      	bne.n	8009c08 <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8009ba8:	68fb      	ldr	r3, [r7, #12]
 8009baa:	699b      	ldr	r3, [r3, #24]
 8009bac:	2b00      	cmp	r3, #0
 8009bae:	d103      	bne.n	8009bb8 <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8009bb0:	68fb      	ldr	r3, [r7, #12]
 8009bb2:	689b      	ldr	r3, [r3, #8]
 8009bb4:	633b      	str	r3, [r7, #48]	@ 0x30
 8009bb6:	e013      	b.n	8009be0 <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8009bb8:	68fb      	ldr	r3, [r7, #12]
 8009bba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009bbc:	2b00      	cmp	r3, #0
 8009bbe:	d007      	beq.n	8009bd0 <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8009bc0:	68fb      	ldr	r3, [r7, #12]
 8009bc2:	699b      	ldr	r3, [r3, #24]
 8009bc4:	4619      	mov	r1, r3
 8009bc6:	68f8      	ldr	r0, [r7, #12]
 8009bc8:	f7fe fa27 	bl	800801a <clmt_clust>
 8009bcc:	6338      	str	r0, [r7, #48]	@ 0x30
 8009bce:	e007      	b.n	8009be0 <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8009bd0:	68fa      	ldr	r2, [r7, #12]
 8009bd2:	68fb      	ldr	r3, [r7, #12]
 8009bd4:	69db      	ldr	r3, [r3, #28]
 8009bd6:	4619      	mov	r1, r3
 8009bd8:	4610      	mov	r0, r2
 8009bda:	f7fd ff90 	bl	8007afe <get_fat>
 8009bde:	6338      	str	r0, [r7, #48]	@ 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8009be0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009be2:	2b01      	cmp	r3, #1
 8009be4:	d804      	bhi.n	8009bf0 <f_read+0xe2>
 8009be6:	68fb      	ldr	r3, [r7, #12]
 8009be8:	2202      	movs	r2, #2
 8009bea:	755a      	strb	r2, [r3, #21]
 8009bec:	2302      	movs	r3, #2
 8009bee:	e0c9      	b.n	8009d84 <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8009bf0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009bf2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009bf6:	d104      	bne.n	8009c02 <f_read+0xf4>
 8009bf8:	68fb      	ldr	r3, [r7, #12]
 8009bfa:	2201      	movs	r2, #1
 8009bfc:	755a      	strb	r2, [r3, #21]
 8009bfe:	2301      	movs	r3, #1
 8009c00:	e0c0      	b.n	8009d84 <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 8009c02:	68fb      	ldr	r3, [r7, #12]
 8009c04:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009c06:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8009c08:	697a      	ldr	r2, [r7, #20]
 8009c0a:	68fb      	ldr	r3, [r7, #12]
 8009c0c:	69db      	ldr	r3, [r3, #28]
 8009c0e:	4619      	mov	r1, r3
 8009c10:	4610      	mov	r0, r2
 8009c12:	f7fd ff55 	bl	8007ac0 <clust2sect>
 8009c16:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8009c18:	69bb      	ldr	r3, [r7, #24]
 8009c1a:	2b00      	cmp	r3, #0
 8009c1c:	d104      	bne.n	8009c28 <f_read+0x11a>
 8009c1e:	68fb      	ldr	r3, [r7, #12]
 8009c20:	2202      	movs	r2, #2
 8009c22:	755a      	strb	r2, [r3, #21]
 8009c24:	2302      	movs	r3, #2
 8009c26:	e0ad      	b.n	8009d84 <f_read+0x276>
			sect += csect;
 8009c28:	69ba      	ldr	r2, [r7, #24]
 8009c2a:	69fb      	ldr	r3, [r7, #28]
 8009c2c:	4413      	add	r3, r2
 8009c2e:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	0a5b      	lsrs	r3, r3, #9
 8009c34:	62bb      	str	r3, [r7, #40]	@ 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 8009c36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c38:	2b00      	cmp	r3, #0
 8009c3a:	d039      	beq.n	8009cb0 <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8009c3c:	69fa      	ldr	r2, [r7, #28]
 8009c3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c40:	4413      	add	r3, r2
 8009c42:	697a      	ldr	r2, [r7, #20]
 8009c44:	8952      	ldrh	r2, [r2, #10]
 8009c46:	4293      	cmp	r3, r2
 8009c48:	d905      	bls.n	8009c56 <f_read+0x148>
					cc = fs->csize - csect;
 8009c4a:	697b      	ldr	r3, [r7, #20]
 8009c4c:	895b      	ldrh	r3, [r3, #10]
 8009c4e:	461a      	mov	r2, r3
 8009c50:	69fb      	ldr	r3, [r7, #28]
 8009c52:	1ad3      	subs	r3, r2, r3
 8009c54:	62bb      	str	r3, [r7, #40]	@ 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8009c56:	697b      	ldr	r3, [r7, #20]
 8009c58:	7858      	ldrb	r0, [r3, #1]
 8009c5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c5c:	69ba      	ldr	r2, [r7, #24]
 8009c5e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8009c60:	f7fd fb84 	bl	800736c <disk_read>
 8009c64:	4603      	mov	r3, r0
 8009c66:	2b00      	cmp	r3, #0
 8009c68:	d004      	beq.n	8009c74 <f_read+0x166>
 8009c6a:	68fb      	ldr	r3, [r7, #12]
 8009c6c:	2201      	movs	r2, #1
 8009c6e:	755a      	strb	r2, [r3, #21]
 8009c70:	2301      	movs	r3, #1
 8009c72:	e087      	b.n	8009d84 <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8009c74:	68fb      	ldr	r3, [r7, #12]
 8009c76:	7d1b      	ldrb	r3, [r3, #20]
 8009c78:	b25b      	sxtb	r3, r3
 8009c7a:	2b00      	cmp	r3, #0
 8009c7c:	da14      	bge.n	8009ca8 <f_read+0x19a>
 8009c7e:	68fb      	ldr	r3, [r7, #12]
 8009c80:	6a1a      	ldr	r2, [r3, #32]
 8009c82:	69bb      	ldr	r3, [r7, #24]
 8009c84:	1ad3      	subs	r3, r2, r3
 8009c86:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009c88:	429a      	cmp	r2, r3
 8009c8a:	d90d      	bls.n	8009ca8 <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 8009c8c:	68fb      	ldr	r3, [r7, #12]
 8009c8e:	6a1a      	ldr	r2, [r3, #32]
 8009c90:	69bb      	ldr	r3, [r7, #24]
 8009c92:	1ad3      	subs	r3, r2, r3
 8009c94:	025b      	lsls	r3, r3, #9
 8009c96:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009c98:	18d0      	adds	r0, r2, r3
 8009c9a:	68fb      	ldr	r3, [r7, #12]
 8009c9c:	3330      	adds	r3, #48	@ 0x30
 8009c9e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009ca2:	4619      	mov	r1, r3
 8009ca4:	f7fd fc42 	bl	800752c <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8009ca8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009caa:	025b      	lsls	r3, r3, #9
 8009cac:	62fb      	str	r3, [r7, #44]	@ 0x2c
				continue;
 8009cae:	e050      	b.n	8009d52 <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 8009cb0:	68fb      	ldr	r3, [r7, #12]
 8009cb2:	6a1b      	ldr	r3, [r3, #32]
 8009cb4:	69ba      	ldr	r2, [r7, #24]
 8009cb6:	429a      	cmp	r2, r3
 8009cb8:	d02e      	beq.n	8009d18 <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8009cba:	68fb      	ldr	r3, [r7, #12]
 8009cbc:	7d1b      	ldrb	r3, [r3, #20]
 8009cbe:	b25b      	sxtb	r3, r3
 8009cc0:	2b00      	cmp	r3, #0
 8009cc2:	da18      	bge.n	8009cf6 <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8009cc4:	697b      	ldr	r3, [r7, #20]
 8009cc6:	7858      	ldrb	r0, [r3, #1]
 8009cc8:	68fb      	ldr	r3, [r7, #12]
 8009cca:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8009cce:	68fb      	ldr	r3, [r7, #12]
 8009cd0:	6a1a      	ldr	r2, [r3, #32]
 8009cd2:	2301      	movs	r3, #1
 8009cd4:	f7fd fb6a 	bl	80073ac <disk_write>
 8009cd8:	4603      	mov	r3, r0
 8009cda:	2b00      	cmp	r3, #0
 8009cdc:	d004      	beq.n	8009ce8 <f_read+0x1da>
 8009cde:	68fb      	ldr	r3, [r7, #12]
 8009ce0:	2201      	movs	r2, #1
 8009ce2:	755a      	strb	r2, [r3, #21]
 8009ce4:	2301      	movs	r3, #1
 8009ce6:	e04d      	b.n	8009d84 <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 8009ce8:	68fb      	ldr	r3, [r7, #12]
 8009cea:	7d1b      	ldrb	r3, [r3, #20]
 8009cec:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009cf0:	b2da      	uxtb	r2, r3
 8009cf2:	68fb      	ldr	r3, [r7, #12]
 8009cf4:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8009cf6:	697b      	ldr	r3, [r7, #20]
 8009cf8:	7858      	ldrb	r0, [r3, #1]
 8009cfa:	68fb      	ldr	r3, [r7, #12]
 8009cfc:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8009d00:	2301      	movs	r3, #1
 8009d02:	69ba      	ldr	r2, [r7, #24]
 8009d04:	f7fd fb32 	bl	800736c <disk_read>
 8009d08:	4603      	mov	r3, r0
 8009d0a:	2b00      	cmp	r3, #0
 8009d0c:	d004      	beq.n	8009d18 <f_read+0x20a>
 8009d0e:	68fb      	ldr	r3, [r7, #12]
 8009d10:	2201      	movs	r2, #1
 8009d12:	755a      	strb	r2, [r3, #21]
 8009d14:	2301      	movs	r3, #1
 8009d16:	e035      	b.n	8009d84 <f_read+0x276>
			}
#endif
			fp->sect = sect;
 8009d18:	68fb      	ldr	r3, [r7, #12]
 8009d1a:	69ba      	ldr	r2, [r7, #24]
 8009d1c:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8009d1e:	68fb      	ldr	r3, [r7, #12]
 8009d20:	699b      	ldr	r3, [r3, #24]
 8009d22:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009d26:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 8009d2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 8009d2c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	429a      	cmp	r2, r3
 8009d32:	d901      	bls.n	8009d38 <f_read+0x22a>
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	62fb      	str	r3, [r7, #44]	@ 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8009d38:	68fb      	ldr	r3, [r7, #12]
 8009d3a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8009d3e:	68fb      	ldr	r3, [r7, #12]
 8009d40:	699b      	ldr	r3, [r3, #24]
 8009d42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009d46:	4413      	add	r3, r2
 8009d48:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009d4a:	4619      	mov	r1, r3
 8009d4c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8009d4e:	f7fd fbed 	bl	800752c <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8009d52:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009d54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009d56:	4413      	add	r3, r2
 8009d58:	627b      	str	r3, [r7, #36]	@ 0x24
 8009d5a:	68fb      	ldr	r3, [r7, #12]
 8009d5c:	699a      	ldr	r2, [r3, #24]
 8009d5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009d60:	441a      	add	r2, r3
 8009d62:	68fb      	ldr	r3, [r7, #12]
 8009d64:	619a      	str	r2, [r3, #24]
 8009d66:	683b      	ldr	r3, [r7, #0]
 8009d68:	681a      	ldr	r2, [r3, #0]
 8009d6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009d6c:	441a      	add	r2, r3
 8009d6e:	683b      	ldr	r3, [r7, #0]
 8009d70:	601a      	str	r2, [r3, #0]
 8009d72:	687a      	ldr	r2, [r7, #4]
 8009d74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009d76:	1ad3      	subs	r3, r2, r3
 8009d78:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	2b00      	cmp	r3, #0
 8009d7e:	f47f af01 	bne.w	8009b84 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8009d82:	2300      	movs	r3, #0
}
 8009d84:	4618      	mov	r0, r3
 8009d86:	3738      	adds	r7, #56	@ 0x38
 8009d88:	46bd      	mov	sp, r7
 8009d8a:	bd80      	pop	{r7, pc}

08009d8c <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8009d8c:	b580      	push	{r7, lr}
 8009d8e:	b086      	sub	sp, #24
 8009d90:	af00      	add	r7, sp, #0
 8009d92:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	f107 0208 	add.w	r2, r7, #8
 8009d9a:	4611      	mov	r1, r2
 8009d9c:	4618      	mov	r0, r3
 8009d9e:	f7ff fb87 	bl	80094b0 <validate>
 8009da2:	4603      	mov	r3, r0
 8009da4:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8009da6:	7dfb      	ldrb	r3, [r7, #23]
 8009da8:	2b00      	cmp	r3, #0
 8009daa:	d168      	bne.n	8009e7e <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	7d1b      	ldrb	r3, [r3, #20]
 8009db0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009db4:	2b00      	cmp	r3, #0
 8009db6:	d062      	beq.n	8009e7e <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	7d1b      	ldrb	r3, [r3, #20]
 8009dbc:	b25b      	sxtb	r3, r3
 8009dbe:	2b00      	cmp	r3, #0
 8009dc0:	da15      	bge.n	8009dee <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8009dc2:	68bb      	ldr	r3, [r7, #8]
 8009dc4:	7858      	ldrb	r0, [r3, #1]
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	6a1a      	ldr	r2, [r3, #32]
 8009dd0:	2301      	movs	r3, #1
 8009dd2:	f7fd faeb 	bl	80073ac <disk_write>
 8009dd6:	4603      	mov	r3, r0
 8009dd8:	2b00      	cmp	r3, #0
 8009dda:	d001      	beq.n	8009de0 <f_sync+0x54>
 8009ddc:	2301      	movs	r3, #1
 8009dde:	e04f      	b.n	8009e80 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	7d1b      	ldrb	r3, [r3, #20]
 8009de4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009de8:	b2da      	uxtb	r2, r3
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8009dee:	f7fd f83b 	bl	8006e68 <get_fattime>
 8009df2:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8009df4:	68ba      	ldr	r2, [r7, #8]
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009dfa:	4619      	mov	r1, r3
 8009dfc:	4610      	mov	r0, r2
 8009dfe:	f7fd fdc3 	bl	8007988 <move_window>
 8009e02:	4603      	mov	r3, r0
 8009e04:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8009e06:	7dfb      	ldrb	r3, [r7, #23]
 8009e08:	2b00      	cmp	r3, #0
 8009e0a:	d138      	bne.n	8009e7e <f_sync+0xf2>
					dir = fp->dir_ptr;
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009e10:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8009e12:	68fb      	ldr	r3, [r7, #12]
 8009e14:	330b      	adds	r3, #11
 8009e16:	781a      	ldrb	r2, [r3, #0]
 8009e18:	68fb      	ldr	r3, [r7, #12]
 8009e1a:	330b      	adds	r3, #11
 8009e1c:	f042 0220 	orr.w	r2, r2, #32
 8009e20:	b2d2      	uxtb	r2, r2
 8009e22:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	6818      	ldr	r0, [r3, #0]
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	689b      	ldr	r3, [r3, #8]
 8009e2c:	461a      	mov	r2, r3
 8009e2e:	68f9      	ldr	r1, [r7, #12]
 8009e30:	f7fe facd 	bl	80083ce <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8009e34:	68fb      	ldr	r3, [r7, #12]
 8009e36:	f103 021c 	add.w	r2, r3, #28
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	68db      	ldr	r3, [r3, #12]
 8009e3e:	4619      	mov	r1, r3
 8009e40:	4610      	mov	r0, r2
 8009e42:	f7fd fb47 	bl	80074d4 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8009e46:	68fb      	ldr	r3, [r7, #12]
 8009e48:	3316      	adds	r3, #22
 8009e4a:	6939      	ldr	r1, [r7, #16]
 8009e4c:	4618      	mov	r0, r3
 8009e4e:	f7fd fb41 	bl	80074d4 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8009e52:	68fb      	ldr	r3, [r7, #12]
 8009e54:	3312      	adds	r3, #18
 8009e56:	2100      	movs	r1, #0
 8009e58:	4618      	mov	r0, r3
 8009e5a:	f7fd fb20 	bl	800749e <st_word>
					fs->wflag = 1;
 8009e5e:	68bb      	ldr	r3, [r7, #8]
 8009e60:	2201      	movs	r2, #1
 8009e62:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8009e64:	68bb      	ldr	r3, [r7, #8]
 8009e66:	4618      	mov	r0, r3
 8009e68:	f7fd fdbc 	bl	80079e4 <sync_fs>
 8009e6c:	4603      	mov	r3, r0
 8009e6e:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	7d1b      	ldrb	r3, [r3, #20]
 8009e74:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009e78:	b2da      	uxtb	r2, r3
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8009e7e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009e80:	4618      	mov	r0, r3
 8009e82:	3718      	adds	r7, #24
 8009e84:	46bd      	mov	sp, r7
 8009e86:	bd80      	pop	{r7, pc}

08009e88 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8009e88:	b580      	push	{r7, lr}
 8009e8a:	b084      	sub	sp, #16
 8009e8c:	af00      	add	r7, sp, #0
 8009e8e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8009e90:	6878      	ldr	r0, [r7, #4]
 8009e92:	f7ff ff7b 	bl	8009d8c <f_sync>
 8009e96:	4603      	mov	r3, r0
 8009e98:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8009e9a:	7bfb      	ldrb	r3, [r7, #15]
 8009e9c:	2b00      	cmp	r3, #0
 8009e9e:	d118      	bne.n	8009ed2 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	f107 0208 	add.w	r2, r7, #8
 8009ea6:	4611      	mov	r1, r2
 8009ea8:	4618      	mov	r0, r3
 8009eaa:	f7ff fb01 	bl	80094b0 <validate>
 8009eae:	4603      	mov	r3, r0
 8009eb0:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8009eb2:	7bfb      	ldrb	r3, [r7, #15]
 8009eb4:	2b00      	cmp	r3, #0
 8009eb6:	d10c      	bne.n	8009ed2 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	691b      	ldr	r3, [r3, #16]
 8009ebc:	4618      	mov	r0, r3
 8009ebe:	f7fd fcbf 	bl	8007840 <dec_lock>
 8009ec2:	4603      	mov	r3, r0
 8009ec4:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8009ec6:	7bfb      	ldrb	r3, [r7, #15]
 8009ec8:	2b00      	cmp	r3, #0
 8009eca:	d102      	bne.n	8009ed2 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	2200      	movs	r2, #0
 8009ed0:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8009ed2:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ed4:	4618      	mov	r0, r3
 8009ed6:	3710      	adds	r7, #16
 8009ed8:	46bd      	mov	sp, r7
 8009eda:	bd80      	pop	{r7, pc}

08009edc <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8009edc:	b480      	push	{r7}
 8009ede:	b087      	sub	sp, #28
 8009ee0:	af00      	add	r7, sp, #0
 8009ee2:	60f8      	str	r0, [r7, #12]
 8009ee4:	60b9      	str	r1, [r7, #8]
 8009ee6:	4613      	mov	r3, r2
 8009ee8:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8009eea:	2301      	movs	r3, #1
 8009eec:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8009eee:	2300      	movs	r3, #0
 8009ef0:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8009ef2:	4b1f      	ldr	r3, [pc, #124]	@ (8009f70 <FATFS_LinkDriverEx+0x94>)
 8009ef4:	7a5b      	ldrb	r3, [r3, #9]
 8009ef6:	b2db      	uxtb	r3, r3
 8009ef8:	2b00      	cmp	r3, #0
 8009efa:	d131      	bne.n	8009f60 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8009efc:	4b1c      	ldr	r3, [pc, #112]	@ (8009f70 <FATFS_LinkDriverEx+0x94>)
 8009efe:	7a5b      	ldrb	r3, [r3, #9]
 8009f00:	b2db      	uxtb	r3, r3
 8009f02:	461a      	mov	r2, r3
 8009f04:	4b1a      	ldr	r3, [pc, #104]	@ (8009f70 <FATFS_LinkDriverEx+0x94>)
 8009f06:	2100      	movs	r1, #0
 8009f08:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8009f0a:	4b19      	ldr	r3, [pc, #100]	@ (8009f70 <FATFS_LinkDriverEx+0x94>)
 8009f0c:	7a5b      	ldrb	r3, [r3, #9]
 8009f0e:	b2db      	uxtb	r3, r3
 8009f10:	4a17      	ldr	r2, [pc, #92]	@ (8009f70 <FATFS_LinkDriverEx+0x94>)
 8009f12:	009b      	lsls	r3, r3, #2
 8009f14:	4413      	add	r3, r2
 8009f16:	68fa      	ldr	r2, [r7, #12]
 8009f18:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8009f1a:	4b15      	ldr	r3, [pc, #84]	@ (8009f70 <FATFS_LinkDriverEx+0x94>)
 8009f1c:	7a5b      	ldrb	r3, [r3, #9]
 8009f1e:	b2db      	uxtb	r3, r3
 8009f20:	461a      	mov	r2, r3
 8009f22:	4b13      	ldr	r3, [pc, #76]	@ (8009f70 <FATFS_LinkDriverEx+0x94>)
 8009f24:	4413      	add	r3, r2
 8009f26:	79fa      	ldrb	r2, [r7, #7]
 8009f28:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8009f2a:	4b11      	ldr	r3, [pc, #68]	@ (8009f70 <FATFS_LinkDriverEx+0x94>)
 8009f2c:	7a5b      	ldrb	r3, [r3, #9]
 8009f2e:	b2db      	uxtb	r3, r3
 8009f30:	1c5a      	adds	r2, r3, #1
 8009f32:	b2d1      	uxtb	r1, r2
 8009f34:	4a0e      	ldr	r2, [pc, #56]	@ (8009f70 <FATFS_LinkDriverEx+0x94>)
 8009f36:	7251      	strb	r1, [r2, #9]
 8009f38:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8009f3a:	7dbb      	ldrb	r3, [r7, #22]
 8009f3c:	3330      	adds	r3, #48	@ 0x30
 8009f3e:	b2da      	uxtb	r2, r3
 8009f40:	68bb      	ldr	r3, [r7, #8]
 8009f42:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8009f44:	68bb      	ldr	r3, [r7, #8]
 8009f46:	3301      	adds	r3, #1
 8009f48:	223a      	movs	r2, #58	@ 0x3a
 8009f4a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8009f4c:	68bb      	ldr	r3, [r7, #8]
 8009f4e:	3302      	adds	r3, #2
 8009f50:	222f      	movs	r2, #47	@ 0x2f
 8009f52:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8009f54:	68bb      	ldr	r3, [r7, #8]
 8009f56:	3303      	adds	r3, #3
 8009f58:	2200      	movs	r2, #0
 8009f5a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8009f5c:	2300      	movs	r3, #0
 8009f5e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8009f60:	7dfb      	ldrb	r3, [r7, #23]
}
 8009f62:	4618      	mov	r0, r3
 8009f64:	371c      	adds	r7, #28
 8009f66:	46bd      	mov	sp, r7
 8009f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f6c:	4770      	bx	lr
 8009f6e:	bf00      	nop
 8009f70:	20000fa4 	.word	0x20000fa4

08009f74 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8009f74:	b580      	push	{r7, lr}
 8009f76:	b082      	sub	sp, #8
 8009f78:	af00      	add	r7, sp, #0
 8009f7a:	6078      	str	r0, [r7, #4]
 8009f7c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8009f7e:	2200      	movs	r2, #0
 8009f80:	6839      	ldr	r1, [r7, #0]
 8009f82:	6878      	ldr	r0, [r7, #4]
 8009f84:	f7ff ffaa 	bl	8009edc <FATFS_LinkDriverEx>
 8009f88:	4603      	mov	r3, r0
}
 8009f8a:	4618      	mov	r0, r3
 8009f8c:	3708      	adds	r7, #8
 8009f8e:	46bd      	mov	sp, r7
 8009f90:	bd80      	pop	{r7, pc}
	...

08009f94 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 8009f94:	b480      	push	{r7}
 8009f96:	b085      	sub	sp, #20
 8009f98:	af00      	add	r7, sp, #0
 8009f9a:	4603      	mov	r3, r0
 8009f9c:	6039      	str	r1, [r7, #0]
 8009f9e:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 8009fa0:	88fb      	ldrh	r3, [r7, #6]
 8009fa2:	2b7f      	cmp	r3, #127	@ 0x7f
 8009fa4:	d802      	bhi.n	8009fac <ff_convert+0x18>
		c = chr;
 8009fa6:	88fb      	ldrh	r3, [r7, #6]
 8009fa8:	81fb      	strh	r3, [r7, #14]
 8009faa:	e025      	b.n	8009ff8 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 8009fac:	683b      	ldr	r3, [r7, #0]
 8009fae:	2b00      	cmp	r3, #0
 8009fb0:	d00b      	beq.n	8009fca <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 8009fb2:	88fb      	ldrh	r3, [r7, #6]
 8009fb4:	2bff      	cmp	r3, #255	@ 0xff
 8009fb6:	d805      	bhi.n	8009fc4 <ff_convert+0x30>
 8009fb8:	88fb      	ldrh	r3, [r7, #6]
 8009fba:	3b80      	subs	r3, #128	@ 0x80
 8009fbc:	4a12      	ldr	r2, [pc, #72]	@ (800a008 <ff_convert+0x74>)
 8009fbe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009fc2:	e000      	b.n	8009fc6 <ff_convert+0x32>
 8009fc4:	2300      	movs	r3, #0
 8009fc6:	81fb      	strh	r3, [r7, #14]
 8009fc8:	e016      	b.n	8009ff8 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 8009fca:	2300      	movs	r3, #0
 8009fcc:	81fb      	strh	r3, [r7, #14]
 8009fce:	e009      	b.n	8009fe4 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 8009fd0:	89fb      	ldrh	r3, [r7, #14]
 8009fd2:	4a0d      	ldr	r2, [pc, #52]	@ (800a008 <ff_convert+0x74>)
 8009fd4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009fd8:	88fa      	ldrh	r2, [r7, #6]
 8009fda:	429a      	cmp	r2, r3
 8009fdc:	d006      	beq.n	8009fec <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 8009fde:	89fb      	ldrh	r3, [r7, #14]
 8009fe0:	3301      	adds	r3, #1
 8009fe2:	81fb      	strh	r3, [r7, #14]
 8009fe4:	89fb      	ldrh	r3, [r7, #14]
 8009fe6:	2b7f      	cmp	r3, #127	@ 0x7f
 8009fe8:	d9f2      	bls.n	8009fd0 <ff_convert+0x3c>
 8009fea:	e000      	b.n	8009fee <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 8009fec:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 8009fee:	89fb      	ldrh	r3, [r7, #14]
 8009ff0:	3380      	adds	r3, #128	@ 0x80
 8009ff2:	b29b      	uxth	r3, r3
 8009ff4:	b2db      	uxtb	r3, r3
 8009ff6:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 8009ff8:	89fb      	ldrh	r3, [r7, #14]
}
 8009ffa:	4618      	mov	r0, r3
 8009ffc:	3714      	adds	r7, #20
 8009ffe:	46bd      	mov	sp, r7
 800a000:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a004:	4770      	bx	lr
 800a006:	bf00      	nop
 800a008:	0800ac48 	.word	0x0800ac48

0800a00c <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 800a00c:	b480      	push	{r7}
 800a00e:	b087      	sub	sp, #28
 800a010:	af00      	add	r7, sp, #0
 800a012:	4603      	mov	r3, r0
 800a014:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 800a016:	88fb      	ldrh	r3, [r7, #6]
 800a018:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a01c:	d201      	bcs.n	800a022 <ff_wtoupper+0x16>
 800a01e:	4b3e      	ldr	r3, [pc, #248]	@ (800a118 <ff_wtoupper+0x10c>)
 800a020:	e000      	b.n	800a024 <ff_wtoupper+0x18>
 800a022:	4b3e      	ldr	r3, [pc, #248]	@ (800a11c <ff_wtoupper+0x110>)
 800a024:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 800a026:	697b      	ldr	r3, [r7, #20]
 800a028:	1c9a      	adds	r2, r3, #2
 800a02a:	617a      	str	r2, [r7, #20]
 800a02c:	881b      	ldrh	r3, [r3, #0]
 800a02e:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 800a030:	8a7b      	ldrh	r3, [r7, #18]
 800a032:	2b00      	cmp	r3, #0
 800a034:	d068      	beq.n	800a108 <ff_wtoupper+0xfc>
 800a036:	88fa      	ldrh	r2, [r7, #6]
 800a038:	8a7b      	ldrh	r3, [r7, #18]
 800a03a:	429a      	cmp	r2, r3
 800a03c:	d364      	bcc.n	800a108 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800a03e:	697b      	ldr	r3, [r7, #20]
 800a040:	1c9a      	adds	r2, r3, #2
 800a042:	617a      	str	r2, [r7, #20]
 800a044:	881b      	ldrh	r3, [r3, #0]
 800a046:	823b      	strh	r3, [r7, #16]
 800a048:	8a3b      	ldrh	r3, [r7, #16]
 800a04a:	0a1b      	lsrs	r3, r3, #8
 800a04c:	81fb      	strh	r3, [r7, #14]
 800a04e:	8a3b      	ldrh	r3, [r7, #16]
 800a050:	b2db      	uxtb	r3, r3
 800a052:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 800a054:	88fa      	ldrh	r2, [r7, #6]
 800a056:	8a79      	ldrh	r1, [r7, #18]
 800a058:	8a3b      	ldrh	r3, [r7, #16]
 800a05a:	440b      	add	r3, r1
 800a05c:	429a      	cmp	r2, r3
 800a05e:	da49      	bge.n	800a0f4 <ff_wtoupper+0xe8>
			switch (cmd) {
 800a060:	89fb      	ldrh	r3, [r7, #14]
 800a062:	2b08      	cmp	r3, #8
 800a064:	d84f      	bhi.n	800a106 <ff_wtoupper+0xfa>
 800a066:	a201      	add	r2, pc, #4	@ (adr r2, 800a06c <ff_wtoupper+0x60>)
 800a068:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a06c:	0800a091 	.word	0x0800a091
 800a070:	0800a0a3 	.word	0x0800a0a3
 800a074:	0800a0b9 	.word	0x0800a0b9
 800a078:	0800a0c1 	.word	0x0800a0c1
 800a07c:	0800a0c9 	.word	0x0800a0c9
 800a080:	0800a0d1 	.word	0x0800a0d1
 800a084:	0800a0d9 	.word	0x0800a0d9
 800a088:	0800a0e1 	.word	0x0800a0e1
 800a08c:	0800a0e9 	.word	0x0800a0e9
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 800a090:	88fa      	ldrh	r2, [r7, #6]
 800a092:	8a7b      	ldrh	r3, [r7, #18]
 800a094:	1ad3      	subs	r3, r2, r3
 800a096:	005b      	lsls	r3, r3, #1
 800a098:	697a      	ldr	r2, [r7, #20]
 800a09a:	4413      	add	r3, r2
 800a09c:	881b      	ldrh	r3, [r3, #0]
 800a09e:	80fb      	strh	r3, [r7, #6]
 800a0a0:	e027      	b.n	800a0f2 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 800a0a2:	88fa      	ldrh	r2, [r7, #6]
 800a0a4:	8a7b      	ldrh	r3, [r7, #18]
 800a0a6:	1ad3      	subs	r3, r2, r3
 800a0a8:	b29b      	uxth	r3, r3
 800a0aa:	f003 0301 	and.w	r3, r3, #1
 800a0ae:	b29b      	uxth	r3, r3
 800a0b0:	88fa      	ldrh	r2, [r7, #6]
 800a0b2:	1ad3      	subs	r3, r2, r3
 800a0b4:	80fb      	strh	r3, [r7, #6]
 800a0b6:	e01c      	b.n	800a0f2 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 800a0b8:	88fb      	ldrh	r3, [r7, #6]
 800a0ba:	3b10      	subs	r3, #16
 800a0bc:	80fb      	strh	r3, [r7, #6]
 800a0be:	e018      	b.n	800a0f2 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 800a0c0:	88fb      	ldrh	r3, [r7, #6]
 800a0c2:	3b20      	subs	r3, #32
 800a0c4:	80fb      	strh	r3, [r7, #6]
 800a0c6:	e014      	b.n	800a0f2 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 800a0c8:	88fb      	ldrh	r3, [r7, #6]
 800a0ca:	3b30      	subs	r3, #48	@ 0x30
 800a0cc:	80fb      	strh	r3, [r7, #6]
 800a0ce:	e010      	b.n	800a0f2 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 800a0d0:	88fb      	ldrh	r3, [r7, #6]
 800a0d2:	3b1a      	subs	r3, #26
 800a0d4:	80fb      	strh	r3, [r7, #6]
 800a0d6:	e00c      	b.n	800a0f2 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 800a0d8:	88fb      	ldrh	r3, [r7, #6]
 800a0da:	3308      	adds	r3, #8
 800a0dc:	80fb      	strh	r3, [r7, #6]
 800a0de:	e008      	b.n	800a0f2 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 800a0e0:	88fb      	ldrh	r3, [r7, #6]
 800a0e2:	3b50      	subs	r3, #80	@ 0x50
 800a0e4:	80fb      	strh	r3, [r7, #6]
 800a0e6:	e004      	b.n	800a0f2 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 800a0e8:	88fb      	ldrh	r3, [r7, #6]
 800a0ea:	f5a3 53e3 	sub.w	r3, r3, #7264	@ 0x1c60
 800a0ee:	80fb      	strh	r3, [r7, #6]
 800a0f0:	bf00      	nop
			}
			break;
 800a0f2:	e008      	b.n	800a106 <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 800a0f4:	89fb      	ldrh	r3, [r7, #14]
 800a0f6:	2b00      	cmp	r3, #0
 800a0f8:	d195      	bne.n	800a026 <ff_wtoupper+0x1a>
 800a0fa:	8a3b      	ldrh	r3, [r7, #16]
 800a0fc:	005b      	lsls	r3, r3, #1
 800a0fe:	697a      	ldr	r2, [r7, #20]
 800a100:	4413      	add	r3, r2
 800a102:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 800a104:	e78f      	b.n	800a026 <ff_wtoupper+0x1a>
			break;
 800a106:	bf00      	nop
	}

	return chr;
 800a108:	88fb      	ldrh	r3, [r7, #6]
}
 800a10a:	4618      	mov	r0, r3
 800a10c:	371c      	adds	r7, #28
 800a10e:	46bd      	mov	sp, r7
 800a110:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a114:	4770      	bx	lr
 800a116:	bf00      	nop
 800a118:	0800ad48 	.word	0x0800ad48
 800a11c:	0800af3c 	.word	0x0800af3c

0800a120 <std>:
 800a120:	2300      	movs	r3, #0
 800a122:	b510      	push	{r4, lr}
 800a124:	4604      	mov	r4, r0
 800a126:	e9c0 3300 	strd	r3, r3, [r0]
 800a12a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a12e:	6083      	str	r3, [r0, #8]
 800a130:	8181      	strh	r1, [r0, #12]
 800a132:	6643      	str	r3, [r0, #100]	@ 0x64
 800a134:	81c2      	strh	r2, [r0, #14]
 800a136:	6183      	str	r3, [r0, #24]
 800a138:	4619      	mov	r1, r3
 800a13a:	2208      	movs	r2, #8
 800a13c:	305c      	adds	r0, #92	@ 0x5c
 800a13e:	f000 f9f7 	bl	800a530 <memset>
 800a142:	4b0d      	ldr	r3, [pc, #52]	@ (800a178 <std+0x58>)
 800a144:	6263      	str	r3, [r4, #36]	@ 0x24
 800a146:	4b0d      	ldr	r3, [pc, #52]	@ (800a17c <std+0x5c>)
 800a148:	62a3      	str	r3, [r4, #40]	@ 0x28
 800a14a:	4b0d      	ldr	r3, [pc, #52]	@ (800a180 <std+0x60>)
 800a14c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800a14e:	4b0d      	ldr	r3, [pc, #52]	@ (800a184 <std+0x64>)
 800a150:	6323      	str	r3, [r4, #48]	@ 0x30
 800a152:	4b0d      	ldr	r3, [pc, #52]	@ (800a188 <std+0x68>)
 800a154:	6224      	str	r4, [r4, #32]
 800a156:	429c      	cmp	r4, r3
 800a158:	d006      	beq.n	800a168 <std+0x48>
 800a15a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800a15e:	4294      	cmp	r4, r2
 800a160:	d002      	beq.n	800a168 <std+0x48>
 800a162:	33d0      	adds	r3, #208	@ 0xd0
 800a164:	429c      	cmp	r4, r3
 800a166:	d105      	bne.n	800a174 <std+0x54>
 800a168:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800a16c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a170:	f000 ba56 	b.w	800a620 <__retarget_lock_init_recursive>
 800a174:	bd10      	pop	{r4, pc}
 800a176:	bf00      	nop
 800a178:	0800a361 	.word	0x0800a361
 800a17c:	0800a383 	.word	0x0800a383
 800a180:	0800a3bb 	.word	0x0800a3bb
 800a184:	0800a3df 	.word	0x0800a3df
 800a188:	20000fb0 	.word	0x20000fb0

0800a18c <stdio_exit_handler>:
 800a18c:	4a02      	ldr	r2, [pc, #8]	@ (800a198 <stdio_exit_handler+0xc>)
 800a18e:	4903      	ldr	r1, [pc, #12]	@ (800a19c <stdio_exit_handler+0x10>)
 800a190:	4803      	ldr	r0, [pc, #12]	@ (800a1a0 <stdio_exit_handler+0x14>)
 800a192:	f000 b869 	b.w	800a268 <_fwalk_sglue>
 800a196:	bf00      	nop
 800a198:	2000000c 	.word	0x2000000c
 800a19c:	0800a921 	.word	0x0800a921
 800a1a0:	2000001c 	.word	0x2000001c

0800a1a4 <cleanup_stdio>:
 800a1a4:	6841      	ldr	r1, [r0, #4]
 800a1a6:	4b0c      	ldr	r3, [pc, #48]	@ (800a1d8 <cleanup_stdio+0x34>)
 800a1a8:	4299      	cmp	r1, r3
 800a1aa:	b510      	push	{r4, lr}
 800a1ac:	4604      	mov	r4, r0
 800a1ae:	d001      	beq.n	800a1b4 <cleanup_stdio+0x10>
 800a1b0:	f000 fbb6 	bl	800a920 <_fflush_r>
 800a1b4:	68a1      	ldr	r1, [r4, #8]
 800a1b6:	4b09      	ldr	r3, [pc, #36]	@ (800a1dc <cleanup_stdio+0x38>)
 800a1b8:	4299      	cmp	r1, r3
 800a1ba:	d002      	beq.n	800a1c2 <cleanup_stdio+0x1e>
 800a1bc:	4620      	mov	r0, r4
 800a1be:	f000 fbaf 	bl	800a920 <_fflush_r>
 800a1c2:	68e1      	ldr	r1, [r4, #12]
 800a1c4:	4b06      	ldr	r3, [pc, #24]	@ (800a1e0 <cleanup_stdio+0x3c>)
 800a1c6:	4299      	cmp	r1, r3
 800a1c8:	d004      	beq.n	800a1d4 <cleanup_stdio+0x30>
 800a1ca:	4620      	mov	r0, r4
 800a1cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a1d0:	f000 bba6 	b.w	800a920 <_fflush_r>
 800a1d4:	bd10      	pop	{r4, pc}
 800a1d6:	bf00      	nop
 800a1d8:	20000fb0 	.word	0x20000fb0
 800a1dc:	20001018 	.word	0x20001018
 800a1e0:	20001080 	.word	0x20001080

0800a1e4 <global_stdio_init.part.0>:
 800a1e4:	b510      	push	{r4, lr}
 800a1e6:	4b0b      	ldr	r3, [pc, #44]	@ (800a214 <global_stdio_init.part.0+0x30>)
 800a1e8:	4c0b      	ldr	r4, [pc, #44]	@ (800a218 <global_stdio_init.part.0+0x34>)
 800a1ea:	4a0c      	ldr	r2, [pc, #48]	@ (800a21c <global_stdio_init.part.0+0x38>)
 800a1ec:	601a      	str	r2, [r3, #0]
 800a1ee:	4620      	mov	r0, r4
 800a1f0:	2200      	movs	r2, #0
 800a1f2:	2104      	movs	r1, #4
 800a1f4:	f7ff ff94 	bl	800a120 <std>
 800a1f8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800a1fc:	2201      	movs	r2, #1
 800a1fe:	2109      	movs	r1, #9
 800a200:	f7ff ff8e 	bl	800a120 <std>
 800a204:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800a208:	2202      	movs	r2, #2
 800a20a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a20e:	2112      	movs	r1, #18
 800a210:	f7ff bf86 	b.w	800a120 <std>
 800a214:	200010e8 	.word	0x200010e8
 800a218:	20000fb0 	.word	0x20000fb0
 800a21c:	0800a18d 	.word	0x0800a18d

0800a220 <__sfp_lock_acquire>:
 800a220:	4801      	ldr	r0, [pc, #4]	@ (800a228 <__sfp_lock_acquire+0x8>)
 800a222:	f000 b9fe 	b.w	800a622 <__retarget_lock_acquire_recursive>
 800a226:	bf00      	nop
 800a228:	200010f1 	.word	0x200010f1

0800a22c <__sfp_lock_release>:
 800a22c:	4801      	ldr	r0, [pc, #4]	@ (800a234 <__sfp_lock_release+0x8>)
 800a22e:	f000 b9f9 	b.w	800a624 <__retarget_lock_release_recursive>
 800a232:	bf00      	nop
 800a234:	200010f1 	.word	0x200010f1

0800a238 <__sinit>:
 800a238:	b510      	push	{r4, lr}
 800a23a:	4604      	mov	r4, r0
 800a23c:	f7ff fff0 	bl	800a220 <__sfp_lock_acquire>
 800a240:	6a23      	ldr	r3, [r4, #32]
 800a242:	b11b      	cbz	r3, 800a24c <__sinit+0x14>
 800a244:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a248:	f7ff bff0 	b.w	800a22c <__sfp_lock_release>
 800a24c:	4b04      	ldr	r3, [pc, #16]	@ (800a260 <__sinit+0x28>)
 800a24e:	6223      	str	r3, [r4, #32]
 800a250:	4b04      	ldr	r3, [pc, #16]	@ (800a264 <__sinit+0x2c>)
 800a252:	681b      	ldr	r3, [r3, #0]
 800a254:	2b00      	cmp	r3, #0
 800a256:	d1f5      	bne.n	800a244 <__sinit+0xc>
 800a258:	f7ff ffc4 	bl	800a1e4 <global_stdio_init.part.0>
 800a25c:	e7f2      	b.n	800a244 <__sinit+0xc>
 800a25e:	bf00      	nop
 800a260:	0800a1a5 	.word	0x0800a1a5
 800a264:	200010e8 	.word	0x200010e8

0800a268 <_fwalk_sglue>:
 800a268:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a26c:	4607      	mov	r7, r0
 800a26e:	4688      	mov	r8, r1
 800a270:	4614      	mov	r4, r2
 800a272:	2600      	movs	r6, #0
 800a274:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a278:	f1b9 0901 	subs.w	r9, r9, #1
 800a27c:	d505      	bpl.n	800a28a <_fwalk_sglue+0x22>
 800a27e:	6824      	ldr	r4, [r4, #0]
 800a280:	2c00      	cmp	r4, #0
 800a282:	d1f7      	bne.n	800a274 <_fwalk_sglue+0xc>
 800a284:	4630      	mov	r0, r6
 800a286:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a28a:	89ab      	ldrh	r3, [r5, #12]
 800a28c:	2b01      	cmp	r3, #1
 800a28e:	d907      	bls.n	800a2a0 <_fwalk_sglue+0x38>
 800a290:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a294:	3301      	adds	r3, #1
 800a296:	d003      	beq.n	800a2a0 <_fwalk_sglue+0x38>
 800a298:	4629      	mov	r1, r5
 800a29a:	4638      	mov	r0, r7
 800a29c:	47c0      	blx	r8
 800a29e:	4306      	orrs	r6, r0
 800a2a0:	3568      	adds	r5, #104	@ 0x68
 800a2a2:	e7e9      	b.n	800a278 <_fwalk_sglue+0x10>

0800a2a4 <_puts_r>:
 800a2a4:	6a03      	ldr	r3, [r0, #32]
 800a2a6:	b570      	push	{r4, r5, r6, lr}
 800a2a8:	6884      	ldr	r4, [r0, #8]
 800a2aa:	4605      	mov	r5, r0
 800a2ac:	460e      	mov	r6, r1
 800a2ae:	b90b      	cbnz	r3, 800a2b4 <_puts_r+0x10>
 800a2b0:	f7ff ffc2 	bl	800a238 <__sinit>
 800a2b4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a2b6:	07db      	lsls	r3, r3, #31
 800a2b8:	d405      	bmi.n	800a2c6 <_puts_r+0x22>
 800a2ba:	89a3      	ldrh	r3, [r4, #12]
 800a2bc:	0598      	lsls	r0, r3, #22
 800a2be:	d402      	bmi.n	800a2c6 <_puts_r+0x22>
 800a2c0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a2c2:	f000 f9ae 	bl	800a622 <__retarget_lock_acquire_recursive>
 800a2c6:	89a3      	ldrh	r3, [r4, #12]
 800a2c8:	0719      	lsls	r1, r3, #28
 800a2ca:	d502      	bpl.n	800a2d2 <_puts_r+0x2e>
 800a2cc:	6923      	ldr	r3, [r4, #16]
 800a2ce:	2b00      	cmp	r3, #0
 800a2d0:	d135      	bne.n	800a33e <_puts_r+0x9a>
 800a2d2:	4621      	mov	r1, r4
 800a2d4:	4628      	mov	r0, r5
 800a2d6:	f000 f8c5 	bl	800a464 <__swsetup_r>
 800a2da:	b380      	cbz	r0, 800a33e <_puts_r+0x9a>
 800a2dc:	f04f 35ff 	mov.w	r5, #4294967295
 800a2e0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a2e2:	07da      	lsls	r2, r3, #31
 800a2e4:	d405      	bmi.n	800a2f2 <_puts_r+0x4e>
 800a2e6:	89a3      	ldrh	r3, [r4, #12]
 800a2e8:	059b      	lsls	r3, r3, #22
 800a2ea:	d402      	bmi.n	800a2f2 <_puts_r+0x4e>
 800a2ec:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a2ee:	f000 f999 	bl	800a624 <__retarget_lock_release_recursive>
 800a2f2:	4628      	mov	r0, r5
 800a2f4:	bd70      	pop	{r4, r5, r6, pc}
 800a2f6:	2b00      	cmp	r3, #0
 800a2f8:	da04      	bge.n	800a304 <_puts_r+0x60>
 800a2fa:	69a2      	ldr	r2, [r4, #24]
 800a2fc:	429a      	cmp	r2, r3
 800a2fe:	dc17      	bgt.n	800a330 <_puts_r+0x8c>
 800a300:	290a      	cmp	r1, #10
 800a302:	d015      	beq.n	800a330 <_puts_r+0x8c>
 800a304:	6823      	ldr	r3, [r4, #0]
 800a306:	1c5a      	adds	r2, r3, #1
 800a308:	6022      	str	r2, [r4, #0]
 800a30a:	7019      	strb	r1, [r3, #0]
 800a30c:	68a3      	ldr	r3, [r4, #8]
 800a30e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800a312:	3b01      	subs	r3, #1
 800a314:	60a3      	str	r3, [r4, #8]
 800a316:	2900      	cmp	r1, #0
 800a318:	d1ed      	bne.n	800a2f6 <_puts_r+0x52>
 800a31a:	2b00      	cmp	r3, #0
 800a31c:	da11      	bge.n	800a342 <_puts_r+0x9e>
 800a31e:	4622      	mov	r2, r4
 800a320:	210a      	movs	r1, #10
 800a322:	4628      	mov	r0, r5
 800a324:	f000 f85f 	bl	800a3e6 <__swbuf_r>
 800a328:	3001      	adds	r0, #1
 800a32a:	d0d7      	beq.n	800a2dc <_puts_r+0x38>
 800a32c:	250a      	movs	r5, #10
 800a32e:	e7d7      	b.n	800a2e0 <_puts_r+0x3c>
 800a330:	4622      	mov	r2, r4
 800a332:	4628      	mov	r0, r5
 800a334:	f000 f857 	bl	800a3e6 <__swbuf_r>
 800a338:	3001      	adds	r0, #1
 800a33a:	d1e7      	bne.n	800a30c <_puts_r+0x68>
 800a33c:	e7ce      	b.n	800a2dc <_puts_r+0x38>
 800a33e:	3e01      	subs	r6, #1
 800a340:	e7e4      	b.n	800a30c <_puts_r+0x68>
 800a342:	6823      	ldr	r3, [r4, #0]
 800a344:	1c5a      	adds	r2, r3, #1
 800a346:	6022      	str	r2, [r4, #0]
 800a348:	220a      	movs	r2, #10
 800a34a:	701a      	strb	r2, [r3, #0]
 800a34c:	e7ee      	b.n	800a32c <_puts_r+0x88>
	...

0800a350 <puts>:
 800a350:	4b02      	ldr	r3, [pc, #8]	@ (800a35c <puts+0xc>)
 800a352:	4601      	mov	r1, r0
 800a354:	6818      	ldr	r0, [r3, #0]
 800a356:	f7ff bfa5 	b.w	800a2a4 <_puts_r>
 800a35a:	bf00      	nop
 800a35c:	20000018 	.word	0x20000018

0800a360 <__sread>:
 800a360:	b510      	push	{r4, lr}
 800a362:	460c      	mov	r4, r1
 800a364:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a368:	f000 f90c 	bl	800a584 <_read_r>
 800a36c:	2800      	cmp	r0, #0
 800a36e:	bfab      	itete	ge
 800a370:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800a372:	89a3      	ldrhlt	r3, [r4, #12]
 800a374:	181b      	addge	r3, r3, r0
 800a376:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800a37a:	bfac      	ite	ge
 800a37c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800a37e:	81a3      	strhlt	r3, [r4, #12]
 800a380:	bd10      	pop	{r4, pc}

0800a382 <__swrite>:
 800a382:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a386:	461f      	mov	r7, r3
 800a388:	898b      	ldrh	r3, [r1, #12]
 800a38a:	05db      	lsls	r3, r3, #23
 800a38c:	4605      	mov	r5, r0
 800a38e:	460c      	mov	r4, r1
 800a390:	4616      	mov	r6, r2
 800a392:	d505      	bpl.n	800a3a0 <__swrite+0x1e>
 800a394:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a398:	2302      	movs	r3, #2
 800a39a:	2200      	movs	r2, #0
 800a39c:	f000 f8e0 	bl	800a560 <_lseek_r>
 800a3a0:	89a3      	ldrh	r3, [r4, #12]
 800a3a2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a3a6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800a3aa:	81a3      	strh	r3, [r4, #12]
 800a3ac:	4632      	mov	r2, r6
 800a3ae:	463b      	mov	r3, r7
 800a3b0:	4628      	mov	r0, r5
 800a3b2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a3b6:	f000 b8f7 	b.w	800a5a8 <_write_r>

0800a3ba <__sseek>:
 800a3ba:	b510      	push	{r4, lr}
 800a3bc:	460c      	mov	r4, r1
 800a3be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a3c2:	f000 f8cd 	bl	800a560 <_lseek_r>
 800a3c6:	1c43      	adds	r3, r0, #1
 800a3c8:	89a3      	ldrh	r3, [r4, #12]
 800a3ca:	bf15      	itete	ne
 800a3cc:	6560      	strne	r0, [r4, #84]	@ 0x54
 800a3ce:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800a3d2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800a3d6:	81a3      	strheq	r3, [r4, #12]
 800a3d8:	bf18      	it	ne
 800a3da:	81a3      	strhne	r3, [r4, #12]
 800a3dc:	bd10      	pop	{r4, pc}

0800a3de <__sclose>:
 800a3de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a3e2:	f000 b8ad 	b.w	800a540 <_close_r>

0800a3e6 <__swbuf_r>:
 800a3e6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a3e8:	460e      	mov	r6, r1
 800a3ea:	4614      	mov	r4, r2
 800a3ec:	4605      	mov	r5, r0
 800a3ee:	b118      	cbz	r0, 800a3f8 <__swbuf_r+0x12>
 800a3f0:	6a03      	ldr	r3, [r0, #32]
 800a3f2:	b90b      	cbnz	r3, 800a3f8 <__swbuf_r+0x12>
 800a3f4:	f7ff ff20 	bl	800a238 <__sinit>
 800a3f8:	69a3      	ldr	r3, [r4, #24]
 800a3fa:	60a3      	str	r3, [r4, #8]
 800a3fc:	89a3      	ldrh	r3, [r4, #12]
 800a3fe:	071a      	lsls	r2, r3, #28
 800a400:	d501      	bpl.n	800a406 <__swbuf_r+0x20>
 800a402:	6923      	ldr	r3, [r4, #16]
 800a404:	b943      	cbnz	r3, 800a418 <__swbuf_r+0x32>
 800a406:	4621      	mov	r1, r4
 800a408:	4628      	mov	r0, r5
 800a40a:	f000 f82b 	bl	800a464 <__swsetup_r>
 800a40e:	b118      	cbz	r0, 800a418 <__swbuf_r+0x32>
 800a410:	f04f 37ff 	mov.w	r7, #4294967295
 800a414:	4638      	mov	r0, r7
 800a416:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a418:	6823      	ldr	r3, [r4, #0]
 800a41a:	6922      	ldr	r2, [r4, #16]
 800a41c:	1a98      	subs	r0, r3, r2
 800a41e:	6963      	ldr	r3, [r4, #20]
 800a420:	b2f6      	uxtb	r6, r6
 800a422:	4283      	cmp	r3, r0
 800a424:	4637      	mov	r7, r6
 800a426:	dc05      	bgt.n	800a434 <__swbuf_r+0x4e>
 800a428:	4621      	mov	r1, r4
 800a42a:	4628      	mov	r0, r5
 800a42c:	f000 fa78 	bl	800a920 <_fflush_r>
 800a430:	2800      	cmp	r0, #0
 800a432:	d1ed      	bne.n	800a410 <__swbuf_r+0x2a>
 800a434:	68a3      	ldr	r3, [r4, #8]
 800a436:	3b01      	subs	r3, #1
 800a438:	60a3      	str	r3, [r4, #8]
 800a43a:	6823      	ldr	r3, [r4, #0]
 800a43c:	1c5a      	adds	r2, r3, #1
 800a43e:	6022      	str	r2, [r4, #0]
 800a440:	701e      	strb	r6, [r3, #0]
 800a442:	6962      	ldr	r2, [r4, #20]
 800a444:	1c43      	adds	r3, r0, #1
 800a446:	429a      	cmp	r2, r3
 800a448:	d004      	beq.n	800a454 <__swbuf_r+0x6e>
 800a44a:	89a3      	ldrh	r3, [r4, #12]
 800a44c:	07db      	lsls	r3, r3, #31
 800a44e:	d5e1      	bpl.n	800a414 <__swbuf_r+0x2e>
 800a450:	2e0a      	cmp	r6, #10
 800a452:	d1df      	bne.n	800a414 <__swbuf_r+0x2e>
 800a454:	4621      	mov	r1, r4
 800a456:	4628      	mov	r0, r5
 800a458:	f000 fa62 	bl	800a920 <_fflush_r>
 800a45c:	2800      	cmp	r0, #0
 800a45e:	d0d9      	beq.n	800a414 <__swbuf_r+0x2e>
 800a460:	e7d6      	b.n	800a410 <__swbuf_r+0x2a>
	...

0800a464 <__swsetup_r>:
 800a464:	b538      	push	{r3, r4, r5, lr}
 800a466:	4b29      	ldr	r3, [pc, #164]	@ (800a50c <__swsetup_r+0xa8>)
 800a468:	4605      	mov	r5, r0
 800a46a:	6818      	ldr	r0, [r3, #0]
 800a46c:	460c      	mov	r4, r1
 800a46e:	b118      	cbz	r0, 800a478 <__swsetup_r+0x14>
 800a470:	6a03      	ldr	r3, [r0, #32]
 800a472:	b90b      	cbnz	r3, 800a478 <__swsetup_r+0x14>
 800a474:	f7ff fee0 	bl	800a238 <__sinit>
 800a478:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a47c:	0719      	lsls	r1, r3, #28
 800a47e:	d422      	bmi.n	800a4c6 <__swsetup_r+0x62>
 800a480:	06da      	lsls	r2, r3, #27
 800a482:	d407      	bmi.n	800a494 <__swsetup_r+0x30>
 800a484:	2209      	movs	r2, #9
 800a486:	602a      	str	r2, [r5, #0]
 800a488:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a48c:	81a3      	strh	r3, [r4, #12]
 800a48e:	f04f 30ff 	mov.w	r0, #4294967295
 800a492:	e033      	b.n	800a4fc <__swsetup_r+0x98>
 800a494:	0758      	lsls	r0, r3, #29
 800a496:	d512      	bpl.n	800a4be <__swsetup_r+0x5a>
 800a498:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a49a:	b141      	cbz	r1, 800a4ae <__swsetup_r+0x4a>
 800a49c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a4a0:	4299      	cmp	r1, r3
 800a4a2:	d002      	beq.n	800a4aa <__swsetup_r+0x46>
 800a4a4:	4628      	mov	r0, r5
 800a4a6:	f000 f8bf 	bl	800a628 <_free_r>
 800a4aa:	2300      	movs	r3, #0
 800a4ac:	6363      	str	r3, [r4, #52]	@ 0x34
 800a4ae:	89a3      	ldrh	r3, [r4, #12]
 800a4b0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800a4b4:	81a3      	strh	r3, [r4, #12]
 800a4b6:	2300      	movs	r3, #0
 800a4b8:	6063      	str	r3, [r4, #4]
 800a4ba:	6923      	ldr	r3, [r4, #16]
 800a4bc:	6023      	str	r3, [r4, #0]
 800a4be:	89a3      	ldrh	r3, [r4, #12]
 800a4c0:	f043 0308 	orr.w	r3, r3, #8
 800a4c4:	81a3      	strh	r3, [r4, #12]
 800a4c6:	6923      	ldr	r3, [r4, #16]
 800a4c8:	b94b      	cbnz	r3, 800a4de <__swsetup_r+0x7a>
 800a4ca:	89a3      	ldrh	r3, [r4, #12]
 800a4cc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800a4d0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a4d4:	d003      	beq.n	800a4de <__swsetup_r+0x7a>
 800a4d6:	4621      	mov	r1, r4
 800a4d8:	4628      	mov	r0, r5
 800a4da:	f000 fa6f 	bl	800a9bc <__smakebuf_r>
 800a4de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a4e2:	f013 0201 	ands.w	r2, r3, #1
 800a4e6:	d00a      	beq.n	800a4fe <__swsetup_r+0x9a>
 800a4e8:	2200      	movs	r2, #0
 800a4ea:	60a2      	str	r2, [r4, #8]
 800a4ec:	6962      	ldr	r2, [r4, #20]
 800a4ee:	4252      	negs	r2, r2
 800a4f0:	61a2      	str	r2, [r4, #24]
 800a4f2:	6922      	ldr	r2, [r4, #16]
 800a4f4:	b942      	cbnz	r2, 800a508 <__swsetup_r+0xa4>
 800a4f6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800a4fa:	d1c5      	bne.n	800a488 <__swsetup_r+0x24>
 800a4fc:	bd38      	pop	{r3, r4, r5, pc}
 800a4fe:	0799      	lsls	r1, r3, #30
 800a500:	bf58      	it	pl
 800a502:	6962      	ldrpl	r2, [r4, #20]
 800a504:	60a2      	str	r2, [r4, #8]
 800a506:	e7f4      	b.n	800a4f2 <__swsetup_r+0x8e>
 800a508:	2000      	movs	r0, #0
 800a50a:	e7f7      	b.n	800a4fc <__swsetup_r+0x98>
 800a50c:	20000018 	.word	0x20000018

0800a510 <memcmp>:
 800a510:	b510      	push	{r4, lr}
 800a512:	3901      	subs	r1, #1
 800a514:	4402      	add	r2, r0
 800a516:	4290      	cmp	r0, r2
 800a518:	d101      	bne.n	800a51e <memcmp+0xe>
 800a51a:	2000      	movs	r0, #0
 800a51c:	e005      	b.n	800a52a <memcmp+0x1a>
 800a51e:	7803      	ldrb	r3, [r0, #0]
 800a520:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800a524:	42a3      	cmp	r3, r4
 800a526:	d001      	beq.n	800a52c <memcmp+0x1c>
 800a528:	1b18      	subs	r0, r3, r4
 800a52a:	bd10      	pop	{r4, pc}
 800a52c:	3001      	adds	r0, #1
 800a52e:	e7f2      	b.n	800a516 <memcmp+0x6>

0800a530 <memset>:
 800a530:	4402      	add	r2, r0
 800a532:	4603      	mov	r3, r0
 800a534:	4293      	cmp	r3, r2
 800a536:	d100      	bne.n	800a53a <memset+0xa>
 800a538:	4770      	bx	lr
 800a53a:	f803 1b01 	strb.w	r1, [r3], #1
 800a53e:	e7f9      	b.n	800a534 <memset+0x4>

0800a540 <_close_r>:
 800a540:	b538      	push	{r3, r4, r5, lr}
 800a542:	4d06      	ldr	r5, [pc, #24]	@ (800a55c <_close_r+0x1c>)
 800a544:	2300      	movs	r3, #0
 800a546:	4604      	mov	r4, r0
 800a548:	4608      	mov	r0, r1
 800a54a:	602b      	str	r3, [r5, #0]
 800a54c:	f7f6 fcdb 	bl	8000f06 <_close>
 800a550:	1c43      	adds	r3, r0, #1
 800a552:	d102      	bne.n	800a55a <_close_r+0x1a>
 800a554:	682b      	ldr	r3, [r5, #0]
 800a556:	b103      	cbz	r3, 800a55a <_close_r+0x1a>
 800a558:	6023      	str	r3, [r4, #0]
 800a55a:	bd38      	pop	{r3, r4, r5, pc}
 800a55c:	200010ec 	.word	0x200010ec

0800a560 <_lseek_r>:
 800a560:	b538      	push	{r3, r4, r5, lr}
 800a562:	4d07      	ldr	r5, [pc, #28]	@ (800a580 <_lseek_r+0x20>)
 800a564:	4604      	mov	r4, r0
 800a566:	4608      	mov	r0, r1
 800a568:	4611      	mov	r1, r2
 800a56a:	2200      	movs	r2, #0
 800a56c:	602a      	str	r2, [r5, #0]
 800a56e:	461a      	mov	r2, r3
 800a570:	f7f6 fcf0 	bl	8000f54 <_lseek>
 800a574:	1c43      	adds	r3, r0, #1
 800a576:	d102      	bne.n	800a57e <_lseek_r+0x1e>
 800a578:	682b      	ldr	r3, [r5, #0]
 800a57a:	b103      	cbz	r3, 800a57e <_lseek_r+0x1e>
 800a57c:	6023      	str	r3, [r4, #0]
 800a57e:	bd38      	pop	{r3, r4, r5, pc}
 800a580:	200010ec 	.word	0x200010ec

0800a584 <_read_r>:
 800a584:	b538      	push	{r3, r4, r5, lr}
 800a586:	4d07      	ldr	r5, [pc, #28]	@ (800a5a4 <_read_r+0x20>)
 800a588:	4604      	mov	r4, r0
 800a58a:	4608      	mov	r0, r1
 800a58c:	4611      	mov	r1, r2
 800a58e:	2200      	movs	r2, #0
 800a590:	602a      	str	r2, [r5, #0]
 800a592:	461a      	mov	r2, r3
 800a594:	f7f6 fc9a 	bl	8000ecc <_read>
 800a598:	1c43      	adds	r3, r0, #1
 800a59a:	d102      	bne.n	800a5a2 <_read_r+0x1e>
 800a59c:	682b      	ldr	r3, [r5, #0]
 800a59e:	b103      	cbz	r3, 800a5a2 <_read_r+0x1e>
 800a5a0:	6023      	str	r3, [r4, #0]
 800a5a2:	bd38      	pop	{r3, r4, r5, pc}
 800a5a4:	200010ec 	.word	0x200010ec

0800a5a8 <_write_r>:
 800a5a8:	b538      	push	{r3, r4, r5, lr}
 800a5aa:	4d07      	ldr	r5, [pc, #28]	@ (800a5c8 <_write_r+0x20>)
 800a5ac:	4604      	mov	r4, r0
 800a5ae:	4608      	mov	r0, r1
 800a5b0:	4611      	mov	r1, r2
 800a5b2:	2200      	movs	r2, #0
 800a5b4:	602a      	str	r2, [r5, #0]
 800a5b6:	461a      	mov	r2, r3
 800a5b8:	f7f5 fe2f 	bl	800021a <_write>
 800a5bc:	1c43      	adds	r3, r0, #1
 800a5be:	d102      	bne.n	800a5c6 <_write_r+0x1e>
 800a5c0:	682b      	ldr	r3, [r5, #0]
 800a5c2:	b103      	cbz	r3, 800a5c6 <_write_r+0x1e>
 800a5c4:	6023      	str	r3, [r4, #0]
 800a5c6:	bd38      	pop	{r3, r4, r5, pc}
 800a5c8:	200010ec 	.word	0x200010ec

0800a5cc <__errno>:
 800a5cc:	4b01      	ldr	r3, [pc, #4]	@ (800a5d4 <__errno+0x8>)
 800a5ce:	6818      	ldr	r0, [r3, #0]
 800a5d0:	4770      	bx	lr
 800a5d2:	bf00      	nop
 800a5d4:	20000018 	.word	0x20000018

0800a5d8 <__libc_init_array>:
 800a5d8:	b570      	push	{r4, r5, r6, lr}
 800a5da:	4d0d      	ldr	r5, [pc, #52]	@ (800a610 <__libc_init_array+0x38>)
 800a5dc:	4c0d      	ldr	r4, [pc, #52]	@ (800a614 <__libc_init_array+0x3c>)
 800a5de:	1b64      	subs	r4, r4, r5
 800a5e0:	10a4      	asrs	r4, r4, #2
 800a5e2:	2600      	movs	r6, #0
 800a5e4:	42a6      	cmp	r6, r4
 800a5e6:	d109      	bne.n	800a5fc <__libc_init_array+0x24>
 800a5e8:	4d0b      	ldr	r5, [pc, #44]	@ (800a618 <__libc_init_array+0x40>)
 800a5ea:	4c0c      	ldr	r4, [pc, #48]	@ (800a61c <__libc_init_array+0x44>)
 800a5ec:	f000 fa54 	bl	800aa98 <_init>
 800a5f0:	1b64      	subs	r4, r4, r5
 800a5f2:	10a4      	asrs	r4, r4, #2
 800a5f4:	2600      	movs	r6, #0
 800a5f6:	42a6      	cmp	r6, r4
 800a5f8:	d105      	bne.n	800a606 <__libc_init_array+0x2e>
 800a5fa:	bd70      	pop	{r4, r5, r6, pc}
 800a5fc:	f855 3b04 	ldr.w	r3, [r5], #4
 800a600:	4798      	blx	r3
 800a602:	3601      	adds	r6, #1
 800a604:	e7ee      	b.n	800a5e4 <__libc_init_array+0xc>
 800a606:	f855 3b04 	ldr.w	r3, [r5], #4
 800a60a:	4798      	blx	r3
 800a60c:	3601      	adds	r6, #1
 800a60e:	e7f2      	b.n	800a5f6 <__libc_init_array+0x1e>
 800a610:	0800aff8 	.word	0x0800aff8
 800a614:	0800aff8 	.word	0x0800aff8
 800a618:	0800aff8 	.word	0x0800aff8
 800a61c:	0800affc 	.word	0x0800affc

0800a620 <__retarget_lock_init_recursive>:
 800a620:	4770      	bx	lr

0800a622 <__retarget_lock_acquire_recursive>:
 800a622:	4770      	bx	lr

0800a624 <__retarget_lock_release_recursive>:
 800a624:	4770      	bx	lr
	...

0800a628 <_free_r>:
 800a628:	b538      	push	{r3, r4, r5, lr}
 800a62a:	4605      	mov	r5, r0
 800a62c:	2900      	cmp	r1, #0
 800a62e:	d041      	beq.n	800a6b4 <_free_r+0x8c>
 800a630:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a634:	1f0c      	subs	r4, r1, #4
 800a636:	2b00      	cmp	r3, #0
 800a638:	bfb8      	it	lt
 800a63a:	18e4      	addlt	r4, r4, r3
 800a63c:	f000 f8e0 	bl	800a800 <__malloc_lock>
 800a640:	4a1d      	ldr	r2, [pc, #116]	@ (800a6b8 <_free_r+0x90>)
 800a642:	6813      	ldr	r3, [r2, #0]
 800a644:	b933      	cbnz	r3, 800a654 <_free_r+0x2c>
 800a646:	6063      	str	r3, [r4, #4]
 800a648:	6014      	str	r4, [r2, #0]
 800a64a:	4628      	mov	r0, r5
 800a64c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a650:	f000 b8dc 	b.w	800a80c <__malloc_unlock>
 800a654:	42a3      	cmp	r3, r4
 800a656:	d908      	bls.n	800a66a <_free_r+0x42>
 800a658:	6820      	ldr	r0, [r4, #0]
 800a65a:	1821      	adds	r1, r4, r0
 800a65c:	428b      	cmp	r3, r1
 800a65e:	bf01      	itttt	eq
 800a660:	6819      	ldreq	r1, [r3, #0]
 800a662:	685b      	ldreq	r3, [r3, #4]
 800a664:	1809      	addeq	r1, r1, r0
 800a666:	6021      	streq	r1, [r4, #0]
 800a668:	e7ed      	b.n	800a646 <_free_r+0x1e>
 800a66a:	461a      	mov	r2, r3
 800a66c:	685b      	ldr	r3, [r3, #4]
 800a66e:	b10b      	cbz	r3, 800a674 <_free_r+0x4c>
 800a670:	42a3      	cmp	r3, r4
 800a672:	d9fa      	bls.n	800a66a <_free_r+0x42>
 800a674:	6811      	ldr	r1, [r2, #0]
 800a676:	1850      	adds	r0, r2, r1
 800a678:	42a0      	cmp	r0, r4
 800a67a:	d10b      	bne.n	800a694 <_free_r+0x6c>
 800a67c:	6820      	ldr	r0, [r4, #0]
 800a67e:	4401      	add	r1, r0
 800a680:	1850      	adds	r0, r2, r1
 800a682:	4283      	cmp	r3, r0
 800a684:	6011      	str	r1, [r2, #0]
 800a686:	d1e0      	bne.n	800a64a <_free_r+0x22>
 800a688:	6818      	ldr	r0, [r3, #0]
 800a68a:	685b      	ldr	r3, [r3, #4]
 800a68c:	6053      	str	r3, [r2, #4]
 800a68e:	4408      	add	r0, r1
 800a690:	6010      	str	r0, [r2, #0]
 800a692:	e7da      	b.n	800a64a <_free_r+0x22>
 800a694:	d902      	bls.n	800a69c <_free_r+0x74>
 800a696:	230c      	movs	r3, #12
 800a698:	602b      	str	r3, [r5, #0]
 800a69a:	e7d6      	b.n	800a64a <_free_r+0x22>
 800a69c:	6820      	ldr	r0, [r4, #0]
 800a69e:	1821      	adds	r1, r4, r0
 800a6a0:	428b      	cmp	r3, r1
 800a6a2:	bf04      	itt	eq
 800a6a4:	6819      	ldreq	r1, [r3, #0]
 800a6a6:	685b      	ldreq	r3, [r3, #4]
 800a6a8:	6063      	str	r3, [r4, #4]
 800a6aa:	bf04      	itt	eq
 800a6ac:	1809      	addeq	r1, r1, r0
 800a6ae:	6021      	streq	r1, [r4, #0]
 800a6b0:	6054      	str	r4, [r2, #4]
 800a6b2:	e7ca      	b.n	800a64a <_free_r+0x22>
 800a6b4:	bd38      	pop	{r3, r4, r5, pc}
 800a6b6:	bf00      	nop
 800a6b8:	200010f8 	.word	0x200010f8

0800a6bc <sbrk_aligned>:
 800a6bc:	b570      	push	{r4, r5, r6, lr}
 800a6be:	4e0f      	ldr	r6, [pc, #60]	@ (800a6fc <sbrk_aligned+0x40>)
 800a6c0:	460c      	mov	r4, r1
 800a6c2:	6831      	ldr	r1, [r6, #0]
 800a6c4:	4605      	mov	r5, r0
 800a6c6:	b911      	cbnz	r1, 800a6ce <sbrk_aligned+0x12>
 800a6c8:	f000 f9d6 	bl	800aa78 <_sbrk_r>
 800a6cc:	6030      	str	r0, [r6, #0]
 800a6ce:	4621      	mov	r1, r4
 800a6d0:	4628      	mov	r0, r5
 800a6d2:	f000 f9d1 	bl	800aa78 <_sbrk_r>
 800a6d6:	1c43      	adds	r3, r0, #1
 800a6d8:	d103      	bne.n	800a6e2 <sbrk_aligned+0x26>
 800a6da:	f04f 34ff 	mov.w	r4, #4294967295
 800a6de:	4620      	mov	r0, r4
 800a6e0:	bd70      	pop	{r4, r5, r6, pc}
 800a6e2:	1cc4      	adds	r4, r0, #3
 800a6e4:	f024 0403 	bic.w	r4, r4, #3
 800a6e8:	42a0      	cmp	r0, r4
 800a6ea:	d0f8      	beq.n	800a6de <sbrk_aligned+0x22>
 800a6ec:	1a21      	subs	r1, r4, r0
 800a6ee:	4628      	mov	r0, r5
 800a6f0:	f000 f9c2 	bl	800aa78 <_sbrk_r>
 800a6f4:	3001      	adds	r0, #1
 800a6f6:	d1f2      	bne.n	800a6de <sbrk_aligned+0x22>
 800a6f8:	e7ef      	b.n	800a6da <sbrk_aligned+0x1e>
 800a6fa:	bf00      	nop
 800a6fc:	200010f4 	.word	0x200010f4

0800a700 <_malloc_r>:
 800a700:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a704:	1ccd      	adds	r5, r1, #3
 800a706:	f025 0503 	bic.w	r5, r5, #3
 800a70a:	3508      	adds	r5, #8
 800a70c:	2d0c      	cmp	r5, #12
 800a70e:	bf38      	it	cc
 800a710:	250c      	movcc	r5, #12
 800a712:	2d00      	cmp	r5, #0
 800a714:	4606      	mov	r6, r0
 800a716:	db01      	blt.n	800a71c <_malloc_r+0x1c>
 800a718:	42a9      	cmp	r1, r5
 800a71a:	d904      	bls.n	800a726 <_malloc_r+0x26>
 800a71c:	230c      	movs	r3, #12
 800a71e:	6033      	str	r3, [r6, #0]
 800a720:	2000      	movs	r0, #0
 800a722:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a726:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800a7fc <_malloc_r+0xfc>
 800a72a:	f000 f869 	bl	800a800 <__malloc_lock>
 800a72e:	f8d8 3000 	ldr.w	r3, [r8]
 800a732:	461c      	mov	r4, r3
 800a734:	bb44      	cbnz	r4, 800a788 <_malloc_r+0x88>
 800a736:	4629      	mov	r1, r5
 800a738:	4630      	mov	r0, r6
 800a73a:	f7ff ffbf 	bl	800a6bc <sbrk_aligned>
 800a73e:	1c43      	adds	r3, r0, #1
 800a740:	4604      	mov	r4, r0
 800a742:	d158      	bne.n	800a7f6 <_malloc_r+0xf6>
 800a744:	f8d8 4000 	ldr.w	r4, [r8]
 800a748:	4627      	mov	r7, r4
 800a74a:	2f00      	cmp	r7, #0
 800a74c:	d143      	bne.n	800a7d6 <_malloc_r+0xd6>
 800a74e:	2c00      	cmp	r4, #0
 800a750:	d04b      	beq.n	800a7ea <_malloc_r+0xea>
 800a752:	6823      	ldr	r3, [r4, #0]
 800a754:	4639      	mov	r1, r7
 800a756:	4630      	mov	r0, r6
 800a758:	eb04 0903 	add.w	r9, r4, r3
 800a75c:	f000 f98c 	bl	800aa78 <_sbrk_r>
 800a760:	4581      	cmp	r9, r0
 800a762:	d142      	bne.n	800a7ea <_malloc_r+0xea>
 800a764:	6821      	ldr	r1, [r4, #0]
 800a766:	1a6d      	subs	r5, r5, r1
 800a768:	4629      	mov	r1, r5
 800a76a:	4630      	mov	r0, r6
 800a76c:	f7ff ffa6 	bl	800a6bc <sbrk_aligned>
 800a770:	3001      	adds	r0, #1
 800a772:	d03a      	beq.n	800a7ea <_malloc_r+0xea>
 800a774:	6823      	ldr	r3, [r4, #0]
 800a776:	442b      	add	r3, r5
 800a778:	6023      	str	r3, [r4, #0]
 800a77a:	f8d8 3000 	ldr.w	r3, [r8]
 800a77e:	685a      	ldr	r2, [r3, #4]
 800a780:	bb62      	cbnz	r2, 800a7dc <_malloc_r+0xdc>
 800a782:	f8c8 7000 	str.w	r7, [r8]
 800a786:	e00f      	b.n	800a7a8 <_malloc_r+0xa8>
 800a788:	6822      	ldr	r2, [r4, #0]
 800a78a:	1b52      	subs	r2, r2, r5
 800a78c:	d420      	bmi.n	800a7d0 <_malloc_r+0xd0>
 800a78e:	2a0b      	cmp	r2, #11
 800a790:	d917      	bls.n	800a7c2 <_malloc_r+0xc2>
 800a792:	1961      	adds	r1, r4, r5
 800a794:	42a3      	cmp	r3, r4
 800a796:	6025      	str	r5, [r4, #0]
 800a798:	bf18      	it	ne
 800a79a:	6059      	strne	r1, [r3, #4]
 800a79c:	6863      	ldr	r3, [r4, #4]
 800a79e:	bf08      	it	eq
 800a7a0:	f8c8 1000 	streq.w	r1, [r8]
 800a7a4:	5162      	str	r2, [r4, r5]
 800a7a6:	604b      	str	r3, [r1, #4]
 800a7a8:	4630      	mov	r0, r6
 800a7aa:	f000 f82f 	bl	800a80c <__malloc_unlock>
 800a7ae:	f104 000b 	add.w	r0, r4, #11
 800a7b2:	1d23      	adds	r3, r4, #4
 800a7b4:	f020 0007 	bic.w	r0, r0, #7
 800a7b8:	1ac2      	subs	r2, r0, r3
 800a7ba:	bf1c      	itt	ne
 800a7bc:	1a1b      	subne	r3, r3, r0
 800a7be:	50a3      	strne	r3, [r4, r2]
 800a7c0:	e7af      	b.n	800a722 <_malloc_r+0x22>
 800a7c2:	6862      	ldr	r2, [r4, #4]
 800a7c4:	42a3      	cmp	r3, r4
 800a7c6:	bf0c      	ite	eq
 800a7c8:	f8c8 2000 	streq.w	r2, [r8]
 800a7cc:	605a      	strne	r2, [r3, #4]
 800a7ce:	e7eb      	b.n	800a7a8 <_malloc_r+0xa8>
 800a7d0:	4623      	mov	r3, r4
 800a7d2:	6864      	ldr	r4, [r4, #4]
 800a7d4:	e7ae      	b.n	800a734 <_malloc_r+0x34>
 800a7d6:	463c      	mov	r4, r7
 800a7d8:	687f      	ldr	r7, [r7, #4]
 800a7da:	e7b6      	b.n	800a74a <_malloc_r+0x4a>
 800a7dc:	461a      	mov	r2, r3
 800a7de:	685b      	ldr	r3, [r3, #4]
 800a7e0:	42a3      	cmp	r3, r4
 800a7e2:	d1fb      	bne.n	800a7dc <_malloc_r+0xdc>
 800a7e4:	2300      	movs	r3, #0
 800a7e6:	6053      	str	r3, [r2, #4]
 800a7e8:	e7de      	b.n	800a7a8 <_malloc_r+0xa8>
 800a7ea:	230c      	movs	r3, #12
 800a7ec:	6033      	str	r3, [r6, #0]
 800a7ee:	4630      	mov	r0, r6
 800a7f0:	f000 f80c 	bl	800a80c <__malloc_unlock>
 800a7f4:	e794      	b.n	800a720 <_malloc_r+0x20>
 800a7f6:	6005      	str	r5, [r0, #0]
 800a7f8:	e7d6      	b.n	800a7a8 <_malloc_r+0xa8>
 800a7fa:	bf00      	nop
 800a7fc:	200010f8 	.word	0x200010f8

0800a800 <__malloc_lock>:
 800a800:	4801      	ldr	r0, [pc, #4]	@ (800a808 <__malloc_lock+0x8>)
 800a802:	f7ff bf0e 	b.w	800a622 <__retarget_lock_acquire_recursive>
 800a806:	bf00      	nop
 800a808:	200010f0 	.word	0x200010f0

0800a80c <__malloc_unlock>:
 800a80c:	4801      	ldr	r0, [pc, #4]	@ (800a814 <__malloc_unlock+0x8>)
 800a80e:	f7ff bf09 	b.w	800a624 <__retarget_lock_release_recursive>
 800a812:	bf00      	nop
 800a814:	200010f0 	.word	0x200010f0

0800a818 <__sflush_r>:
 800a818:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a81c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a820:	0716      	lsls	r6, r2, #28
 800a822:	4605      	mov	r5, r0
 800a824:	460c      	mov	r4, r1
 800a826:	d454      	bmi.n	800a8d2 <__sflush_r+0xba>
 800a828:	684b      	ldr	r3, [r1, #4]
 800a82a:	2b00      	cmp	r3, #0
 800a82c:	dc02      	bgt.n	800a834 <__sflush_r+0x1c>
 800a82e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800a830:	2b00      	cmp	r3, #0
 800a832:	dd48      	ble.n	800a8c6 <__sflush_r+0xae>
 800a834:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a836:	2e00      	cmp	r6, #0
 800a838:	d045      	beq.n	800a8c6 <__sflush_r+0xae>
 800a83a:	2300      	movs	r3, #0
 800a83c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800a840:	682f      	ldr	r7, [r5, #0]
 800a842:	6a21      	ldr	r1, [r4, #32]
 800a844:	602b      	str	r3, [r5, #0]
 800a846:	d030      	beq.n	800a8aa <__sflush_r+0x92>
 800a848:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800a84a:	89a3      	ldrh	r3, [r4, #12]
 800a84c:	0759      	lsls	r1, r3, #29
 800a84e:	d505      	bpl.n	800a85c <__sflush_r+0x44>
 800a850:	6863      	ldr	r3, [r4, #4]
 800a852:	1ad2      	subs	r2, r2, r3
 800a854:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800a856:	b10b      	cbz	r3, 800a85c <__sflush_r+0x44>
 800a858:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800a85a:	1ad2      	subs	r2, r2, r3
 800a85c:	2300      	movs	r3, #0
 800a85e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a860:	6a21      	ldr	r1, [r4, #32]
 800a862:	4628      	mov	r0, r5
 800a864:	47b0      	blx	r6
 800a866:	1c43      	adds	r3, r0, #1
 800a868:	89a3      	ldrh	r3, [r4, #12]
 800a86a:	d106      	bne.n	800a87a <__sflush_r+0x62>
 800a86c:	6829      	ldr	r1, [r5, #0]
 800a86e:	291d      	cmp	r1, #29
 800a870:	d82b      	bhi.n	800a8ca <__sflush_r+0xb2>
 800a872:	4a2a      	ldr	r2, [pc, #168]	@ (800a91c <__sflush_r+0x104>)
 800a874:	410a      	asrs	r2, r1
 800a876:	07d6      	lsls	r6, r2, #31
 800a878:	d427      	bmi.n	800a8ca <__sflush_r+0xb2>
 800a87a:	2200      	movs	r2, #0
 800a87c:	6062      	str	r2, [r4, #4]
 800a87e:	04d9      	lsls	r1, r3, #19
 800a880:	6922      	ldr	r2, [r4, #16]
 800a882:	6022      	str	r2, [r4, #0]
 800a884:	d504      	bpl.n	800a890 <__sflush_r+0x78>
 800a886:	1c42      	adds	r2, r0, #1
 800a888:	d101      	bne.n	800a88e <__sflush_r+0x76>
 800a88a:	682b      	ldr	r3, [r5, #0]
 800a88c:	b903      	cbnz	r3, 800a890 <__sflush_r+0x78>
 800a88e:	6560      	str	r0, [r4, #84]	@ 0x54
 800a890:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a892:	602f      	str	r7, [r5, #0]
 800a894:	b1b9      	cbz	r1, 800a8c6 <__sflush_r+0xae>
 800a896:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a89a:	4299      	cmp	r1, r3
 800a89c:	d002      	beq.n	800a8a4 <__sflush_r+0x8c>
 800a89e:	4628      	mov	r0, r5
 800a8a0:	f7ff fec2 	bl	800a628 <_free_r>
 800a8a4:	2300      	movs	r3, #0
 800a8a6:	6363      	str	r3, [r4, #52]	@ 0x34
 800a8a8:	e00d      	b.n	800a8c6 <__sflush_r+0xae>
 800a8aa:	2301      	movs	r3, #1
 800a8ac:	4628      	mov	r0, r5
 800a8ae:	47b0      	blx	r6
 800a8b0:	4602      	mov	r2, r0
 800a8b2:	1c50      	adds	r0, r2, #1
 800a8b4:	d1c9      	bne.n	800a84a <__sflush_r+0x32>
 800a8b6:	682b      	ldr	r3, [r5, #0]
 800a8b8:	2b00      	cmp	r3, #0
 800a8ba:	d0c6      	beq.n	800a84a <__sflush_r+0x32>
 800a8bc:	2b1d      	cmp	r3, #29
 800a8be:	d001      	beq.n	800a8c4 <__sflush_r+0xac>
 800a8c0:	2b16      	cmp	r3, #22
 800a8c2:	d11e      	bne.n	800a902 <__sflush_r+0xea>
 800a8c4:	602f      	str	r7, [r5, #0]
 800a8c6:	2000      	movs	r0, #0
 800a8c8:	e022      	b.n	800a910 <__sflush_r+0xf8>
 800a8ca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a8ce:	b21b      	sxth	r3, r3
 800a8d0:	e01b      	b.n	800a90a <__sflush_r+0xf2>
 800a8d2:	690f      	ldr	r7, [r1, #16]
 800a8d4:	2f00      	cmp	r7, #0
 800a8d6:	d0f6      	beq.n	800a8c6 <__sflush_r+0xae>
 800a8d8:	0793      	lsls	r3, r2, #30
 800a8da:	680e      	ldr	r6, [r1, #0]
 800a8dc:	bf08      	it	eq
 800a8de:	694b      	ldreq	r3, [r1, #20]
 800a8e0:	600f      	str	r7, [r1, #0]
 800a8e2:	bf18      	it	ne
 800a8e4:	2300      	movne	r3, #0
 800a8e6:	eba6 0807 	sub.w	r8, r6, r7
 800a8ea:	608b      	str	r3, [r1, #8]
 800a8ec:	f1b8 0f00 	cmp.w	r8, #0
 800a8f0:	dde9      	ble.n	800a8c6 <__sflush_r+0xae>
 800a8f2:	6a21      	ldr	r1, [r4, #32]
 800a8f4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800a8f6:	4643      	mov	r3, r8
 800a8f8:	463a      	mov	r2, r7
 800a8fa:	4628      	mov	r0, r5
 800a8fc:	47b0      	blx	r6
 800a8fe:	2800      	cmp	r0, #0
 800a900:	dc08      	bgt.n	800a914 <__sflush_r+0xfc>
 800a902:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a906:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a90a:	81a3      	strh	r3, [r4, #12]
 800a90c:	f04f 30ff 	mov.w	r0, #4294967295
 800a910:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a914:	4407      	add	r7, r0
 800a916:	eba8 0800 	sub.w	r8, r8, r0
 800a91a:	e7e7      	b.n	800a8ec <__sflush_r+0xd4>
 800a91c:	dfbffffe 	.word	0xdfbffffe

0800a920 <_fflush_r>:
 800a920:	b538      	push	{r3, r4, r5, lr}
 800a922:	690b      	ldr	r3, [r1, #16]
 800a924:	4605      	mov	r5, r0
 800a926:	460c      	mov	r4, r1
 800a928:	b913      	cbnz	r3, 800a930 <_fflush_r+0x10>
 800a92a:	2500      	movs	r5, #0
 800a92c:	4628      	mov	r0, r5
 800a92e:	bd38      	pop	{r3, r4, r5, pc}
 800a930:	b118      	cbz	r0, 800a93a <_fflush_r+0x1a>
 800a932:	6a03      	ldr	r3, [r0, #32]
 800a934:	b90b      	cbnz	r3, 800a93a <_fflush_r+0x1a>
 800a936:	f7ff fc7f 	bl	800a238 <__sinit>
 800a93a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a93e:	2b00      	cmp	r3, #0
 800a940:	d0f3      	beq.n	800a92a <_fflush_r+0xa>
 800a942:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800a944:	07d0      	lsls	r0, r2, #31
 800a946:	d404      	bmi.n	800a952 <_fflush_r+0x32>
 800a948:	0599      	lsls	r1, r3, #22
 800a94a:	d402      	bmi.n	800a952 <_fflush_r+0x32>
 800a94c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a94e:	f7ff fe68 	bl	800a622 <__retarget_lock_acquire_recursive>
 800a952:	4628      	mov	r0, r5
 800a954:	4621      	mov	r1, r4
 800a956:	f7ff ff5f 	bl	800a818 <__sflush_r>
 800a95a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a95c:	07da      	lsls	r2, r3, #31
 800a95e:	4605      	mov	r5, r0
 800a960:	d4e4      	bmi.n	800a92c <_fflush_r+0xc>
 800a962:	89a3      	ldrh	r3, [r4, #12]
 800a964:	059b      	lsls	r3, r3, #22
 800a966:	d4e1      	bmi.n	800a92c <_fflush_r+0xc>
 800a968:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a96a:	f7ff fe5b 	bl	800a624 <__retarget_lock_release_recursive>
 800a96e:	e7dd      	b.n	800a92c <_fflush_r+0xc>

0800a970 <__swhatbuf_r>:
 800a970:	b570      	push	{r4, r5, r6, lr}
 800a972:	460c      	mov	r4, r1
 800a974:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a978:	2900      	cmp	r1, #0
 800a97a:	b096      	sub	sp, #88	@ 0x58
 800a97c:	4615      	mov	r5, r2
 800a97e:	461e      	mov	r6, r3
 800a980:	da0d      	bge.n	800a99e <__swhatbuf_r+0x2e>
 800a982:	89a3      	ldrh	r3, [r4, #12]
 800a984:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800a988:	f04f 0100 	mov.w	r1, #0
 800a98c:	bf14      	ite	ne
 800a98e:	2340      	movne	r3, #64	@ 0x40
 800a990:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800a994:	2000      	movs	r0, #0
 800a996:	6031      	str	r1, [r6, #0]
 800a998:	602b      	str	r3, [r5, #0]
 800a99a:	b016      	add	sp, #88	@ 0x58
 800a99c:	bd70      	pop	{r4, r5, r6, pc}
 800a99e:	466a      	mov	r2, sp
 800a9a0:	f000 f848 	bl	800aa34 <_fstat_r>
 800a9a4:	2800      	cmp	r0, #0
 800a9a6:	dbec      	blt.n	800a982 <__swhatbuf_r+0x12>
 800a9a8:	9901      	ldr	r1, [sp, #4]
 800a9aa:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800a9ae:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800a9b2:	4259      	negs	r1, r3
 800a9b4:	4159      	adcs	r1, r3
 800a9b6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a9ba:	e7eb      	b.n	800a994 <__swhatbuf_r+0x24>

0800a9bc <__smakebuf_r>:
 800a9bc:	898b      	ldrh	r3, [r1, #12]
 800a9be:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a9c0:	079d      	lsls	r5, r3, #30
 800a9c2:	4606      	mov	r6, r0
 800a9c4:	460c      	mov	r4, r1
 800a9c6:	d507      	bpl.n	800a9d8 <__smakebuf_r+0x1c>
 800a9c8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800a9cc:	6023      	str	r3, [r4, #0]
 800a9ce:	6123      	str	r3, [r4, #16]
 800a9d0:	2301      	movs	r3, #1
 800a9d2:	6163      	str	r3, [r4, #20]
 800a9d4:	b003      	add	sp, #12
 800a9d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a9d8:	ab01      	add	r3, sp, #4
 800a9da:	466a      	mov	r2, sp
 800a9dc:	f7ff ffc8 	bl	800a970 <__swhatbuf_r>
 800a9e0:	9f00      	ldr	r7, [sp, #0]
 800a9e2:	4605      	mov	r5, r0
 800a9e4:	4639      	mov	r1, r7
 800a9e6:	4630      	mov	r0, r6
 800a9e8:	f7ff fe8a 	bl	800a700 <_malloc_r>
 800a9ec:	b948      	cbnz	r0, 800aa02 <__smakebuf_r+0x46>
 800a9ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a9f2:	059a      	lsls	r2, r3, #22
 800a9f4:	d4ee      	bmi.n	800a9d4 <__smakebuf_r+0x18>
 800a9f6:	f023 0303 	bic.w	r3, r3, #3
 800a9fa:	f043 0302 	orr.w	r3, r3, #2
 800a9fe:	81a3      	strh	r3, [r4, #12]
 800aa00:	e7e2      	b.n	800a9c8 <__smakebuf_r+0xc>
 800aa02:	89a3      	ldrh	r3, [r4, #12]
 800aa04:	6020      	str	r0, [r4, #0]
 800aa06:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800aa0a:	81a3      	strh	r3, [r4, #12]
 800aa0c:	9b01      	ldr	r3, [sp, #4]
 800aa0e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800aa12:	b15b      	cbz	r3, 800aa2c <__smakebuf_r+0x70>
 800aa14:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800aa18:	4630      	mov	r0, r6
 800aa1a:	f000 f81d 	bl	800aa58 <_isatty_r>
 800aa1e:	b128      	cbz	r0, 800aa2c <__smakebuf_r+0x70>
 800aa20:	89a3      	ldrh	r3, [r4, #12]
 800aa22:	f023 0303 	bic.w	r3, r3, #3
 800aa26:	f043 0301 	orr.w	r3, r3, #1
 800aa2a:	81a3      	strh	r3, [r4, #12]
 800aa2c:	89a3      	ldrh	r3, [r4, #12]
 800aa2e:	431d      	orrs	r5, r3
 800aa30:	81a5      	strh	r5, [r4, #12]
 800aa32:	e7cf      	b.n	800a9d4 <__smakebuf_r+0x18>

0800aa34 <_fstat_r>:
 800aa34:	b538      	push	{r3, r4, r5, lr}
 800aa36:	4d07      	ldr	r5, [pc, #28]	@ (800aa54 <_fstat_r+0x20>)
 800aa38:	2300      	movs	r3, #0
 800aa3a:	4604      	mov	r4, r0
 800aa3c:	4608      	mov	r0, r1
 800aa3e:	4611      	mov	r1, r2
 800aa40:	602b      	str	r3, [r5, #0]
 800aa42:	f7f6 fa6c 	bl	8000f1e <_fstat>
 800aa46:	1c43      	adds	r3, r0, #1
 800aa48:	d102      	bne.n	800aa50 <_fstat_r+0x1c>
 800aa4a:	682b      	ldr	r3, [r5, #0]
 800aa4c:	b103      	cbz	r3, 800aa50 <_fstat_r+0x1c>
 800aa4e:	6023      	str	r3, [r4, #0]
 800aa50:	bd38      	pop	{r3, r4, r5, pc}
 800aa52:	bf00      	nop
 800aa54:	200010ec 	.word	0x200010ec

0800aa58 <_isatty_r>:
 800aa58:	b538      	push	{r3, r4, r5, lr}
 800aa5a:	4d06      	ldr	r5, [pc, #24]	@ (800aa74 <_isatty_r+0x1c>)
 800aa5c:	2300      	movs	r3, #0
 800aa5e:	4604      	mov	r4, r0
 800aa60:	4608      	mov	r0, r1
 800aa62:	602b      	str	r3, [r5, #0]
 800aa64:	f7f6 fa6b 	bl	8000f3e <_isatty>
 800aa68:	1c43      	adds	r3, r0, #1
 800aa6a:	d102      	bne.n	800aa72 <_isatty_r+0x1a>
 800aa6c:	682b      	ldr	r3, [r5, #0]
 800aa6e:	b103      	cbz	r3, 800aa72 <_isatty_r+0x1a>
 800aa70:	6023      	str	r3, [r4, #0]
 800aa72:	bd38      	pop	{r3, r4, r5, pc}
 800aa74:	200010ec 	.word	0x200010ec

0800aa78 <_sbrk_r>:
 800aa78:	b538      	push	{r3, r4, r5, lr}
 800aa7a:	4d06      	ldr	r5, [pc, #24]	@ (800aa94 <_sbrk_r+0x1c>)
 800aa7c:	2300      	movs	r3, #0
 800aa7e:	4604      	mov	r4, r0
 800aa80:	4608      	mov	r0, r1
 800aa82:	602b      	str	r3, [r5, #0]
 800aa84:	f7f6 fa74 	bl	8000f70 <_sbrk>
 800aa88:	1c43      	adds	r3, r0, #1
 800aa8a:	d102      	bne.n	800aa92 <_sbrk_r+0x1a>
 800aa8c:	682b      	ldr	r3, [r5, #0]
 800aa8e:	b103      	cbz	r3, 800aa92 <_sbrk_r+0x1a>
 800aa90:	6023      	str	r3, [r4, #0]
 800aa92:	bd38      	pop	{r3, r4, r5, pc}
 800aa94:	200010ec 	.word	0x200010ec

0800aa98 <_init>:
 800aa98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa9a:	bf00      	nop
 800aa9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aa9e:	bc08      	pop	{r3}
 800aaa0:	469e      	mov	lr, r3
 800aaa2:	4770      	bx	lr

0800aaa4 <_fini>:
 800aaa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aaa6:	bf00      	nop
 800aaa8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aaaa:	bc08      	pop	{r3}
 800aaac:	469e      	mov	lr, r3
 800aaae:	4770      	bx	lr
